# Data about the complex reflection groups with Shephard-Todd numbers 4--22
# Translated from chevie/tbl/cmp4_22.g
# (C) 1998 - 2025  Gunter Malle & Jean Michel
#
# The data for classes, characters and Schur elements of Hecke algebras
# comes from
# G.Malle, ``Degres relatifs des algebres de Hecke cyclotomiques associees aux
#  groupes de reflexions complexes de dimension 2'',  in
# ``Finite  reductive groups'', Progress in  math. n0 141, Birkhauser 1997
# to which should be added the following info:
# -- the subalgebra H' is generated as described by the list "Embed"
# -- there is a misprint in the numerator of the relative degrees of
#    2-dimensional characters of G7: it should read
#        -x1^3 x_2^3 y_1 y_2^3 y_3^4 z_1^2 z_2^2 z_3^4
#    instead of
#        -x1^2 x_2^2 y_1 y_2^3 y_4   z_1^2 z_2^2 z_3^4
# -- There are  misprints in  the relative  degrees of  the 4-dimensional
#    characters of G11:
# -- The  numerator  should   read  -(x1x2)^9y1^10(y2y3)^5z1^6(z2z3z4)^4t^2
# -- In the last  product in the denominator i should run in {2,3}.
# -- there is a misprint in the relative degrees of the 3-dimensional
#    characters of G19:
#    The numerator should read x1^10x2^15y1^7z1^3z4^12

const G4_22IndexChars_dict=Dict{Int,Any}()

for i in 4:22 G4_22IndexChars_dict[i]=Dict() end

CHEVIE[:CheckIndexChars]=false

function G4_22FetchIndexChars(ST, para)
  if !CHEVIE[:CheckIndexChars]
    return chevieget(:G4_22, :CharInfo)(ST)[:indexchars]
  end
  get!(G4_22IndexChars_dict[ST],para)do
    chevieget(:G4_22, :HeckeCharTable)(ST, para,[])[:indexchars]
  end
end

const simpleroots4_22=
[[0 -2E(3)-E(3,2);
  2E(3,2) E(3,2)],  # 4
 [0 (3-root(-3))//2;
  -1 1],  # 5
 [-1+root(3) -1;
  0 -2E(3)-E(3,2)], # 6
 [0 1;
  ((-E(12,11)-E(12,8))-2E(12,4))//2 (E(12,8)-E(12,11))//2; # 7
  ((-E(12,11)-E(12,8))-2E(12,4))//2 (-E(12,8)-E(12,11))//2],
 [0 E(4);
  (E(4)+1)//2 (E(4)+1)//2], # 8
 [(2-root(2))//2 -1;
  0 1-E(4)],  # 9
 [0 -2E(3)-E(3,2);
  -1+root(3) 1],  # 10
 [(3+root(6))//3 E(3)root(6)//6;
  0 root(-2)//2; # 11
  (3-root(3))*(1-E(4))//6 (1-E(4))root(3)//6],
 [root(-2) -1-root(-2);
  -root(-2) -1+root(-2);
  0  2],  # 12
 [0 1;
  1-root(2)//2 root(2)//2;
  (1-root(2))//(E(4)-1) -E(4)//(E(4)-1)], # 13
 [0 2;
  -2E(3,2)-1-root(-2) -1], # 14
 [E(24,22)-E(24,19)+2E(24,17)+E(24,16)-E(24,14)+E(24,8)+E(24) -E(24,16)+E(24,11)-E(24,8);
  0 -2E(3)-E(3,2);
  -1+root(3) 1],
 [0 1;
  (2*E(5,4)+3*E(5))//root(5)-1 (E(5)-E(5,3))//root(5)], # 16
 [(E(20,17)-E(20,13))//root(5) (E(20,16)-E(20,12)-E(20,9)-E(20,8)+E(20,4)+E(20))//root(5);
  0 1],
 [1 E(15,14)+E(15,13)+E(15,11)+E(15);
  0 E(5,4)-E(5)], # 18
 [1 E(20)-E(20,8)-E(20,9)-E(20,12);
  1 E(15)+E(15,11)+E(15,13)+E(15,14);
  0 -E(20)+E(20,9)], # 19
 [0 E(5)+E(5,4);
  (-5+3root(5))//2*(3-root(-3))//6 (3-root(-3))//6], # 20
 [(5-root(5))//2 root(3)-E(5,2)-E(5,3);
  0 1-E(3)],  # 21
 [1 E(20,17)-E(20,16)-E(20,13)-E(20,4); # 22
  E(20,16)+E(20,13)+E(20,12)+E(20,8)+E(20,4)+E(20) -E(20,16)+E(20,9)-E(20,8)-E(20,4);
  E(20,17)-E(20,16)-E(20,12)+E(20,9)-E(20,8)-E(20,4) E(20,16)+E(20,12)+E(20,4)+E(20)]]
chevieset(:G4_22, :simpleroots,ST->simpleroots4_22[ST-3])

const simplecoroots4_22=
[[0 1;
  root(-3)//3 root(-3)//3], # 4
 [0 1;
  (-3+root(-3))//6 (3-root(-3))//3], # 5
 [root(3)//3 (-3-root(3))//3;
  0 1], # 6
 [0 2;
  1 ((-1-root(3))*(-E(4)+1))//2;
  1 ((-1-root(3))*(E(4)+1))//2], # 7
 [0 -E(4)-1;
  -E(4) -E(4)], # 8
 [1 (-2-root(2))//2;
  0 1], # 9
 [0 1;
  (-root(-3)*(E(4)+1))//6 ((3+root(3))*(-E(4)+1))//6], # 10
 [1 (-2+root(6))*E(3,2);
  0 root(6)*E(3,2);
  1 1+root(3)], # 11
 [1//root(-2)//2 (-1+root(-2))//2;
  -1//root(-2)//2 (-1-root(-2))//2;
  0 1], # 12
 [0 2;
  1 1+root(2);
  root(-2)//(E(4)-1) (2+root(2))//(E(4)-1)], # 13
 [0 1;
  1//2//E(3) (-root(-2)+1+2E(3,2))//2//E(3)], # 14
 [(-3E(24,19)-E(24,17)-2E(24,16)-3E(24,14)-3E(24,11)-E(24,8)+E(24))//6 (E(24,17)-E(24,16)-2E(24,8)-E(24))//3;
  0 1;
  root(3)//3 (3+root(3))//3],
 [0 -E(5,4)-E(5,3)-E(5,2)-2E(5);
  (1-root(5))//2 -E(5)], # 16
 [E(20,12)-E(20,9)+E(20,8)+E(20) 1;
  0 -E(5,4)-E(5,3)-E(5,2)-2E(5)], # 17
 [(5E(15,14)+E(15,13)+5E(15,11)+5E(15,8)+4E(15,7)+3E(15,4)+5E(15,2)+2E(15))//5 (-2E(15,13)-3E(15,7)-E(15,4)+E(15))//5;
  0 -E(5,4)-E(5,2)],
 [(-2E(20,17)-5E(20,16)+2E(20,13)-5E(20,12)+E(20,9)-5E(20,8)-5E(20,4)-E(20))//5 (-E(20,17)+E(20,13)-2E(20,9)+2E(20))//5;
  (5E(15,14)+E(15,13)+5E(15,11)+5E(15,8)+4E(15,7)+3E(15,4)+5E(15,2)+2E(15))//5 (-2E(15,13)-3E(15,7)-E(15,4)+E(15))//5;
  0 -E(20,13)-E(20)],
 [0 (1+root(5))*(3-root(-3))//4;
  root(5)//5 (3+root(5))//2], # 20
 [(1-root(3))*(root(5)-5//root(3))//10 root(3)//3;
  0 1], # 21
 [(-2E(5,4)+E(5,3)-E(5,2)+2E(5))//5//E(4)+1 (-E(5,4)-2E(5,3)+2E(5,2)+E(5))//5//E(4);
  (-4E(20,17)-E(20,16)-E(20,13)+3E(20,12)-3E(20,9)+2E(20,8)+E(20,4)-2E(20))//5 (-2E(20,17)-3E(20,16)+2*E(20,13)-E(20,12)+E(20,9)+E(20,8)-2E(20,4)-E(20))//5;
  (-E(20,17)-E(20,16)-4E(20,13)-2E(20,12)-2E(20,9)-3E(20,8)+E(20,4)-3E(20))//5 (2E(20,17)+2E(20,16)-2E(20,13)-E(20,12)-E(20,9)+E(20,8)+3E(20,4)+E(20))//5]]
chevieset(:G4_22,:simplecoroots,ST->simplecoroots4_22[ST-3])

chevieset(:G4_22, :SemisimpleRank, 2)

chevieset(:G4_22,:NrConjugacyClasses,ST->
  [7,21,14,42,16,32,48,96,8,16,24,48,45,90,135,270,27,54,18][ST-3])

chevieset(:G4_22, :CartanMat,ST->chevieget(:G4_22,:simplecoroots)(ST)*
          transpose(chevieget(:G4_22,:simpleroots)(ST)))

# for the braid relations see Bessis-Bonnafe-Rouquier
const BraidRelations4_22=[[[[1,2,1],[2,1,2]]],
  [[[1,2,1,2],[2,1,2,1]]],
  [[[1,2,1,2,1,2],[2,1,2,1,2,1]]],
  [[[1,2,3],[2,3,1]],[[1,2,3],[3,1,2]]],
  [[[1,2,1],[2,1,2]]],
  [[[1,2,1,2,1,2],[2,1,2,1,2,1]]],
  [[[1,2,1,2],[2,1,2,1]]],
  [[[1,2,3],[2,3,1]],[[1,2,3],[3,1,2]]],
  [[[1,2,3,1],[2,3,1,2]],[[1,2,3,1],[3,1,2,3]]],
  [[[3,1,2,3],[2,3,1,2]],[[1,2,3,1,2],[3,1,2,3,1]]],
  [[[1,2,1,2,1,2,1,2],[2,1,2,1,2,1,2,1]]],
  [[[3,1,2],[1,2,3]],[[2,3,1,2,1],[3,1,2,1,2]]],
  [[[1,2,1],[2,1,2]]],
  [[[1,2,1,2,1,2],[2,1,2,1,2,1]]],
  [[[1,2,1,2],[2,1,2,1]]],
  [[[1,2,3],[2,3,1]],[[1,2,3],[3,1,2]]],
  [[[1,2,1,2,1],[2,1,2,1,2]]],
  [[[1,2,1,2,1,2,1,2,1,2],[2,1,2,1,2,1,2,1,2,1]]],
  [[[1,2,3,1,2],[2,3,1,2,3]],[[1,2,3,1,2],[3,1,2,3,1]]]]
chevieset(:G4_22, :BraidRelations,ST->BraidRelations4_22[ST-3])

const ordergens4_22=[[3,3],[3,3],[2,3],[2,3,3],[4,4],
  [2,4],[3,4],[2,3,4],[2,2,2],[2,2,2],[2,3],[2,3,2],[5,5],[2,5],[3,5],[2,3,5],
  [3,3],[2,3],[2,2,2]]
chevieset(:G4_22,:ordergens,ST->ordergens4_22[ST-3])

const ReflectionDegrees4_22=[[4,6],[6,12],[4,12],[12,12],[8,12],[8,24],[12,24],
  [24,24],[6,8],[8,12],[6,24],[12,24],[20,30],[20,60],[30,60],[60,60],[12,30],
  [12,60],[12,20]]
chevieset(:G4_22, :ReflectionDegrees,ST->ReflectionDegrees4_22[ST-3])

chevieset(:G4_22,:ReflectionCoDegrees,ST->[0,
  [2,6,8,12,4,16,12,24,10,16,18,24,10,40,30,60,18,48,28][ST-3]])

chevieset(:G4_22, :ParabolicRepresentatives, function (ST, s)
  if s==0
    [Int[]]
  elseif s==1
    filter(x->length(x)==1,chevieget(:G4_22,:ClassInfo)(ST)[:classtext])
  else
    [1:size(chevieget(:G4_22, :simpleroots)(ST),1)]
  end
end)

const sparse_fakedegrees4_22=
[[[0],[4],[8],[5,7],[3,5],[1,3],[2,4,6]], # 4
 [[0],[4],[8],[4],[8],[12],[8],[12],[16],[9,15],[7,13],[5,11],[7,13],[5,11], # 5
  [3,9],[5,11],[3,9],[1,7],[4,10,10],[2,8,14],[6,6,12]],
 [[0],[4],[8],[6],[10],[14],[5,13],[3,11],[3,7],[7,11],[1,9], # 6
  [5,9],[2,6,10],[4,8,12]],
 [[0],[4],[8],[4],[8],[12],[8],[12],[16],[6],[10],[14],[10],[14],[18],[14],[18],
  [22],[9,21],[7,19],[11,11],[7,19],[11,11],[9,9],[11,11],[9,9],[7,7],[15,15],
  [13,13],[5,17],[13,13],[5,17],[3,15],[5,17],[3,15],[1,13],[10,10,10], # 7
  [4,16,16],[2,14,14],[8,8,20],[6,6,18],[12,12,12]],
 [[0],[6],[12],[18],[1,5],[4,8],[7,11],[7,11],[10,14],[13,17],[8,12,16], # 8
  [6,10,14],[4,8,12],[2,6,10],[5,9,9,13],[3,7,11,15]],
 [[0],[6],[12],[18],[12],[18],[24],[30],[5,13],[4,20],[7,23],[7,23],[10,26],# 9
  [13,29],[1,17],[14,22],[17,25],[11,19],[11,19],[8,16],[8,16,24],[6,14,22],
  [4,12,20],[2,10,18],[12,20,28],[10,18,26],[8,16,24],[6,14,22],[9,9,17,25],
  [7,15,15,23],[3,11,19,27],[5,13,21,21]],
 [[0],[6],[12],[18],[8],[14],[20],[26],[16],[22],[28],[34],[9,21],[12,24], # 10
  [15,27],[15,27],[18,30],[21,33],[5,17],[8,20],[11,23],[11,23],[14,26],
  [17,29],[1,13],[4,16],[7,19],[7,19],[10,22],[13,25],[8,20,32],[14,14,26],
  [8,20,20],[2,14,26],[16,16,28],[10,22,22],[4,16,28],[10,10,22],[12,24,24],
  [6,18,30],[12,12,24],[6,18,18],[9,9,21,21],[11,11,23,23],[7,19,19,31],
  [3,15,15,27],[5,17,17,29],[13,13,25,25]],
 [[0],[6],[12],[18],[8],[14],[20],[26],[16],[22],[28],[34],[12],[18],[24], # 11
  [30],[20],[26],[32],[38],[28],[34],[40],[46],[9,33],[12,36],[27,27],[27,27],
  [18,42],[33,33],[5,29],[20,20],[11,35],[11,35],[14,38],[29,29],[1,25],[4,28],
  [7,31],[7,31],[22,22],[25,25],[21,21],[24,24],[15,39],[15,39],[30,30],[21,45],
  [17,17],[8,32],[23,23],[23,23],[26,26],[17,41],[13,13],[16,16],[19,19],
  [19,19],[10,34],[13,37],[8,32,32],[14,14,38],[20,20,20],[2,26,26],[20,20,44],
  [26,26,26],[8,32,32],[14,14,38],[16,16,40],[22,22,22],[4,28,28],[10,10,34],
  [28,28,28],[10,34,34],[16,16,40],[22,22,22],[24,24,24],[6,30,30],[12,12,36],
  [18,18,18],[12,36,36],[18,18,42],[24,24,24],[6,30,30],[21,21,21,21],
  [23,23,23,23],[19,19,19,43],[3,27,27,27],[5,29,29,29],[25,25,25,25],
  [9,9,33,33],[11,11,35,35],[7,31,31,31],[15,15,15,39],[17,17,17,41],
  [13,13,37,37]],
 [[0],[12],[1,11],[4,8],[5,7],[2,4,6],[6,8,10],[3,5,7,9]], # 12
 [[0],[6],[12],[18],[7,11],[4,8],[1,17],[5,13],[10,14],[7,11],[4,8,12],[2,6,10],
  [8,12,16],[6,10,14],[3,7,11,15],[5,9,9,13]], # 13
 [[0],[8],[16],[12],[20],[28],[15,21],[12,24],[9,27],[11,17],[8,20],[5,23],
  [7,13],[4,16],[1,19],[2,14,20],[8,14,26],[4,10,22],[10,16,22],[6,12,18],
  [6,18,24],[3,9,15,21],[5,11,17,23],[7,13,19,25]], # 14
 [[0],[6],[8],[14],[16],[22],[12],[18],[20],[26],[28],[34],[9,33],[12,24],
  [15,27],[15,27],[18,30],[21,21],[5,29],[8,20],[11,23],[11,23],[14,26],
  [17,17],[1,25],[4,16],[7,19],[7,19],[10,22],[13,13],[8,20,20],[2,14,26],
  [8,20,32],[14,14,26],[4,16,28],[10,10,22],[16,16,28],[10,22,22],[12,12,24],
  [6,18,18],[12,24,24],[6,18,30],[9,9,21,21],[11,11,23,23],[7,19,19,31],
  [3,15,15,27],[5,17,17,29],[13,13,25,25]], # 15
 [[0],[12],[24],[36],[48],[1,11],[7,17],[13,23],[19,29],[13,23],[19,29], # 16
  [25,35],[25,35],[31,41],[37,47],[2,12,22],[6,16,26],[10,20,30],[10,20,30],
  [14,24,34],[18,28,38],[14,24,34],[18,28,38],[22,32,42],[26,36,46],
  [15,25,35,45],[17,27,27,37],[9,19,29,39],[11,21,21,31],[3,13,23,33],
  [20,30,30,40],[12,22,32,42],[14,24,24,34],[6,16,26,36],[8,18,18,28],
  [12,22,22,32,32],[4,14,24,34,44],[16,16,26,26,36],[8,18,28,28,38],
  [10,20,20,30,40],[5,15,15,25,25,35],[7,17,17,27,27,37],[9,19,19,29,29,39],
  [11,21,21,31,31,41],[13,23,23,33,33,43]],
 [[0],[12],[24],[36],[48],[30],[42],[54],[66],[78],[11,31],[17,37],[13,53], # 18
  [19,59],[13,53],[19,59],[25,65],[25,65],[31,71],[37,77],[1,41],[7,47],[35,55],
  [35,55],[41,61],[47,67],[23,43],[29,49],[23,43],[29,49],[2,22,42],[6,26,46],
  [10,30,50],[10,30,50],[14,34,54],[18,38,58],[14,34,54],[18,38,58],[22,42,62],
  [26,46,66],[12,32,52],[16,36,56],[20,40,60],[20,40,60],[24,44,64],[28,48,68],
  [24,44,64],[28,48,68],[32,52,72],[36,56,76],[15,35,55,75],[27,27,47,67],
  [19,39,39,59],[11,31,51,51],[3,23,43,63],[30,30,50,70],[22,42,42,62],
  [14,34,54,54],[6,26,46,66],[18,18,38,58],[25,45,45,65],[17,37,57,57],
  [9,29,49,69],[21,21,41,61],[13,33,33,53],[20,40,60,60],[12,32,52,72],
  [24,24,44,64],[16,36,36,56],[8,28,48,48],[12,32,32,52,52],[22,22,42,62,62],
  [4,24,44,44,64],[14,34,34,54,74],[16,16,36,56,56],[26,26,46,46,66],
  [8,28,28,48,68],[18,38,38,58,58],[20,20,40,40,60],[10,30,50,50,70],
  [15,15,35,35,55,55],[17,17,37,37,57,57],[19,19,39,39,59,59],
  [11,31,31,51,51,71],[13,33,33,53,53,73],[5,25,25,45,45,65],[7,27,27,47,47,67],
  [9,29,29,49,49,69],[21,21,41,41,61,61],[23,23,43,43,63,63]],
 [[0],[12],[24],[36],[48],[20],[32],[44],[56],[68],[40],[52],[64],[76],[88],
  [21,51],[27,57],[33,63],[39,69],[33,63],[39,69],[45,75],[45,75],[51,81],
  [57,87],[11,41],[17,47],[23,53],[29,59],[23,53],[29,59],[35,65],[35,65],
  [41,71],[47,77],[1,31],[7,37],[13,43],[19,49],[13,43],[19,49],[25,55],[25,55],
  [31,61],[37,67],[2,32,62],[26,26,56],[20,50,50],[20,50,50],[14,44,74],
  [38,38,68],[14,44,74],[38,38,68],[32,62,62],[26,56,86],[22,22,52],[16,46,46],
  [10,40,70],[10,40,70],[34,34,64],[28,58,58],[34,34,64],[28,58,58],[22,52,82],
  [46,46,76],[12,42,42],[6,36,66],[30,30,60],[30,30,60],[24,54,54],[18,48,78],
  [24,54,54],[18,48,78],[42,42,72],[36,66,66],[15,45,45,75],[27,27,57,57],
  [9,39,39,69],[21,21,51,51],[3,33,33,63],[35,35,65,65],[17,47,47,77],
  [29,29,59,59],[11,41,41,71],[23,23,53,53],[25,55,55,85],[37,37,67,67],
  [19,49,49,79],[31,31,61,61],[13,43,43,73],[30,30,60,60],[12,42,42,72],
  [24,24,54,54],[6,36,36,66],[18,18,48,48],[20,50,50,80],[32,32,62,62],
  [14,44,44,74],[26,26,56,56],[8,38,38,68],[40,40,70,70],[22,52,52,82],
  [34,34,64,64],[16,46,46,76],[28,28,58,58],[12,42,42,72,72],[32,32,32,62,62],
  [22,22,52,52,52],[24,24,54,54,84],[14,44,44,44,74],[4,34,34,64,64],
  [36,36,36,66,66],[26,26,56,56,56],[16,16,46,46,76],[18,48,48,48,78],
  [8,38,38,68,68],[28,28,28,58,58],[30,30,60,60,60],[20,20,50,50,80],
  [10,40,40,40,70],[25,25,25,55,55,55],[7,37,37,37,67,67],[19,19,49,49,49,79],
  [31,31,31,61,61,61],[13,43,43,43,73,73],[5,35,35,35,65,65],
  [17,17,47,47,47,77],[29,29,29,59,59,59],[11,41,41,41,71,71],
  [23,23,53,53,53,83],[15,15,45,45,45,75],[27,27,27,57,57,57],
  [9,39,39,39,69,69],[21,21,51,51,51,81],[33,33,33,63,63,63]],
 [[0],[12],[24],[36],[48],[20],[32],[44],[56],[68],[40],[52],[64],[76],[88],
  [30],[42],[54],[66],[78],[50],[62],[74],[86],[98],[70],[82],[94],[106],
  [118],[51,51],[57,57],[33,93],[39,99],[33,93],[39,99],[45,105],[45,105],
  [51,111],[57,117],[41,41],[47,47],[53,53],[59,59],[53,53],[59,59],[35,95],
  [35,95],[41,101],[47,107],[31,31],[37,37],[43,43],[49,49],[43,43],[49,49],
  [55,55],[55,55],
[31,91],[37,97],[21,81],[27,87],[63,63],[69,69],[63,63],[69,
69],[75,75],[75,75],[81,81],[87,87],[11,71],[17,77],[23,83],
[29,89],[23,83],[29,89],[65,65],[65,65],[71,71],[77,77],[1,
61],[7,67],[13,73],[19,79],[13,73],[19,79],[25,85],[25,85],
[61,61],[67,67],[2,62,62],[26,26,86],[50,50,50],[50,50,50],
[14,74,74],[38,38,98],[14,74,74],[38,38,98],[62,62,62],[26,
86,86],[32,32,92],[56,56,56],[20,80,80],[20,80,80],[44,44,
104],[68,68,68],[44,44,104],[68,68,68],[32,92,92],[56,56,
116],[22,22,82],[46,46,46],[10,70,70],[10,70,70],[34,34,94],
[58,58,58],[34,34,94],[58,58,58],[22,82,82],[46,46,106],[52,
52,52],[16,76,76],[40,40,100],[40,40,100],[64,64,64],[28,88,
88],[64,64,64],[28,88,88],[52,52,112],[76,76,76],[42,42,42],
[6,66,66],[30,30,90],[30,30,90],[54,54,54],[18,78,78],[54,
54,54],[18,78,78],[42,42,102],[66,66,66],[12,72,72],[36,36,
96],[60,60,60],[60,60,60],[24,84,84],[48,48,108],[24,84,84],
[48,48,108],[72,72,72],[36,96,96],[15,75,75,75],[27,27,87,
87],[39,39,39,99],[51,51,51,51],[3,63,63,63],[35,35,95,95],
[47,47,47,107],[59,59,59,59],[11,71,71,71],[23,23,83,83],
[55,55,55,115],[67,67,67,67],[19,79,79,79],[31,31,91,91],
[43,43,43,103],[30,30,90,90],[42,42,42,102],[54,54,54,54],
[6,66,66,66],[18,18,78,78],[50,50,50,110],[62,62,62,62],
[14,74,74,74],[26,26,86,86],[38,38,38,98],[70,70,70,70],
[22,82,82,82],[34,34,94,94],[46,46,46,106],[58,58,58,58],
[45,45,45,105],[57,57,57,57],[9,69,69,69],[21,21,81,81],
[33,33,33,93],[65,65,65,65],[17,77,77,77],[29,29,89,89],
[41,41,41,101],[53,53,53,53],[25,85,85,85],[37,37,97,97],
[49,49,49,109],[61,61,61,61],[13,73,73,73],[60,60,60,60],
[12,72,72,72],[24,24,84,84],[36,36,36,96],[48,48,48,48],
[20,80,80,80],[32,32,92,92],[44,44,44,104],[56,56,56,56],
[8,68,68,68],[40,40,100,100],[52,52,52,112],[64,64,64,64],
[16,76,76,76],[28,28,88,88],[12,72,72,72,72],[32,32,32,92,
92],[52,52,52,52,52],[42,42,42,102,102],[62,62,62,62,62],
[22,22,82,82,82],[24,24,84,84,84],[44,44,44,44,104],[4,64,
64,64,64],[54,54,54,54,114],[14,74,74,74,74],[34,34,34,94,
94],[36,36,36,96,96],[56,56,56,56,56],[16,16,76,76,76],[66,
66,66,66,66],[26,26,86,86,86],[46,46,46,46,106],[48,48,48,
48,108],[8,68,68,68,68],[28,28,28,88,88],[18,78,78,78,78],
[38,38,38,98,98],[58,58,58,58,58],[60,60,60,60,60],[20,20,
80,80,80],[40,40,40,40,100],[30,30,90,90,90],[50,50,50,50,
110],[10,70,70,70,70],[25,25,25,85,85,85],[7,67,67,67,67,
67],[49,49,49,49,49,109],[61,61,61,61,61,61],[43,43,43,43,
103,103],[35,35,35,35,95,95],[17,17,77,77,77,77],[59,59,59,
59,59,59],[11,71,71,71,71,71],[53,53,53,53,53,113],[45,45,
45,45,45,105],[27,27,27,87,87,87],[9,69,69,69,69,69],[21,
21,81,81,81,81],[63,63,63,63,63,63],[55,55,55,55,55,55],
[37,37,37,37,97,97],[19,19,79,79,79,79],[31,31,31,91,91,
91],[13,73,73,73,73,73],[5,65,65,65,65,65],[47,47,47,47,
47,107],[29,29,29,89,89,89],[41,41,41,41,101,101],[23,23,
83,83,83,83],[15,15,75,75,75,75],[57,57,57,57,57,57],[39,
39,39,39,99,99],[51,51,51,51,51,111],[33,33,33,93,93,93]],
 [[0],[20],[40],[21,39],[27,33],[11,29],[17,23],[1,19],[7,13],[2,20,38],
  [14,20,26],[10,22,28],[10,16,34],[12,18,30],[6,24,30],[3,9,21,27],
  [11,17,23,29],[13,19,31,37],[6,12,18,24],[8,14,26,32],[16,22,28,34],
  [12,18,24,30,36],[8,14,20,26,32],[4,10,16,22,28],[7,13,19,25,25,31],
  [9,15,15,21,27,33],[5,11,17,23,29,35]],
 [[0],[20],[40],[30],[50],[70],[39,51],[33,57],[21,69],[27,63],[29,41],[23,47],
  [17,53],[11,59],[19,31],[13,37],[7,43],[1,49],[2,38,50],[14,26,50],[20,32,68],
  [20,44,56],[10,22,58],[10,34,46],[28,40,52],[16,40,64],[18,30,42],[6,30,54],
  [12,48,60],[24,36,60],[3,27,39,51],[11,23,47,59],[19,31,43,67],[6,18,42,54],
  [14,26,38,62],[22,34,46,58],[9,21,33,57],[17,29,41,53],[13,37,49,61],
  [12,24,36,48],[8,32,44,56],[16,28,52,64],[12,24,36,48,60],[8,20,32,44,56],
  [4,16,28,40,52],[18,30,42,54,66],[14,26,38,50,62],[10,22,34,46,58],
  [13,25,25,37,49,61],[7,19,31,43,55,55],[11,23,35,35,47,59],[5,17,29,41,53,65],
  [9,21,33,45,45,57],[15,15,27,39,51,63]],
 [[0],[30],[11,19],[13,17],[1,29],[7,23],[2,10,18],[6,10,14],[12,20,28],
  [16,20,24],[3,11,19,27],[6,14,18,22],[9,13,17,21],[8,12,16,24],[4,8,12,16,20],
  [10,14,18,22,26],[7,11,15,15,19,23],[5,9,13,17,21,25]]]

chevieset(:G4_22, :FakeDegree,(ST,phi,q)->
  sum(q.^sparse_fakedegrees4_22[ST-3][findfirst(==(phi),
     chevieget(:G4_22,:CharInfo)(ST)[:charparams])]))

chevieset(:G4_22,:b,ST->first.(sparse_fakedegrees4_22[ST-3]))
chevieset(:G4_22,:B,ST->last.(sparse_fakedegrees4_22[ST-3]))

G4_22type(ST)=ST in 4:7 ? 1 : ST in 8:15 ? 2 : 3

G4_22Generic(ST)=(7,11,19)[G4_22type(ST)]

mallechars4_22=[
  vcat(cartesian([1],1:2,1:3,1:3),cartesian([2],1:2,1:3,1:3),
       cartesian([3],1:3,1:2)),
  vcat(cartesian([1],1:2,1:3,1:4),cartesian([2],1:2,1:3,1:6),
       cartesian([3],1:3,1:2,1:4),cartesian([4],1:4,1:3)),
  vcat(cartesian([1],1:2,1:3,1:5),cartesian([2],1:2,1:3,1:10),
       cartesian([3],1:3,1:2,1:10),cartesian([4],1:4,1:3,1:5),
       cartesian([5],1:5,1:2,1:3),cartesian([6],1:6,1:5))]
chevieset(:G4_22,:mallechars,ST->mallechars4_22[G4_22type(ST)])

# specialization of para=params(generic group G7, G11 or G19) for Hecke(ST)
chevieset(:G4_22, :ParamSpecialization, function (ST, para)
  function f(p)
    p=root.(p)
    vcat(p, -p)
  end
  if     ST==4  return [[1,-1], E.(3,0:2), para[1]]
  elseif ST==5  return [[1,-1], para[1], para[2]]
  elseif ST==6  return [para[1], E.(3,0:2), para[2]]
  elseif ST==7  return para
  elseif ST==8  return [[1,-1], E.(3,0:2), para[1]]
  elseif ST==9  return [para[1], E.(3,0:2), para[2]]
  elseif ST==10 return [[1,-1], para[1], para[2]]
  elseif ST==11 return para
  elseif ST==12 return [para[1], E.(3,0:2), E.(4,0:3)]
  elseif ST==13 return [para[2], E.(3,0:2), f(para[1])]
  elseif ST==14 return [para[1], para[2], E.(4,0:3)]
  elseif ST==15 return [para[1], para[2], f(para[3])]
  elseif ST==16 return [[1,-1], E.(3,0:2), para[1]]
  elseif ST==17 return [para[1], E.(3,0:2), para[2]]
  elseif ST==18 return [[1,-1], para[1], para[2]]
  elseif ST==19 return para
  elseif ST==20 return [[1,-1], para[1],E.(5,0:4)]
  elseif ST==21 return [para[1], para[2],E.(5,0:4)]
  elseif ST==22 return [para[1],E.(3,0:2),E.(5,0:4)]
  end
end)

PowerMaps4_22= # powermaps for G7, G11, G19
  [[nothing,[1,3,5,7,9,11,1,3,5,7,9,11,1,3,5,7,9,11,39,41,31,33,35,37,39,41,31,
	  33,35,37,27,29,19,21,23,25,27,29,19,21,23,25],
	 [1,4,7,10,1,4,7,10,1,4,7,10,13,16,13,16,13,16,1,4,7,10,1,4,7,10,1,
	  4,7,10,1,4,7,10,1,4,7,10,1,4,7,10],nothing,
	 [1,6,11,4,9,2,7,12,5,10,3,8,13,18,17,16,15,14,39,32,37,42,35,40,
	  33,38,31,36,41,34,27,20,25,30,23,28,21,26,19,24,29,22],nothing,
	 [1,8,3,10,5,12,7,2,9,4,11,6,13,14,15,16,17,18,19,26,21,28,23,30,
	  25,20,27,22,29,24,31,38,33,40,35,42,37,32,39,34,41,36],nothing,nothing,nothing,
	 [1,12,11,10,9,8,7,6,5,4,3,2,13,18,17,16,15,14,39,38,37,36,35,34,33,
	  32,31,42,41,40,27,26,25,24,23,22,21,20,19,30,29,28]],
  [nothing,[1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,
    17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,53,55,57,
    59,37,39,41,43,45,47,49,51,53,55,57,59,37,39,41,43,45,
    47,49,51,85,87,89,91,93,95,85,87,89,91,93,95,85,87,89,
    91,93,95,85,87,89,91,93,95,1,3,5,7,9,11,13,15,17,19,
    21,23],
    [1,4,7,10,13,16,19,22,1,4,7,10,13,16,19,22,1,4,7,10,
    13,16,19,22,25,28,31,34,25,28,31,34,25,28,31,34,1,4,
    7,10,13,16,19,22,1,4,7,10,13,16,19,22,1,4,7,10,13,
    16,19,22,79,82,61,64,67,70,73,76,79,82,61,64,67,70,73,
    76,79,82,61,64,67,70,73,76,85,88,91,94,85,88,91,94,85,
    88,91,94],nothing,
    [1,6,11,16,21,2,7,12,17,22,3,8,13,18,23,4,9,14,19,24,
    5,10,15,20,25,30,35,28,33,26,31,36,29,34,27,32,53,58,
    39,44,49,54,59,40,45,50,55,60,41,46,51,56,37,42,47,52,
    57,38,43,48,61,66,71,76,81,62,67,72,77,82,63,68,73,78,
    83,64,69,74,79,84,65,70,75,80,85,90,95,88,93,86,91,96,
    89,94,87,92],nothing,
    [1,8,15,22,5,12,19,2,9,16,23,6,13,20,3,10,17,24,7,14,
    21,4,11,18,25,32,27,34,29,36,31,26,33,28,35,30,37,44,
    51,58,41,48,55,38,45,52,59,42,49,56,39,46,53,60,43,50,
    57,40,47,54,79,62,69,76,83,66,73,80,63,70,77,84,67,74,
    81,64,71,78,61,68,75,82,65,72,85,92,87,94,89,96,91,86,
    93,88,95,90],nothing,nothing,nothing,
    [1,12,23,10,21,8,19,6,17,4,15,2,13,24,11,22,9,20,7,18,
    5,16,3,14,25,36,35,34,33,32,31,30,29,28,27,26,53,40,
    51,38,49,60,47,58,45,56,43,54,41,52,39,50,37,48,59,46,
    57,44,55,42,79,66,77,64,75,62,73,84,71,82,69,80,67,78,
    65,76,63,74,61,72,83,70,81,68,85,96,95,94,93,92,91,90,
    89,88,87,86],nothing,
    [1,14,3,16,5,18,7,20,9,22,11,24,13,2,15,4,17,6,19,8,
    21,10,23,12,25,26,27,28,29,30,31,32,33,34,35,36,37,50,
    39,52,41,54,43,56,45,58,47,60,49,38,51,40,53,42,55,44,
    57,46,59,48,61,74,63,76,65,78,67,80,69,82,71,84,73,62,
    75,64,77,66,79,68,81,70,83,72,85,86,87,88,89,90,91,92,
    93,94,95,96],nothing,nothing,nothing,
    [1,18,11,4,21,14,7,24,17,10,3,20,13,6,23,16,9,2,19,12,
    5,22,15,8,25,30,35,28,33,26,31,36,29,34,27,32,53,46,
    39,56,49,42,59,52,45,38,55,48,41,58,51,44,37,54,47,40,
    57,50,43,60,61,78,71,64,81,74,67,84,77,70,63,80,73,66,
    83,76,69,62,79,72,65,82,75,68,85,90,95,88,93,86,91,96,
    89,94,87,92],nothing,
    [1,20,15,10,5,24,19,14,9,4,23,18,13,8,3,22,17,12,7,2,
    21,16,11,6,25,32,27,34,29,36,31,26,33,28,35,30,37,56,
    51,46,41,60,55,50,45,40,59,54,49,44,39,58,53,48,43,38,
    57,52,47,42,79,74,69,64,83,78,73,68,63,82,77,72,67,62,
    81,76,71,66,61,80,75,70,65,84,85,92,87,94,89,96,91,86,
    93,88,95,90],nothing,nothing,nothing,
    [1,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,
    6,5,4,3,2,25,36,35,34,33,32,31,30,29,28,27,26,53,52,
    51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,60,59,58,
    57,56,55,54,79,78,77,76,75,74,73,72,71,70,69,68,67,66,
    65,64,63,62,61,84,83,82,81,80,85,96,95,94,93,92,91,90,
    89,88,87,86]],
[nothing,[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
      39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 1, 3, 5, 7, 9, 11, 13, 15,
      17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51,
      53, 55, 57, 59, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29,
      31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 131, 133,
      135, 137, 139, 141, 143, 145, 147, 149, 91, 93, 95, 97, 99, 101, 103,
      105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131,
      133, 135, 137, 139, 141, 143, 145, 147, 149, 91, 93, 95, 97, 99, 101,
      103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129,
      211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237,
      239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265,
      267, 269, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233,
      235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261,
      263, 265, 267, 269, 199, 201, 203, 205, 207, 209, 151, 153, 155, 157,
      159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185,
      187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 151, 153,
      155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181,
      183, 185, 187, 189, 191, 193, 195, 197 ],
  [ 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55,
      58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49,
      52, 55, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43,
      46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 61, 64, 67,
      70, 73, 76, 79, 82, 85, 88, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 1,
      4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55,
      58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49,
      52, 55, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43,
      46, 49, 52, 55, 58, 247, 250, 253, 256, 259, 262, 265, 268, 211, 214,
      217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 247, 250, 253, 256,
      259, 262, 265, 268, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238,
      241, 244, 247, 250, 253, 256, 259, 262, 265, 268, 211, 214, 217, 220,
      223, 226, 229, 232, 235, 238, 241, 244, 151, 154, 157, 160, 163, 166,
      169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208,
      151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190,
      193, 196, 199, 202, 205, 208, 151, 154, 157, 160, 163, 166, 169, 172,
      175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208 ],nothing,
  [ 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31,
      36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6,
      11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36,
      41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 61, 66,
      71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 131,
      136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141,
      146, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 91, 96,
      101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 91, 96, 101, 106,
      111, 116, 121, 126, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116,
      121, 126, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16,
      21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46,
      51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21,
      26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51,
      56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26,
      31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56,
      1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56 ],nothing,
  [ 1, 8, 15, 22, 29, 36, 43, 50, 57, 4, 11, 18, 25, 32, 39, 46, 53, 60, 7,
      14, 21, 28, 35, 42, 49, 56, 3, 10, 17, 24, 31, 38, 45, 52, 59, 6, 13,
      20, 27, 34, 41, 48, 55, 2, 9, 16, 23, 30, 37, 44, 51, 58, 5, 12, 19,
      26, 33, 40, 47, 54, 61, 68, 75, 82, 89, 66, 73, 80, 87, 64, 71, 78, 85,
      62, 69, 76, 83, 90, 67, 74, 81, 88, 65, 72, 79, 86, 63, 70, 77, 84, 91,
      98, 105, 112, 119, 126, 133, 140, 147, 94, 101, 108, 115, 122, 129,
      136, 143, 150, 97, 104, 111, 118, 125, 132, 139, 146, 93, 100, 107,
      114, 121, 128, 135, 142, 149, 96, 103, 110, 117, 124, 131, 138, 145,
      92, 99, 106, 113, 120, 127, 134, 141, 148, 95, 102, 109, 116, 123, 130,
      137, 144, 211, 218, 225, 232, 239, 246, 253, 260, 267, 214, 221, 228,
      235, 242, 249, 256, 263, 270, 217, 224, 231, 238, 245, 252, 259, 266,
      213, 220, 227, 234, 241, 248, 255, 262, 269, 216, 223, 230, 237, 244,
      251, 258, 265, 212, 219, 226, 233, 240, 247, 254, 261, 268, 215, 222,
      229, 236, 243, 250, 257, 264, 199, 206, 153, 160, 167, 174, 181, 188,
      195, 202, 209, 156, 163, 170, 177, 184, 191, 198, 205, 152, 159, 166,
      173, 180, 187, 194, 201, 208, 155, 162, 169, 176, 183, 190, 197, 204,
      151, 158, 165, 172, 179, 186, 193, 200, 207, 154, 161, 168, 175, 182,
      189, 196, 203, 210, 157, 164, 171, 178, 185, 192 ],nothing,nothing,nothing,
  [ 1, 12, 23, 34, 45, 56, 7, 18, 29, 40, 51, 2, 13, 24, 35, 46, 57, 8, 19,
      30, 41, 52, 3, 14, 25, 36, 47, 58, 9, 20, 31, 42, 53, 4, 15, 26, 37,
      48, 59, 10, 21, 32, 43, 54, 5, 16, 27, 38, 49, 60, 11, 22, 33, 44, 55,
      6, 17, 28, 39, 50, 61, 72, 83, 64, 75, 86, 67, 78, 89, 70, 81, 62, 73,
      84, 65, 76, 87, 68, 79, 90, 71, 82, 63, 74, 85, 66, 77, 88, 69, 80,
      131, 142, 93, 104, 115, 126, 137, 148, 99, 110, 121, 132, 143, 94, 105,
      116, 127, 138, 149, 100, 111, 122, 133, 144, 95, 106, 117, 128, 139,
      150, 101, 112, 123, 134, 145, 96, 107, 118, 129, 140, 91, 102, 113,
      124, 135, 146, 97, 108, 119, 130, 141, 92, 103, 114, 125, 136, 147, 98,
      109, 120, 151, 162, 173, 184, 195, 206, 157, 168, 179, 190, 201, 152,
      163, 174, 185, 196, 207, 158, 169, 180, 191, 202, 153, 164, 175, 186,
      197, 208, 159, 170, 181, 192, 203, 154, 165, 176, 187, 198, 209, 160,
      171, 182, 193, 204, 155, 166, 177, 188, 199, 210, 161, 172, 183, 194,
      205, 156, 167, 178, 189, 200, 211, 222, 233, 244, 255, 266, 217, 228,
      239, 250, 261, 212, 223, 234, 245, 256, 267, 218, 229, 240, 251, 262,
      213, 224, 235, 246, 257, 268, 219, 230, 241, 252, 263, 214, 225, 236,
      247, 258, 269, 220, 231, 242, 253, 264, 215, 226, 237, 248, 259, 270,
      221, 232, 243, 254, 265, 216, 227, 238, 249, 260 ],nothing,
  [ 1, 14, 27, 40, 53, 6, 19, 32, 45, 58, 11, 24, 37, 50, 3, 16, 29, 42, 55,
      8, 21, 34, 47, 60, 13, 26, 39, 52, 5, 18, 31, 44, 57, 10, 23, 36, 49,
      2, 15, 28, 41, 54, 7, 20, 33, 46, 59, 12, 25, 38, 51, 4, 17, 30, 43,
      56, 9, 22, 35, 48, 61, 74, 87, 70, 83, 66, 79, 62, 75, 88, 71, 84, 67,
      80, 63, 76, 89, 72, 85, 68, 81, 64, 77, 90, 73, 86, 69, 82, 65, 78, 91,
      104, 117, 130, 143, 96, 109, 122, 135, 148, 101, 114, 127, 140, 93,
      106, 119, 132, 145, 98, 111, 124, 137, 150, 103, 116, 129, 142, 95,
      108, 121, 134, 147, 100, 113, 126, 139, 92, 105, 118, 131, 144, 97,
      110, 123, 136, 149, 102, 115, 128, 141, 94, 107, 120, 133, 146, 99,
      112, 125, 138, 247, 260, 213, 226, 239, 252, 265, 218, 231, 244, 257,
      270, 223, 236, 249, 262, 215, 228, 241, 254, 267, 220, 233, 246, 259,
      212, 225, 238, 251, 264, 217, 230, 243, 256, 269, 222, 235, 248, 261,
      214, 227, 240, 253, 266, 219, 232, 245, 258, 211, 224, 237, 250, 263,
      216, 229, 242, 255, 268, 221, 234, 151, 164, 177, 190, 203, 156, 169,
      182, 195, 208, 161, 174, 187, 200, 153, 166, 179, 192, 205, 158, 171,
      184, 197, 210, 163, 176, 189, 202, 155, 168, 181, 194, 207, 160, 173,
      186, 199, 152, 165, 178, 191, 204, 157, 170, 183, 196, 209, 162, 175,
      188, 201, 154, 167, 180, 193, 206, 159, 172, 185, 198 ],nothing,nothing,nothing,
  [ 1, 18, 35, 52, 9, 26, 43, 60, 17, 34, 51, 8, 25, 42, 59, 16, 33, 50, 7,
      24, 41, 58, 15, 32, 49, 6, 23, 40, 57, 14, 31, 48, 5, 22, 39, 56, 13,
      30, 47, 4, 21, 38, 55, 12, 29, 46, 3, 20, 37, 54, 11, 28, 45, 2, 19,
      36, 53, 10, 27, 44, 61, 78, 65, 82, 69, 86, 73, 90, 77, 64, 81, 68, 85,
      72, 89, 76, 63, 80, 67, 84, 71, 88, 75, 62, 79, 66, 83, 70, 87, 74,
      131, 148, 105, 122, 139, 96, 113, 130, 147, 104, 121, 138, 95, 112,
      129, 146, 103, 120, 137, 94, 111, 128, 145, 102, 119, 136, 93, 110,
      127, 144, 101, 118, 135, 92, 109, 126, 143, 100, 117, 134, 91, 108,
      125, 142, 99, 116, 133, 150, 107, 124, 141, 98, 115, 132, 149, 106,
      123, 140, 97, 114, 211, 228, 245, 262, 219, 236, 253, 270, 227, 244,
      261, 218, 235, 252, 269, 226, 243, 260, 217, 234, 251, 268, 225, 242,
      259, 216, 233, 250, 267, 224, 241, 258, 215, 232, 249, 266, 223, 240,
      257, 214, 231, 248, 265, 222, 239, 256, 213, 230, 247, 264, 221, 238,
      255, 212, 229, 246, 263, 220, 237, 254, 199, 156, 173, 190, 207, 164,
      181, 198, 155, 172, 189, 206, 163, 180, 197, 154, 171, 188, 205, 162,
      179, 196, 153, 170, 187, 204, 161, 178, 195, 152, 169, 186, 203, 160,
      177, 194, 151, 168, 185, 202, 159, 176, 193, 210, 167, 184, 201, 158,
      175, 192, 209, 166, 183, 200, 157, 174, 191, 208, 165, 182 ],nothing,
  [ 1, 20, 39, 58, 17, 36, 55, 14, 33, 52, 11, 30, 49, 8, 27, 46, 5, 24, 43,
      2, 21, 40, 59, 18, 37, 56, 15, 34, 53, 12, 31, 50, 9, 28, 47, 6, 25,
      44, 3, 22, 41, 60, 19, 38, 57, 16, 35, 54, 13, 32, 51, 10, 29, 48, 7,
      26, 45, 4, 23, 42, 61, 80, 69, 88, 77, 66, 85, 74, 63, 82, 71, 90, 79,
      68, 87, 76, 65, 84, 73, 62, 81, 70, 89, 78, 67, 86, 75, 64, 83, 72, 91,
      110, 129, 148, 107, 126, 145, 104, 123, 142, 101, 120, 139, 98, 117,
      136, 95, 114, 133, 92, 111, 130, 149, 108, 127, 146, 105, 124, 143,
      102, 121, 140, 99, 118, 137, 96, 115, 134, 93, 112, 131, 150, 109, 128,
      147, 106, 125, 144, 103, 122, 141, 100, 119, 138, 97, 116, 135, 94,
      113, 132, 199, 158, 177, 196, 155, 174, 193, 152, 171, 190, 209, 168,
      187, 206, 165, 184, 203, 162, 181, 200, 159, 178, 197, 156, 175, 194,
      153, 172, 191, 210, 169, 188, 207, 166, 185, 204, 163, 182, 201, 160,
      179, 198, 157, 176, 195, 154, 173, 192, 151, 170, 189, 208, 167, 186,
      205, 164, 183, 202, 161, 180, 247, 266, 225, 244, 263, 222, 241, 260,
      219, 238, 257, 216, 235, 254, 213, 232, 251, 270, 229, 248, 267, 226,
      245, 264, 223, 242, 261, 220, 239, 258, 217, 236, 255, 214, 233, 252,
      211, 230, 249, 268, 227, 246, 265, 224, 243, 262, 221, 240, 259, 218,
      237, 256, 215, 234, 253, 212, 231, 250, 269, 228 ],nothing,nothing,nothing,
  [ 1, 24, 47, 10, 33, 56, 19, 42, 5, 28, 51, 14, 37, 60, 23, 46, 9, 32, 55,
      18, 41, 4, 27, 50, 13, 36, 59, 22, 45, 8, 31, 54, 17, 40, 3, 26, 49,
      12, 35, 58, 21, 44, 7, 30, 53, 16, 39, 2, 25, 48, 11, 34, 57, 20, 43,
      6, 29, 52, 15, 38, 61, 84, 77, 70, 63, 86, 79, 72, 65, 88, 81, 74, 67,
      90, 83, 76, 69, 62, 85, 78, 71, 64, 87, 80, 73, 66, 89, 82, 75, 68,
      131, 94, 117, 140, 103, 126, 149, 112, 135, 98, 121, 144, 107, 130, 93,
      116, 139, 102, 125, 148, 111, 134, 97, 120, 143, 106, 129, 92, 115,
      138, 101, 124, 147, 110, 133, 96, 119, 142, 105, 128, 91, 114, 137,
      100, 123, 146, 109, 132, 95, 118, 141, 104, 127, 150, 113, 136, 99,
      122, 145, 108, 247, 270, 233, 256, 219, 242, 265, 228, 251, 214, 237,
      260, 223, 246, 269, 232, 255, 218, 241, 264, 227, 250, 213, 236, 259,
      222, 245, 268, 231, 254, 217, 240, 263, 226, 249, 212, 235, 258, 221,
      244, 267, 230, 253, 216, 239, 262, 225, 248, 211, 234, 257, 220, 243,
      266, 229, 252, 215, 238, 261, 224, 151, 174, 197, 160, 183, 206, 169,
      192, 155, 178, 201, 164, 187, 210, 173, 196, 159, 182, 205, 168, 191,
      154, 177, 200, 163, 186, 209, 172, 195, 158, 181, 204, 167, 190, 153,
      176, 199, 162, 185, 208, 171, 194, 157, 180, 203, 166, 189, 152, 175,
      198, 161, 184, 207, 170, 193, 156, 179, 202, 165, 188 ],nothing,nothing,nothing,nothing,nothing,
  [ 1, 30, 59, 28, 57, 26, 55, 24, 53, 22, 51, 20, 49, 18, 47, 16, 45, 14,
      43, 12, 41, 10, 39, 8, 37, 6, 35, 4, 33, 2, 31, 60, 29, 58, 27, 56, 25,
      54, 23, 52, 21, 50, 19, 48, 17, 46, 15, 44, 13, 42, 11, 40, 9, 38, 7,
      36, 5, 34, 3, 32, 61, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79,
      78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62,
      131, 100, 129, 98, 127, 96, 125, 94, 123, 92, 121, 150, 119, 148, 117,
      146, 115, 144, 113, 142, 111, 140, 109, 138, 107, 136, 105, 134, 103,
      132, 101, 130, 99, 128, 97, 126, 95, 124, 93, 122, 91, 120, 149, 118,
      147, 116, 145, 114, 143, 112, 141, 110, 139, 108, 137, 106, 135, 104,
      133, 102, 199, 168, 197, 166, 195, 164, 193, 162, 191, 160, 189, 158,
      187, 156, 185, 154, 183, 152, 181, 210, 179, 208, 177, 206, 175, 204,
      173, 202, 171, 200, 169, 198, 167, 196, 165, 194, 163, 192, 161, 190,
      159, 188, 157, 186, 155, 184, 153, 182, 151, 180, 209, 178, 207, 176,
      205, 174, 203, 172, 201, 170, 247, 216, 245, 214, 243, 212, 241, 270,
      239, 268, 237, 266, 235, 264, 233, 262, 231, 260, 229, 258, 227, 256,
      225, 254, 223, 252, 221, 250, 219, 248, 217, 246, 215, 244, 213, 242,
      211, 240, 269, 238, 267, 236, 265, 234, 263, 232, 261, 230, 259, 228,
      257, 226, 255, 224, 253, 222, 251, 220, 249, 218 ],nothing,
  [ 1, 32, 3, 34, 5, 36, 7, 38, 9, 40, 11, 42, 13, 44, 15, 46, 17, 48, 19,
      50, 21, 52, 23, 54, 25, 56, 27, 58, 29, 60, 31, 2, 33, 4, 35, 6, 37, 8,
      39, 10, 41, 12, 43, 14, 45, 16, 47, 18, 49, 20, 51, 22, 53, 24, 55, 26,
      57, 28, 59, 30, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
      75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
      122, 93, 124, 95, 126, 97, 128, 99, 130, 101, 132, 103, 134, 105, 136,
      107, 138, 109, 140, 111, 142, 113, 144, 115, 146, 117, 148, 119, 150,
      121, 92, 123, 94, 125, 96, 127, 98, 129, 100, 131, 102, 133, 104, 135,
      106, 137, 108, 139, 110, 141, 112, 143, 114, 145, 116, 147, 118, 149,
      120, 151, 182, 153, 184, 155, 186, 157, 188, 159, 190, 161, 192, 163,
      194, 165, 196, 167, 198, 169, 200, 171, 202, 173, 204, 175, 206, 177,
      208, 179, 210, 181, 152, 183, 154, 185, 156, 187, 158, 189, 160, 191,
      162, 193, 164, 195, 166, 197, 168, 199, 170, 201, 172, 203, 174, 205,
      176, 207, 178, 209, 180, 211, 242, 213, 244, 215, 246, 217, 248, 219,
      250, 221, 252, 223, 254, 225, 256, 227, 258, 229, 260, 231, 262, 233,
      264, 235, 266, 237, 268, 239, 270, 241, 212, 243, 214, 245, 216, 247,
      218, 249, 220, 251, 222, 253, 224, 255, 226, 257, 228, 259, 230, 261,
      232, 263, 234, 265, 236, 267, 238, 269, 240 ],nothing,nothing,nothing,nothing,nothing,
  [ 1, 38, 15, 52, 29, 6, 43, 20, 57, 34, 11, 48, 25, 2, 39, 16, 53, 30, 7,
      44, 21, 58, 35, 12, 49, 26, 3, 40, 17, 54, 31, 8, 45, 22, 59, 36, 13,
      50, 27, 4, 41, 18, 55, 32, 9, 46, 23, 60, 37, 14, 51, 28, 5, 42, 19,
      56, 33, 10, 47, 24, 61, 68, 75, 82, 89, 66, 73, 80, 87, 64, 71, 78, 85,
      62, 69, 76, 83, 90, 67, 74, 81, 88, 65, 72, 79, 86, 63, 70, 77, 84, 91,
      128, 105, 142, 119, 96, 133, 110, 147, 124, 101, 138, 115, 92, 129,
      106, 143, 120, 97, 134, 111, 148, 125, 102, 139, 116, 93, 130, 107,
      144, 121, 98, 135, 112, 149, 126, 103, 140, 117, 94, 131, 108, 145,
      122, 99, 136, 113, 150, 127, 104, 141, 118, 95, 132, 109, 146, 123,
      100, 137, 114, 211, 248, 225, 262, 239, 216, 253, 230, 267, 244, 221,
      258, 235, 212, 249, 226, 263, 240, 217, 254, 231, 268, 245, 222, 259,
      236, 213, 250, 227, 264, 241, 218, 255, 232, 269, 246, 223, 260, 237,
      214, 251, 228, 265, 242, 219, 256, 233, 270, 247, 224, 261, 238, 215,
      252, 229, 266, 243, 220, 257, 234, 199, 176, 153, 190, 167, 204, 181,
      158, 195, 172, 209, 186, 163, 200, 177, 154, 191, 168, 205, 182, 159,
      196, 173, 210, 187, 164, 201, 178, 155, 192, 169, 206, 183, 160, 197,
      174, 151, 188, 165, 202, 179, 156, 193, 170, 207, 184, 161, 198, 175,
      152, 189, 166, 203, 180, 157, 194, 171, 208, 185, 162 ],nothing,nothing,nothing,
  [ 1, 42, 23, 4, 45, 26, 7, 48, 29, 10, 51, 32, 13, 54, 35, 16, 57, 38, 19,
      60, 41, 22, 3, 44, 25, 6, 47, 28, 9, 50, 31, 12, 53, 34, 15, 56, 37,
      18, 59, 40, 21, 2, 43, 24, 5, 46, 27, 8, 49, 30, 11, 52, 33, 14, 55,
      36, 17, 58, 39, 20, 61, 72, 83, 64, 75, 86, 67, 78, 89, 70, 81, 62, 73,
      84, 65, 76, 87, 68, 79, 90, 71, 82, 63, 74, 85, 66, 77, 88, 69, 80,
      131, 112, 93, 134, 115, 96, 137, 118, 99, 140, 121, 102, 143, 124, 105,
      146, 127, 108, 149, 130, 111, 92, 133, 114, 95, 136, 117, 98, 139, 120,
      101, 142, 123, 104, 145, 126, 107, 148, 129, 110, 91, 132, 113, 94,
      135, 116, 97, 138, 119, 100, 141, 122, 103, 144, 125, 106, 147, 128,
      109, 150, 151, 192, 173, 154, 195, 176, 157, 198, 179, 160, 201, 182,
      163, 204, 185, 166, 207, 188, 169, 210, 191, 172, 153, 194, 175, 156,
      197, 178, 159, 200, 181, 162, 203, 184, 165, 206, 187, 168, 209, 190,
      171, 152, 193, 174, 155, 196, 177, 158, 199, 180, 161, 202, 183, 164,
      205, 186, 167, 208, 189, 170, 211, 252, 233, 214, 255, 236, 217, 258,
      239, 220, 261, 242, 223, 264, 245, 226, 267, 248, 229, 270, 251, 232,
      213, 254, 235, 216, 257, 238, 219, 260, 241, 222, 263, 244, 225, 266,
      247, 228, 269, 250, 231, 212, 253, 234, 215, 256, 237, 218, 259, 240,
      221, 262, 243, 224, 265, 246, 227, 268, 249, 230 ],nothing,
  [ 1, 44, 27, 10, 53, 36, 19, 2, 45, 28, 11, 54, 37, 20, 3, 46, 29, 12, 55,
      38, 21, 4, 47, 30, 13, 56, 39, 22, 5, 48, 31, 14, 57, 40, 23, 6, 49,
      32, 15, 58, 41, 24, 7, 50, 33, 16, 59, 42, 25, 8, 51, 34, 17, 60, 43,
      26, 9, 52, 35, 18, 61, 74, 87, 70, 83, 66, 79, 62, 75, 88, 71, 84, 67,
      80, 63, 76, 89, 72, 85, 68, 81, 64, 77, 90, 73, 86, 69, 82, 65, 78, 91,
      134, 117, 100, 143, 126, 109, 92, 135, 118, 101, 144, 127, 110, 93,
      136, 119, 102, 145, 128, 111, 94, 137, 120, 103, 146, 129, 112, 95,
      138, 121, 104, 147, 130, 113, 96, 139, 122, 105, 148, 131, 114, 97,
      140, 123, 106, 149, 132, 115, 98, 141, 124, 107, 150, 133, 116, 99,
      142, 125, 108, 247, 230, 213, 256, 239, 222, 265, 248, 231, 214, 257,
      240, 223, 266, 249, 232, 215, 258, 241, 224, 267, 250, 233, 216, 259,
      242, 225, 268, 251, 234, 217, 260, 243, 226, 269, 252, 235, 218, 261,
      244, 227, 270, 253, 236, 219, 262, 245, 228, 211, 254, 237, 220, 263,
      246, 229, 212, 255, 238, 221, 264, 151, 194, 177, 160, 203, 186, 169,
      152, 195, 178, 161, 204, 187, 170, 153, 196, 179, 162, 205, 188, 171,
      154, 197, 180, 163, 206, 189, 172, 155, 198, 181, 164, 207, 190, 173,
      156, 199, 182, 165, 208, 191, 174, 157, 200, 183, 166, 209, 192, 175,
      158, 201, 184, 167, 210, 193, 176, 159, 202, 185, 168 ],nothing,nothing,nothing,
  [ 1, 48, 35, 22, 9, 56, 43, 30, 17, 4, 51, 38, 25, 12, 59, 46, 33, 20, 7,
      54, 41, 28, 15, 2, 49, 36, 23, 10, 57, 44, 31, 18, 5, 52, 39, 26, 13,
      60, 47, 34, 21, 8, 55, 42, 29, 16, 3, 50, 37, 24, 11, 58, 45, 32, 19,
      6, 53, 40, 27, 14, 61, 78, 65, 82, 69, 86, 73, 90, 77, 64, 81, 68, 85,
      72, 89, 76, 63, 80, 67, 84, 71, 88, 75, 62, 79, 66, 83, 70, 87, 74,
      131, 118, 105, 92, 139, 126, 113, 100, 147, 134, 121, 108, 95, 142,
      129, 116, 103, 150, 137, 124, 111, 98, 145, 132, 119, 106, 93, 140,
      127, 114, 101, 148, 135, 122, 109, 96, 143, 130, 117, 104, 91, 138,
      125, 112, 99, 146, 133, 120, 107, 94, 141, 128, 115, 102, 149, 136,
      123, 110, 97, 144, 211, 258, 245, 232, 219, 266, 253, 240, 227, 214,
      261, 248, 235, 222, 269, 256, 243, 230, 217, 264, 251, 238, 225, 212,
      259, 246, 233, 220, 267, 254, 241, 228, 215, 262, 249, 236, 223, 270,
      257, 244, 231, 218, 265, 252, 239, 226, 213, 260, 247, 234, 221, 268,
      255, 242, 229, 216, 263, 250, 237, 224, 199, 186, 173, 160, 207, 194,
      181, 168, 155, 202, 189, 176, 163, 210, 197, 184, 171, 158, 205, 192,
      179, 166, 153, 200, 187, 174, 161, 208, 195, 182, 169, 156, 203, 190,
      177, 164, 151, 198, 185, 172, 159, 206, 193, 180, 167, 154, 201, 188,
      175, 162, 209, 196, 183, 170, 157, 204, 191, 178, 165, 152 ],nothing,nothing,nothing,nothing,nothing,
  [ 1, 54, 47, 40, 33, 26, 19, 12, 5, 58, 51, 44, 37, 30, 23, 16, 9, 2, 55,
      48, 41, 34, 27, 20, 13, 6, 59, 52, 45, 38, 31, 24, 17, 10, 3, 56, 49,
      42, 35, 28, 21, 14, 7, 60, 53, 46, 39, 32, 25, 18, 11, 4, 57, 50, 43,
      36, 29, 22, 15, 8, 61, 84, 77, 70, 63, 86, 79, 72, 65, 88, 81, 74, 67,
      90, 83, 76, 69, 62, 85, 78, 71, 64, 87, 80, 73, 66, 89, 82, 75, 68,
      131, 124, 117, 110, 103, 96, 149, 142, 135, 128, 121, 114, 107, 100,
      93, 146, 139, 132, 125, 118, 111, 104, 97, 150, 143, 136, 129, 122,
      115, 108, 101, 94, 147, 140, 133, 126, 119, 112, 105, 98, 91, 144, 137,
      130, 123, 116, 109, 102, 95, 148, 141, 134, 127, 120, 113, 106, 99, 92,
      145, 138, 247, 240, 233, 226, 219, 212, 265, 258, 251, 244, 237, 230,
      223, 216, 269, 262, 255, 248, 241, 234, 227, 220, 213, 266, 259, 252,
      245, 238, 231, 224, 217, 270, 263, 256, 249, 242, 235, 228, 221, 214,
      267, 260, 253, 246, 239, 232, 225, 218, 211, 264, 257, 250, 243, 236,
      229, 222, 215, 268, 261, 254, 151, 204, 197, 190, 183, 176, 169, 162,
      155, 208, 201, 194, 187, 180, 173, 166, 159, 152, 205, 198, 191, 184,
      177, 170, 163, 156, 209, 202, 195, 188, 181, 174, 167, 160, 153, 206,
      199, 192, 185, 178, 171, 164, 157, 210, 203, 196, 189, 182, 175, 168,
      161, 154, 207, 200, 193, 186, 179, 172, 165, 158 ],nothing,nothing,nothing,nothing,nothing,
  [ 1, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44,
      43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26,
      25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8,
      7, 6, 5, 4, 3, 2, 61, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79,
      78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62,
      131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118,
      117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104,
      103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 150, 149, 148,
      147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134,
      133, 132, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188,
      187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174,
      173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160,
      159, 158, 157, 156, 155, 154, 153, 152, 151, 210, 209, 208, 207, 206,
      205, 204, 203, 202, 201, 200, 247, 246, 245, 244, 243, 242, 241, 240,
      239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226,
      225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212,
      211, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258,
      257, 256, 255, 254, 253, 252, 251, 250, 249, 248 ]]]

chevieset(:G4_22, :PowerMaps, function (ST)
  l=chevieget(:G4_22, :indexclasses)(ST)
  res=copy(PowerMaps4_22[G4_22type(ST)])
  for (i,x) in enumerate(res)
    if isnothing(x) continue end
    res[i]=indexin(x[l],l)
#   if res[i]==eachindex(l) || res[i] in res[1:i-1] res[i]=nothing end
  end
  res[1:findlast(!isnothing,res)]
end)

deleteat(l,i)=deleteat!(collect(l),i)

chevieset(:G4_22,:HeckeCharTable,function(ST,para,rt) # rt is not yet used
  X,Y,Z=chevieget(:G4_22, :ParamSpecialization)(ST, para)
  c24=combinations(1:4, 2)
  c23=[[2, 3], [1, 3], [1, 2]]
  c25=combinations(1:5, 2)
  c35=combinations(1:5, 3)
  c=prod(prod,para)
# for c a vector, e an integer vector same length returns c.*(E(n,p)*x^(1/n)).^e
# The point is to avoid unnecessary root extractions in case
# gcd(n,gcd(e[findall(!=(0),c)]))>1
  function evaluate(c, e, x, n, p)
    r=n
    for (cc,ee) in zip(c,e) if cc!=0 r=gcd(r,ee) end end
    rt=root(x,div(n,r))*E(n,p*r)
    map((cc,ee)->cc*rt^div(ee,r),c,e)
  end
  res=Dict{Symbol, Any}(:name=>string("H(G",ST,")"),:ST=>ST,:parameter=>
    para,:dim=>2,:reflclasses =>[3])
  merge!(res, chevieget(:G4_22, :ClassInfo)(ST))
  res[:size] = prod(chevieget(:G4_22,:ReflectionDegrees)(ST))
  res[:order] = res[:size]
  res[:identifier] = res[:name]
  res[:centralizers] = div.(res[:size],res[:classes])
  merge!(res,chevieget(:G4_22,:CharInfo)(ST))
  classes=chevieget(:G4_22, :malleclasses)(ST)[res[:indexclasses]]
  rows=map(chevieget(:G4_22, :mallechars)(ST))do char
    if char[1]==1 l=[1,X[char[2]],Y[char[3]],Z[char[4]]]
      pl=prod(l[2:4])
      if ST in 8:22 push!(l,l[4]^2) end
      return map(class->l[class[1]]*pl^class[2],classes)
    end
    if ST in 4:7
      if     char[1]==2 l=[2,X,deleteat(Y,char[3]), deleteat(Z,char[4])]
      elseif char[1]==3 l=[3,X[[1,2,char[3]]],Y,Z]
      end
    elseif ST in 8:15
      if     char[1]==2 l=[2,X,Y[c23[char[3]]],Z[c24[char[4]]]]
      elseif char[1]==3 l=[3,X[[1,2,char[3]]],Y,deleteat(Z,char[4])]
      elseif char[1]==4 l=[4,X[[1,2,1,2]],Y[[1,2,3,char[3]]],Z]
      end
      push!(l,l[4].^2)
    elseif ST in 16:22
      if     char[1]==2 l=[2,X,Y[c23[char[3]]],Z[c25[char[4]]]]
      elseif char[1]==3 l=[3,X[[1,2,char[3]]],Y,Z[c35[char[4]]]]
      elseif char[1]==4 l=[4,X[[1,2,1,2]],Y[[1,2,3,char[3]]],deleteat(Z,char[4])]
      elseif char[1]==5 l=[5,X[[1,2,1,2,char[3]]],vcat(Y,Y[c23[char[4]]]),Z]
      elseif char[1]==6 l=[6,X[[1,2,1,2,1,2]],Y[[1,2,3,1,2,3]],
                             Z[[1,2,3,4,5,char[3]]]]
      end
      push!(l,l[4].^2)
    end
    evaluate(Iterators.map(class->sum(l[class[1]]), classes),
             Iterators.map(c->c[2],classes),prod(prod,l[2:4]),char[1],char[2])
  end
# tests if res=Chartable(Hecke(G_ST,res[:parameter])) is correct
# where rows=irrs for generic group (G7, G11 or G19)
# and i is the rows selector (indexchars) to test.
# checks that allunique(selected rows); otherwise picks differents rows
# and sets indexchars
  function test_indexchars(res,rows,i)
    ST=res[:ST]
    T(ST)=string("G",G4_22Generic(ST))
    if haskey(G4_22IndexChars_dict[ST],res[:parameter])
  #   InfoChevie("IndexChars(Hecke(G_$ST,",
  #              HeckeAlgebras.simplify_para(res[:parameter]),"))\n")
      ic=G4_22IndexChars_dict[ST][res[:parameter]]
      res[:irreducibles]=rows[ic]
      if ic!=i
        println("*** WARNING: choice of character restrictions from ", T(ST),
          " for this specialization does not agree with group CharTable")
        if !CHEVIE[:CheckIndexChars]
          print("Try again with CHEVIE[:CheckIndexChars]=true\n")
        end
      end
      return ic
    end
    ic=i
    res[:irreducibles]=rows[ic]
    if length(Set(res[:irreducibles]))==length(res[:classes]) l=i
    else
      l=map(x->findfirst(==(x),rows), rows)
      if length(Set(l))!=length(res[:classes])
        error("specialization not semi-simple")
      end
      xprintln("*** WARNING: bad choice of char. restrictions from ",T(ST),
               " for H(G$ST,",HeckeAlgebras.simplify_para(res[:parameter]),")")
      if !CHEVIE[:CheckIndexChars]
        print("Try again with CHEVIE[:CheckIndexChars]=true\n")
      end
   #  l=map(x->filter(i->l[i]==x,eachindex(l)), sort(unique(l)))
      l=map(x->findall(==(x),l), unique(sort(l)))
      o=filter(x->count(j->j in x,i)>1,l)
    # println(" over-represented by ", intersect(union(o...), i)," : ", o)
    # println(" absent : ",filter(x->iszero(count(j->j in x,i)),l))
      l=first.(l)
      o=filter(p->first(p)!=last(p),collect(zip(i,l)))
      println("changing choice ",join(first.(o),",")," → ",join(last.(o),","))
    # println(" Choosing ",l)
      res[:irreducibles]=rows[l]
    end
    G4_22IndexChars_dict[ST][res[:parameter]]=l
  end
  ci=test_indexchars(res,rows,res[:indexchars])
  res[:irreducibles]=toM(res[:irreducibles])
  if ci!=true res[:indexchars]=ci end
  res
end)

chevieset(:G4_22,:CharTable,function(ST)
  para=map(x->E.(x,0:x-1),chevieget(:G4_22, :ordergens)(ST))
  chevieget(:G4_22,:HeckeCharTable)(ST,para,[])
end)

const CharInfo4_22=[
  Dict{Symbol, Any}(:charparams=>[[1,0],[1,4],[1,8],[2,5],[2,3],[2,1],[3,2]],
    :extRefl=>[1, 6, 2],
    :indexchars=>vcat(1:3,34:37),
    :a=>[0, 4, 4, 4, 1, 1, 2],
    :A=>[0, 8, 8, 8, 5, 5, 6]),
  Dict{Symbol, Any}(:charparams=>[[1,0],[1,4,1],[1,8,1],[1,4,2],[1,8,2],
    [1,12,1],[1,8,3],[1,12,2],[1,16],[2,9],[2,7,1],[2,5,1],[2,7,2],[2,5,2],
    [2,3,1],[2,5,3],[2,3,2],[2,1],[3,4],[3,2],[3,6]],
# The labelling above is as follows:
#  The following pairs are conjugate:
# (phi{1,8}'',phi{1,16}) (phi{1,4}',phi{1,8}') (phi{1,4}'',phi{1,8}''')
# (phi{1,12}',phi{1,12}'') (phi{2,5}',phi{2,7}')
# (phi{2,7}'',phi{2,5}''') (phi{2,5}'',phi{2,1}') (phi{2,3}',phi{2,3''})
# The following characters take the following values on the first reflection:
# phi{1,4}'->1, phi{1,12}'->E(3), phi{2,5}'->-1, phi{2,3}'->-E(3)
    :extRefl=>[1, 18, 5],
    :indexchars=>vcat(10:27, [37, 39, 41]),
    :hgal=>perm"(19,21,20)",
    :a=>[0,1,1,1,8,8,1,8,8,8,4,4,4,1,1,4,1,1,8//3,8//3,8//3],
  :A=>[0,11,11,11,16,16,11,16,16,16,14,14,14,11,11,14,11,11,40//3,40//3,40//3]),
  Dict{Symbol, Any}(:charparams=>[[1,0],[1,4],[1,8],[1,6],[1,10],[1,14],
                   [2,5,2],[2,3,2],[2,3,1],[2,7],[2,1],[2,5,1],[3,2],[3,4]],
# The labelling above and for G14 is such that the character in a pair with
# the smallest degree of the fakedegree gets a ', the other a ''
    :extRefl=>[1, 11, 5],
    :indexchars=>vcat(1:3, 10:12, [19, 35, 33, 28, 24, 26, 37, 38]),
    :hgal=>perm"(7,10)",
    :a=>[0, 1, 1, 1, 10, 10, 5, 1, 1, 5, 1, 1, 1, 4],
    :A=>[0, 11, 11, 11, 14, 14, 13, 11, 11, 13, 11, 11, 11, 12]),
Dict{Symbol,  Any}(:charparams=>[[1, 0], [1,  4, 1], [1,  8, 1], [1, 4, 2],
[1,  8, 2], [1, 12, 1], [1, 8, 3], [1, 12, 2], [1, 16], [1, 6], [1, 10, 1],
[1, 14, 1], [1, 10, 2], [1, 14, 2], [1, 18, 1], [1, 14, 3], [1, 18, 2], [1,
22],  [2, 9, 1], [2, 7, 1],  [2, 11, 1], [2, 7, 2],  [2, 11, 2], [2, 9, 2],
[2,  11, 3], [2, 9, 3], [2, 7, 3], [2,  15], [2, 13, 1], [2, 5, 1], [2, 13,
2],  [2, 5, 2], [2, 3, 1],  [2, 5, 3], [2, 3, 2],  [2, 1], [3, 10], [3, 4],
[3, 2], [3, 8], [3, 6], [3, 12]],
    :extRefl=>[1, 36, 14],
    :indexchars=>1:42,
    :hgal=>perm"(19,28)(23,32)(24,33)(26,35)(27,36)(37,39,41)",
    :a=>[0,1,1,1,4,4,1,4,4,1,4,4,4,14,14,4,14,14,9,4,4,4,3//2,3//2,4,3//2,3//2,
         9,4,4,4,3//2,3//2,4,3//2,3//2,7//3,4,7//3,4,7//3,4],
    :A=>[0,11,11,11,20,20,11,20,20,11,20,20,20,22,22,20,22,22,21,20,20,20,
         33//2,33//2,20,33//2,33//2,21,20,20,20,33//2,33//2,20,33//2,33//2,
         53//3,20,53//3,20,53//3,20]),
  Dict{Symbol, Any}(:charparams=>[[1,0],[1,6],[1,12],[1,18],[2,1],[2,4],
         [2,7,1],[2,7,2],[2,10],[2,13],[3,8],[3,6],[3,4],[3,2],[4,5],[4,3]],
    :extRefl=>[1, 5, 2],
    :indexchars=>vcat(21:30, 81:84, [89, 86]),
    :hgal=>perm"(15,16)",
    :a=>[0, 6, 6, 6, 1, 1, 1, 6, 6, 6, 6, 2, 2, 2, 3, 3],
    :A=>[0, 18, 18, 18, 11, 11, 11, 18, 18, 18, 18, 14, 14, 14, 15, 15]),
Dict{Symbol, Any}(:charparams=>[[1, 0], [1, 6], [1, 12, 1], [1, 18, 1], [1,
12, 2], [1, 18, 2], [1, 24], [1, 30], [2, 5], [2, 4], [2, 7, 1], [2, 7, 2],
[2, 10], [2, 13], [2, 1], [2, 14], [2, 17], [2, 11, 1], [2, 11, 2], [2, 8],
[3,  8, 1], [3, 6, 1], [3, 4], [3, 2],  [3, 12], [3, 10], [3, 8, 2], [3, 6,
2], [4, 9], [4, 7], [4, 3], [4, 5]],
    :extRefl=>[1, 15, 6],
    :indexchars=>vcat(1:4,21:26,57:59,[54,55,35,36,39,40,44],77:85,[88,93,95]),
    :hgal=>perm"(12,19)(13,16)(14,17)(29,31,32,30)",
:a=>[0,  1, 1, 1, 1, 18, 18, 18, 1, 1, 1,  15 // 2, 15 // 2, 15 // 2, 1, 15
// 2, 15 // 2, 1, 15 // 2, 1, 5, 1, 1, 1, 11, 5, 5, 5, 15 // 4, 15 // 4, 15
// 4, 15 // 4],
:A=>[0,  23, 23, 23, 23, 30, 30, 30, 23, 23, 23, 57 // 2, 57 // 2, 57 // 2,
23,  57 // 2, 57 // 2, 23, 57 // 2, 23, 27, 23, 23, 23, 29, 27, 27, 27, 105
// 4, 105 // 4, 105 // 4, 105 // 4]),
Dict{Symbol,  Any}(:charparams=>[[1, 0], [1, 6], [1,  12], [1, 18], [1, 8],
[1,  14], [1, 20], [1, 26], [1, 16], [1, 22], [1, 28], [1, 34], [2, 9], [2,
12],  [2, 15, 1], [2, 15, 2], [2, 18], [2, 21], [2, 5], [2, 8], [2, 11, 1],
[2,  11, 2], [2, 14],  [2, 17], [2, 1],  [2, 4], [2, 7,  1], [2, 7, 2], [2,
10],  [2, 13], [3, 8, 2], [3, 14], [3,  8, 1], [3, 2], [3, 16], [3, 10, 2],
[3,  4], [3, 10, 1], [3, 12, 2], [3, 6,  2], [3, 12, 1], [3, 6, 1], [4, 9],
[4, 11], [4, 7], [4, 3], [4, 5], [4, 13]],
    :extRefl=>[1, 25, 6],
    :indexchars=>vcat(13:42, 65:72, 77:79, 84:90),
    :hgal=>perm"(31,35,39)(32,40,36)(33,41,37)(34,42,38)(43,46)",
:a=>[0,  1, 1, 1, 1, 14, 14, 14, 1, 14,  14, 14, 5, 5, 5, 14, 14, 14, 1, 1,
1,  5, 5, 5, 1, 1, 1, 5, 5, 5, 8, 3, 3,  3, 8, 3, 3, 3, 8, 3, 3, 3, 5 // 2,
5, 5, 5 // 2, 5, 5],
:A=>[0, 23, 23, 23, 23, 34, 34, 34, 23, 34, 34, 34, 31, 31, 31, 34, 34, 34,
23, 23, 23, 31, 31, 31, 23, 23, 23, 31, 31, 31, 32, 29, 29, 29, 32, 29, 29,
29, 32, 29, 29, 29, 55 // 2, 31, 31, 55 // 2, 31, 31]),
Dict{Symbol, Any}(:charparams=>[[1, 0], [1, 6], [1, 12, 1], [1, 18, 1], [1,
8],  [1, 14], [1, 20, 1], [1, 26, 1], [1, 16], [1, 22], [1, 28, 1], [1, 34,
1],  [1, 12, 2], [1, 18, 2], [1, 24],  [1, 30], [1, 20, 2], [1, 26, 2], [1,
32],  [1, 38], [1, 28, 2],  [1, 34, 2], [1, 40],  [1, 46], [2, 9], [2, 12],
[2,  27, 1], [2, 27, 2], [2, 18], [2, 33], [2, 5], [2, 20], [2, 11, 1], [2,
11,  2], [2, 14], [2, 29],  [2, 1], [2, 4], [2,  7, 1], [2, 7, 2], [2, 22],
[2,  25], [2, 21, 1], [2, 24], [2, 15, 1], [2, 15, 2], [2, 30], [2, 21, 2],
[2,  17, 1], [2, 8], [2,  23, 1], [2, 23, 2],  [2, 26], [2, 17, 2], [2, 13,
1],  [2, 16], [2, 19, 1],  [2, 19, 2], [2, 10],  [2, 13, 2], [3, 8, 1], [3,
14, 1], [3, 20, 1], [3, 2], [3, 20, 2], [3, 26], [3, 8, 2], [3, 14, 2], [3,
16,  1], [3, 22, 1], [3,  4], [3, 10, 1], [3,  28], [3, 10, 2], [3, 16, 2],
[3,  22, 2], [3, 24, 1], [3, 6, 2], [3, 12, 1], [3, 18, 1], [3, 12, 2], [3,
18,  2], [3, 24, 2], [3, 6, 1], [4,  21], [4, 23], [4, 19], [4, 3], [4, 5],
[4, 25], [4, 9], [4, 11], [4, 7], [4, 15], [4, 17], [4, 13]],
    :extRefl=>[1, 37, 18],
    :indexchars=>1:96,
    :hgal=>perm"(28,46)(29,47)(30,48)(31,49)(32,50)(33,51)(37,55)(38,56)(39,57)(62,70,78)(63,71,79)(64,72,80)(65,81,73)(85,88,91,94)",
:a=>[0,  1, 1, 1, 1, 5, 5, 5, 1, 5, 5, 5, 1, 5, 5, 5, 5, 26, 26, 26, 5, 26,
26,  26, 5, 5, 5, 15, 15, 15, 3 // 2, 3 // 2, 3 // 2, 5, 5, 5, 3 // 2, 3 //
2, 3 // 2, 5, 5, 5, 5, 5, 5, 15, 15, 15, 3 // 2, 3 // 2, 3 // 2, 5, 5, 5, 3
// 2, 3 // 2, 3 // 2, 5, 5, 5, 5, 7 // 3, 7 // 3, 7 // 3, 12, 5, 5, 5, 5, 7
//  3, 7 // 3, 7 // 3, 12, 5, 5, 5, 5, 7 // 3, 7 // 3, 7 // 3, 12, 5, 5, 5,
13 // 4, 5, 5, 13 // 4, 5, 5, 13 // 4, 5, 5, 13 // 4, 5, 5],
:A=>[0, 23, 23, 23, 23, 43, 43, 43, 23, 43, 43, 43, 23, 43, 43, 43, 43, 46,
46,  46, 43, 46, 46, 46, 43, 43, 43, 45, 45, 45, 69 // 2, 69 // 2, 69 // 2,
43,  43, 43, 69 // 2, 69 // 2, 69 // 2, 43, 43, 43, 43, 43, 43, 45, 45, 45,
69  // 2, 69 // 2, 69 // 2, 43, 43, 43,  69 // 2, 69 // 2, 69 // 2, 43, 43,
43,  43, 113 // 3, 113 // 3, 113 // 3, 44, 43, 43, 43, 43, 113 // 3, 113 //
3,  113 // 3, 44, 43, 43, 43, 43, 113 // 3, 113 // 3, 113 // 3, 44, 43, 43,
43,  155 // 4, 43,  43, 155 // 4,  43, 43, 155 //  4, 43, 43, 155 // 4, 43,
43]),
  Dict{Symbol, Any}(:charparams=>[[1,0],[1,12],[2,1],[2,4],[2,5],[3,2],[3,6],[4,3]],
    :extRefl=>[1, 3, 2],
    :indexchars=>[1, 13, 25, 26, 30, 61, 65, 85],
    :hgal=>perm"(3,5)",
    :a=>[0, 12, 2, 2, 2, 1, 5, 2],
    :A=>[0, 12, 10, 10, 10, 7, 11, 10]),
Dict{Symbol,  Any}(:charparams=>[[1, 0], [1,  6], [1, 12],  [1, 18], [2, 7,
1], [2, 4], [2, 1], [2, 5], [2, 10], [2, 7, 2], [3, 4], [3, 2], [3, 8], [3,
6], [4, 3], [4, 5]],
    :extRefl=>[1, 7, 4],
    :indexchars=>[1, 2, 13, 14, 37, 26, 27, 28, 29, 30, 61, 62, 65, 66, 85, 86],
    :hgal=>perm"( 5, 8,10, 7)(15,16)",
    :a=>[0,1,7,18,5//2,1,5//2,5//2,7,5//2,2,1,7,4,5//2,5//2],
    :A=>[0,11,17,18,31//2,11,31//2,31//2,17,31//2,14,11,17,16,31//2,31//2]),
Dict{Symbol,  Any}(:charparams=>[[1, 0], [1, 8], [1, 16], [1, 12], [1, 20],
[1, 28], [2, 15], [2, 12], [2, 9], [2, 11], [2, 8], [2, 5], [2, 7], [2, 4],
[2,  1], [3, 2], [3, 8], [3, 4], [3, 10], [3, 6, 1], [3, 6, 2], [4, 3], [4,
5], [4, 7]],
    :extRefl=>[1, 15, 5],
    :indexchars=>vcat([1,5,9,13,17,21,25,26],30:33,37:39,[62,65,69,73,77,81],85:87),
    :hgal=>perm"( 7, 9)(17,21,19)",
    :a=>[0,1,1,1,20,20,9,9,9,1,1,1,1,1,1,1,6,1,6,1,6,1,5,5],
    :A=>[0,23,23,23,28,28,27,27,27,23,23,23,23,23,23,23,26,23,26,23,26,23,25,25]),
Dict{Symbol,  Any}(:charparams=>[[1, 0], [1, 6], [1,  8], [1, 14], [1, 16],
[1,  22], [1, 12], [1, 18], [1, 20], [1, 26], [1, 28], [1, 34], [2, 9], [2,
12],  [2, 15, 1], [2, 15, 2], [2, 18], [2, 21], [2, 5], [2, 8], [2, 11, 2],
[2,  11, 1], [2, 14],  [2, 17], [2, 1],  [2, 4], [2, 7,  2], [2, 7, 1], [2,
10],  [2, 13], [3, 8, 1],  [3, 2], [3, 8, 2],  [3, 14], [3, 4], [3, 10, 1],
[3,  16], [3, 10, 2], [3, 12, 1], [3, 6, 1], [3, 12, 2], [3, 6, 2], [4, 9],
[4, 11], [4, 7], [4, 3], [4, 5], [4, 13]],
    :extRefl=>[1, 25, 10],
    :indexchars=>vcat(3:6,[9,10],15:18,23:42,[61], 64:66, 71:74, 79:82, 85:90),
    :hgal=>perm"(13,16,18,15)(19,22,24,21)(25,28,30,27)(31,39,35)(32,36,40)(33,37,41)(43,46)",
:a=>[0,  1, 1, 5, 1, 5, 1, 5, 15, 26, 15, 26, 19 // 2, 5, 19 // 2, 19 // 2,
15,  19 // 2, 2, 1, 2, 2, 5, 2, 2, 1, 2,  2, 5, 2, 3, 5 // 3, 8, 5, 3, 5 //
3, 8, 5, 3, 5 // 3, 8, 5, 2, 5, 5, 2, 5, 5],
:A=>[0,  11, 23, 31, 23, 31, 23, 31, 33, 34,  33, 34, 65 // 2, 31, 65 // 2,
65  // 2, 33, 65 // 2, 28, 23, 28,  28, 31, 28, 28, 23, 28, 28, 31, 28, 29,
79  // 3, 32, 31, 29, 79 // 3, 32, 31, 29, 79 // 3, 32, 31, 28, 31, 31, 28,
31, 31]),
  Dict{Symbol, Any}(:indexchars=>vcat(1:5, 81:100, 151:155, 166:170, [211, 217, 228, 229], 240:245),
    :extRefl=>[1, 6, 2],
:charparams=>[[1,  0], [1, 12], [1, 24], [1,  36], [1, 48], [2, 1], [2, 7],
[2, 13, 1], [2, 19, 1], [2, 13, 2], [2, 19, 2], [2, 25, 2], [2, 25, 1], [2,
31],  [2, 37], [3, 2], [3, 6], [3, 10,  2], [3, 10, 1], [3, 14, 1], [3, 18,
1], [3, 14, 2], [3, 18, 2], [3, 22], [3, 26], [4, 15], [4, 17], [4, 9], [4,
11],  [4, 3], [4, 20], [4,  12], [4, 14], [4, 6],  [4, 8], [5, 12], [5, 4],
[5, 16], [5, 8], [5, 10], [6, 5], [6, 7], [6, 9], [6, 11], [6, 13]],
    :hgal=>perm"(27,32)(28,33)(29,34)(30,35)(36,37,38,39,40)",
:a=>[0,  12, 12, 12, 12, 1, 1, 1, 1, 12, 12, 12, 12, 12, 12, 2, 2, 2, 2, 2,
2,  12, 12, 12, 12, 12, 7 // 2, 7 // 2, 7 // 2, 7 // 2, 12, 7 // 2, 7 // 2,
7  // 2, 7 // 2, 24 // 5,  24 // 5, 24 // 5, 24 //  5, 24 // 5, 2, 6, 6, 6,
6],
:A=>[0, 48, 48, 48, 48, 29, 29, 29, 29, 48, 48, 48, 48, 48, 48, 38, 38, 38,
38,  38, 38, 48, 48, 48, 48, 48, 83 // 2, 83 // 2, 83 // 2, 83 // 2, 48, 83
//  2, 83 // 2, 83 // 2,  83 // 2, 216 // 5, 216  // 5, 216 // 5, 216 // 5,
216 // 5, 38, 44, 44, 44, 44]),
  Dict{Symbol, Any}(:indexchars=>vcat(11:20, [71, 32, 33, 84, 35, 86, 37, 38, 79, 40, 41, 62, 67, 68, 49, 70], [63, 54, 65, 56], 91:110, 151:155, 171:175, 181:185, 206:211, [214, 219, 220, 223, 226, 229, 232, 235, 238], 241:250),
    :extRefl=>[1, 21, 7],
:charparams=>[[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 30], [1, 42],
[1,  54], [1, 66], [1, 78],  [2, 11], [2, 17], [2,  13, 1], [2, 19, 1], [2,
13,  2], [2, 19, 2], [2, 25, 2], [2,  25, 1], [2, 31], [2, 37], [2, 1], [2,
7],  [2, 35, 2], [2, 35, 1], [2, 41],  [2, 47], [2, 23, 1], [2, 29, 1], [2,
23, 2], [2, 29, 2], [3, 2], [3, 6], [3, 10, 2], [3, 10, 1], [3, 14, 1], [3,
18, 1], [3, 14, 2], [3, 18, 2], [3, 22], [3, 26], [3, 12], [3, 16], [3, 20,
2],  [3, 20, 1], [3, 24,  1], [3, 28, 1], [3,  24, 2], [3, 28, 2], [3, 32],
[3,  36], [4, 15], [4, 27], [4, 19], [4, 11], [4, 3], [4, 30], [4, 22], [4,
14],  [4, 6], [4, 18], [4, 25], [4, 17], [4, 9], [4, 21], [4, 13], [4, 20],
[4,  12], [4, 24], [4, 16], [4, 8], [5,  12], [5, 22], [5, 4], [5, 14], [5,
16], [5, 26], [5, 8], [5, 18], [5, 20], [5, 10], [6, 15], [6, 17], [6, 19],
[6, 11], [6, 13], [6, 5], [6, 7], [6, 9], [6, 21], [6, 23]],
    :hgal=>perm"(15,29)(16,30)(17,23)(18,24)(19,25)(20,26)(51,61)(52,67,62,57)(53,68,63,58)(54,69,64,59)(55,70,65,60)(56,66)(71,79,77,75,73)(72,78,74,80,76)(81,86)",
:a=>[0,  1, 1, 1, 1, 1, 42, 42, 42, 42, 1, 1, 1, 1, 14, 14, 14, 14, 14, 14,
1,  1, 14, 14, 14, 14, 1, 1, 14, 14, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7,
7,  7, 7, 23, 23, 23, 23, 14, 19 // 4, 19 // 4, 19 // 4, 19 // 4, 14, 19 //
4,  19 // 4, 19 // 4, 19 // 4, 14, 19  // 4, 19 // 4, 19 // 4, 19 // 4, 14,
19  // 4, 19 // 4, 19 // 4, 19 // 4, 19 // 5, 10, 19 // 5, 10, 19 // 5, 10,
19 // 5, 10, 19 // 5, 10, 7 // 2, 7, 7, 7, 7, 7 // 2, 7, 7, 7, 7],
:A=>[0, 59, 59, 59, 59, 59, 78, 78, 78, 78, 59, 59, 59, 59, 76, 76, 76, 76,
76, 76, 59, 59, 76, 76, 76, 76, 59, 59, 76, 76, 59, 59, 59, 59, 59, 59, 73,
73, 73, 73, 73, 73, 73, 73, 73, 73, 77, 77, 77, 77, 76, 281 // 4, 281 // 4,
281  // 4, 281 // 4, 76, 281 // 4, 281 // 4, 281 // 4, 281 // 4, 76, 281 //
4,  281 // 4, 281 // 4, 281 // 4, 76,  281 // 4, 281 // 4, 281 // 4, 281 //
4,  341 // 5, 74, 341 //  5, 74, 341 // 5, 74,  341 // 5, 74, 341 // 5, 74,
133 // 2, 73, 73, 73, 73, 133 // 2, 73, 73, 73, 73]),
  Dict{Symbol, Any}(:indexchars=>vcat(1:15, 61:100, 111:120, 131:134, 135:140, 181:211, 215:219, 223:225, [229, 230, 231, 235], 239:255),
    :extRefl=>[1, 36, 7],
:charparams=>[[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 20], [1, 32],
[1, 44], [1, 56], [1, 68], [1, 40], [1, 52], [1, 64], [1, 76], [1, 88], [2,
21],  [2, 27], [2, 33, 1], [2, 39, 1],  [2, 33, 2], [2, 39, 2], [2, 45, 2],
[2, 45, 1], [2, 51], [2, 57], [2, 11], [2, 17], [2, 23, 1], [2, 29, 1], [2,
23,  2], [2, 29, 2], [2, 35, 2], [2,  35, 1], [2, 41], [2, 47], [2, 1], [2,
7], [2, 13, 1], [2, 19, 1], [2, 13, 2], [2, 19, 2], [2, 25, 2], [2, 25, 1],
[2,  31], [2, 37], [3, 2], [3, 26, 1],  [3, 20, 2], [3, 20, 1], [3, 14, 1],
[3,  38, 1], [3, 14, 2],  [3, 38, 2], [3, 32],  [3, 26, 2], [3, 22, 1], [3,
16],  [3, 10, 2], [3, 10,  1], [3, 34, 1], [3,  28, 1], [3, 34, 2], [3, 28,
2],  [3, 22, 2], [3, 46], [3, 12], [3,  6], [3, 30, 2], [3, 30, 1], [3, 24,
1], [3, 18, 1], [3, 24, 2], [3, 18, 2], [3, 42], [3, 36], [4, 15], [4, 27],
[4,  9], [4, 21], [4, 3], [4, 35], [4,  17], [4, 29], [4, 11], [4, 23], [4,
25], [4, 37], [4, 19], [4, 31], [4, 13], [4, 30], [4, 12], [4, 24], [4, 6],
[4,  18], [4, 20], [4, 32], [4, 14], [4, 26], [4, 8], [4, 40], [4, 22], [4,
34], [4, 16], [4, 28], [5, 12], [5, 32], [5, 22], [5, 24], [5, 14], [5, 4],
[5,  36], [5, 26], [5, 16], [5, 18], [5, 8], [5, 28], [5, 30], [5, 20], [5,
10],  [6, 25], [6, 7], [6, 19], [6, 31], [6, 13], [6, 5], [6, 17], [6, 29],
[6, 11], [6, 23], [6, 15], [6, 27], [6, 9], [6, 21], [6, 33]],
    :hgal=>perm"( 46, 66, 56)( 47, 67, 57)( 48, 68, 58)( 49, 69, 59)( 50, 70, 60)( 51, 71, 61)( 52, 62, 72)( 53, 63, 73)( 54, 64, 74)( 55, 65, 75)( 77, 92)( 78, 93)( 79, 94)( 80, 95)( 81, 96)( 86,101)(106,112,118,109,115)(107,116,110,119,113)(108,117,111,120,114)(121,126,131)",
:a=>[0,  1, 1, 1, 1, 1, 32, 32, 32, 32,  1, 32, 32, 32, 32, 7, 7, 7, 7, 32,
32,  32, 32, 32, 32, 1, 1, 1, 1, 7, 7, 7,  7, 7, 7, 1, 1, 1, 1, 7, 7, 7, 7,
7,  7, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 44 // 3, 44 //
3,  44 // 3, 44 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3,
44  // 3, 44 // 3, 44 // 3, 44 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10
//  3, 10 // 3, 44 // 3, 44 // 3, 44 // 3, 44 // 3, 7, 5 // 2, 5 // 2, 5 //
2,  5 // 2, 19, 7, 7, 7, 7, 19, 7, 7, 7, 7, 7, 5 // 2, 5 // 2, 5 // 2, 5 //
2,  19, 7, 7, 7, 7, 19, 7, 7, 7, 7, 12, 5, 5, 12, 5, 5, 12, 5, 5, 12, 5, 5,
12, 5, 5, 10 // 3, 7, 7, 7, 7, 10 // 3, 7, 7, 7, 7, 10 // 3, 7, 7, 7, 7],
:A=>[0, 59, 59, 59, 59, 59, 88, 88, 88, 88, 59, 88, 88, 88, 88, 83, 83, 83,
83, 88, 88, 88, 88, 88, 88, 59, 59, 59, 59, 83, 83, 83, 83, 83, 83, 59, 59,
59, 59, 83, 83, 83, 83, 83, 83, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 230
// 3, 230 // 3, 256 // 3, 256 // 3, 256 // 3, 256 // 3, 230 // 3, 230 // 3,
230  // 3, 230 // 3, 230 // 3, 230 //  3, 256 // 3, 256 // 3, 256 // 3, 256
// 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 256 // 3,
256  // 3, 256 // 3, 256 // 3, 83, 145  // 2, 145 // 2, 145 // 2, 145 // 2,
86,  83, 83, 83, 83, 86, 83, 83, 83, 83,  83, 145 // 2, 145 // 2, 145 // 2,
145  // 2, 86, 83, 83, 83, 83, 86, 83,  83, 83, 83, 84, 79, 79, 84, 79, 79,
84, 79, 79, 84, 79, 79, 84, 79, 79, 230 // 3, 83, 83, 83, 83, 230 // 3, 83,
83, 83, 83, 230 // 3, 83, 83, 83, 83]),
  Dict{Symbol, Any}(:indexchars=>1:270,
    :extRefl=>[1, 81, 22],
:charparams=>[[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 20], [1, 32],
[1, 44], [1, 56], [1, 68], [1, 40], [1, 52], [1, 64], [1, 76], [1, 88], [1,
30],  [1, 42], [1,  54], [1, 66],  [1, 78], [1,  50], [1, 62], [1, 74], [1,
86],  [1, 98], [1, 70], [1,  82], [1, 94], [1, 106],  [1, 118], [2, 51, 1],
[2, 57, 1], [2, 33, 1], [2, 39, 1], [2, 33, 2], [2, 39, 2], [2, 45, 2], [2,
45, 1], [2, 51, 2], [2, 57, 2], [2, 41, 1], [2, 47, 1], [2, 53, 1], [2, 59,
1], [2, 53, 2], [2, 59, 2], [2, 35, 2], [2, 35, 1], [2, 41, 2], [2, 47, 2],
[2, 31, 1], [2, 37, 1], [2, 43, 1], [2, 49, 1], [2, 43, 2], [2, 49, 2], [2,
55,  2], [2, 55, 1], [2, 31, 2], [2,  37, 2], [2, 21], [2, 27], [2, 63, 1],
[2,  69, 1], [2, 63, 2],  [2, 69, 2], [2, 75,  1], [2, 75, 2], [2, 81], [2,
87],  [2, 11], [2, 17], [2, 23, 1], [2, 29, 1], [2, 23, 2], [2, 29, 2], [2,
65,  2], [2, 65, 1], [2, 71], [2, 77],  [2, 1], [2, 7], [2, 13, 1], [2, 19,
1],  [2, 13, 2], [2, 19, 2], [2, 25,  2], [2, 25, 1], [2, 61], [2, 67], [3,
2], [3, 26, 1], [3, 50, 2], [3, 50, 1], [3, 14, 1], [3, 38, 1], [3, 14, 2],
[3,  38, 2], [3, 62], [3,  26, 2], [3, 32, 1],  [3, 56, 1], [3, 20, 2], [3,
20, 1], [3, 44, 1], [3, 68, 1], [3, 44, 2], [3, 68, 2], [3, 32, 2], [3, 56,
2], [3, 22, 1], [3, 46, 1], [3, 10, 2], [3, 10, 1], [3, 34, 1], [3, 58, 1],
[3,  34, 2], [3, 58, 2],  [3, 22, 2], [3, 46,  2], [3, 52, 1], [3, 16], [3,
40, 2], [3, 40, 1], [3, 64, 1], [3, 28, 1], [3, 64, 2], [3, 28, 2], [3, 52,
2],  [3, 76], [3, 42, 1],  [3, 6], [3, 30, 2],  [3, 30, 1], [3, 54, 1], [3,
18,  1], [3, 54, 2], [3, 18, 2], [3,  42, 2], [3, 66], [3, 12], [3, 36, 1],
[3, 60, 2], [3, 60, 1], [3, 24, 1], [3, 48, 1], [3, 24, 2], [3, 48, 2], [3,
72],  [3, 36, 2], [4, 15], [4, 27], [4,  39], [4, 51], [4, 3], [4, 35], [4,
47],  [4, 59], [4,  11], [4, 23],  [4, 55], [4,  67], [4, 19], [4, 31], [4,
43], [4, 30], [4, 42], [4, 54], [4, 6], [4, 18], [4, 50], [4, 62], [4, 14],
[4, 26], [4, 38], [4, 70], [4, 22], [4, 34], [4, 46], [4, 58], [4, 45], [4,
57], [4, 9], [4, 21], [4, 33], [4, 65], [4, 17], [4, 29], [4, 41], [4, 53],
[4, 25], [4, 37], [4, 49], [4, 61], [4, 13], [4, 60], [4, 12], [4, 24], [4,
36], [4, 48], [4, 20], [4, 32], [4, 44], [4, 56], [4, 8], [4, 40], [4, 52],
[4, 64], [4, 16], [4, 28], [5, 12], [5, 32], [5, 52], [5, 42], [5, 62], [5,
22], [5, 24], [5, 44], [5, 4], [5, 54], [5, 14], [5, 34], [5, 36], [5, 56],
[5,  16], [5, 66], [5, 26], [5, 46], [5, 48], [5, 8], [5, 28], [5, 18], [5,
38],  [5, 58], [5,  60], [5, 20],  [5, 40], [5,  30], [5, 50], [5, 10], [6,
25], [6, 7], [6, 49], [6, 61], [6, 43], [6, 35], [6, 17], [6, 59], [6, 11],
[6,  53], [6, 45], [6, 27], [6, 9], [6, 21], [6, 63], [6, 55], [6, 37], [6,
19], [6, 31], [6, 13], [6, 5], [6, 47], [6, 29], [6, 41], [6, 23], [6, 15],
[6, 57], [6, 39], [6, 51], [6, 33]],
    :hgal=>perm"( 35, 65)( 36, 66)( 37, 67)( 38, 68)( 39, 69)( 40, 70)( 41, 71)( 42, 72)( 43, 73)( 44, 74)( 51, 81)( 52, 82)( 53, 83)( 54, 84)( 91,111,131)( 92,112,132)( 93,113,133)( 94,114,134)( 95,115,135)( 96,116,136)(107,147,127)(108,148,128)(109,149,129)(110,150,130)(152,167,182,197)(153,168,183,198)(154,169,184,199)(155,170,185,200)(156,201,186,171)(161,206,191,176)(212,218,224,230,236)(213,219,225,231,237)(214,238,232,226,220)(241,246,251,256,261,266)",
:a=>[0, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 62, 62,
62, 62, 7, 62, 62, 62, 62, 7, 7, 7, 7, 33, 33, 33, 33, 33, 33, 3 // 2, 3 //
2,  3 // 2, 3 // 2, 7, 7, 7, 7, 7, 7, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 7, 7,
7,  7, 7, 7, 7, 7, 7, 7, 33, 33, 33, 33,  33, 33, 3 // 2, 3 // 2, 3 // 2, 3
// 2, 7, 7, 7, 7, 7, 7, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 7, 7, 7, 7, 7, 7, 7
// 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
24, 24, 24, 24, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7, 7, 7, 7,
7, 7, 7, 7, 7, 7, 24, 24, 24, 24, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7
// 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 24, 24, 24, 24, 7, 13 // 4, 13 // 4, 13
//  4, 13 // 4, 20, 7, 7, 7, 7, 20, 7,  7, 7, 7, 7, 13 // 4, 13 // 4, 13 //
4,  13 // 4, 20, 7, 7, 7, 7, 20, 7, 7,  7, 7, 7, 13 // 4, 13 // 4, 13 // 4,
13  // 4, 20, 7, 7, 7, 7, 20, 7, 7, 7,  7, 7, 13 // 4, 13 // 4, 13 // 4, 13
//  4, 20, 7, 7, 7, 7, 20, 7, 7, 7, 7, 7, 21 // 5, 21 // 5, 18, 7, 7, 7, 21
//  5, 21 // 5, 18, 7, 7, 7, 21 // 5,  21 // 5, 18, 7, 7, 7, 21 // 5, 21 //
5,  18, 7, 7, 7, 21 // 5, 21 // 5, 18,  7, 7, 31 // 6, 7, 7, 7, 7, 31 // 6,
7,  7, 7, 7, 31 // 6, 7, 7, 7, 7, 31 // 6, 7, 7, 7, 7, 31 // 6, 7, 7, 7, 7,
31 // 6, 7, 7, 7, 7],
:A=>[0, 59, 59, 59, 59, 59, 113, 113, 113, 113, 59, 113, 113, 113, 113, 59,
113,  113, 113, 113, 113, 118, 118, 118, 118, 113, 118, 118, 118, 118, 113,
113,  113, 113, 117, 117, 117, 117, 117, 117, 177 // 2, 177 // 2, 177 // 2,
177  // 2, 113, 113, 113, 113, 113, 113, 177  // 2, 177 // 2, 177 // 2, 177
// 2, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 117, 117, 117, 117,
117,  117, 177 // 2, 177 // 2, 177 // 2, 177 // 2, 113, 113, 113, 113, 113,
113,  177 // 2, 177 // 2, 177 // 2, 177 // 2, 113, 113, 113, 113, 113, 113,
293  // 3, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 113, 113, 113,
113,  113, 113, 113, 113, 113, 113, 116, 116, 116, 116, 293 // 3, 293 // 3,
293  // 3, 293 // 3, 293 // 3, 293 // 3, 113, 113, 113, 113, 113, 113, 113,
113,  113, 113, 116, 116, 116, 116, 293 // 3, 293 // 3, 293 // 3, 293 // 3,
293  // 3, 293 // 3, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 116,
116,  116, 116, 113, 407 // 4, 407 // 4, 407 // 4, 407 // 4, 115, 113, 113,
113,  113, 115, 113, 113, 113, 113, 113, 407  // 4, 407 // 4, 407 // 4, 407
//  4, 115, 113, 113, 113, 113, 115, 113, 113, 113, 113, 113, 407 // 4, 407
// 4, 407 // 4, 407 // 4, 115, 113, 113, 113, 113, 115, 113, 113, 113, 113,
113,  407 // 4, 407 // 4, 407 // 4, 407 // 4, 115, 113, 113, 113, 113, 115,
113,  113, 113, 113, 113, 519 // 5, 519 // 5, 114, 113, 113, 113, 519 // 5,
519  // 5, 114, 113, 113, 113, 519 //  5, 519 // 5, 114, 113, 113, 113, 519
//  5, 519 // 5, 114, 113, 113, 113, 519 // 5, 519 // 5, 114, 113, 113, 629
// 6, 113, 113, 113, 113, 629 // 6, 113, 113, 113, 113, 629 // 6, 113, 113,
113,  113, 629 // 6, 113, 113, 113, 113,  629 // 6, 113, 113, 113, 113, 629
// 6, 113, 113, 113, 113]),
  Dict{Symbol, Any}(:indexchars=>vcat([1, 6, 11, 31, 32, 41, 42, 51, 52], [103, 104, 111, 112, 131, 132, 152, 156, 161, 167, 172, 176], 238:240, [241, 251, 246]),
    :extRefl=>[1, 8, 2],
:charparams=>[[1, 0], [1, 20], [1, 40], [2, 21], [2, 27], [2, 11], [2, 17],
[2,  1], [2, 7], [3, 2], [3, 14], [3,  10, 1], [3, 10, 2], [3, 12], [3, 6],
[4, 3], [4, 11], [4, 13], [4, 6], [4, 8], [4, 16], [5, 12], [5, 8], [5, 4],
[6, 7], [6, 9], [6, 5]],
    :hgal=>perm"(10,12,14)(11,13,15)(17,20)(18,21)(25,26,27)",
:a=>[0,  20, 20, 20, 20, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 1, 15 // 2, 15 // 2,
1, 15 // 2, 15 // 2, 10, 3, 3, 4, 4, 4],
:A=>[0,  40, 40, 40, 40, 29, 29, 29, 29,  36, 36, 36, 36, 36, 36, 29, 75 //
2, 75 // 2, 29, 75 // 2, 75 // 2, 38, 33, 33, 36, 36, 36]),
  Dict{Symbol, Any}(:indexchars=>vcat(1:6 - 1:26, [65, 32, 35, 62, 41, 73, 43, 71, 84, 52, 82, 54, 91, 92, 101], [102, 111, 112, 121, 122, 131, 132, 141, 142, 151, 160, 161, 170, 171, 180, 181, 190, 191, 200], [201], 210:216, [241, 242, 246, 261, 251, 266]),
    :extRefl=>[1, 18, 5],
    :charparams=>[[1,0],[1,20],[1,40],[1,30],[1,50],[1,70],[2,39],[2,33],[2,21],
      [2,27],[2,29],[2,23],[2,17],[2,11],[2,19],[2,13],[2,7],[2,1],[3,2],[3,14],
      [3,20,2],[3,20,1],[3,10,2],[3,10,1],[3,28],[3,16],[3,18],[3,6],[3,12],
      [3,24],[4,3],[4,11],[4,19],[4,6],[4,14],[4,22],[4,9],[4,17],[4,13],[4,12],
      [4,8],[4,16],[5,12],[5,8],[5,4],[5,18],[5,14],[5,10],[6,13],[6,7],[6,11],
      [6,5],[6,9],[6,15]],
    :hgal=>perm"(7,9)(8,10)(21,29,25)(22,30,26)(32,41,38,35)(33,42,39,36)(49,54,52,50,53,51)",
    :a=>[0,1,1,1,50,50,21,21,21,21,1,1,1,1,1,1,1,1,1,1,37//3,37//3,1,1,37//3,
      37//3,1,1,37//3,37//3,1,35//4,35//4,1,35//4,35//4,1,35//4,35//4,1,35//4,
      35//4,7,1,1,16,7,7,35//6,35//6,35//6,35//6,35//6,35//6],
    :A=>[0,59,59,59,70,70,69,69,69,69,59,59,59,59,59,59,59,59,59,59,203//3,
      203//3,59,59,203//3,203//3,59,59,203//3,203//3,59,265//4,265//4,59,265//4,
      265//4,59,265//4,265//4,59,265//4,265//4,65,59,59,68,65,65,385//6,385//6,
      385//6,385//6,385//6,385//6]),
  Dict{Symbol, Any}(:indexchars=>[1, 16, 65, 32, 35, 62, 91, 92, 101, 102, 151, 166, 181, 196, 211, 240, 241, 246],
    :extRefl=>[1,5,2],
    :charparams=>[[1,0],[1,30],[2,11],[2,13],[2,1],[2,7],[3,2],[3,6],[3,12],
                  [3,16],[4,3],[4,6],[4,9],[4,8],[5,4],[5,10],[6,7],[6,5]],
    :hgal=>perm"( 3, 5)( 4, 6)(11,13)(12,14)(17,18)",
    :a=>[0, 30, 3, 3, 3, 3, 1, 1, 11, 11, 3, 3, 3, 3, 2, 8, 3, 3],
    :A=>[0,30,27,27,27,27,19,19,29,29,27,27,27,27,22,28,27,27])]

chevieset(:G4_22, :CharInfo, function(ST)
  res=CharInfo4_22[ST-3]
  res[:b]=map(x->x[2],res[:charparams])
  res[:charnames]=exceptioCharName.(res[:charparams])
  res
end)

let r3=root(-3), r6=root(6), r2=root(-2)
CHEVIE[:families][:G14]=Family(Dict(:fourierMat=>root(-3)//24*
[4 -4 4 -4 -4 -4 -4 -4 0 0 -4 -4 4 4 0 0 0 0;
-4 4 4 -4 4 4 4 4 0 0 -4 -4 4 4 0 0 0 0;
4 4 4 4 -4 -4 4 4 0 0 -4 -4 -4 -4 0 0 0 0;
-4 -4 4 4 4 4 -4 -4 0 0 -4 -4 -4 -4 0 0 0 0;
-4 4 -4 4 4*E(3,2) 4*E(3) 4*E(3,2) 4*E(3) 0 0 -2 -2 2 2 2*r3 -2*r3 2*r3 -2*r3;
-4 4 -4 4 4*E(3) 4*E(3,2) 4*E(3) 4*E(3,2) 0 0 -2 -2 2 2 -2*r3 2*r3 -2*r3 2*r3;
-4 4 4 -4 4*E(3,2) 4*E(3) 4*E(3,2) 4*E(3) 0 0 2 2 -2 -2 -2*r3 2*r3 -2*r3 2*r3;
-4 4 4 -4 4*E(3) 4*E(3,2) 4*E(3) 4*E(3,2) 0 0 2 2 -2 -2 2*r3 -2*r3 2*r3 -2*r3;
0 0 0 0 0 0 0 0 0 0 2*r6 -2*r6 -2*r6 2*r6 2*r6 -2*r6 -2*r6 2*r6;
0 0 0 0 0 0 0 0 0 0 2*r6 -2*r6 -2*r6 2*r6 -2*r6 2*r6 2*r6 -2*r6;
-4 -4 -4 -4 -2 -2 2 2 2*r6 2*r6 -2+r6 -2-r6 -2+r6 -2-r6 r6 r6 r6 r6;
-4 -4 -4 -4 -2 -2 2 2 -2*r6 -2*r6 -2-r6 -2+r6 -2-r6 -2+r6 -r6 -r6 -r6 -r6;
4 4 -4 -4 2 2 -2 -2 -2*r6 -2*r6 -2+r6 -2-r6 -2+r6 -2-r6 r6 r6 r6 r6;
4 4 -4 -4 2 2 -2 -2 2*r6 2*r6 -2-r6 -2+r6 -2-r6 -2+r6 -r6 -r6 -r6 -r6;
0 0 0 0 2*r3 -2*r3 -2*r3 2*r3 2*r6 -2*r6 r6 -r6 r6 -r6 (2+r2)*r3 (2+r2)*r3 (-2+r2)*r3 (-2+r2)*r3;
0 0 0 0 -2*r3 2*r3 2*r3 -2*r3 -2*r6 2*r6 r6 -r6 r6 -r6 (2+r2)*r3 (2+r2)*r3 (-2+r2)*r3 (-2+r2)*r3;
0 0 0 0 2*r3 -2*r3 -2*r3 2*r3 -2*r6 2*r6 r6 -r6 r6 -r6 (-2+r2)*r3 (-2+r2)*r3 (2+r2)*r3 (2+r2)*r3;
0 0 0 0 -2*r3 2*r3 2*r3 -2*r3 2*r6 -2*r6 r6 -r6 r6 -r6 (-2+r2)*r3 (-2+r2)*r3 (2+r2)*r3 (2+r2)*r3],
:eigenvalues=>[E(3,2),E(3,2),E(3,2),-E(3,2),1,1,1,1,E(8),E(8,3),1,1,-1,-1,
               E(4),-E(4),-E(4),E(4)],
:charLabels=>string.(1:18),:special=>12,:cospecial=>12,:name=>"X_{18}",
:explanation =>"mysteryG14"))
end

CHEVIE[:families][:X18]=Family(Dict(:name=>"X18",:fourierMat=>[
-1 -1 3 -3E(4) 3E(4) 1 3 -3E(4) -3E(4) -3 3 3E(4) 3E(4) 1 -3E(4) -3E(4) 4 4;
-1 -1 3 3E(4) -3E(4) 1 3 3E(4) 3E(4) -3 3 -3E(4) -3E(4) 1 3E(4) 3E(4) 4 4;
3 3 3 -3 -3 3 3 3 -3 3 -3 -3 3 3 -3 3 0 0;
-3E(4) 3E(4) -3 3 3 3 3 3 -3 -3E(4) -3E(4) 3E(4) 3E(4) -3 3E(4) 3E(4) 0 0;
3E(4) -3E(4) -3 3 3 3 3 3 -3 3E(4) 3E(4) -3E(4) -3E(4) -3 -3E(4) -3E(4) 0 0;
1 1 3 3 3 -1 3 -3 3 -3 3 -3 3 -1 -3 3 -4 -4;
3 3 3 3 3 3 3 -3 3 3 -3 3 -3 3 3 -3 0 0;
-3E(4) 3E(4) 3 3 3 -3 -3 3 -3 -3E(4) -3E(4) -3E(4) -3E(4) 3 -3E(4) -3E(4) 0 0;
-3E(4) 3E(4) -3 -3 -3 3 3 -3 3 -3E(4) -3E(4) -3E(4) -3E(4) -3 -3E(4) -3E(4) 0 0;
-3 -3 3 -3E(4) 3E(4) -3 3 -3E(4) -3E(4) 3 -3 -3E(4) -3E(4) -3 3E(4) 3E(4) 0 0;
3 3 -3 -3E(4) 3E(4) 3 -3 -3E(4) -3E(4) -3 3 -3E(4) -3E(4) 3 3E(4) 3E(4) 0 0;
3E(4) -3E(4) -3 3E(4) -3E(4) -3 3 -3E(4) -3E(4) -3E(4) -3E(4) -3 3 3 3 -3 0 0;
3E(4) -3E(4) 3 3E(4) -3E(4) 3 -3 -3E(4) -3E(4) -3E(4) -3E(4) 3 -3 -3 -3 3 0 0;
1 1 3 -3 -3 -1 3 3 -3 -3 3 3 -3 -1 3 -3 -4 -4;
-3E(4) 3E(4) -3 3E(4) -3E(4) -3 3 -3E(4) -3E(4) 3E(4) 3E(4) 3 -3 3 -3 3 0 0;
-3E(4) 3E(4) 3 3E(4) -3E(4) 3 -3 -3E(4) -3E(4) 3E(4) 3E(4) -3 3 -3 3 -3 0 0;
4 4 0 0 0 -4 0 0 0 0 0 0 0 -4 0 0 -4 8;
4 4 0 0 0 -4 0 0 0 0 0 0 0 -4 0 0 8 -4]//12,
:eigenvalues=>[1,1,1,1,1,1,1,-1,-1,-1,-1,-E(4),-E(4),1,E(4),E(4),E(3),E(3,2)],
:explanation=>"mystery G8",:special=>1,:cospecial=>2,:ennola=>6))

CHEVIE[:families][:X8]=Family(Dict(:name=>"X8",:fourierMat=>onmats(
[1 1 2 1 1 -root(-2) -root(-2) -root(-2) -root(-2);
1 1 2 1 1 root(-2) root(-2) root(-2) root(-2);
2 2 0 -2 -2 0 0 0 0;
1 1 -2 1 1 -root(-2) root(-2) -root(-2) root(-2);
1 1 -2 1 1 root(-2) -root(-2) root(-2) -root(-2);
-root(-2) root(-2) 0 -root(-2) root(-2) 0 -2*E(4) 0 2*E(4);
-root(-2) root(-2) 0 root(-2) -root(-2) -2*E(4) 0 2*E(4) 0;
-root(-2) root(-2) 0 -root(-2) root(-2) 0 2*E(4) 0 -2*E(4);
-root(-2) root(-2) 0 root(-2) -root(-2) 2*E(4) 0 -2*E(4) 0]//4,
  perm"(4,5)"),:explanation=>"another mysteryG14",
:eigenvalues=>[1,1,1,-1,-1,E(16,5),E(16,7),-E(16,5),-E(16,7)],
:qEigen=>[0,0,0,0,0,1//2,1//2,1//2,1//2],:special=>2,
:ennola=>-4)) # ennola could be -5

UnipotentCharacters4_22=[
Dict{Symbol,Any}(:harishChandra=>[
  Dict(:relativeType=>TypeIrred(series=:ST,indices=1:2,rank=2,ST=4),
    :levi=>Int[],:parameterExponents=>[1,1],:charNumbers=>1:7,
    :eigenvalue=>1,:cuspidalName=>""),
  Dict(:relativeType=>TypeIrred(series=:A,indices=[2],rank=1),
    :levi=>[1],:parameterExponents=>[3],:charNumbers=>[9,8],:eigenvalue=>E(3,2),
    :cuspidalName=>ImprimitiveCuspidalName([Int[],[0,1],[0,1]])),
  mkcuspidal("G_4",10,-1;eig=false)],
  :families=>[
    Family(:C1,[1]),
    Family(Family(:X)(3),[6,5,8],signs=[1,1,-1],ennola=-1),
    Family(:C1,[7]),
    Family(:X5,[2,4,10,9,3],signs=[1,1,-1,-1,1],ennola=-5)],
  :a=>[0,4,4,4,1,1,2,1,4,4],:A=>[0,8,8,8,5,5,6,5,8,8]),
Dict{Symbol,Any}(:harishChandra=>[
  Dict(:relativeType=>TypeIrred(series=:ST,indices=1:2,rank=2,ST=6),
    :levi=>Int[],:parameterExponents=>[1,1],
    :charNumbers=>[1,2,3,4,5,6,12,10,8,11,7,9,13,14],
    :eigenvalue=>1,:cuspidalName=>""),
  Dict(:relativeType=>TypeIrred(series=:ST,indices=[1],rank=1,p=4,q=1),
    :levi=>[2],:parameterExponents=>[[3,3,0,3]],:charNumbers=>[15,17,31,16],
    :eigenvalue=>E(3,2),
    :cuspidalName=>ImprimitiveCuspidalName([Int[],[0,1],[0,1]])),
  mkcuspidal("G_6",18,-E(3,2)), 
  mkcuspidal("G_6",19,-E(3,2);no=2), 
  mkcuspidal("G_6",20,-1),
  mkcuspidal("G_6",21,-1;no=2), 
  mkcuspidal("G_6",22,-1;no=3), 
  mkcuspidal("G_6",23,-1;no=4),
  mkcuspidal("G_6",24,E(4)), 
  mkcuspidal("G_6",25,E(4);no=2),
  mkcuspidal("G_6",26,E(4,3)), 
  mkcuspidal("G_6",27,E(4,3);no=2),
  mkcuspidal("G_6",28,E(12,5)),
  mkcuspidal("G_6",29,E(8,3);qeig=1//2),
  mkcuspidal("G_6",30,E(8,7);qeig=1//2)],
  :families => [Family("C1", [1]),
                Family(conj(SubFamilyij(Family(:X)(12),1,3,-E(3)-2E(3,2))),
      [7,13,8,2,27,21,24,18,15,19,10,25,22,3,9,17,28,20,4,26,16,23],
      signs=[1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,-1,1,-1,-1,-1,1],
      cospecial=11,ennola=-22),
    Family(:C1,[14]),
    Family(:Z4,[29,12,30,11],signs=[-1,1,1,-1],ennola=-3),
    Family(Family(:X)(3),[5,6,31],signs=[1,1,-1],ennola=-1)],
  :a=>[0,1,1,1,10,10,1,1,1,1,5,5,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,10],
  :A=>[0,11,11,11,14,14,11,11,11,11,13,13,11,12,11,11,11,11,11,11,11,11,11,11,
       11,11,11,11,13,13,14]),
Dict{Symbol,Any}(:harishChandra=>[
  Dict(:relativeType =>TypeIrred(series=:ST,indices=1:2,rank=2,ST=8),
    :levi=>Int[],:parameterExponents=>[1,1],
    :charNumbers=>[1,2,3,4,5,6,7,8,9,10,14,13,12,11,16,15],:eigenvalue=>1,
    :cuspidalName=>""),
  Dict(:relativeType=>TypeIrred(series=:ST,indices=[2],rank=1,p=4,q=1),
    :levi=>[1],:parameterExponents=>[[3,0,0,2]],:charNumbers=>[17, 27, 25, 22],
    :eigenvalue=>-1,
    :cuspidalName=>ImprimitiveCuspidalName([[0],[0,1],[0,1],Int[]])),
  Dict(:relativeType=>TypeIrred(series=:ST,indices=[2],rank=1,p=4,q=1),
    :levi=>[1],:parameterExponents=>[[3,0,2,0]],:charNumbers=>[18,29,21,30],
    :eigenvalue=>-E(4),
    :cuspidalName => ImprimitiveCuspidalName([Int[],[0,1],[0],[0,1]])),
  Dict(:relativeType=>TypeIrred(series=:ST,indices=[2],rank=1,p=4,q=1),
    :levi=>[1],:parameterExponents=>[[3,2,0,0]],:charNumbers=>[19,20,26,28],
    :eigenvalue=>-1,
    :cuspidalName => ImprimitiveCuspidalName([[0],Int[],[0,1],[0,1]])),
  mkcuspidal("G_8",23,E(8,3);qeig=1//2), 
  mkcuspidal("G_8",24,E(8,7);qeig=1//2),
  mkcuspidal("G_8",31,1), 
  mkcuspidal("G_8",32,E(4)),
  mkcuspidal("G_8",33,E(4);no=2),
  mkcuspidal("G_8",34,E(3)), 
  mkcuspidal("G_8",35,E(3,2))],
  :families=>[Family(:C1,[1]),
    Family(Family(:X)(4),[5,6,7,17,18,19],signs=[1,1,1,-1,-1,-1],ennola=4),
    Family(Family(:X)(4),[11,12,13,20,21,22],signs=[1,1,1,-1,-1,-1],ennola=-6),
    Family(Family(:Z4),[23,15,24,16],signs=[-1,1,1,-1],ennola=1),
    Family(:X18,[2,4,3,8, 10,9,14, 25,26,27, 28,29,30, 31,32,33,34,35],
      signs=[1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,-1,1,-1,-1])],
  :a=>[0,6,6,6,1,1,1,6,6,6,2,2,2,6,3,3,1,1,1,2,2,2,3,3,6,6,6,6,6,6,6,6,6,6,6],
  :A=>[0,18,18,18,11,11,11,18,18,18,14,14,14,18,15,15,11,11,11,14,14,14,15,15,
       18,18,18,18,18,18,18,18,18,18,18]),
Dict{Symbol,Any}(:harishChandra=>[
  Dict(:relativeType=>TypeIrred(series=:ST,indices=1:2,rank=2,ST=14),
    :levi=>Int[],:parameterExponents=>[1,1],
 :charNumbers=>[1,2,3,4,5,6,8,7,9,12,11,10,15,14,13,16,20,18,21,17,19,22,23,24],
    :eigenvalue=>1,:cuspidalName=>""),
  Dict(:relativeType=>TypeIrred(series=:ST,indices=[1],rank=1,p=6,q=1),
    :levi=>[2],:parameterExponents=>[[3,4,4,0,4,4]],
    :charNumbers=>[66,26,27,79,28,25],:eigenvalue=>E(3,2),
    :cuspidalName=>ImprimitiveCuspidalName([Int[],[0,1],[0,1]])),
  mkcuspidal("G_{14}",34,1),
  mkcuspidal("G_{14}",35,1;no=2),
  mkcuspidal("G_{14}",29,-1),
  mkcuspidal("G_{14}",30,-1;no=2),
  mkcuspidal("G_{14}",31,-1;no=3),
  mkcuspidal("G_{14}",32,-1;no=4),
  mkcuspidal("G_{14}",33,-1;no=5),
  mkcuspidal("G_{14}",73,-1;no=6),
  mkcuspidal("G_{14}",74,-1;no=7),
  mkcuspidal("G_{14}",40,E(3)),
  mkcuspidal("G_{14}",41,E(3);no=2),
  mkcuspidal("G_{14}",42,E(3);no=3),
  mkcuspidal("G_{14}",43,E(3);no=4),
  mkcuspidal("G_{14}",50,E(3);no=5),
  mkcuspidal("G_{14}",51,E(3);no=6),
  mkcuspidal("G_{14}",36,E(3,2)),
  mkcuspidal("G_{14}",37,E(3,2);no=2),
  mkcuspidal("G_{14}",52,-E(3)),
  mkcuspidal("G_{14}",53,-E(3);no=2),
  mkcuspidal("G_{14}",38,-E(3,2)),
  mkcuspidal("G_{14}",39,-E(3,2);no=2),
  mkcuspidal("G_{14}",54,-E(4)),
  mkcuspidal("G_{14}",55,-E(4);no=2),
  mkcuspidal("G_{14}",56,E(4);no=3),
  mkcuspidal("G_{14}",57,E(4);no=4),
  mkcuspidal("G_{14}",58,E(4)),
  mkcuspidal("G_{14}",59,E(4);no=2),
  mkcuspidal("G_{14}",60,-E(4);no=3),
  mkcuspidal("G_{14}",61,-E(4);no=4),
  mkcuspidal("G_{14}",46,E(8)),
  mkcuspidal("G_{14}",47,E(8,3);no=2),
  mkcuspidal("G_{14}",48,E(8,3)),
  mkcuspidal("G_{14}",49,E(8);no=2),
  mkcuspidal("G_{14}",69,E(9,5);qeig=1//3),
  mkcuspidal("G_{14}",70,E(9,5);no=2,qeig=2//3),
  mkcuspidal("G_{14}",71,E(9,8);qeig=1//3),
  mkcuspidal("G_{14}",72,E(9,8);no=2,qeig=2//3),
  mkcuspidal("G_{14}",67,E(9,2);qeig=1//3),
  mkcuspidal("G_{14}",68,E(9,2);no=2,qeig=2//3),
  mkcuspidal("G_{14}",62,E(12)),
  mkcuspidal("G_{14}",63,E(12,7);no=2),
  mkcuspidal("G_{14}",64,E(12,7)),
  mkcuspidal("G_{14}",65,E(12);no=2),
  mkcuspidal("G_{14}",75,E(16,5);qeig=1//2),
  mkcuspidal("G_{14}",77,E(16,13);qeig=1//2),
  mkcuspidal("G_{14}",78,E(16,15);qeig=1//2),
  mkcuspidal("G_{14}",76,E(16,7);qeig=1//2),
  mkcuspidal("G_{14}",44,E(24,11)),
  mkcuspidal("G_{14}",45,E(24,17))],
  :families=>[
    Family(:C1,[1]),
    Family(conj(Family(:X)(3))*Family(:G14),
       [26,37,28,39,14,3,34,18,46,48,15,13,30,29,59,60,55,56,25,
        36,27,38,2,11,16,35,49,47,12,10,32,31,58,61,54,57,4,17,22,33,41,40,43,
        42,44,45,51,50,53,52,64,65,62,63],
      signs=[-1,1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,1,-1,1,-1,1,-1,-1,-1,-1,
   -1,1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1],
      ennola=32),
  Family(Family(:X)(3),[23,24,66],signs=[1,1,-1],ennola=2),
  Family(Family(:TQZ)(3,E(3,2)),[19,20,21,68,70,72,67,71,69],
    cospecial=2,ennola=8),
  Family(:X8,[8, 9, 7, 73, 74, 75, 76, 77, 78]),
  Family(Family(:X)(3),[5,6,79],signs=[1,1,-1],ennola=-2)],
  :a=>[0,1,1,1,20,20,9,9,9,1,1,1,1,1,1,1,1,1,6,6,6,1,5,5,1,1,1,1,1,1,1,1,1,1,1,
       1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,6,6,6,6,6,
       6,9,9,9,9,9,9,20],
  :A=>[0,23,23,23,28,28,27,27,27,23,23,23,23,23,23,23,23,23,26,26,26,23,25,25,
       23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,
       23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,25,26,26,26,26,26,26,
       27,27,27,27,27,27,28])]

chevieset(:G4_22,:UnipotentCharacters,function(ST)
  p=findfirst(==(ST),[4,6,8,14])
  if !isnothing(p) UnipotentCharacters4_22[p] end
end)

const Invariants4_22=[
  [(x,y)->x^4-8*x*y^3,
   (x,y)->x^6+20*x^3*y^3-8*y^6],
  [(x,y)->x^6+20*x^3*y^3-8*y^6,
   (x,y)->3*x^3*y^9+3*x^6*y^6+x^9*y^3+y^12],
  [(x,y)->8*x*y^3+x^4,
   (x,y)->-3*x^3*y^9+3*x^6*y^6-x^9*y^3+y^12],
  [(x,y)->x^10*y^2-2*x^6*y^6+x^2*y^10,
   (x,y)->x^12-33*x^8*y^4-33*x^4*y^8+y^12],
  [(x,y)->14*x^4*y^4+x^8+y^8,
   (x,y)->-33*x^4*y^8-33*x^8*y^4+x^12+y^12],
  [(x,y)->56*x^4*y^4+16*x^8+y^8,
   (x,y)->x^4*y^20-16*x^8*y^16+96*x^12*y^12-256*x^16*y^8+256*x^20*y^4],
  [(x,y)->x^12-88*x^9*y^3-704*x^3*y^9-64*y^12,
   (x,y)->-512*x^3*y^21-1344*x^6*y^18-984*x^9*y^15-7*x^12*y^12+
          123*x^15*y^9-21*x^18*y^6+x^21*y^3],
  [(x,y)->x^24+4048*x^18*y^6+20240*x^15*y^9+122544*x^12*y^12-
          161920*x^9*y^15+259072*x^6*y^18+4096*y^24,
   (x,y)->x^21*y^3-21*x^18*y^6+123*x^15*y^9-7*x^12*y^12
          -984*x^9*y^15-1344*x^6*y^18-512*x^3*y^21],
  [(x,y)->x^6+10*x^4*y^2-20*x^2*y^4-8*y^6,
   (x,y)->3*x^8-56*x^6*y^2-56*x^4*y^4-224*x^2*y^6+48*y^8],
  [(x,y)->14*x^4*y^4+x^8+y^8,
   (x,y)->x^2*y^10-2*x^6*y^6+x^10*y^2],
  [(x,y)->-5*x^2*y^4-5*x^4*y^2+x^6+y^6,
   (x,y)->81*x^2*y^22+198*x^4*y^20+1309*x^6*y^18+264*x^8*y^16+
          2706*x^10*y^14-9116*x^12*y^12+2706*x^14*y^10+264*x^16*y^8+
          1309*x^18*y^6+198*x^20*y^4+81*x^22*y^2],
  [(x,y)->x^12+40*x^9*y^3+384*x^6*y^6-320*x^3*y^9+64*y^12,
   (x,y)->512*x^3*y^21+1344*x^6*y^18+984*x^9*y^15+7*x^12*y^12-
            123*x^15*y^9+21*x^18*y^6-x^21*y^3],
  [(x,y)->228*x^5*y^15+494*x^10*y^10-228*x^15*y^5+x^20+y^20,
   (x,y)->-522*x^5*y^25-10005*x^10*y^20-10005*x^20*y^10+522*x^25*y^5+x^30+y^30],
  [(x,y)->228*x^5*y^15+494*x^10*y^10-228*x^15*y^5+x^20+y^20,
   (x,y)->-6*x^5*y^55+330*x^10*y^50-7230*x^15*y^45+78540*x^20*y^40-
          417510*x^25*y^35+808566*x^30*y^30+417510*x^35*y^25+78540*x^40*y^20+
          7230*x^45*y^15+330*x^50*y^10+6*x^55*y^5],
  [(x,y)->-522*x^5*y^25-10005*x^10*y^20-10005*x^20*y^10+522*x^25*y^5+x^30+y^30,
   (x,y)->6*x^5*y^55-330*x^10*y^50+7230*x^15*y^45-78540*x^20*y^40+
          417510*x^25*y^35-808566*x^30*y^30-417510*x^35*y^25-78540*x^40*y^20-
          7230*x^45*y^15-330*x^50*y^10-6*x^55*y^5],
  [(x,y)->-x^5*y^55+55*x^10*y^50-1205*x^15*y^45+13090*x^20*y^40-69585*x^25*y^35+
          134761*x^30*y^30+69585*x^35*y^25+13090*x^40*y^20+1205*x^45*y^15+
          55*x^50*y^10+x^55*y^5,
   (x,y)->-180*x^5*y^55+204954*x^10*y^50+11486340*x^15*y^45+88770255*x^20*y^40+
          70567704*x^25*y^35+83221580*x^30*y^30-70567704*x^35*y^25+
          88770255*x^40*y^20-11486340*x^45*y^15+204954*x^50*y^10+180*x^55*y^5+
          x^60+y^60],
  [(x,y)->34375*x^3*y^9-4125*x^6*y^6-275*x^9*y^3+x^12+15625*y^12,
   (x,y)->(5*y^2+x^2)*(25*y^4-5*y^2*x^2+x^4)*(25*y^4-50*y^3*x-30*y^2*x^2+
          10*y*x^3+x^4)*(625*y^8+1250*y^7*x+3250*y^6*x^2-1000*y^5*x^3+
          1375*y^4*x^4+200*y^3*x^5+130*y^2*x^6-10*y*x^7+x^8)*(50*y^4+50*y^3*x+
          15*y^2*x^2-10*y*x^3+2*x^4)*(2500*y^8-2500*y^7*x+1750*y^6*x^2-
          1750*y^5*x^3+625*y^4*x^4+350*y^3*x^5+70*y^2*x^6+20*y*x^7+4*x^8)],
  [(x,y)->34375*x^3*y^9-4125*x^6*y^6-275*x^9*y^3+x^12+15625*y^12,
   (x,y)->-x^3*y^3*(5*y^2-5*x*y+2*x^2)^3*
     (25*y^4+25*y^3*x+15*y^2*x^2+10*y*x^3+4*x^4)^3*(-5*y^2+5*x*y+x^2)^3*
     (25*y^4+25*y^3*x+30*y^2*x^2-5*y*x^3+x^4)^3*(10*y^2+5*x*y+x^2)^3*
     (100*y^4-50*y^3*x+15*y^2*x^2-5*y*x^3+x^4)^3],
  [(x,y)->-x*y^11+11*x^6*y^6+x^11*y,
   (x,y)->228*x^5*y^15+494*x^10*y^10-228*x^15*y^5+x^20+y^20]]

chevieset(:G4_22, :Invariants,ST->Invariants4_22[ST-3])

const Discriminant4_22=[
  (t1,t2)->-t2^2+t1^3,
  (t1,t2)->64*t2^2-t1^2*t2,
  (t1,t2)->64*t2^2+t1^3*t2,
  (t1,t2)->t2^2*t1+108*t1^3,
  (t1,t2)->-t2^2+t1^3,
  (t1,t2)->t1^3*t2-432*t2^2,
  (t1,t2)->256*t2^2+t1^2*t2,
  (t1,t2)->96*t1*t2^2-t1^2*t2+14080*t2^3,
  (t1,t2)->t2^3-27*t1^4,
  (t1,t2)->108*t2^3-t1^3*t2,
  (t1,t2)->16*t2^2+27*t1^4*t2,
  (t1,t2)->256*t1*t2^2+t1^3*t2,
  (t1,t2)->t2^2-t1^3,
  (t1,t2)->288*t2^2+t1^3*t2,
  (t1,t2)->288*t2^2+t1^2*t2,
  (t1,t2)->t1*t2^2-746496*t1^3,
  (t1,t2)->t2^2-64*t1^5,
  (t1,t2)->625*t2^2-64*t1^5*t2,
  (t1,t2)->t2^3+1728*t1^5]

chevieset(:G4_22,:Discriminant,ST->Discriminant4_22[ST-3])

# for these models for G7,G11,G19 see Malle-Michel
const Rep4_22=[(X,Y,Z)->[[X;;],[Y;;],[Z;;]],
  function(X,Y,Z,rt) x1,x2=X
    r=(-1)^rt*root(prod(X)*prod(Y)*prod(Z))
    [[x1 sum(x->1//x,Y)-sum(Z)*x2//r;0 x2],
     [sum(Y) 1//x1;-prod(Y)*x1 0],
     [0 -r//prod(Y)//prod(X);r sum(Z)]]
  end,
  function(X,Y,Z,rt) x1,x2=X;z1=Z[1]
    r=E(3,rt)*root(x1^2*x2*prod(Y)*prod(Z),3)
    a=sum(Y)*r//x1-prod(Y)*sum(y->1//y,Y)*z1+prod(Y)*(x1*z1^2-x2*prod(Z)//z1)//r
    [[x1 0 -prod(Z)*sum(z->1//z,Z)*x2*x1//z1+(sum(Y)*r^2//prod(Y))//z1;
      0 x1 a//prod(Y)//z1*r^2;0 0 x2],
     [sum(Y)-r//x1//z1 1//z1 r;a r//x1//z1 0;-prod(Y)*x1*z1//r^2 0 0],
     [0 0 -x1*prod(Z)//z1;0 z1 0;1//x1 -1//r sum(Z)-z1]]
  end,
  function(X,Y,Z,rt)x1,x2=X;y2,y3,y1=Y # computed JM 10/2005
    r=root((x1*x2*y1)^2*y2*y3*prod(Z),4)*E(4,rt)
    a=y2*x1*x2*y1*prod(Z)*sum(x->1//x,Z)-r^2*sum(Z)
    b=x1*x2*y1*prod(Z)*(y3+y2)-r^2*sum(x->prod(Z[x]),combinations(1:4,2))
    [[x1 0 x1*a-(x1*x2*y1*b)//r x1*(1+y1//y3)-(r*sum(x->1//x,Z))//y3;
      0 x1 1//y1+1//y2 -x2//r^3;0 0 x2 0;0 0 0 x2],
     [y3+y1 x1*y1*y2*a y1*a y1;0 y1+y2 1//x1 0;0 -x1*y1*y2 0 0;-y3 0 0 0],
     [0 0 0 -r//(y3*x2);0 0 -r//(y2*x1*x2*y1) 0;0 r 0 1//r^2;
      r//(x1*y1) -r*a b sum(Z)]]
  end,
  function(X,Y,Z,rt) x1,x2=X; y1,y2,y3=Y; z1,z2,z3,z4,z5=Z # computed JM 10/2005
    r=root(x1^3*x2^2*y1*y2^2*y3^2*prod(Z),5)*E(5,rt)
 [[x2+x1 0 0 0 x1;0 x2+x1 0 x2 0;0 0 x1 0 0;0 -x1 0 0 0;-x2 0 0 0 0],
  [0 0 0 0 -r//(z5*x2);0 0 0 -r//z4//x1 x2;
   0 0 r//z3//x1 (x2*y2*y3*z2)//r-r//(x1*z4) x2;
   0 r//z2//x2 x1*x2*y1*y2*y3*z1*z4*z5*(x1*(y3+y2)//r-1//z3)//r^2-
    r//(z2*x2) y2+y3-r//(z3*x1)+x1*x2*z1*z5*y1*y2*y3//r^2 -x1^2*x2^2*
    y1*y2*y3*z4*z5*z1//r^3;
   r//z1//x1 r^2*(1//(z4*z2)+1//(z1*z5))//(x1*x2^2)-(y2*y3)//x2-
    (x1*y1*y2*y3*z3)//(r*x2) (-r^3//(x1*x2*z2*z4)+z3*x1*y1*y2*y3)*
    (1//(r*x2)+r//(x1^2*x2*z3^2*y2*y3)-(1//y3+1//y2)//(x1*x2*z3)) y1*
    y2*y3*(z2+z1*z5//z4)//r-r*(r+y1*z3*x1)//(z3*x1^2*z4*x2) y1+
    y2+y3-z1*z5*x1*x2*y1*y2*y3//r^2],
  [z1 (x1*y2*y3*z1*z2)//(r*x2)+r^3//x1//z4//x2^3//y3//z5//y2-r*(z2//z5+z1//z4)//
   x2^2 -r*z3//x2^2//z5-z1//x2*(y3+y2)+x1//x2*z3*z1*y2*y3//r-x1*y1*y2*y3*z1*
   z2*z4//r^2+x1^2*y1*y2*y3*z1*z2*z3*z4*(y3+y2)//r^3+r*z1//(x1*x2*z3) y2*
   y3*(x2*z1*z2+x1*z1*(z2+z3)+x1*z2*z3*z4//z5)//x2//r+
   y1*y2*y3*z1*z2*z3*x1*(x2+x1)//x2//r^2-y2^2*y3^2*z1*z2*z3*x1^2*z4//r^3-
    r*((z2+z3)//(z5*x2)+z1//(z4*x2)+z2//(z5*x1)+z1//(z4*x1))//x2 z1*
    (x2+x1)//x2+x1^2*z2*z3*z4*y2*y3//r^2-r*(1//y1+1//y2+1//y3)//x2;
   0 z2 z3+x1*x2^2*y1*y2*y3*z1*z2*z4*z5//r^3-r*(1//y3+1//y2)//x1 x2*
   z2//x1+z3+z2-x1*x2*z2*z3*z4*y2*y3//r^2-r*(1//y3+1//y2)//x1 -r^2//
   (x1*z1*y1*y2*y3);
   0 0 z3 -r^3//(x1^2*x2*z1*z5*y1*y2*y3)+z3 -r^2//(x1*z1*y1*y2*y3);
   0 0 0 z4 z4*x1*x2*z5//r;0 0 0 0 z5]]
  end,
  function(X,Y,Z,rt)x1,x2=X;y1,y2,y3=Y;z1,z2,z3,z4,z5=Z#computed Malle 30-8-2006
    r=root((x1*x2)^3*(y1*y2*y3)^2*prod(Z[[1,2,3,4,5,5]]),6)*E(6,rt)
    a=1 # representation  has one free parameter
   [[x1+x2 0 0 0 0 x2*x1;
     0 x1+x2 0 0 x2*x1 0;
     0 0 x1+x2 x2*x1 0 0;
     0 0 -1 0 0 0;
     0 -1 0 0 0 0;
     -1 0 0 0 0 0]*r^0,
  toM([[0, 0, 0, 0, 0, -1//z5*r], [0, 0, 0, 0, -1//z4*r,-1//a//r^2//z4],
  [0, 0, 0, -1//z5*r, z4-z5, -1//a//r^3*z5],
  [0,0,r//z3//x2//x1,(x1*x2*y1*y2*y3*(z2*z5+z4*z1)-a//(z4*z5^2))//r^2,
  (-x1*x2*y1*y2*y3*z1*z4*z5*(z4-z5)+a//z5)//r^3,1//y1//y2//y3//x1^2//x2^2//z2//z3//a],
  [0,1//z2*r//x2//x1,-(y1*y3+y2*y3+y1*y2)*x1*x2*z1*z5^2*z4*y1*y2*y3//a
   +z5//x2//x1*(y3+y2+y1)*r^4//z3//a+r^2*y1*y2*y3*z5*(z4*z3*z1-z2^2*z5)//a//z2//z3
   +r^2*(-z3+z2)//z4//z5//x1//x2//z2//z3,-z5*(y1*y3+y2*y3+y1*y2)*r^3//a
   +r*(z2*z4*x2*x1*z5^3*y3*y2*y1-a)*(y3+y2+y1)//a//z4//z5
  +(x1*x2)^2*(y1*y2*y3)^2*z5^2*(z1*z4*z3-z5*z2^2)//r//a
  +x1*x2*y1*y2*y3*(z4*z1+2*z5*z2)//r//z4//z5-a//r//z4^2//z5^3,
  y3+y2+y1-x1*x2*y1*y2*y3*(z4*z1+z2*z5-z1*z5)//r^2+a//r^2//z4//z5^2,
  r//y1//y2//y3//x1^2//x2^2//z2//z3//a//z4//z5],
  [r//z1//x2//x1,
  -(x1*x2)^2*(y1*y2*y3)^2*z3*z4*z5*(-z2*z5+z2*z4-z4*z1+z1*z5)*a//r^2
  -x1*y1*y2*y3*x2*z3*a^2//r^2//z5,
  -(y1*y3+y2*y3+y1*y2)*(x1*x2*y1*y2*y3*z1*z4*z5^2*(z4-z5)-a)*r^3//z5
  +(z4-z5)*x1^2*x2^2*y1^2*y2^2*y3^2*z5^2*z2*z1*z4*(y3+y2+y1)*r
  -x1*x2*y1*y2*y3*((x1*x2)^2*(y1*y2*y3)^2*z1*z4^2*z5^4*(z5*z2^2*z4+(z5-z4)*z1*z3*z4
  -z5^2*z2^2)
  +x1*x2*y1*y2*y3*z4*z5^2*a*(2*z4*z1*z3-z5*z1*z3+z5*z2*z1+z5*z2*z3)-z3*a^2)//r//z5^2//z4,
  -(z4-z5)*(y1*y3+y2*y3+y1*y2)*x1^3*x2^3*z1*z5^2*z4*z3*z2*y1^2*y2^2*y3^2
  +(y3+y2+y1)*(x1*x2*y1*y2*y3*z2*z4*z5^2*(z4-z5)+a)*r^4//z5//z4
  -r^2*(x1*x2)^2*(y1*y2*y3)^2*z5*(-z1*z3*z4^2+z4*z2^2*z5+z5*z1*z4*z3-z5^2*z2^2)
  -r^2*a*x1*x2*y1*y2*y3*(z4*z3+z4*z1-z2*z4+2*z5*z2)//z4//z5+r^2*a^2//z4^2//z5^3,
  -x1*x2*y1*y2*y3*(z2-z1)*(z4-z5)*a*r-a^2*r//z5^2//z4,
  -1//z3//z4//z2//y1//y2//y3//z5//x1^2//x2^2*r^4+y1+y3+y2]]),
  toM([[z1,(z2-z1)*(z4-z5)*a*r^3//z5+a^2*r^3//x1//y1//y2//y3//x2//z5^3//z4,
  x2^2*x1^2*y2*y3*z5*y1*(z4-z5)*(y1*y3+y2*y3+y1*y2)*z1*z4*z3*z2*r^2
  -(y3+y2+y1)*x1^2*x2^2*y1*y2*y3*z2*z3*(x1*x2*y1*y2*y3*z2*z4*z5^2*(-z5+z4)+a)*z1
  +x1*x2*y1*y2*y3*(z4-z5)*(z2^2*z5-z1*z4*z3)*r^4
  +a*(z3+z1-z2+2*z5*z2//z4)*r^4//z5^2-a^2*r^4//x1//x2//y1//y2//y3//z4^2//z5^4,
  -(y3+y2+y1)*(x1+x2)*x1^2*x2^2*y1*y2*y3*z2*z3*(x1*x2*y1*y2*y3*z2*z4*z5^2*(-z5+z4)+a)*z1
  -(y1*y3+y2*y3+y1*y2)*(x1*x2*z1*z4*(z4-z5)-a//y1//y2//y3//z5^2)*r^5
  +(x1*x2*y1*y2*y3*(z5-z4)*(z1*z4*z3-z5*z2^2)+a*(z4*z3+z4*z1-z2*z4+2*z5*z2)//z4//z5^2
  -a^2//x1//x2//y1//y2//y3//z4^2//z5^4)*(x1+x2)*r^4
  +x2^2*x1^2*y1*y2*y3*z5*z2*z1*z4*(z4-z5)*(y3+y2+y1)*r^3
  +x2^2*x1^2*y1*y2*y3*z5*z2*z1*z4*z3*(z4-z5)*(y1*y3+y2*y3+y1*y2)*(x1+x2)*r^2
  -r*x1*x2*((x1*x2*y1*y2*y3)^2*z1*z4^2*z5^4*(z1*z3*z4-z5*z2^2)*(z5-z4)
  +a*x1*x2*y1*y2*y3*z4*z5^2*(2*z4*z1*z3-z5*z1*z3+z5*z2*z1+z5*z2*z3)-z3*a^2)//z4//z5^3,
  (x1+x2)*((z1-z2)*(z5-z4)//z5+a//x1//y1//y2//y3//x2//z5^3//z4)*r^3*a
  -x1*x2*z3*(x1*x2*y1*y2*y3*z4*z5^2*(z1-z2)*(z5-z4)+a)*a//z5^2,
 -(y1*y3+y2*y3+y1*y2)*r//y1//y2//y3+z1*(x1+x2)+x1^2*x2^2*y1*y2*y3*z2*z5*z4*z3//r^3],
  [0, z2,
  (y1*y3+y2*y3+y1*y2)//x2//x1*r^5//y1//y2//y3//a-z5*z2*(y3+y2+y1)*r^3//a+
  r*(x1*x2*y1*y2*y3*z5*(-z4*z3*z1+z2^2*z5)//a+(z3-z2)//z5//z4),
  -z2*z5*(y3+y2+y1)*(x1+x2)*r^3//a
  -r^2*(z4*x1*x2*z5*z1//a-1//y1//y2//y3//z4//z5)*(y1*y3+y2*y3+y1*y2)
  +r*(x1*x2*y1*y2*y3*z4*z5^2*(-z4*z3*z1+z2^2*z5)+a*z3-a*z2)*(x1+x2)//a//z5//z4
  +x2^2*x1^2*z2*y1*y2*y3*z5^2*z1*z4*(y3+y2+y1)//a
  +x2^2*x1^2*z2*z3*y1*y2*y3*z5^2*z1*z4*(y1*y3+y2*y3+y1*y2)*(x1+x2)//a//r
  -x1*x2*((x1*x2*y1*y2*y3)^2*z1*z4*z5^2*(-z1*z3*z4+z5*z2^2)//a
  +x1*x2*y1*y2*y3*z3*(2*z4*z1+z5*z2)//z4-z3*a//z4^2//z5^2)//r^2,
  -(y1*y3+y2*y3+y1*y2)*r//y1//y2//y3+z2*(x1+x2)
  -x1*x2*z3*(x1*x2*y1*y2*y3*z4*z5^2*(-z4*z1+z2*z4-z2*z5)+a)//r^3//z4//z5,
  1//x1//x2//y1//y2//y3//a//z1//z4],
 [0,0,z3,z3*(x1+x2)-x1*x2*z3*(x1*x2*y1*y2*y3*z4*z5^2*(z2*z5+z4*z1)-a)//r^3//z4//z5,
 -x1*x2*z3*(x1*x2*y1*y2*y3*z2*z4*z5^2*(-z5+z4)+a)//r^4,z5//z1//r//x2//x1//y1//y2//y3//a],
  [0, 0, 0, z5, (z4-z5)*z4//r*z5,-z5^2//r^4//a*z4],
  [0, 0, 0, 0, z4, -1//a//r^3*z5],[0, 0, 0, 0, 0, z5]])]
  end]

const Embed4_22=[[[1,3,-1],[3]],[[2],[3]],[[1],[3]],[[1],[2],[3]],
  [[3],[1,3,-1]],[[1],[3]],[[2],[3]],[[1],[2],[3]],[[1],[2,1,-2],[-2,1,2]],
  [[3,3],[1],[-2,1,2]],[[1],[2]],[[1],[2],[3,3]],[[3],[1,3,-1]],[[1],[3]],
  [[2],[3]],[[1],[2],[3]],[[2],[1,2,-1]],[[1],[2]],[[1],[2,1,-2],[-2,1,2]]]

# roots not yet used
chevieset(:G4_22, :HeckeRepresentation, function(ST,para,roots,i)
  X,Y,Z=chevieget(:G4_22,:ParamSpecialization)(ST,para)
  function rep(char)
    dim=char[1]
    r=Rep4_22[dim]
    if dim==1 return r(X[char[2]], Y[char[3]], Z[char[4]])
    elseif dim==2
      if ST in 4:7
        Z = deleteat(Z, char[4]);z1,z2=Z
        if ST==4 return [[0 -z2;z1 0],[0 0;0 0],[z2 z2;0 z1]]
        else r(X,deleteat(Y,char[3]),Z,char[2])
        end
      else r(X,deleteat(Y,char[3]),Z[combinations(1:length(Z),2)[char[4]]],char[2])
      end
    elseif dim==3
      X=X[[char[3],3-char[3]]]
      if ST==4
        z1,z2,z3=Z
        [[0 0 1;0 -1 0;1 0 0],[0 0 0;0 0 0;0 0 0],
         [z1 -1 z2;0 z2 -z3*z1-z2^2;0 0 z3]]
      elseif ST==6
        z1,z2,z3=Z;x1,x2=X
        [[x2 0 0;-x2*z3-x1*z1-x1*z2 x1 0;x2*z3*z1-x1*z2^2 0 x1],
         [0 0 0;0 0 0;0 0 0],[z3 1 0;0 z1 1;0 0 z2]]
      elseif ST in [5,7] r(X, Y, Z, char[2])
      elseif ST in 8:15 return r(X,Y,deleteat(Z,char[4]),char[2])
      else return r(X,Y,Z[combinations(1:5,3)[char[4]]],char[2])
      end
    elseif dim==4
      Y=vcat(deleteat(Y,char[3]),[Y[char[3]]])
      if ST in 8:15 return r(X,Y,Z,char[2])
      else return r(X,Y,deleteat(Z,char[4]),char[2])
      end
    elseif dim==5
      r(X[[char[3],3-char[3]]],vcat([Y[char[4]]],deleteat(Y,char[4])),Z,char[2])
    elseif dim==6
      r(X,Y,vcat(deleteat(Z,char[3]),[Z[char[3]]]),char[2])
    end
  end
  ci=G4_22FetchIndexChars(ST, para)[i]
  m=rep(chevieget(:G4_22,:mallechars)(ST)[ci])
  m=map(x->x.+0*prod(prod,para),m)
  map(w->prod(map(i->i>0 ? m[i] : inv(m[-i]//1),w)),Embed4_22[ST-3])
end)

chevieset(:G4_22,:Representation,function(ST,i)
  para=map(x->E.(x,0:x-1),chevieget(:G4_22,:ordergens)(ST))
  chevieget(:G4_22,:HeckeRepresentation)(ST,para,[],i)
end)

putfirst(l,i)=pushfirst!(deleteat(l,i),l[i])

chevieset(:G4_22, :SchurData, function (ST)
  map(chevieget(:G4_22, :mallechars)(ST))do char
    if ST in 4:7
      if char[1]==1 Dict(:order=>vcat(putfirst([1,2],char[2]),
        putfirst(3:5,char[3]),putfirst(6:8,char[4])))
      elseif char[1]==2 Dict(:order=>vcat([1,2],putfirst(3:5,char[3]),
        putfirst(6:8,char[4])),:rootPower=>(-1)^char[2])
      elseif char[1]==3 Dict(:order=>vcat(putfirst(1:2,char[3]),3:5,6:8),
        :rootPower=>E(3,char[2]))
      end
    elseif ST in 8:15
      if char[1]==1 Dict(:order=>vcat(putfirst([1,2],char[2]),
        putfirst(3:5,char[3]),putfirst(6:9,char[4])))
      elseif char[1]==2 Dict(:order=>vcat([1,2],putfirst(3:5,char[3]),
        5 .+combinations(1:4,2)[char[4]],
        5 .+setdiff(1:4,combinations(1:4,2)[char[4]])),:rootPower=>(-1)^char[2])
      elseif char[1]==3 Dict(:order=>vcat(putfirst([1,2],char[3]),
        3:5, putfirst(6:9,char[4])),:rootPower=>E(3,char[2]))
      elseif char[1]==4 Dict(:order=>vcat([1, 2],putfirst(3:5,char[3]),6:9),
        :rootPower=>E(4,char[2]))
      end
    elseif ST in 8:22
      if char[1]==1 Dict(:order=>vcat(putfirst([1,2],char[2]),
        putfirst(3:5, char[3]), putfirst(6:10, char[4])))
      elseif char[1]==2 Dict(:order=>vcat([1,2],2 .+deleteat(1:3,char[3]),
        [2+char[3]], 5 .+ combinations(1:5,2)[char[4]],
        5 .+setdiff(1:5,combinations(1:5,2)[char[4]])),:rootPower=>(-1)^char[2])
      elseif char[1]==3 Dict(:order=>vcat(putfirst([1, 2],char[3]),
        3:5,5 .+combinations(1:5,3)[char[4]],
        5 .+setdiff(1:5,combinations(1:5,3)[char[4]])),:rootPower=>E(3,char[2]))
      elseif char[1]==4 Dict(:order=>vcat([1,2],putfirst(3:5,char[3]),
        deleteat(6:10,char[4]),[5+char[4]]),:rootPower=>E(4,char[2]))
      elseif char[1]==5 Dict(:order=>vcat(putfirst([1,2],char[3]),
        deleteat(3:5, char[4]),[2+char[4]], 6:10), :rootPower => E(5, char[2]))
      elseif char[1]==6 Dict(:order=>vcat([1,2],3:5,putfirst(6:10, char[3])),
        :rootPower=>E(6,char[2]))
      end
    end
  end
end)

const SchurModels4_22=[[
  Dict(:coeff=>1,:vcyc=>[
   [[1,-1,0,0,0,0,0,0],1], [[1,-1,2,-1,-1,2,-1,-1],1],
   [[0,0,1,-1,0,0,0,0],1], [[0,0,1,0,-1,0,0,0],1],
   [[0,0,0,0,0,1,-1,0],1], [[0,0,0,0,0,1,0,-1],1],
   [[1,-1,1,-1,0,1,-1,0],1], [[1,-1,1,-1,0,1,0,-1],1],
   [[1,-1,1,0,-1,1,-1,0],1], [[1,-1,1,0,-1,1,0,-1],1]]),
  Dict(:coeff=>2,:factor=>[0,0,-1,0,1,0,0,0],:root=>[1,1,0,1,1,0,1,1]//2,
   :vcyc=>[
   [[0,0,1,-1,0,0,0,0],1], [[0,0,-1,0,1,0,0,0],1],
   [[0,0,0,0,0,-1,1,0],1], [[0,0,0,0,0,-1,0,1],1],
   [[-1,0,-1,0,0,-1,0,0,1],1], [[-1,0,0,0,-1,0,-1,0,1],1],
   [[-1,0,0,0,-1,0,0,-1,1],1], [[0,-1,-1,0,0,-1,0,0,1],1],
   [[0,-1,0,0,-1,0,-1,0,1],1], [[0,-1,0,0,-1,0,0,-1,1],1]]),
  Dict(:coeff=>3,:root=>[2,1,1,1,1,1,1,1]//3,:vcyc=>[
   [[-1,1,0,0,0,0,0,0],1], [[1,0,1,0,0,1,0,0,-1],1],
   [[1,0,1,0,0,0,1,0,-1],1], [[1,0,1,0,0,0,0,1,-1],1],
   [[1,0,0,1,0,1,0,0,-1],1], [[1,0,0,1,0,0,1,0,-1],1],
   [[1,0,0,1,0,0,0,1,-1],1], [[1,0,0,0,1,1,0,0,-1],1],
   [[1,0,0,0,1,0,1,0,-1],1], [[1,0,0,0,1,0,0,1,-1],1]])],
 [Dict(:vcyc=>[
   [[1,-1,0,0,0,0,0,0,0],1], [[0,0,1,-1,0,0,0,0,0],1],
   [[0,0,1,0,-1,0,0,0,0],1], [[0,0,0,0,0,1,-1,0,0],1],
   [[0,0,0,0,0,1,0,-1,0],1], [[0,0,0,0,0,1,0,0,-1],1],
   [[1,-1,1,-1,0,1,-1,0,0],1], [[1,-1,1,-1,0,1,0,-1,0],1],
   [[1,-1,1,-1,0,1,0,0,-1],1], [[1,-1,1,0,-1,1,-1,0,0],1],
   [[1,-1,1,0,-1,1,0,-1,0],1], [[1,-1,1,0,-1,1,0,0,-1],1],
   [[1,-1,2,-1,-1,2,-1,-1,0],1], [[1,-1,2,-1,-1,2,-1,0,-1],1],
   [[1,-1,2,-1,-1,2,0,-1,-1],1], [[2,-2,2,-1,-1,3,-1,-1,-1],1]]),
  Dict(:coeff=>-2,:factor=>[0,0,0,0,0,-1,1,0,0],
    :root=>[1,1,0,1,1,1,1,0,0]//2,:vcyc=>[
   [[0,0,-1,1,0,0,0,0,0],1], [[0,0,-1,0,1,0,0,0,0],1],
   [[0,0,0,0,0,1,0,-1,0],1], [[0,0,0,0,0,1,0,0,-1],1],
   [[0,0,0,0,0,0,1,-1,0],1], [[0,0,0,0,0,0,1,0,-1],1],
   [[0,0,-1,1,0,1,1,-1,-1],1], [[0,0,-1,0,1,1,1,-1,-1],1],
   [[-1,0,-1,0,0,0,0,-1,0,1],1], [[-1,0,-1,0,0,0,0,0,-1,1],1],
   [[0,-1,-1,0,0,0,0,-1,0,1],1], [[0,-1,-1,0,0,0,0,0,-1,1],1],
   [[-1,0,0,-1,0,0,-1,0,0,1],1], [[-1,0,0,0,-1,0,-1,0,0,1],1],
   [[0,-1,0,-1,0,0,-1,0,0,1],1], [[0,-1,0,0,-1,0,-1,0,0,1],1]]),
  Dict(:coeff=>3,:root=>[2,1,1,1,1,0,1,1,1]//3,:vcyc=>[
   [[-1,1,0,0,0,0,0,0,0],1], [[0,0,0,0,0,-1,0,1,0],1],
   [[0,0,0,0,0,-1,0,0,1],1], [[0,0,0,0,0,-1,1,0,0],1],
   [[0,-1,-1,0,0,-1,0,0,0,1],1], [[0,-1,0,-1,0,-1,0,0,0,1],1],
   [[0,-1,0,0,-1,-1,0,0,0,1],1], [[1,0,1,0,0,0,1,0,0,-1],1],
   [[1,0,1,0,0,0,0,1,0,-1],1], [[1,0,1,0,0,0,0,0,1,-1],1],
   [[1,0,0,1,0,0,1,0,0,-1],1], [[1,0,0,1,0,0,0,1,0,-1],1],
   [[1,0,0,1,0,0,0,0,1,-1],1], [[1,0,0,0,1,0,1,0,0,-1],1],
   [[1,0,0,0,1,0,0,1,0,-1],1], [[1,0,0,0,1,0,0,0,1,-1],1]]),
  Dict(:coeff=>-4,:root=>[2,2,2,1,1,1,1,1,1]//4,:vcyc=>[
   [[0,0,1,-1,0,0,0,0,0],1], [[0,0,1,0,-1,0,0,0,0],1],
   [[-1,0,-1,0,0,-1,0,0,0,1],1], [[0,-1,-1,0,0,-1,0,0,0,1],1],
   [[1,0,1,0,0,0,1,0,0,-1],1], [[1,0,1,0,0,0,0,1,0,-1],1],
   [[1,0,1,0,0,0,0,0,1,-1],1], [[0,1,1,0,0,0,1,0,0,-1],1],
   [[0,1,1,0,0,0,0,1,0,-1],1], [[0,1,1,0,0,0,0,0,1,-1],1],
   [[1,1,1,1,0,1,1,0,0,-2],1], [[1,1,1,1,0,1,0,1,0,-2],1],
   [[1,1,1,1,0,1,0,0,1,-2],1], [[1,1,1,0,1,1,1,0,0,-2],1],
   [[1,1,1,0,1,1,0,1,0,-2],1], [[1,1,1,0,1,1,0,0,1,-2],1]])],
 [Dict(:vcyc=>[
   [[1,-1,0,0,0,0,0,0,0,0],1], [[0,0,1,-1,0,0,0,0,0,0],1],
   [[0,0,1,0,-1,0,0,0,0,0],1], [[0,0,0,0,0,1,-1,0,0,0],1],
   [[0,0,0,0,0,1,0,-1,0,0],1], [[0,0,0,0,0,1,0,0,-1,0],1],
   [[0,0,0,0,0,1,0,0,0,-1],1], [[1,-1,1,-1,0,1,-1,0,0,0],1],
   [[1,-1,1,-1,0,1,0,-1,0,0],1], [[1,-1,1,-1,0,1,0,0,-1,0],1],
   [[1,-1,1,-1,0,1,0,0,0,-1],1], [[1,-1,1,0,-1,1,-1,0,0,0],1],
   [[1,-1,1,0,-1,1,0,-1,0,0],1], [[1,-1,1,0,-1,1,0,0,-1,0],1],
   [[1,-1,1,0,-1,1,0,0,0,-1],1], [[1,-1,2,-1,-1,2,-1,-1,0,0],1],
   [[1,-1,2,-1,-1,2,-1,0,-1,0],1], [[1,-1,2,-1,-1,2,-1,0,0,-1],1],
   [[1,-1,2,-1,-1,2,0,-1,-1,0],1], [[1,-1,2,-1,-1,2,0,-1,0,-1],1],
   [[1,-1,2,-1,-1,2,0,0,-1,-1],1], [[2,-2,2,-1,-1,3,-1,-1,-1,0],1],
   [[2,-2,2,-1,-1,3,-1,-1,0,-1],1], [[2,-2,2,-1,-1,3,-1,0,-1,-1],1],
   [[2,-2,2,-1,-1,3,0,-1,-1,-1],1], [[2,-2,3,-2,-1,4,-1,-1,-1,-1],1],
   [[2,-2,3,-1,-2,4,-1,-1,-1,-1],1], [[3,-3,4,-2,-2,4,-1,-1,-1,-1],1]]),
  Dict(:coeff=>-2,:root=>[1,1,1,1,0,1,1,0,0,0]//2,:vcyc=>[
   [[0,0,1,0,-1,0,0,0,0,0],1], [[0,0,0,1,-1,0,0,0,0,0],1],
   [[0,0,0,0,0,1,0,-1,0,0],1], [[0,0,0,0,0,1,0,0,-1,0],1],
   [[0,0,0,0,0,1,0,0,0,-1],1], [[0,0,0,0,0,0,1,-1,0,0],1],
   [[0,0,0,0,0,0,1,0,-1,0],1], [[0,0,0,0,0,0,1,0,0,-1],1],
   [[0,0,1,0,-1,1,1,-1,-1,0],1], [[0,0,1,0,-1,1,1,-1,0,-1],1],
   [[0,0,1,0,-1,1,1,0,-1,-1],1], [[0,0,0,1,-1,1,1,-1,-1,0],1],
   [[0,0,0,1,-1,1,1,-1,0,-1],1], [[0,0,0,1,-1,1,1,0,-1,-1],1],
   [[0,0,1,1,-2,1,2,-1,-1,-1],1], [[0,0,1,1,-2,2,1,-1,-1,-1],1],
   [[-1,0,-1,0,0,-1,0,0,0,0,1],1], [[1,0,1,0,0,0,1,0,0,0,-1],1],
   [[0,1,1,0,0,1,0,0,0,0,-1],1], [[0,-1,-1,0,0,0,-1,0,0,0,1],1],
   [[0,-1,0,0,-1,0,0,-1,0,0,1],1], [[0,-1,0,0,-1,0,0,0,-1,0,1],1],
   [[0,-1,0,0,-1,0,0,0,0,-1,1],1], [[-1,0,0,0,-1,0,0,-1,0,0,1],1],
   [[-1,0,0,0,-1,0,0,0,-1,0,1],1], [[-1,0,0,0,-1,0,0,0,0,-1,1],1],
   [[-1,0,0,0,-1,1,1,-1,-1,-1,1],1], [[0,-1,0,0,-1,1,1,-1,-1,-1,1],1]]),
  Dict(:coeff=>3,:root=>[2,1,1,1,1,1,1,1,0,0]//3,:vcyc=>[
   [[-1,1,0,0,0,0,0,0,0,0],1], [[0,0,0,0,0,1,0,0,-1,0],1],
   [[0,0,0,0,0,1,0,0,0,-1],1], [[0,0,0,0,0,0,1,0,-1,0],1],
   [[0,0,0,0,0,0,1,0,0,-1],1], [[0,0,0,0,0,0,0,1,-1,0],1],
   [[0,0,0,0,0,0,0,1,0,-1],1], [[1,-1,0,0,0,1,1,0,-1,-1],1],
   [[1,-1,0,0,0,1,0,1,-1,-1],1], [[1,-1,0,0,0,0,1,1,-1,-1],1],
   [[0,-1,-1,0,0,0,0,0,-1,0,1],1], [[0,-1,-1,0,0,0,0,0,0,-1,1],1],
   [[0,-1,0,-1,0,0,0,0,-1,0,1],1], [[0,-1,0,-1,0,0,0,0,0,-1,1],1],
   [[0,-1,0,0,-1,0,0,0,-1,0,1],1], [[0,-1,0,0,-1,0,0,0,0,-1,1],1],
   [[1,0,1,0,0,1,0,0,0,0,-1],1], [[1,0,1,0,0,0,1,0,0,0,-1],1],
   [[1,0,1,0,0,0,0,1,0,0,-1],1], [[1,0,0,1,0,1,0,0,0,0,-1],1],
   [[1,0,0,1,0,0,1,0,0,0,-1],1], [[1,0,0,1,0,0,0,1,0,0,-1],1],
   [[1,0,0,0,1,1,0,0,0,0,-1],1], [[1,0,0,0,1,0,1,0,0,0,-1],1],
   [[1,0,0,0,1,0,0,1,0,0,-1],1], [[-1,-1,-1,-1,0,0,0,0,-1,-1,2],1],
   [[-1,-1,-1,0,-1,0,0,0,-1,-1,2],1], [[-1,-1,0,-1,-1,0,0,0,-1,-1,2],1]]),
  Dict(:coeff=>-4,:root=>[2,2,2,1,1,1,1,1,1,0]//4,:vcyc=>[
   [[0,0,-1,1,0,0,0,0,0,0],1], [[0,0,1,0,-1,0,0,0,0,0],1],
   [[0,0,0,0,0,1,0,0,0,-1],1], [[0,0,0,0,0,0,1,0,0,-1],1],
   [[0,0,0,0,0,0,0,1,0,-1],1], [[0,0,0,0,0,0,0,0,1,-1],1],
   [[1,0,1,0,0,1,0,0,0,0,-1],1], [[1,0,1,0,0,0,1,0,0,0,-1],1],
   [[1,0,1,0,0,0,0,1,0,0,-1],1], [[1,0,1,0,0,0,0,0,1,0,-1],1],
   [[0,1,1,0,0,1,0,0,0,0,-1],1], [[0,1,1,0,0,0,1,0,0,0,-1],1],
   [[0,1,1,0,0,0,0,1,0,0,-1],1], [[0,1,1,0,0,0,0,0,1,0,-1],1],
   [[-1,0,0,-1,0,0,0,0,0,-1,1],1], [[0,-1,0,-1,0,0,0,0,0,-1,1],1],
   [[-1,0,0,0,-1,0,0,0,0,-1,1],1], [[0,-1,0,0,-1,0,0,0,0,-1,1],1],
   [[-1,-1,-1,-1,0,-1,-1,0,0,0,2],1], [[-1,-1,-1,-1,0,-1,0,-1,0,0,2],1],
   [[1,1,1,1,0,1,0,0,1,0,-2],1], [[1,1,1,1,0,0,1,1,0,0,-2],1],
   [[-1,-1,-1,-1,0,0,-1,0,-1,0,2],1], [[-1,-1,-1,-1,0,0,0,-1,-1,0,2],1],
   [[-1,-1,0,-1,-1,-1,0,0,0,-1,2],1], [[-1,-1,0,-1,-1,0,-1,0,0,-1,2],1],
   [[-1,-1,0,-1,-1,0,0,-1,0,-1,2],1], [[-1,-1,0,-1,-1,0,0,0,-1,-1,2],1]]),
  Dict(:coeff=>5,:root=>[3,2,2,2,1,1,1,1,1,1]//5,:vcyc=>[
   [[1,-1,0,0,0,0,0,0,0,0],1], [[0,0,-1,0,1,0,0,0,0,0],1],
   [[0,0,0,-1,1,0,0,0,0,0],1], [[1,0,1,0,0,1,0,0,0,0,-1],1],
   [[1,0,1,0,0,0,1,0,0,0,-1],1], [[1,0,1,0,0,0,0,1,0,0,-1],1],
   [[1,0,1,0,0,0,0,0,1,0,-1],1], [[1,0,1,0,0,0,0,0,0,1,-1],1],
   [[1,0,0,1,0,1,0,0,0,0,-1],1], [[1,0,0,1,0,0,1,0,0,0,-1],1],
   [[1,0,0,1,0,0,0,1,0,0,-1],1], [[1,0,0,1,0,0,0,0,1,0,-1],1],
   [[1,0,0,1,0,0,0,0,0,1,-1],1], [[0,-1,0,0,-1,-1,0,0,0,0,1],1],
   [[0,-1,0,0,-1,0,-1,0,0,0,1],1], [[0,-1,0,0,-1,0,0,-1,0,0,1],1],
   [[0,-1,0,0,-1,0,0,0,-1,0,1],1], [[0,-1,0,0,-1,0,0,0,0,-1,1],1],
   [[1,1,1,1,0,1,1,0,0,0,-2],1], [[1,1,1,1,0,1,0,1,0,0,-2],1],
   [[1,1,1,1,0,1,0,0,1,0,-2],1], [[1,1,1,1,0,1,0,0,0,1,-2],1],
   [[1,1,1,1,0,0,1,1,0,0,-2],1], [[1,1,1,1,0,0,1,0,1,0,-2],1],
   [[1,1,1,1,0,0,1,0,0,1,-2],1], [[1,1,1,1,0,0,0,1,1,0,-2],1],
   [[1,1,1,1,0,0,0,1,0,1,-2],1], [[1,1,1,1,0,0,0,0,1,1,-2],1]]),
  Dict(:coeff=>-6,:root=>[3,3,2,2,2,2,1,1,1,1]//6,:vcyc=>[
   [[0,0,0,0,0,1,-1,0,0,0],1], [[0,0,0,0,0,1,0,-1,0,0],1],
   [[0,0,0,0,0,1,0,0,-1,0],1], [[0,0,0,0,0,1,0,0,0,-1],1],
   [[-1,0,-1,0,0,-1,0,0,0,0,1],1], [[-1,0,0,-1,0,-1,0,0,0,0,1],1],
   [[-1,0,0,0,-1,-1,0,0,0,0,1],1], [[0,1,1,0,0,1,0,0,0,0,-1],1],
   [[0,1,0,1,0,1,0,0,0,0,-1],1], [[0,1,0,0,1,1,0,0,0,0,-1],1],
   [[1,1,1,1,0,1,1,0,0,0,-2],1], [[1,1,1,1,0,1,0,1,0,0,-2],1],
   [[1,1,1,1,0,1,0,0,1,0,-2],1], [[1,1,1,1,0,1,0,0,0,1,-2],1],
   [[1,1,1,0,1,1,1,0,0,0,-2],1], [[1,1,1,0,1,1,0,1,0,0,-2],1],
   [[1,1,1,0,1,1,0,0,1,0,-2],1], [[1,1,1,0,1,1,0,0,0,1,-2],1],
   [[1,1,0,1,1,1,1,0,0,0,-2],1], [[1,1,0,1,1,1,0,1,0,0,-2],1],
   [[1,1,0,1,1,1,0,0,1,0,-2],1], [[1,1,0,1,1,1,0,0,0,1,-2],1],
   [[2,1,1,1,1,1,1,1,0,0,-3],1], [[2,1,1,1,1,1,1,0,1,0,-3],1],
   [[2,1,1,1,1,1,1,0,0,1,-3],1], [[2,1,1,1,1,1,0,1,1,0,-3],1],
   [[2,1,1,1,1,1,0,1,0,1,-3],1], [[2,1,1,1,1,1,0,0,1,1,-3],1]])]]

chevieset(:G4_22,:SchurModels,ST->SchurModels4_22[G4_22type(ST)])

# index in "generic group" G7, G11 or G19
chevieset(:G4_22,:index,ST->
  [6, 2, 3, 1, 6, 3, 2, 1, 12, 6, 4, 2, 6, 3, 2, 1, 10, 5, 15][ST-3])

chevieset(:G4_22,:FactorizedSchurElement,function(ST,charpara,para,rootpara)
  Y=vcat(chevieget(:G4_22,:ParamSpecialization)(ST,para)...)
  ci=chevieget(:G4_22,:CharInfo)(ST)
  ind=G4_22FetchIndexChars(ST,para)[findfirst(==(charpara),ci[:charparams])]
  data=chevieget(:G4_22,:SchurData)(ST)[ind]
  model=chevieget(:G4_22,:SchurModels)(ST)[charpara[1]]
  VFactorSchurElement(Y,model,data)//chevieget(:G4_22,:index)(ST)
end)

chevieset(:G4_22,:SchurElement,function(ST,charpara,para,rootpara)
  Y=vcat(chevieget(:G4_22,:ParamSpecialization)(ST,para)...)
  ci=chevieget(:G4_22,:CharInfo)(ST)
  ind=G4_22FetchIndexChars(ST,para)[findfirst(==(charpara),ci[:charparams])]
  data=chevieget(:G4_22,:SchurData)(ST)[ind]
  model=chevieget(:G4_22,:SchurModels)(ST)[charpara[1]]
  VcycSchurElement(Y,model,data)//chevieget(:G4_22,:index)(ST)
end)

malleclasses4_22=[
  vcat(1 .=>0:11,2 .=>0:5, 3 .=>0:11,4 .=>0:11),
  vcat(1 .=>0:23,2 .=>0:11,3 .=>0:23,4 .=>0:23,5 .=>0:11),
  vcat(1 .=>0:59,2 .=>0:29,3 .=>0:59,4 .=>0:59,5 .=>0:59)]

chevieset(:G4_22, :malleclasses, ST->malleclasses4_22[G4_22type(ST)])

const classes_orders4_22=[
    (z = [1, 6, 4, 4],
     ord = [1, 12, 6, 4, 3, 12, 2, 12, 3, 4, 6, 12, 2, 12, 6, 4, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12]),
    (z = [1, 12, 8, 6, 6],
     ord = [1, 24, 12, 8, 6, 24, 4, 24, 3, 8, 12, 24, 2, 24, 12, 8, 3, 24, 4, 24, 6, 8, 12, 24, 2, 24, 12, 8, 6, 24, 4, 24, 6, 8, 12, 24, 3, 24, 12, 24, 6, 24, 12, 24, 3, 24, 12, 24, 6, 24, 12, 24, 3, 24, 12, 24, 6, 24, 12, 24, 4, 24, 12, 8, 12, 24, 4, 24, 12, 8, 12, 24, 4, 24, 12, 8, 12, 24, 4, 24, 12, 8, 12, 24, 2, 24, 12, 8, 6, 24, 4, 24, 6, 8, 12, 24]),
    (z = [1, 30, 20, 12, 12],
     ord = [1, 60, 30, 20, 15, 12, 10, 60, 15, 20, 6, 60, 5, 60, 30, 4, 15, 60, 10, 60, 3, 20, 30, 60, 5, 12, 30, 20, 15, 60, 2, 60, 15, 20, 30, 12, 5, 60, 30, 20, 3, 60, 10, 60, 15, 4, 30, 60, 5, 60, 6, 20, 15, 60, 10, 12, 15, 20, 30, 60, 2, 60, 30, 20, 30, 12, 10, 60, 30, 20, 6, 60, 10, 60, 30, 4, 30, 60, 10, 60, 6, 20, 30, 60, 10, 12, 30, 20, 30, 60, 3, 60, 30, 60, 15, 12, 30, 60, 15, 60, 6, 60, 15, 60, 30, 12, 15, 60, 30, 60, 3, 60, 30, 60, 15, 12, 30, 60, 15, 60, 6, 60, 15, 60, 30, 12, 15, 60, 30, 60, 3, 60, 30, 60, 15, 12, 30, 60, 15, 60, 6, 60, 15, 60, 30, 12, 15, 60, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60])]

chevieset(:G4_22, :indexclasses, function(ST)
  p=chevieget(:G4_22, :malleclasses)(ST)
  g(a,b)=filter(i->mod(p[i][2],a)==b[p[i][1]],1:length(p))
  if     ST==4  g(6, [0, 3, 2, 0])
  elseif ST==5  g(2, [0, 1, 0, 0])
  elseif ST==6  g(3, [0, 0, 2, 0])
  elseif ST==7  g(1, [0, 0, 0, 0])
  elseif ST==8  g(6, [0, 3, 2, 0, 0])
  elseif ST==9  g(3, [0, 0, 2, 0, 0])
  elseif ST==10 g(2, [0, 1, 0, 0, 0])
  elseif ST==11 g(1, [0, 0, 0, 0, 0])
  elseif ST==12 g(12, [0, 0, 8, 3, 6])
  elseif ST==13 g(6, [0, 0, 2, 3, 0])
  elseif ST==14 g(4, [0, 0, 0, 3, 2])
  elseif ST==15 g(2, [0, 0, 0, 1, 0])
  elseif ST==16 g(6, [0, 3, 2, 0, 0])
  elseif ST==17 g(3, [0, 0, 2, 0, 0])
  elseif ST==18 g(2, [0, 1, 0, 0, 0])
  elseif ST==19 g(1, [0, 0, 0, 0, 0])
  elseif ST==20 g(10, [0, 5, 0, 4, 8])
  elseif ST==21 g(5, [0, 0, 0, 4, 3])
  elseif ST==22 g(15, [0, 0, 5, 9, 3])
  end
end)

chevieset(:G4_22, :ClassInfo, function(ST)
  p=chevieget(:G4_22, :malleclasses)(ST)
  res=Dict{Symbol, Any}()
  res[:indexclasses]=chevieget(:G4_22,:indexclasses)(ST)
  f(class,z)=vcat([Int[],[1],[2],[3],[3,3]][class[1]],repeat(z,class[2]))
  h(z,l)=map(x->Replace(f(x, z), l...),p[res[:indexclasses]])
  if ST==4
    res[:classtext] = h([3, 1], [[2], Int[], [1, 3, 1], [2], [3], [1]])
    z = "121212"
  elseif ST == 5
    res[:classtext] = h([2, 3], [[1], Int[], [2], [1], [3], [2]])
    z = "1212"
  elseif ST == 6
    res[:classtext] = h([3, 1], [[2], Int[], [3], [2]])
    z = "212121"
  elseif ST == 7
    res[:classtext] = h([1, 2, 3], Vector{Int}[])
    z = "123"
  elseif ST == 8
    res[:classtext] = h([3, 1], [[2], Int[], [1, 3, 1], [2], [3], [1]])
    z = "121212"
  elseif ST == 9
    res[:classtext] = h([3, 1], [[2], Int[], [3], [2]])
    z = "212121"
  elseif ST == 10
    res[:classtext] = h([2, 3], [[1], Int[], [2], [1], [3], [2]])
    z = "1212"
  elseif ST == 11
    res[:classtext] = h([1, 2, 3], Vector{Int}[])
    z = "123"
  elseif ST == 12
    res[:classtext] = h([1, 2], [[3], Int[], [2, 1, 2, 1, 2], [2, 3]])
    z = "123123123123"
  elseif ST == 13
    res[:classtext] = map(x->Replace(x,[0],[1,2,3,1,2,3,1,2,3]),
      [Int[],[0],[0,0],[0,0,0],[2],[2,0],[3,1,2],[3,1,2,0],[3,1,2,0,0],[3,1,2,0,0,0],[2,3,1,2,1],[2,3,1,2,1,0],[2,3,1,2,1,0,0],[2,3,1,2,1,0,0,0],[1],[1,0]])
      z = "123123123"
  elseif ST == 14
    res[:classtext] = h([1, 2], [[3], Int[]])
    z = "12121212"
  elseif ST == 15
    res[:classtext] = h([1,2,3],[[3,3],[4],[3,1,2,3],[4,1,2],[4],[3]])
    z = "12312"
  elseif ST == 16
    res[:classtext] = h([3, 1], [[2], Int[], [1, 3, 1], [2], [3], [1]])
    z = "121212"
  elseif ST == 17
    res[:classtext] = h([3, 1], [[2], Int[], [3], [2]])
    z = "212121"
  elseif ST == 18
    res[:classtext] = h([2, 3], [[1], Int[], [2], [1], [3], [2]])
    z = "1212"
  elseif ST == 19
    res[:classtext] = h([1, 2, 3], Int[])
    z = "123"
  elseif ST == 20
    res[:classtext]=h([1,2],[[3],Int[],[1,1],Int[],[1,2,1],[3],[2],[1],[3],[2]])
    z = "2121212121"
  elseif ST == 21
    res[:classtext] = h([1, 2], [[3], Int[]])
    z = "1212121212"
  elseif ST == 22
    res[:classtext] = h([1, 2], [[3], Int[], [2, 1, 2, 1, 2], [2, 3]])
    z = "123123123123123"
  end
  res[:classnames]=map(x->isempty(x) ? "." : replace("123"[x],z=>"z"),
                       res[:classtext])
  zord=classes_orders4_22[G4_22type(ST)]
  res[:classes]=zord.z[first.(p[res[:indexclasses]])]
  res[:orders]=zord.ord[res[:indexclasses]]
  res[:classparams]=res[:classnames]
  res[:powermaps]=chevieget(:G4_22,:PowerMaps)(ST)
  res
end)

chevieset(:G4_22, :DecompositionMatrix, function (ST, p)
  T=chevieget(:G4_22, :CharTable)(ST)
  T[:name]=T[:identifier]
  m=DecompositionMatrix(mod(T,p))
  map(c->[c[1],m[c[1]][c[2]]], blocks(m))
end)

chevieset(:G4_22, :Ennola, function(ST)
  uc=chevieget(:G4_22, :UnipotentCharacters)(ST)
  if uc===nothing return nothing end
  res=fill(0,length(uc[:a]))
  for f in uc[:families]
    b=basis(Zbasedring(f))
    if !haskey(f,:ennola) f.ennola=f.special end
    if f.ennola>0 p=SPerm(b[f.ennola]*b, b)
    else p=SPerm(-b[-f.ennola]*b, b)
    end
    res[f[:charNumbers]]=invpermute(f[:charNumbers], p)
  end
  return SPerm(res)
end)

#------------------------------- 2G5 ------------------------------------
chevieset(Symbol("2G5"), :PhiFactors, [1, -1])
chevieset(Symbol("2G5"), :NrConjugacyClasses, 9)
chevieset(Symbol("2G5"), :ClassInfo, function()
  res=Dict{Symbol,Any}(:classtext=>[Int[],[1,2,2,1,2,2,1],[1,2,2,1,2,2,1,1],
    [1],[1,1,2,1,1],[1,1,2,2,1,1],[1,2],[1,2,1],[2,1,2,1]],
    :classes=>[12,6,6,6,12,6,6,6,12],:orders=>[2,24,24,24,6,8,24,8,6])
  res[:classnames]=joindigits.(res[:classtext])
  res
end)

chevieset(Symbol("2G5"), :CharInfo, function()
  res=Dict{Symbol,Any}(:charparams=>[[1,0],[1,8,2],[1,16],[2,9],[2,5,2],[2,1],
    [3,2],[3,4],[3,6]],:extRefl=>[1,6,2],:b=>[0,8,16,9,5,1,2,4,12],
    :B=>[0,8,16,15,11,7,14,4,12],:charRestrictions=>[1,5,9,10,14,18,20,19,21],
    :nrGroupClasses=>21)
  res[:charnames] = map(exceptioCharName, res[:charparams])
  return res
end)

chevieset(Symbol("2G5"),:CharTable,function()
  res=Dict{Symbol,Any}(:identifier=>"2G5",:size=>72,
    :centralizers=>[6,12,12,12,6,12,12,12,6],
    :irreducibles=>[
      [1,1,1,1,1,1,1,1,1],
      -[1,E(3),E(3,2),E(3),E(3,2),1,E(3,2),1,E(3)],
      [1,E(3,2),E(3),E(3,2),E(3),1,E(3),1,E(3,2)],
      [0,root(-2),-root(-2),-root(-2),0,root(-2),root(-2),-root(-2),0],
      [0,-root(-2)*E(3),root(-2)*E(3,2),root(-2)*E(3),0,-root(-2),-root(-2)*E(3,2),root(-2),0],
      -[0,root(-2)*E(3,2),-root(-2)*E(3),-root(-2)*E(3,2),0,root(-2),root(-2)*E(3),-root(-2),0],
      [1,-E(3),-E(3,2),-E(3),E(3,2),-1,-E(3,2),-1,E(3)],
      [1,-E(3,2),-E(3),-E(3,2),E(3),-1,-E(3),-1,E(3,2)],
      [1,-1,-1,-1,1,-1,-1,-1,1]])
  res
end)
