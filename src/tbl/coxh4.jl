#A  tbl/coxh4.jl        CHEVIE library       Meinolf Geck and Jean Michel
#Y  Copyright (C) 1992- The CHEVIE Team

chevieset(:H4, :ReflectionDegrees, [2, 12, 20, 30])

let a=-E(5,2)-E(5,3)
# from Humphreys, "Reflection Groups and Coxeter Groups", 2.13
chevieset(:H4, :simpleroots,
  [ a -1  a-1 0;
   -a  1  a-1 0;
    1 a-1 -a  0;
   -1  -a 0  a-1]//2)
end

# The Galois-invariant model is CoxeterGroup(roots,coroots) given below
chevieset(:H4, :InvariantModel, Dict{Symbol, Any}(
:Aut=>[[1,2,1,2,3,2,1,2,1],[3],[2],    #galois is Aut(H4,Aut)
       [1,2,3,4,3,2,1,2,1,3,2,1,2,3,4,3,2,1,2,3,1,2,1,2,3,4,3,2,1]],
:roots => [[(5 - root(5)) // 2, -root(5), -1 + root(5), 0],
         [-2 * root(5), 1, 0, 0],
         [2 * root(5), 1, 0, 0],
         [(5-root(5))//4,(-1+root(5))//4,(-3-root(5))//2,(60-12*root(5))//25]],
:coroots => [[(5+root(5))//40,(-1 - root(5)) // 4, (-3 + root(5)) // 16, 0],
             [(-3 * root(5)) // 20, 1 // 2, (2 - root(5)) // 8, 0],
             [(3 * root(5)) // 20, 1 // 2, (2 + root(5)) // 8, 0],
             [-(root(5))//20,-1//2,(-4-root(5))//8,(25-5*root(5))//96]],
:conj => [[(5 - root(5)) // 2, -(root(5)), -1 + root(5), 0],
        [-2 * root(5), 1, 0, 0],
        [2 * root(5), 1, 0, 0],
        [(5-root(5))//4,(-1+root(5))//4,(-3-root(5))//2,(60-12*root(5))//25]]))
# usual matgens^conj=invariant matgens

let a=E(5,2)+E(5,3)
chevieset(:H4, :CartanMat, [2  a  0  0;
                            a  2 -1  0;
                            0 -1  2 -1;
                            0  0 -1  2])
end

chevieset(:H4,:words,[[],[1],[1,2],[1,3],[2,3],[1,2,3],[1,2,4],[1,3,4],[2,4,3],
  [1,2,1,2],[0],[1,2,1,2,3],[1,2,1,2,4],[1,2,0],[1,2,3,2,0],[1,2,3,1,2,3,1,2,3],
  [1,2,3,1,2,3,0],[3,2,1,2,3,1,2,3,0],[3,1,2,3,1,2,3,1,2,3,0],
  [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],[1,2,3,1,2,3,1,2,3,1,2,3,0],[0,0,0,0],
  [1,2,1,2,1,3,2,1,2,1,3,4,3,2,0],[1,2,1,2,1,3,2,1,2,1,3,2,1,4,3,2,0],
  [1,2,1,2,3,2,0,0,0,0],[1,2,3,2,1,2,1,3,2,1,2,3,4,3,2,1,2,1,3,2,0],
  [1,2,3,1,2,3,1,2,3,1,2,1,2,3,4,3,2,1,2,1,3,2,0],[0,0,0,0,0,0,0],
  [0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,4,3,2],[0,0,0,0,0,0,0,0,0],
  [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,4,3,2,1,2,1,3,2,1,2,3,4,3,2,1,2,1,3,2,0],
  [0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

chevieset(:H4, :WordsClassRepresentatives,
          map(x->Replace(x,[0],1:4), chevieget(:H4, :words)))

chevieset(:H4, :NrConjugacyClasses, 34)

chevieset(:H4, :ParabolicRepresentatives,s->
  [[Int[]],[[1]],[[1,2],[1,3],[2,3]],[[1,2,3],[1,2,4],[1,3,4],[2,3,4]],
   [1:4]][s+1])

chevieset(:H4, :PowerMaps, [nothing, [1, 1, 10, 1, 5, 3, 10, 5, 4, 3, 15, 5, 3, 18, 22, 10, 24, 26, 27, 1, 3, 15, 30, 32, 5, 33, 27, 22, 34, 33, 10, 32, 26, 1], [1, 2, 10, 4, 1, 16, 13, 2, 9, 3, 18, 20, 7, 23, 26, 6, 29, 30, 19, 20, 31, 33, 14, 34, 34, 33, 27, 30, 29, 18, 21, 1, 26, 34], nothing, [1, 2, 1, 4, 5, 20, 2, 8, 9, 1, 24, 12, 2, 29, 32, 20, 17, 34, 34, 20, 34, 32, 29, 24, 25, 1, 1, 24, 29, 34, 34, 32, 1, 34], nothing, [1, 2, 10, 4, 5, 16, 13, 8, 9, 3, 28, 12, 7, 23, 22, 6, 17, 30, 19, 20, 31, 15, 14, 24, 25, 33, 27, 11, 29, 18, 21, 32, 26, 34], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], nothing, [1, 2, 10, 4, 5, 16, 13, 8, 9, 3, 28, 12, 7, 23, 22, 6, 17, 30, 19, 20, 31, 15, 14, 24, 25, 33, 27, 11, 29, 18, 21, 32, 26, 34], nothing, nothing, nothing, [1, 2, 10, 4, 5, 16, 13, 8, 9, 3, 28, 12, 7, 23, 22, 6, 17, 30, 19, 20, 31, 15, 14, 24, 25, 33, 27, 11, 29, 18, 21, 32, 26, 34], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], nothing, nothing, nothing, [1, 2, 10, 4, 5, 16, 13, 8, 9, 3, 28, 12, 7, 23, 22, 6, 17, 30, 19, 20, 31, 15, 14, 24, 25, 33, 27, 11, 29, 18, 21, 32, 26, 34], nothing, nothing, nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]])

chevieset(:H4, :ClassInfo, function ()
  res=Dict{Symbol, Any}(:classtext=>chevieget(:H4, :WordsClassRepresentatives),
    :orders => [1, 2, 5, 2, 3, 10, 10, 6, 4, 5, 30, 6, 10, 20, 15, 10, 12, 10, 10, 2, 10, 15, 20, 6, 6, 5, 5, 30, 4, 10, 10, 3, 5, 2],
    :classes => [1, 60, 144, 450, 400, 720, 720, 1200, 1800, 144, 480, 1200, 720, 720, 480, 720, 1200, 24, 288, 60, 144, 480, 720, 40, 400, 24, 288, 480, 60, 24, 144, 40, 24, 1])
  res[:classnames]=joindigits.(chevieget(:H4, :words))
  res[:classnames]=map(x->replace(x, "0"=>"c"),res[:classnames])
  res[:classnames][1]="."
  res[:classparams]=res[:classnames]
  res
end)

chevieset(:H4, :CharInfo, function ()
  res=Dict{Symbol, Any}(:charparams => [[1, 0], [1, 60], [4, 1], [4, 31],
    [4, 7], [4, 37], [6, 12], [6, 20], [8, 12], [8, 13], [9, 2], [9, 22],
    [9, 6], [9, 26], [10, 12], [16, 11], [16, 13], [16, 3], [16, 21], [16, 6],
    [16, 18], [18, 10], [24, 11], [24, 7], [24, 12], [24, 6], [25, 4],
    [25, 16], [30, 10, 1], [30, 10, 2], [36, 5], [36, 15], [40, 8], [48, 9]],
  :gp => ["1_r", "1_r'", "4_t", "4_t'", "\\overline{4}_t", "\\overline{4}_t'",
          "6_s", "\\overline{6}_s", "8_r", "8_{rr}", "9_s", "9_s'",
          "\\overline{9}_s", "\\overline{9}_s'", "10_r", "16_t",
          "\\overline{16}_t", "16_{rr}", "16_{rr}'", "16_r", "16_r'", "18_r",
          "24_t", "\\overline{24}_t", "24_s", "\\overline{24}_s", "25_r",
          "25_r'", "30_s", "\\overline{30}_s", "36_{rr}", "36_{rr}'", "40_r",
          "48_{rr}"],
  :hgal => perm"(18,20)(19,21)", :extRefl => [1, 3, 7, 4, 2])
  res[:b]=map(x->x[2],res[:charparams])
  res[:charnames]=exceptioCharName.(res[:charparams])
  res
end)

chevieset(:H4, :vpolheckeirreducibles,
Vector{Pol{Cyc{Int64}}}[[Pol([1]),Pol([1],2),Pol([1],4),Pol([1],4),Pol([1],4),
Pol([1],6),Pol([1],6),Pol([1],6),Pol([1],6),Pol([1],8),Pol([1],8),
Pol([1],10),Pol([1],10),Pol([1],12),Pol([1],16),Pol([1],18),Pol([1],20),
Pol([1],24),Pol([1],28),Pol([1],30),Pol([1],32),Pol([1],32),Pol([1],36),
Pol([1],40),Pol([1],44),Pol([1],48),Pol([1],52),Pol([1],56),Pol([1],60),
Pol([1],72),Pol([1],76),Pol([1],80),Pol([1],96),Pol([1],120)],[Pol([1]),
Pol([-1]),Pol([1]),Pol([1]),Pol([1]),Pol([-1]),Pol([-1]),
Pol([-1]),Pol([-1]),Pol([1]),Pol([1]),Pol([-1]),Pol([-1]),
Pol([1]),Pol([1]),Pol([-1]),Pol([1]),Pol([1]),Pol([1]),
Pol([-1]),Pol([1]),Pol([1]),Pol([1]),Pol([1]),Pol([1]),
Pol([1]),Pol([1]),Pol([1]),Pol([1]),Pol([1]),Pol([1]),
Pol([1]),Pol([1]),Pol([1])],
[Pol([4]),Pol([-1,0,3]),Pol([E(5)+E(5,4),0,2],2),
 Pol([-2,0,2],2),Pol([-1,0,2],2),
Pol([E(5)+E(5,4),0,1],4),Pol([(-3+root(5))//2,0,1],
4),Pol([-2,0,1],4),Pol([-1,0,1],4),
Pol([E(5,2)+E(5,3),0,0,0,2],4),Pol([E(5)+E(5,4)],6),
Pol([1],10),Pol([E(5,2)+E(5,3),0,-1,0,1],6),
Pol([0]),Pol([(1+root(5))//2],12),Pol([E(5,
2)+E(5,3),0,0,0,0,0,1],12),Pol([0]),
Pol([1+root(5)],18),Pol([-E(5)-E(5,4),0,
(1+root(5))//2],20),Pol([-3,0,0,0,0,0,0,0,0,0,1],20),
Pol([-2,0,0,0,(1+root(5))//2],22),Pol([-E(5)-E(5,
4)],24),Pol([0]),Pol([2],30),Pol([-2,0,1],
32),Pol([-1+root(5)],36),Pol([E(5,2)+E(5,3),0,
E(5)+E(5,4)],38),Pol([E(5,2)+E(5,3)],42),Pol([0]),
Pol([1-root(5)],54),Pol([-2,0,-E(5)-E(5,4)],56),
Pol([-2],60),Pol([-1-root(5)],72),Pol([-4],
90)],[Pol([4]),Pol([-3,0,1]),Pol([2,0,
E(5)+E(5,4)]),Pol([2,0,-2]),Pol([2,0,-1]),
Pol([-1,0,-E(5)-E(5,4)]),Pol([-1,0,(3-root(5))//2]),
Pol([-1,0,2]),Pol([-1,0,1]),Pol([2,0,0,
0,E(5,2)+E(5,3)]),Pol([E(5)+E(5,4)],2),Pol([-1]),
Pol([-1,0,1,0,(1+root(5))//2]),Pol([0]),
Pol([(1+root(5))//2],4),Pol([-1,0,0,0,0,0,
(1+root(5))//2]),Pol([0]),Pol([1+root(5)],6),
Pol([(1+root(5))//2,0,-E(5)-E(5,4)],6),Pol([-1,0,0,
0,0,0,0,0,0,0,3]),Pol([(1+root(5))//2,0,0,0,-2],6),
Pol([-E(5)-E(5,4)],8),Pol([0]),Pol([2],10),
Pol([1,0,-2],10),Pol([-1+root(5)],12),
Pol([E(5)+E(5,4),0,E(5,2)+E(5,3)],12),Pol([E(5,2)+E(5,
3)],14),Pol([0]),Pol([1-root(5)],18),
Pol([-E(5)-E(5,4),0,-2],18),Pol([-2],20),
Pol([-1-root(5)],24),Pol([-4],30)],[Pol([4]),
Pol([-1,0,3]),Pol([E(5,2)+E(5,3),0,2],2),
Pol([-2,0,2],2),Pol([-1,0,2],2),Pol([E(5,
2)+E(5,3),0,1],4),Pol([(-3-root(5))//2,0,1],4),
Pol([-2,0,1],4),Pol([-1,0,1],4),
Pol([E(5)+E(5,4),0,0,0,2],4),Pol([E(5,2)+E(5,3)],6),
Pol([1],10),Pol([E(5)+E(5,4),0,-1,0,1],6),
Pol([0]),Pol([-E(5)-E(5,4)],12),
Pol([E(5)+E(5,4),0,0,0,0,0,1],12),Pol([0]),
Pol([1-root(5)],18),Pol([(1+root(5))//2,0,-E(5)-E(5,
4)],20),Pol([-3,0,0,0,0,0,0,0,0,0,1],20),
Pol([-2,0,0,0,-E(5)-E(5,4)],22),
Pol([(1+root(5))//2],24),Pol([0]),Pol([2],
30),Pol([-2,0,1],32),Pol([-1-root(5)],36),
Pol([E(5)+E(5,4),0,E(5,2)+E(5,3)],38),Pol([E(5)+E(5,
4)],42),Pol([0]),Pol([1+root(5)],54),Pol([-2,
0,(1+root(5))//2],56),Pol([-2],60),Pol([-1+root(5)],
72),Pol([-4],90)],[Pol([4]),Pol([-3,0,1]),
Pol([2,0,E(5,2)+E(5,3)]),Pol([2,0,-2]),
Pol([2,0,-1]),Pol([-1,0,(1+root(5))//2]),
Pol([-1,0,(3+root(5))//2]),Pol([-1,0,2]),
Pol([-1,0,1]),Pol([2,0,0,0,E(5)+E(5,4)]),
Pol([E(5,2)+E(5,3)],2),Pol([-1]),Pol([-1,0,
1,0,-E(5)-E(5,4)]),Pol([0]),Pol([-E(5)-E(5,4)],4),
Pol([-1,0,0,0,0,0,-E(5)-E(5,4)]),Pol([0]),
Pol([1-root(5)],6),Pol([-E(5)-E(5,4),0,
(1+root(5))//2],6),Pol([-1,0,0,0,0,0,0,0,0,0,3]),
Pol([-E(5)-E(5,4),0,0,0,-2],6),Pol([(1+root(5))//2],
8),Pol([0]),Pol([2],10),Pol([1,0,-2],10),
Pol([-1-root(5)],12),Pol([E(5,2)+E(5,3),0,E(5)+E(5,
4)],12),Pol([E(5)+E(5,4)],14),Pol([0]),
Pol([1+root(5)],18),Pol([(1+root(5))//2,0,-2],18),
Pol([-2],20),Pol([-1+root(5)],24),Pol([-4],
30)],[Pol([6]),Pol([-3,0,3]),Pol([1,0,
-1+root(5),0,1]),Pol([1,0,-4,0,1]),Pol([1,0,-2,
0,1]),Pol([-E(5)-E(5,4),0,E(5)+E(5,4)],2),
Pol([(3-root(5))//2,0,(-3+root(5))//2],2),Pol([2,0,
-2],2),Pol([1,0,-1],2),Pol([1,0,0,0,-1-root(5),
0,0,0,1]),Pol([-E(5)-E(5,4)],4),Pol([0]),
Pol([1,0,(1+root(5))//2,0,E(5,2)+E(5,3),0,-1],2),
Pol([E(5,2)+E(5,3)],6),Pol([(1+root(5))//2],8),
Pol([(1+root(5))//2,0,0,0,0,0,E(5,2)+E(5,3)],6),
Pol([-1],10),Pol([(7+root(5))//2],12),Pol([1,
0,-1,0,1],12),Pol([3,0,0,0,0,0,0,0,0,0,-3],10),
Pol([1,0,0,0,-1-root(5),0,0,0,1],12),
Pol([-E(5)-E(5,4)],16),Pol([E(5)+E(5,4)],18),
Pol([3],20),Pol([1,0,-2,0,1],20),
Pol([(7-root(5))//2],24),Pol([1,0,-1,0,1],24),
Pol([(1+root(5))//2],28),Pol([2],30),
Pol([(7-root(5))//2],36),Pol([1,0,-1+root(5),0,1],
36),Pol([3],40),Pol([(7+root(5))//2],48),
Pol([6],60)],[Pol([6]),Pol([-3,0,3]),
Pol([1,0,-1-root(5),0,1]),Pol([1,0,-4,0,1]),
Pol([1,0,-2,0,1]),Pol([(1+root(5))//2,0,E(5,
2)+E(5,3)],2),Pol([(3+root(5))//2,0,(-3-root(5))//2],2),
Pol([2,0,-2],2),Pol([1,0,-1],2),Pol([1,
0,0,0,-1+root(5),0,0,0,1]),Pol([(1+root(5))//2],4),
Pol([0]),Pol([1,0,-E(5)-E(5,4),0,E(5)+E(5,4),0,
-1],2),Pol([E(5)+E(5,4)],6),Pol([-E(5)-E(5,4)],8),
Pol([-E(5)-E(5,4),0,0,0,0,0,E(5)+E(5,4)],6),
Pol([-1],10),Pol([(7-root(5))//2],12),Pol([1,
0,-1,0,1],12),Pol([3,0,0,0,0,0,0,0,0,0,-3],10),
Pol([1,0,0,0,-1+root(5),0,0,0,1],12),
Pol([(1+root(5))//2],16),Pol([E(5,2)+E(5,3)],18),
Pol([3],20),Pol([1,0,-2,0,1],20),
Pol([(7+root(5))//2],24),Pol([1,0,-1,0,1],24),
Pol([-E(5)-E(5,4)],28),Pol([2],30),
Pol([(7+root(5))//2],36),Pol([1,0,-1-root(5),0,1],
36),Pol([3],40),Pol([(7-root(5))//2],48),
Pol([6],60)],[Pol([8]),Pol([-4,0,4]),
Pol([-2],2),Pol([2,0,-4,0,2]),Pol([2,0,
-2,0,2]),Pol([0]),Pol([1,0,-1],2),
Pol([-1,0,2,0,-2,0,1]),Pol([-1,0,1,0,-1,0,
1]),Pol([-2],4),Pol([0]),Pol([0]),
Pol([1,0,-1],4),Pol([-1],6),Pol([0]),
Pol([0]),Pol([1],10),Pol([3],12),
Pol([-2],14),Pol([0]),Pol([-2],16),
Pol([0]),Pol([-1],18),Pol([5],20),
Pol([2,0,-2,0,2],20),Pol([3],24),
Pol([-2],26),Pol([0]),Pol([4],30),
Pol([3],36),Pol([-2],38),Pol([5],40),
Pol([3],48),Pol([8],60)],[Pol([8]),
Pol([-4,0,4]),Pol([-2],2),Pol([2,0,-4,0,
2]),Pol([2,0,-2,0,2]),Pol([0]),Pol([1,
0,-1],2),Pol([-1,0,2,0,-2,0,1]),Pol([-1,0,1,
0,-1,0,1]),Pol([-2],4),Pol([-1],4),
Pol([0]),Pol([1,0,-1],4),Pol([0]),
Pol([1],8),Pol([0]),Pol([0]),
Pol([2],12),Pol([-3],14),Pol([0]),
Pol([2],16),Pol([1],16),Pol([0]),
Pol([4],20),Pol([1,0,-4,0,1],20),
Pol([-2],24),Pol([3],26),Pol([-1],28),
Pol([0]),Pol([2],36),Pol([2],38),
Pol([-4],40),Pol([-2],48),Pol([-8],60)],
[Pol([9]),Pol([-3,0,6]),
Pol([(-3+root(5))//2,0,3],2),Pol([1,0,-4,0,4]),
Pol([-3,0,3],2),Pol([E(5)+E(5,4),0,1],4),
Pol([-E(5)-E(5,4),0,-2,0,2],2),Pol([1,0,-3,0,2],
2),Pol([-2,0,1],4),Pol([(-3-root(5))//2,0,0,0,3],
4),Pol([0]),Pol([-1,0,0,0,1],6),
Pol([(1+root(5))//2,0,-1,0,-1,0,2],4),
Pol([E(5)+E(5,4)],8),Pol([0]),Pol([E(5,
2)+E(5,3),0,0,0,0,0,1],12),Pol([0]),
Pol([(3+3root(5))//2],16),Pol([(-3-root(5))//2,0,
(1+root(5))//2],18),Pol([5,0,-3,0,0,0,0,0,0,0,0,0,1],
18),Pol([1-root(5),0,0,0,(1+root(5))//2],20),
Pol([0]),Pol([E(5,2)+E(5,3)],24),Pol([0]),
Pol([0]),Pol([-3E(5)-3E(5,4)],32),
Pol([(-3+root(5))//2,0,-E(5)-E(5,4)],34),Pol([0]),
Pol([-3],40),Pol([-3E(5)-3E(5,4)],48),
Pol([1+root(5),0,-E(5)-E(5,4)],50),Pol([0]),
Pol([(3+3root(5))//2],64),Pol([9],80)],
[Pol([9]),Pol([-6,0,3]),Pol([3,0,
(-3+root(5))//2]),Pol([4,0,-4,0,1]),Pol([3,0,
-3]),Pol([-1,0,-E(5)-E(5,4)]),Pol([-2,0,2,0,
E(5)+E(5,4)]),Pol([-2,0,3,0,-1]),Pol([-1,0,2]),
Pol([3,0,0,0,(-3-root(5))//2]),Pol([0]),
Pol([-1,0,0,0,1]),Pol([-2,0,1,0,1,0,E(5,
2)+E(5,3)]),Pol([E(5)+E(5,4)],4),Pol([0]),
Pol([-1,0,0,0,0,0,(1+root(5))//2]),Pol([0]),
Pol([(3+3root(5))//2],8),Pol([(1+root(5))//2,0,
(-3-root(5))//2],8),Pol([-1,0,0,0,0,0,0,0,0,0,3,0,
-5]),Pol([(1+root(5))//2,0,0,0,1-root(5)],8),
Pol([0]),Pol([E(5,2)+E(5,3)],12),Pol([0]),
Pol([0]),Pol([-3E(5)-3E(5,4)],16),
Pol([-E(5)-E(5,4),0,(-3+root(5))//2],16),Pol([0]),
Pol([-3],20),Pol([-3E(5)-3E(5,4)],24),
Pol([-E(5)-E(5,4),0,1+root(5)],24),Pol([0]),
Pol([(3+3root(5))//2],32),Pol([9],40)],
[Pol([9]),Pol([-3,0,6]),
Pol([(-3-root(5))//2,0,3],2),Pol([1,0,-4,0,4]),
Pol([-3,0,3],2),Pol([E(5,2)+E(5,3),0,1],4),
Pol([(1+root(5))//2,0,-2,0,2],2),Pol([1,0,-3,0,
2],2),Pol([-2,0,1],4),Pol([(-3+root(5))//2,0,0,0,
3],4),Pol([0]),Pol([-1,0,0,0,1],6),
Pol([-E(5)-E(5,4),0,-1,0,-1,0,2],4),Pol([E(5,
2)+E(5,3)],8),Pol([0]),Pol([E(5)+E(5,4),0,0,0,0,0,
1],12),Pol([0]),Pol([-3E(5)-3E(5,4)],16),
Pol([(-3+root(5))//2,0,-E(5)-E(5,4)],18),Pol([5,0,
-3,0,0,0,0,0,0,0,0,0,1],18),Pol([1+root(5),0,0,0,
-E(5)-E(5,4)],20),Pol([0]),Pol([E(5)+E(5,4)],24),
Pol([0]),Pol([0]),Pol([(3+3root(5))//2],32),
Pol([(-3-root(5))//2,0,(1+root(5))//2],34),Pol([0]),
Pol([-3],40),Pol([(3+3root(5))//2],48),
Pol([1-root(5),0,(1+root(5))//2],50),Pol([0]),
Pol([-3E(5)-3E(5,4)],64),Pol([9],80)],
[Pol([9]),Pol([-6,0,3]),Pol([3,0,
(-3-root(5))//2]),Pol([4,0,-4,0,1]),Pol([3,0,
-3]),Pol([-1,0,(1+root(5))//2]),Pol([-2,0,2,0,
E(5,2)+E(5,3)]),Pol([-2,0,3,0,-1]),Pol([-1,0,2]),
Pol([3,0,0,0,(-3+root(5))//2]),Pol([0]),
Pol([-1,0,0,0,1]),Pol([-2,0,1,0,1,0,E(5)+E(5,
4)]),Pol([E(5,2)+E(5,3)],4),Pol([0]),Pol([-1,
0,0,0,0,0,-E(5)-E(5,4)]),Pol([0]),
Pol([-3E(5)-3E(5,4)],8),Pol([-E(5)-E(5,4),0,
(-3+root(5))//2],8),Pol([-1,0,0,0,0,0,0,0,0,0,3,0,
-5]),Pol([-E(5)-E(5,4),0,0,0,1+root(5)],8),
Pol([0]),Pol([E(5)+E(5,4)],12),Pol([0]),
Pol([0]),Pol([(3+3root(5))//2],16),
Pol([(1+root(5))//2,0,(-3-root(5))//2],16),Pol([0]),
Pol([-3],20),Pol([(3+3root(5))//2],24),
Pol([(1+root(5))//2,0,1-root(5)],24),Pol([0]),
Pol([-3E(5)-3E(5,4)],32),Pol([9],40)],
[Pol([10]),Pol([-5,0,5]),Pol([1,0,-2,0,
1]),Pol([3,0,-4,0,3]),Pol([1,0,-4,0,1]),
Pol([0]),Pol([-1,0,1,0,-1,0,1]),
Pol([-1,0,2,0,-2,0,1]),Pol([1,0,-1],2),
Pol([1,0,0,0,-2,0,0,0,1]),Pol([-1],4),
Pol([1,0,-1],4),Pol([-1,0,0,0,1,0,-1,0,0,0,
1]),Pol([1],6),Pol([-1],8),Pol([0]),
Pol([0]),Pol([5],12),Pol([1,0,-2,0,1],
12),Pol([-5,0,0,0,0,0,5],12),Pol([1,0,0,0,-2,
0,0,0,1],12),Pol([-1],16),Pol([1],18),
Pol([4],20),Pol([1,0,-4,0,1],20),Pol([5],
24),Pol([1,0,-2,0,1],24),Pol([-1],28),
Pol([6],30),Pol([5],36),Pol([1,0,-2,0,1],
36),Pol([4],40),Pol([5],48),Pol([10],60)],
[Pol([16]),Pol([-8,0,8]),Pol([2,0,
-3+root(5),0,2]),Pol([4,0,-8,0,4]),Pol([2,0,-6,
0,2]),Pol([-E(5)-E(5,4),0,E(5)+E(5,4)],2),Pol([-1,
0,(5-root(5))//2,0,(-5+root(5))//2,0,1]),Pol([-1,0,4,0,
-4,0,1]),Pol([2,0,-2],2),Pol([2,0,0,0,
-3-root(5),0,0,0,2]),Pol([E(5,2)+E(5,3)],4),Pol([1,
0,-1],4),Pol([-1,0,1,0,(3+root(5))//2,0,(-3-root(5))//2,0,
-1,0,1]),Pol([0]),Pol([-E(5)-E(5,4)],8),
Pol([(1+root(5))//2,0,0,0,0,0,E(5,2)+E(5,3)],6),
Pol([0]),Pol([4+2root(5)],12),
Pol([(1+root(5))//2,0,-2-root(5),0,(1+root(5))//2],12),
Pol([3,0,-5,0,0,0,0,0,5,0,-3],10),
Pol([(1+root(5))//2,0,0,0,-2,0,0,0,(1+root(5))//2],12),
Pol([(1+root(5))//2],16),Pol([0]),Pol([2],
20),Pol([1,0,0,0,1],20),Pol([-4+2root(5)],24),
Pol([E(5)+E(5,4),0,2-root(5),0,E(5)+E(5,4)],24),
Pol([E(5)+E(5,4)],28),Pol([0]),
Pol([4-2root(5)],36),Pol([-E(5)-E(5,4),0,-2,0,
-E(5)-E(5,4)],36),Pol([-2],40),Pol([-4-2root(5)],48),
Pol([-16],60)],[Pol([16]),Pol([-8,0,8]),
Pol([2,0,-3-root(5),0,2]),Pol([4,0,-8,0,4]),
Pol([2,0,-6,0,2]),Pol([(1+root(5))//2,0,E(5,
2)+E(5,3)],2),Pol([-1,0,(5+root(5))//2,0,(-5-root(5))//2,0,
1]),Pol([-1,0,4,0,-4,0,1]),Pol([2,0,-2],2),
Pol([2,0,0,0,-3+root(5),0,0,0,2]),Pol([E(5)+E(5,
4)],4),Pol([1,0,-1],4),Pol([-1,0,1,0,
(3-root(5))//2,0,(-3+root(5))//2,0,-1,0,1]),Pol([0]),
Pol([(1+root(5))//2],8),Pol([-E(5)-E(5,4),0,0,0,0,
0,E(5)+E(5,4)],6),Pol([0]),Pol([4-2root(5)],12),
Pol([-E(5)-E(5,4),0,-2+root(5),0,-E(5)-E(5,4)],12),
Pol([3,0,-5,0,0,0,0,0,5,0,-3],10),
Pol([-E(5)-E(5,4),0,0,0,-2,0,0,0,-E(5)-E(5,4)],12),
Pol([-E(5)-E(5,4)],16),Pol([0]),Pol([2],20),
Pol([1,0,0,0,1],20),Pol([-4-2root(5)],24),
Pol([E(5,2)+E(5,3),0,2+root(5),0,E(5,2)+E(5,3)],24),
Pol([E(5,2)+E(5,3)],28),Pol([0]),
Pol([4+2root(5)],36),Pol([(1+root(5))//2,0,-2,0,
(1+root(5))//2],36),Pol([-2],40),Pol([-4+2root(5)],48),
Pol([-16],60)],[Pol([16]),Pol([-6,0,10]),
Pol([-3,0,4],2),Pol([2,0,-8,0,6]),
Pol([1,0,-5,0,5]),Pol([1,-1,0,1],3),
Pol([1,0,-4,0,2],2),Pol([3,0,-5,0,3],2),
Pol([1,0,-3,0,2],2),Pol([-3,0,0,0,4],4),
Pol([1],5),Pol([-1,-1,0,0,0,1],5),
Pol([1,0,-2,0,-2,0,2],4),Pol([0]),
Pol([-1],10),Pol([1,0,0,-1,0,0,0,0,0,1],9),
Pol([0]),Pol([4],15),Pol([-2,0,1],17),
Pol([-4,0,0,5,0,-6,0,0,0,0,0,0,0,0,0,1],15),
Pol([-2,0,0,0,1],19),Pol([-1],20),
Pol([0]),Pol([-4],25),Pol([-1,0,2,0,-2],
25),Pol([-4],30),Pol([2,0,-1],32),Pol([1],
35),Pol([0]),Pol([4],45),Pol([-2,0,1],47),
Pol([4],50),Pol([-4],60),Pol([-16],75)],
[Pol([16]),Pol([-10,0,6]),Pol([4,0,-3]),
Pol([6,0,-8,0,2]),Pol([5,0,-5,0,1]),
Pol([-1,0,1,-1]),Pol([-2,0,4,0,-1]),
Pol([-3,0,5,0,-3]),Pol([-2,0,3,0,-1]),
Pol([4,0,0,0,-3]),Pol([1],3),Pol([-1,0,
0,0,1,1]),Pol([-2,0,2,0,2,0,-1]),Pol([0]),
Pol([-1],6),Pol([-1,0,0,0,0,0,1,0,0,-1]),
Pol([0]),Pol([4],9),Pol([1,0,-2],9),
Pol([-1,0,0,0,0,0,0,0,0,0,6,0,-5,0,0,4]),
Pol([1,0,0,0,-2],9),Pol([-1],12),
Pol([0]),Pol([-4],15),Pol([-2,0,2,0,-1],
15),Pol([-4],18),Pol([-1,0,2],18),Pol([1],
21),Pol([0]),Pol([4],27),Pol([1,0,-2],27),
Pol([4],30),Pol([-4],36),Pol([-16],45)],
[Pol([16]),Pol([-6,0,10]),Pol([-3,0,4],
2),Pol([2,0,-8,0,6]),Pol([1,0,-5,0,5]),
Pol([-1,-1,0,1],3),Pol([1,0,-4,0,2],2),
Pol([3,0,-5,0,3],2),Pol([1,0,-3,0,2],2),
Pol([-3,0,0,0,4],4),Pol([-1],5),Pol([1,
-1,0,0,0,1],5),Pol([1,0,-2,0,-2,0,2],4),
Pol([0]),Pol([-1],10),Pol([-1,0,0,-1,0,
0,0,0,0,1],9),Pol([0]),Pol([-4],15),
Pol([2,0,-1],17),Pol([4,0,0,5,0,-6,0,0,0,0,
0,0,0,0,0,1],15),Pol([2,0,0,0,-1],19),
Pol([-1],20),Pol([0]),Pol([4],25),
Pol([1,0,-2,0,2],25),Pol([-4],30),Pol([2,
0,-1],32),Pol([-1],35),Pol([0]),Pol([-4],
45),Pol([2,0,-1],47),Pol([4],50),Pol([-4],
60),Pol([16],75)],[Pol([16]),Pol([-10,0,
6]),Pol([4,0,-3]),Pol([6,0,-8,0,2]),
Pol([5,0,-5,0,1]),Pol([-1,0,1,1]),
Pol([-2,0,4,0,-1]),Pol([-3,0,5,0,-3]),
Pol([-2,0,3,0,-1]),Pol([4,0,0,0,-3]),
Pol([-1],3),Pol([-1,0,0,0,1,-1]),
Pol([-2,0,2,0,2,0,-1]),Pol([0]),
Pol([-1],6),Pol([-1,0,0,0,0,0,1,0,0,1]),
Pol([0]),Pol([-4],9),Pol([-1,0,2],9),
Pol([-1,0,0,0,0,0,0,0,0,0,6,0,-5,0,0,-4]),
Pol([-1,0,0,0,2],9),Pol([-1],12),
Pol([0]),Pol([4],15),Pol([2,0,-2,0,1],
15),Pol([-4],18),Pol([-1,0,2],18),Pol([-1],
21),Pol([0]),Pol([-4],27),Pol([-1,0,2],27),
Pol([4],30),Pol([-4],36),Pol([16],45)],
[Pol([18]),Pol([-9,0,9]),Pol([1,0,-4,0,
1]),Pol([5,0,-8,0,5]),Pol([3,0,-6,0,3]),
Pol([0]),Pol([-1,0,2,0,-2,0,1]),
Pol([-2,0,4,0,-4,0,2]),Pol([-1,0,2,0,-2,0,
1]),Pol([1,0,0,0,-4,0,0,0,1]),Pol([0]),
Pol([1,0,-1],4),Pol([-1,0,0,0,2,0,-2,0,0,0,
1]),Pol([-1],6),Pol([0]),Pol([0]),
Pol([0]),Pol([3],12),Pol([1,0,1,0,1],12),
Pol([-5,0,0,0,0,0,5],12),Pol([1,0,0,0,-4,0,
0,0,1],12),Pol([0]),Pol([-1],18),Pol([0]),
Pol([0]),Pol([3],24),Pol([1,0,1,0,1],24),
Pol([0]),Pol([-6],30),Pol([3],36),
Pol([1,0,-4,0,1],36),Pol([0]),Pol([3],
48),Pol([18],60)],[Pol([24]),Pol([-12,0,
12]),Pol([2,0,-5-root(5),0,2]),Pol([6,0,-12,0,
6]),Pol([4,0,-8,0,4]),Pol([(1+root(5))//2,0,E(5,
2)+E(5,3)],2),Pol([-1,0,(7+root(5))//2,0,(-7-root(5))//2,0,
1]),Pol([-2,0,6,0,-6,0,2]),Pol([-1,0,3,0,-3,
0,1]),Pol([2,0,0,0,-5+root(5),0,0,0,2]),
Pol([1],4),Pol([1,0,-1],4),Pol([-1,0,1,
0,(5-root(5))//2,0,(-5+root(5))//2,0,-1,0,1]),Pol([0]),
Pol([-1],8),Pol([-E(5)-E(5,4),0,0,0,0,0,E(5)+E(5,
4)],6),Pol([0]),Pol([1+3root(5)],12),
Pol([(1+root(5))//2,0,-root(5),0,(1+root(5))//2],12),
Pol([3,0,-5,0,0,0,0,0,5,0,-3],10),
Pol([(1+root(5))//2,0,0,0,-2root(5),0,0,0,(1+root(5))//2],
12),Pol([-1],16),Pol([0]),Pol([6],20),
Pol([2,0,-4,0,2],20),Pol([-1+3root(5)],24),
Pol([E(5)+E(5,4),0,-root(5),0,E(5)+E(5,4)],24),
Pol([1],28),Pol([0]),Pol([1-3root(5)],36),
Pol([-E(5)-E(5,4),0,2root(5),0,-E(5)-E(5,4)],36),
Pol([-6],40),Pol([-1-3root(5)],48),Pol([-24],
60)],[Pol([24]),Pol([-12,0,12]),Pol([2,0,
-5+root(5),0,2]),Pol([6,0,-12,0,6]),Pol([4,0,
-8,0,4]),Pol([-E(5)-E(5,4),0,E(5)+E(5,4)],2),
Pol([-1,0,(7-root(5))//2,0,(-7+root(5))//2,0,1]),
Pol([-2,0,6,0,-6,0,2]),Pol([-1,0,3,0,-3,0,
1]),Pol([2,0,0,0,-5-root(5),0,0,0,2]),Pol([1],
4),Pol([1,0,-1],4),Pol([-1,0,1,0,(5+root(5))//2,
0,(-5-root(5))//2,0,-1,0,1]),Pol([0]),Pol([-1],8),
Pol([(1+root(5))//2,0,0,0,0,0,E(5,2)+E(5,3)],6),
Pol([0]),Pol([1-3root(5)],12),Pol([-E(5)-E(5,
4),0,root(5),0,-E(5)-E(5,4)],12),Pol([3,0,-5,0,0,0,0,0,
5,0,-3],10),Pol([-E(5)-E(5,4),0,0,0,2root(5),0,0,0,
-E(5)-E(5,4)],12),Pol([-1],16),Pol([0]),
Pol([6],20),Pol([2,0,-4,0,2],20),
Pol([-1-3root(5)],24),Pol([E(5,2)+E(5,3),0,root(5),0,
E(5,2)+E(5,3)],24),Pol([1],28),Pol([0]),
Pol([1+3root(5)],36),Pol([(1+root(5))//2,0,-2root(5),
0,(1+root(5))//2],36),Pol([-6],40),Pol([-1+3root(5)],
48),Pol([-24],60)],[Pol([24]),Pol([-12,0,
12]),Pol([2,0,-5-root(5),0,2]),Pol([6,0,-12,0,
6]),Pol([4,0,-8,0,4]),Pol([(1+root(5))//2,0,E(5,
2)+E(5,3)],2),Pol([-1,0,(7+root(5))//2,0,(-7-root(5))//2,0,
1]),Pol([-2,0,6,0,-6,0,2]),Pol([-1,0,3,0,-3,
0,1]),Pol([2,0,0,0,-5+root(5),0,0,0,2]),
Pol([-E(5)-E(5,4)],4),Pol([1,0,-1],4),
Pol([-1,0,1,0,(5-root(5))//2,0,(-5+root(5))//2,0,-1,0,
1]),Pol([1],6),Pol([(1+root(5))//2],8),
Pol([-E(5)-E(5,4),0,0,0,0,0,E(5)+E(5,4)],6),
Pol([-1],10),Pol([-1+2root(5)],12),
Pol([E(5)+E(5,4),0,-root(5),0,E(5)+E(5,4)],12),
Pol([3,0,-5,0,0,0,0,0,5,0,-3],10),
Pol([E(5)+E(5,4),0,0,0,0,0,0,0,E(5)+E(5,4)],12),
Pol([-E(5)-E(5,4)],16),Pol([1],18),Pol([3],
20),Pol([1,0,-2,0,1],20),Pol([-1-2root(5)],24),
Pol([E(5,2)+E(5,3),0,root(5),0,E(5,2)+E(5,3)],24),
Pol([(1+root(5))//2],28),Pol([-4],30),
Pol([-1-2root(5)],36),Pol([E(5,2)+E(5,3),0,0,0,E(5,
2)+E(5,3)],36),Pol([3],40),Pol([-1+2root(5)],48),
Pol([24],60)],[Pol([24]),Pol([-12,0,12]),
Pol([2,0,-5+root(5),0,2]),Pol([6,0,-12,0,6]),
Pol([4,0,-8,0,4]),Pol([-E(5)-E(5,4),0,E(5)+E(5,
4)],2),Pol([-1,0,(7-root(5))//2,0,(-7+root(5))//2,0,1]),
Pol([-2,0,6,0,-6,0,2]),Pol([-1,0,3,0,-3,0,
1]),Pol([2,0,0,0,-5-root(5),0,0,0,2]),
Pol([(1+root(5))//2],4),Pol([1,0,-1],4),
Pol([-1,0,1,0,(5+root(5))//2,0,(-5-root(5))//2,0,-1,0,
1]),Pol([1],6),Pol([-E(5)-E(5,4)],8),
Pol([(1+root(5))//2,0,0,0,0,0,E(5,2)+E(5,3)],6),
Pol([-1],10),Pol([-1-2root(5)],12),Pol([E(5,
2)+E(5,3),0,root(5),0,E(5,2)+E(5,3)],12),Pol([3,0,-5,0,0,
0,0,0,5,0,-3],10),Pol([E(5,2)+E(5,3),0,0,0,0,0,0,0,
E(5,2)+E(5,3)],12),Pol([(1+root(5))//2],16),Pol([1],
18),Pol([3],20),Pol([1,0,-2,0,1],20),
Pol([-1+2root(5)],24),Pol([E(5)+E(5,4),0,-root(5),0,
E(5)+E(5,4)],24),Pol([-E(5)-E(5,4)],28),Pol([-4],30),
Pol([-1+2root(5)],36),Pol([E(5)+E(5,4),0,0,0,
E(5)+E(5,4)],36),Pol([3],40),Pol([-1-2root(5)],48),
Pol([24],60)],[Pol([25]),Pol([-10,0,15]),
Pol([-5,0,5],2),Pol([4,0,-12,0,9]),
Pol([2,0,-8,0,7]),Pol([-1,0,1],4),
Pol([2,0,-5,0,3],2),Pol([-1,0,4,0,-8,0,4]),
Pol([2,0,-4,0,3],2),Pol([-5,0,0,0,5],4),
Pol([0]),Pol([-2,0,0,0,1],6),Pol([2,0,
-3,0,-2,0,3],4),Pol([0]),Pol([0]),
Pol([-1,0,0,0,0,0,1],12),Pol([-1],12),
Pol([0]),Pol([0]),Pol([10,0,-6,0,0,0,0,
0,0,0,0,0,1],18),Pol([0]),Pol([0]),
Pol([0]),Pol([-5],24),Pol([-1,0,4,0,-2],
24),Pol([0]),Pol([0]),Pol([0]),
Pol([5],36),Pol([0]),Pol([0]),
Pol([-5],48),Pol([0]),Pol([25],72)],
[Pol([25]),Pol([-15,0,10]),Pol([5,0,-5]),
Pol([9,0,-12,0,4]),Pol([7,0,-8,0,2]),
Pol([-1,0,1]),Pol([-3,0,5,0,-2]),
Pol([-4,0,8,0,-4,0,1]),Pol([-3,0,4,0,-2]),
Pol([5,0,0,0,-5]),Pol([0]),Pol([-1,0,0,
0,2]),Pol([-3,0,2,0,3,0,-2]),Pol([0]),
Pol([0]),Pol([-1,0,0,0,0,0,1]),
Pol([-1],8),Pol([0]),Pol([0]),
Pol([-1,0,0,0,0,0,0,0,0,0,6,0,-10]),
Pol([0]),Pol([0]),Pol([0]),
Pol([-5],16),Pol([-2,0,4,0,-1],16),
Pol([0]),Pol([0]),Pol([0]),
Pol([5],24),Pol([0]),Pol([0]),
Pol([-5],32),Pol([0]),Pol([25],48)],
[Pol([30]),Pol([-15,0,15]),Pol([3,0,-6,
0,3]),Pol([7,0,-16,0,7]),Pol([5,0,-10,0,5]),
Pol([1,0,-1],2),Pol([-1,0,5,0,-5,0,1]),
Pol([-2,0,8,0,-8,0,2]),Pol([-1,0,4,0,-4,0,
1]),Pol([3,0,0,0,-6,0,0,0,3]),Pol([E(5)+E(5,
4)],4),Pol([1,0,-1],4),Pol([-1,0,2,0,3,0,-3,0,
-2,0,1]),Pol([-E(5)-E(5,4)],6),Pol([E(5,2)+E(5,3)],
8),Pol([1,0,0,0,0,0,-1],6),Pol([1],10),
Pol([(5+5root(5))//2],12),Pol([(1+root(5))//2,0,
-1-root(5),0,(1+root(5))//2],12),Pol([6,0,-5,0,0,0,0,0,
5,0,-6],10),Pol([(1+root(5))//2,0,0,0,-1-root(5),0,0,0,
(1+root(5))//2],12),Pol([E(5)+E(5,4)],16),
Pol([(1+root(5))//2],18),Pol([-3],20),
Pol([-1,0,2,0,-1],20),Pol([-5E(5)-5E(5,4)],24),
Pol([-E(5)-E(5,4),0,-1+root(5),0,-E(5)-E(5,4)],24),
Pol([E(5,2)+E(5,3)],28),Pol([-2],30),
Pol([-5E(5)-5E(5,4)],36),Pol([-E(5)-E(5,4),0,
-1+root(5),0,-E(5)-E(5,4)],36),Pol([-3],40),
Pol([(5+5root(5))//2],48),Pol([30],60)],
[Pol([30]),Pol([-15,0,15]),Pol([3,0,-6,
0,3]),Pol([7,0,-16,0,7]),Pol([5,0,-10,0,5]),
Pol([1,0,-1],2),Pol([-1,0,5,0,-5,0,1]),
Pol([-2,0,8,0,-8,0,2]),Pol([-1,0,4,0,-4,0,
1]),Pol([3,0,0,0,-6,0,0,0,3]),Pol([E(5,2)+E(5,
3)],4),Pol([1,0,-1],4),Pol([-1,0,2,0,3,0,-3,0,
-2,0,1]),Pol([(1+root(5))//2],6),Pol([E(5)+E(5,4)],
8),Pol([1,0,0,0,0,0,-1],6),Pol([1],10),
Pol([-5E(5)-5E(5,4)],12),Pol([-E(5)-E(5,4),0,
-1+root(5),0,-E(5)-E(5,4)],12),Pol([6,0,-5,0,0,0,0,0,5,
0,-6],10),Pol([-E(5)-E(5,4),0,0,0,-1+root(5),0,0,0,
-E(5)-E(5,4)],12),Pol([E(5,2)+E(5,3)],16),
Pol([-E(5)-E(5,4)],18),Pol([-3],20),Pol([-1,
0,2,0,-1],20),Pol([(5+5root(5))//2],24),
Pol([(1+root(5))//2,0,-1-root(5),0,(1+root(5))//2],24),
Pol([E(5)+E(5,4)],28),Pol([-2],30),
Pol([(5+5root(5))//2],36),Pol([(1+root(5))//2,0,
-1-root(5),0,(1+root(5))//2],36),Pol([-3],40),
Pol([-5E(5)-5E(5,4)],48),Pol([30],60)],
[Pol([36]),Pol([-15,0,21]),Pol([1,0,-7,
0,7]),Pol([6,0,-18,0,12]),Pol([3,0,-12,0,9]),
Pol([-2,0,1],4),Pol([4,0,-7,0,4],2),
Pol([-1,0,7,0,-11,0,5]),Pol([3,0,-6,0,3],2),
Pol([1,0,0,0,-7,0,0,0,7]),Pol([0]),
Pol([1,0,-2,0,0,0,1],4),Pol([1,0,3,0,-4,0,
-3,0,4],2),Pol([0]),Pol([0]),Pol([-2,0,
0,0,0,0,1],12),Pol([0]),Pol([-6],14),
Pol([-1,0,2,0,-2],14),Pol([-5,0,0,0,0,0,10,0,
-12,0,0,0,0,0,0,0,0,0,1],12),Pol([-1,0,0,0,2,0,0,
0,-2],14),Pol([0]),Pol([0]),Pol([0]),
Pol([0]),Pol([6],28),Pol([1,0,-2,0,2],
28),Pol([0]),Pol([0]),Pol([-6],42),
Pol([-1,0,2,0,-2],42),Pol([0]),Pol([6],
56),Pol([-36],70)],[Pol([36]),Pol([-21,0,
15]),Pol([7,0,-7,0,1]),Pol([12,0,-18,0,6]),
Pol([9,0,-12,0,3]),Pol([-1,0,2]),
Pol([-4,0,7,0,-4]),Pol([-5,0,11,0,-7,0,1]),
Pol([-3,0,6,0,-3]),Pol([7,0,0,0,-7,0,0,0,
1]),Pol([0]),Pol([-1,0,0,0,2,0,-1]),
Pol([-4,0,3,0,4,0,-3,0,-1]),Pol([0]),
Pol([0]),Pol([-1,0,0,0,0,0,2]),
Pol([0]),Pol([-6],10),Pol([-2,0,2,0,-1],
10),Pol([-1,0,0,0,0,0,0,0,0,0,12,0,-10,0,0,0,0,0,
5]),Pol([-2,0,0,0,2,0,0,0,-1],10),Pol([0]),
Pol([0]),Pol([0]),Pol([0]),Pol([6],20),Pol([2,0,-2,0,1],20),
Pol([0]),Pol([0]),Pol([-6],30),Pol([-2,0,2,0,-1],30),Pol([0]),Pol([6],
40),Pol([-36],50)],[Pol([40]),Pol([-20,0,
20]),Pol([4,0,-8,0,4]),Pol([10,0,-20,0,10]),
Pol([6,0,-14,0,6]),Pol([1,0,-1],2),Pol([-2,0,6,0,-6,0,2]),Pol([-3,0,10,0,-10,0,
3]),Pol([-1,0,5,0,-5,0,1]),Pol([4,0,0,0,-8,
0,0,0,4]),Pol([1],4),Pol([2,0,-2],4),
Pol([-2,0,2,0,4,0,-4,0,-2,0,2]),Pol([-1],6),
Pol([1],8),Pol([1,0,0,0,0,0,-1],6),Pol([1],10),Pol([-5],12),Pol([-1,0,2,0,
-1],12),Pol([6,0,-10,0,0,0,0,0,10,0,-6],10),
Pol([-1,0,0,0,2,0,0,0,-1],12),Pol([1],16),
Pol([-1],18),Pol([1],20),Pol([-2],22),Pol([-5],24),Pol([-1,0,2,0,-1],24),
Pol([1],28),Pol([4],30),Pol([-5],36),Pol([-1,0,2,0,-1],36),Pol([1],40),
Pol([-5],48),Pol([40],60)],[Pol([48]),Pol([-24,0,24]),Pol([4,0,-10,0,4]),
Pol([12,0,-24,0,12]),Pol([8,0,-16,0,8]),Pol([1,0,-1],2),Pol([-2,0,7,0,-7,0,2]),
Pol([-4,0,12,0,-12,0,4]),Pol([-2,0,6,0,-6,0,
2]),Pol([4,0,0,0,-10,0,0,0,4]),Pol([-1],4),
Pol([2,0,-2],4),Pol([-2,0,2,0,5,0,-5,0,-2,0,
2]),Pol([0]),Pol([1],8),Pol([1,0,0,0,0,0,-1],6),Pol([0]),Pol([2],12),Pol([1,0,0,
0,1],12),Pol([6,0,-10,0,0,0,0,0,10,0,-6],10),
Pol([1,0,0,0,0,0,0,0,1],12),Pol([1],16),Pol([0]),Pol([-6],20),Pol([-2,0,4,0,-2],
20),Pol([-2],24),Pol([-1,0,0,0,-1],24), Pol([-1],28),Pol([0]),Pol([2],36),
Pol([1,0,0,0,1],36),Pol([6],40),Pol([-2],48),Pol([-48],60)]])

chevieset(:H4, :CycPolSchurElements,[
  [1,0,2,2,2,2,3,3,4,4,5,5,6,6,10,10,12,15,20,30],
  [1,-60,2,2,2,2,3,3,4,4,5,5,6,6,10,10,12,15,20,30],
  [(5+root(5))//2,-1,2,2,2,2,3,3,5,1//5,4//5,6,6,10,3//10,7//10,2//15,7//15,
   8//15,13//15,1//30,11//30,19//30,29//30],
  [(5+root(5))//2,-31,2,2,2,2,3,3,5,1//5,4//5,6,6,10,3//10,7//10,2//15,7//15,
   8//15,13//15,1//30,11//30,19//30,29//30],
  [(5-root(5))//2,-1,2,2,2,2,3,3,5,2//5,3//5,6,6,10,1//10,9//10,1//15,4//15,
   11//15,14//15,7//30,13//30,17//30,23//30],
  [(5-root(5))//2,-31,2,2,2,2,3,3,5,2//5,3//5,6,6,10,1//10,9//10,1//15,4//15,
   11//15,14//15,7//30,13//30,17//30,23//30],
  [45+15*root(5),-6,2,2,2,2,2//5,2//5,3//5,3//5,1//30,11//30,19//30,29//30],
  [45-15*root(5),-6,2,2,2,2,1//5,1//5,4//5,4//5,7//30,13//30,17//30,23//30],
  [8,-6,3,3,5,5],
  [10,-6,3,3,4,4,5],
  [(5+root(5))//2,-2,2,2,2,2,4,4,5,1//5,4//5,10,3//10,7//10,1//20,9//20,
   11//20,19//20],
  [(5+root(5))//2,-22,2,2,2,2,4,4,5,1//5,4//5,10,3//10,7//10,1//20,9//20,
   11//20,19//20],
  [(5-root(5))//2,-2,2,2,2,2,4,4,5,2//5,3//5,10,1//10,9//10,3//20,7//20,
   13//20,17//20],
  [(5-root(5))//2,-22,2,2,2,2,4,4,5,2//5,3//5,10,1//10,9//10,3//20,7//20,
   13//20,17//20],
  [10,-6,2,2,2,2,3,3,10],
  [20,-6,3,3,2//5,2//5,3//5,3//5,1//20,9//20,11//20,19//20],
  [20,-6,3,3,1//5,1//5,4//5,4//5,3//20,7//20,13//20,17//20],
  [2,-3,2,3,3,5,5,15],
  [2,-18,2,3,3,5,5,15],
  [2,-3,2,3,3,5,5,15],
  [2,-18,2,3,3,5,5,15],
  [10,-6,2,2,2,2,5,6,6],
  [105-45*root(5),-6,4,4,2//5,2//5,3//5,3//5,2//15,7//15,8//15,13//15],
  [105+45*root(5),-6,4,4,1//5,1//5,4//5,4//5,1//15,4//15,11//15,14//15],
  [1080-480*root(5),-6,2//5,2//5,3//5,3//5,6,6,3//10,3//10,7//10,7//10],
  [1080+480*root(5),-6,1//5,1//5,4//5,4//5,6,6,1//10,1//10,9//10,9//10],
  [1,-4,2,2,2,2,3,3,4,4,6,6,12],
  [1,-16,2,2,2,2,3,3,4,4,6,6,12],
  [45-15*root(5),-6,2,2,2,2,3//10,3//10,7//10,7//10,1//15,4//15,11//15,14//15],
  [45+15*root(5),-6,2,2,2,2,1//10,1//10,9//10,9//10,2//15,7//15,8//15,13//15],
  [1,-5,2,2,2,2,5,5,10,10],
  [1,-15,2,2,2,2,5,5,10,10],
  [40,-6,3,3,10,10],[12,-6,5,5,12]])

chevieset(:H4, :cycpolfakedegrees, [[1, 0], [1, 60], [1, 1, 4, 4, 12, 20, 36],
  [1, 31, 4, 4, 12, 20, 36], [1, 7, 4, 4, 12, 20], [1, 37, 4, 4, 12, 20],
  [[1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1], 12],
  [[1, 0, 1, 0, 0, 2, 0, 0, 1, 0, 1], 20],
  [[1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], 12, 15, 30],
  [1, 13, 4, 4, 4, 12, 12, 20, 36], [1, 2, 3, 3, 6, 6, 12, 15, 24, 30],
  [1, 22, 3, 3, 6, 6, 12, 15, 24, 30], [1, 6, 3, 3, 6, 6, 12, 15, 30],
  [1, 26, 3, 3, 6, 6, 12, 15, 30],
  [[1, 1, 0, -1, 1, 2, 2, 0, -2, 0, 2, 2, 1, -1, 0, 1, 1], 12, 12],
  [1, 11, 4, 4, 4, 12, 16, 20, 36], [1, 13, 4, 4, 4, 8, 12, 20, 28],
  [[1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], 3, 4, 4, 12, 20],
  [[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], 21, 4, 4, 12, 20],
  [[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], 6, 4, 4, 12, 20],
  [[1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], 18, 4, 4, 12, 20],
  [1, 10, 3, 3, 6, 6, 8, 12, 15, 24, 30],
  [[1, 0, 0, -1, 2, -1, 2, -1, 0, 0, 1], 11, 4, 4, 4, 12, 20],
  [[1, -1, 1, -1, 1, 0, 1, -1, 1, 0, 1, -1, 1, -1, 1], 7, 4, 4, 4, 12, 20],
  [[1, 1, 0, 2, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 0, 1, 1], 12],
  [[1,0,0,0,1,1,1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 1], 6],
  [1, 4, 5, 5, 10, 10, 15, 20, 30], [1, 16, 5, 5, 10, 10, 15, 20, 30],
  [[1, 1, 1, 0, 1, 2, 3, 1, 1, 3, 2, 3, 1, 1, 3, 2, 1, 0, 1, 1, 1], 10],
  [[1, 0, 1, 2, 1, 2, 1, 2, 3, 1, 2, 1, 3, 2, 1, 2, 1, 2, 1, 0, 1], 10],
  [1, 5, 3, 3, 4, 4, 6, 6, 12, 15, 20, 30],
  [1, 15, 3, 3, 4, 4, 6, 6, 12, 15, 20, 30],
  [[1, 0, 1, 1, 2, 2, 1, 2, 3, 3, 3, 2, 3, 3, 3, 2, 1, 2, 2, 1, 1, 0, 1], 8],
  [[1, 0, 0, 0, 1, -1, 1, 0, 0, 0, 1], 9, 4, 4, 4, 8, 12, 20]])

chevieset(:H4, :HeckeCharTable, function(param, sqrtparam)
  q=-param[1][1]//param[1][2]
  if sqrtparam[1]===nothing v=root(q)
  else v=-sqrtparam[1]//param[1][2]
  end
  tbl=Dict{Symbol, Any}(:identifier => "H(H4)",
  :text=>"the ordering of the characters is that of Alvis-Lusztig(1982)",
  :parameter=>[v^2,v^2,v^2,v^2],
  :cartan => chevieget(:H4, :CartanMat), :size => 14400,
  :powermap => chevieget(:H4, :PowerMaps),
  :irreducibles => map(i->map(j->j(v),i),
                       chevieget(:H4, :vpolheckeirreducibles)),
  :irredinfo => chevieget(:H4, :IrredInfo))
  merge!(tbl, chevieget(:H4, :ClassInfo)())
  tbl[:centralizers]=div.(tbl[:size],tbl[:classes])
  AdjustHeckeCharTable(tbl, param)
end)

# W-graphs given by Ivan Marin who got them from Alvis.
chevieset(:H4, :WGraphs, [
  [[[]], []], 1, [[[1], [2], [3], [4]], [[1, [[1, 1], [2, 3], [3, 4]]],
                          [(1 + root(5)) // 2, [[1, 2]]]]], 3,
  [[[1], [2], [3], [4]], [[1, [[1, 1], [2, 3], [3, 4]]],
                          [(1 - root(5)) // 2, [[1, 2]]]]], 5,
  [[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]], [[1, [[1, 2], [2, 3], [4, 5], [5, 6]]], [(1 + root(5)) // 2, [[2, 4], [3, 5]]]]],
  [[[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]], [[1, [[1, 2], [2, 3], [4, 5], [5, 6]]], [(1 - root(5)) // 2, [[2, 4], [3, 5]]]]],
  [[[1], [2], [1, 3], [1, 4], [2, 3], [2, 4], [1, 3, 4], [2, 3, 4]], [[1, [[1, 2, 7], [2, 3, 6, 8], [3, 4, 5, 7], [4, 6], [5, 6], [6, 7], [7, 8]]]]],
  [[[1], [2], [1, 3], [1, 4], [2, 3], [2, 4], [1, 3, 4], [2, 3, 4]], [[-1, [[1, 4], [5, 8]]], [1, [[1, 2, 7], [2, 3, 8], [3, 4, 5], [4, 6], [5, 6], [6, 7], [7, 8]]]]],
  [[[1], [2], 1, [3], 1, [4], [1, 3], [1, 4], [2, 4]], [[1, [[1, 2, 3], [2, 4, 9], [3, 7], [4, 6], [5, 9], [6, 9], [7, 8]]], [(1 + root(5)) // 2, [[1, 8], [3, 9], [5, 7], [8, 9]]]]], 11,
  [[[1], [2], 1, [3], 1, [4], [1, 3], [1, 4], [2, 4]], [[1, [[1, 2, 3], [2, 4, 9], [3, 7], [4, 6], [5, 9], [6, 9], [7, 8]]], [(1 - root(5)) // 2, [[1, 8], [3, 9], [5, 7], [8, 9]]]]], 13,
  [[[2], [3], [1, 3], 1, [1, 4], [2, 3], [2, 4], 1, [1, 2, 4], [1, 3, 4]], [[1, [[1, 3, 7], [2, 3, 7], [3, 5, 6], [4, 6, 9, 10], [5, 7, 8], [6, 8], [8, 9, 10]]]]],
  [[[2], [3], [1, 2], [1, 3], 2, [1, 4], 1, [2, 3], 1, [2, 4], 2, [3, 4], [1, 2, 4], [1, 3, 4]], [[1, [[1, 6, 11], [2, 6, 11], [3, 4, 15], [4, 8], [5, 9, 15, 16], [6, 7, 9], [7, 11, 12], [8, 15, 16], [9, 12], [10, 13], [12, 15, 16], [13, 14]]], [(3 - root(5)) // 2, [[1, 10], [2, 10, 14]]], [(1 + root(5)) // 2, [[4, 10], [8, 13], [14, 16]]], [(-1 + root(5)) // 2, [[1, 3], [2, 5], [11, 15]]]]],
  [[[2], [3], [1, 2], [1, 3], 2, [1, 4], 1, [2, 3], 1, [2, 4], 2, [3, 4], [1, 2, 4], [1, 3, 4]], [[1, [[1, 6, 11], [2, 6, 11], [3, 4, 15], [4, 8], [5, 9, 15, 16], [6, 7, 9], [7, 11, 12], [8, 15, 16], [9, 12], [10, 13], [12, 15, 16], [13, 14]]], [(3 + root(5)) // 2, [[1, 10], [2, 10, 14]]], [(1 - root(5)) // 2, [[4, 10], [8, 13], [14, 16]]], [(-1 - root(5)) // 2, [[1, 3], [2, 5], [11, 15]]]]],
  [[[1], 1, [2], 2, [3], 1, [4], [1, 3], 1, [1, 4], 1, [2, 3], [2, 4], 1, [3, 4]], [[1, [[1, 3, 4, 10, 12], [2, 5, 10, 11], [3, 9, 13, 15], [4, 6, 14], [5, 10, 13, 15], [6, 8, 10, 13, 16], [7, 9, 10, 13, 15, 16], [8, 12, 14], [9, 11], [10, 12, 13], [11, 15], [12, 14, 15], [13, 14], [14, 16]]]]], 18,
  [[[1], 1, [2], 2, [3], 1, [4], [1, 3], 1, [1, 4], 1, [2, 3], [2, 4], 1, [3, 4]], [[-1, [[1, 10], [2, 10], [3, 13], [5, 13], [6, 10], [7, 13, 16], [8, 12]]], [1, [[1, 3, 4, 12], [2, 5, 11], [3, 9, 15], [4, 6, 14], [5, 10, 15], [6, 8, 13, 16], [7, 9, 10, 15], [8, 14], [9, 11], [10, 12, 13], [11, 15], [12, 14, 15], [13, 14], [14, 16]]]]], 20,
  [[[1], [2], 1, [3], [1, 3], 2, [1, 4], 1, [2, 3], 1, [2, 4], 2, [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[1, [[1, 3, 7, 9, 16], [2, 7, 13], [3, 6, 10, 15, 18], [4, 7, 13], [5, 10, 15, 17], [6, 9, 11], [7, 8, 10], [8, 12, 13], [9, 14, 15], [10, 12], [11, 14, 18], [12, 15, 17], [14, 16], [16, 18]]], [2, [[3, 14], [4, 11, 16], [6, 16], [8, 16], [12, 18]]]]],
  [[[1], [2], 1, [3], [1, 2], [1, 3], 3, [1, 4], 2, [2, 3], 2, [2, 4], 3, [3, 4], [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[1, [[1, 3, 22], [2, 9, 16], [3, 8, 24], [4, 9, 16], [5, 6], [6, 11], [7, 13, 21, 23], [8, 12, 14], [9, 10, 13], [10, 16, 17], [12, 19], [13, 17], [14, 19], [15, 18], [17, 21, 23], [18, 20], [19, 22], [22, 24]]], [(5 - root(5)) // 2, [[1, 5, 9], [3, 13, 19, 21], [8, 22], [12, 21]]], [2 - root(5), [[4, 7], [16, 21]]], [(3 - root(5)) // 2, [[1, 12], [2, 5], [4, 14, 22], [10, 22], [14, 24], [17, 24], [20, 23, 24]]], [(1 - root(5)) // 2, [[2, 15], [4, 15, 20], [5, 21], [6, 15], [11, 18, 21, 23]]]]],
  [[[1], [2], 1, [3], [1, 2], [1, 3], 3, [1, 4], 2, [2, 3], 2, [2, 4], 3, [3, 4], [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[1, [[1, 3, 22], [2, 9, 16], [3, 8, 24], [4, 9, 16], [5, 6], [6, 11], [7, 13, 21, 23], [8, 12, 14], [9, 10, 13], [10, 16, 17], [12, 19], [13, 17], [14, 19], [15, 18], [17, 21, 23], [18, 20], [19, 22], [22, 24]]], [(5 + root(5)) // 2, [[1, 5, 9], [3, 13, 19, 21], [8, 22], [12, 21]]], [2 + root(5), [[4, 7], [16, 21]]], [(3 + root(5)) // 2, [[1, 12], [2, 5], [4, 14, 22], [10, 22], [14, 24], [17, 24], [20, 23, 24]]], [(1 + root(5)) // 2, [[2, 15], [4, 15, 20], [5, 21], [6, 15], [11, 18, 21, 23]]]]],
  [[[1], [2], 1, [3], [1, 2], [1, 3], 3, [1, 4], 2, [2, 3], 2, [2, 4], 3, [3, 4], [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[1, [[1, 3, 22], [2, 9, 16], [3, 8, 24], [4, 9, 16], [5, 6], [6, 11], [7, 13, 21, 23], [8, 12, 14], [9, 10, 13], [10, 16, 17], [12, 19], [13, 17], [14, 19], [15, 18], [17, 21, 23], [18, 20], [19, 22], [22, 24]]], [(5 - 3 * root(5)) // 2, [[1, 5], [4, 7], [16, 21]]], [(5 - root(5)) // 2, [[2, 5]]], [2 - root(5), [[1, 9], [3, 13, 19, 21], [8, 22], [12, 21]]], [(3 - root(5)) // 2, [[20, 23]]], [1 - root(5), [[1, 12], [4, 14, 22], [10, 22], [14, 24], [17, 24], [20, 24]]], [(1 - root(5)) // 2, [[5, 21], [6, 15], [11, 18, 21, 23]]], [-(root(5)), [[2, 15], [4, 15, 20]]]]],
  [[[1], [2], 1, [3], [1, 2], [1, 3], 3, [1, 4], 2, [2, 3], 2, [2, 4], 3, [3, 4], [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[1, [[1, 3, 22], [2, 9, 16], [3, 8, 24], [4, 9, 16], [5, 6], [6, 11], [7, 13, 21, 23], [8, 12, 14], [9, 10, 13], [10, 16, 17], [12, 19], [13, 17], [14, 19], [15, 18], [17, 21, 23], [18, 20], [19, 22], [22, 24]]], [(5 + root(5)) // 2, [[2, 5]]], [(5 + 3 * root(5)) // 2, [[1, 5], [4, 7], [16, 21]]], [2 + root(5), [[1, 9], [3, 13, 19, 21], [8, 22], [12, 21]]], [(3 + root(5)) // 2, [[20, 23]]], [1 + root(5), [[1, 12], [4, 14, 22], [10, 22], [14, 24], [17, 24], [20, 24]]], [(1 + root(5)) // 2, [[5, 21], [6, 15], [11, 18, 21, 23]]], [root(5), [[2, 15], [4, 15, 20]]]]],
  [[[1], 2, [2], 3, [3], 2, [4], [1, 3], 2, [1, 4], 2, [2, 3], 1, [2, 4], 3, [3, 4], [1, 3, 4]], [[1, [[1, 4, 13, 17], [2, 5, 6, 14, 16], [3, 7, 14, 15], [4, 14, 19, 20, 22], [5, 8, 21], [6, 12, 18, 23], [7, 13, 18, 23], [8, 11, 14, 19, 24], [9, 14, 19, 22, 24], [10, 12, 13, 23], [11, 17, 21], [12, 15], [13, 16, 19], [14, 17, 18, 25], [15, 23, 25], [16, 21, 23, 25], [17, 20, 22], [18, 20], [19, 21], [20, 25], [21, 24], [24, 25]]], [2, [[10, 18, 25]]]]], 27,
  [[[1], [2], 1, [3], [1, 2], 1, [1, 3], 4, [1, 4], 3, [2, 3], 3, [2, 4], 4, [3, 4], 1, [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[-1, [[1, 6]]], [1, [[1, 3, 5, 11, 29], [2, 5, 11, 16, 20], [3, 9, 18, 27, 30], [4, 10, 11, 16, 17, 20, 25, 29], [5, 7, 27], [6, 8], [7, 13, 16, 19], [8, 14, 19], [9, 12, 17], [10, 18, 27, 28], [11, 15, 18], [12, 24, 27], [13, 21, 22, 27, 28], [14, 22], [15, 20, 23, 29], [16, 21], [17, 24], [18, 23], [19, 22], [20, 27], [21, 25], [22, 26], [23, 27, 28, 30], [24, 29], [25, 28], [29, 30]]], [(7 - root(5)) // 2, [[26, 28]]], [(5 - root(5)) // 2, [[6, 27], [14, 27, 28], [26, 30]]], [(1 + root(5)) // 2, [[3, 24], [9, 29]]], [(-1 + root(5)) // 2, [[1, 12], [17, 30]]], [(-3 + root(5)) // 2, [[25, 30]]]]],
  [[[1], [2], 1, [3], [1, 2], 1, [1, 3], 4, [1, 4], 3, [2, 3], 3, [2, 4], 4, [3, 4], 1, [1, 2, 4], [1, 3, 4], 1, [2, 3, 4]], [[-1, [[1, 6]]], [1, [[1, 3, 5, 11, 29], [2, 5, 11, 16, 20], [3, 9, 18, 27, 30], [4, 10, 11, 16, 17, 20, 25, 29], [5, 7, 27], [6, 8], [7, 13, 16, 19], [8, 14, 19], [9, 12, 17], [10, 18, 27, 28], [11, 15, 18], [12, 24, 27], [13, 21, 22, 27, 28], [14, 22], [15, 20, 23, 29], [16, 21], [17, 24], [18, 23], [19, 22], [20, 27], [21, 25], [22, 26], [23, 27, 28, 30], [24, 29], [25, 28], [29, 30]]], [(7 + root(5)) // 2, [[26, 28]]], [(5 + root(5)) // 2, [[6, 27], [14, 27, 28], [26, 30]]], [(1 - root(5)) // 2, [[3, 24], [9, 29]]], [(-1 - root(5)) // 2, [[1, 12], [17, 30]]], [(-3 - root(5)) // 2, [[25, 30]]]]],
  [[[1], 2, [2], 4, [3], 3, [4], [1, 2], [1, 3], 4, [1, 4], 4, [2, 3], 2, [2, 4], 5, [3, 4], 1, [1, 3, 4]], [[1, [[1, 4, 16, 19, 22], [2, 5, 6, 23], [3, 8, 14, 15, 20], [4, 14, 15, 25, 27, 32, 33], [5, 10, 28], [6, 17, 29], [7, 16, 31], [8, 19, 26, 29], [9, 15, 25, 27, 33, 34, 35], [10, 13, 35], [11, 17, 19, 26, 29, 36], [12, 16, 26, 31, 36], [14, 18], [15, 22, 26, 36], [16, 24, 27], [17, 20], [18, 21, 27], [19, 23, 25], [20, 29, 36], [21, 30], [22, 32, 33], [23, 28, 29], [24, 30, 31, 36], [25, 28], [26, 32], [27, 30], [28, 35], [30, 34], [32, 36], [34, 36]]]]], 31,
  [[[1], [2], 2, [3], 1, [1, 2], 1, [1, 3], 6, [1, 4], 4, [2, 3], 4, [2, 4], 6, [3, 4], 1, [1, 2, 4], 1, [1, 3, 4], 2, [2, 3, 4]], [[-1, [[3, 8, 25], [5, 14, 25, 34], [30, 35]]], [1, [[1, 4, 37], [2, 8, 12, 22, 25, 27], [3, 15, 30], [4, 13, 40], [5, 15, 30], [6, 12, 14, 22, 25, 27, 33, 34], [7, 9, 36], [8, 10, 35], [9, 18, 22, 25], [10, 19, 25], [11, 21, 36, 38], [12, 17, 21], [13, 16, 23], [14, 24, 35, 39], [15, 20, 24], [16, 28], [17, 26, 27], [18, 31, 32, 36, 38], [19, 32, 35, 39], [20, 29, 30], [21, 26], [22, 31], [23, 28], [24, 29], [25, 32], [26, 36, 38], [27, 35], [28, 37], [29, 35, 39], [31, 33], [32, 34], [33, 38, 40], [34, 38, 39], [37, 40]]], [2, [[1, 7, 12, 16], [2, 7], [4, 21, 36], [5, 23, 37], [6, 11], [16, 36], [20, 37], [23, 40], [27, 36], [29, 40], [34, 40]]], [3, [[3, 7], [4, 28], [5, 11], [6, 23, 37], [13, 37], [17, 37], [26, 40], [30, 36]]], [4, [[3, 22], [5, 22, 33]]]]],
  [[[1], 1, [2], 3, [3], 1, [1, 2], 1, [1, 3], 7, [1, 4], 5, [2, 3], 5, [2, 4], 7, [3, 4], 1, [1, 2, 4], 1, [1, 3, 4], 3, [2, 3, 4], 1], [[-1, [[2, 10, 23], [28, 48], [40, 48]]], [1, [[1, 4, 9, 20, 43], [2, 5, 15, 45], [3, 15, 33], [4, 11, 47], [5, 12, 25, 42, 48], [6, 14, 32], [7, 14, 27, 32, 43], [8, 15, 28, 33, 45], [9, 18, 41], [10, 13, 42], [11, 20, 27], [12, 23, 28], [13, 21, 29], [14, 24, 26], [15, 19, 25], [16, 25, 42, 46], [17, 26, 41, 44], [18, 22, 29, 30], [19, 33, 37, 45], [20, 31], [21, 34, 42, 46], [22, 34, 35, 41, 44], [23, 38, 42], [24, 32, 36, 43], [25, 37], [26, 36], [27, 31, 47], [28, 38], [29, 34], [30, 35], [31, 43], [34, 39], [35, 40], [36, 41, 44, 47], [37, 42, 46, 48], [38, 45], [39, 44, 46, 48], [40, 44, 47], [43, 47], [45, 48]]], [2, [[4, 31], [11, 43]]], [3, [[1, 14], [4, 26, 41], [20, 41]]], [(3 - root(5)) // 2, [[1, 10, 15, 23], [4, 25, 38, 42], [6, 9, 10, 29], [7, 16, 17, 29, 39], [11, 45], [20, 42], [27, 48], [32, 41, 42]]], [(3 + root(5)) // 2, [[2, 9, 14, 20], [3, 30], [5, 26, 31, 41], [8, 30, 40], [12, 43], [23, 41], [28, 47]]], [1 + root(5), [[3, 9], [8, 17], [33, 41]]], [(-1 + root(5)) // 2, [[3, 10, 29], [8, 16, 29, 39], [33, 42]]]]]])

chevieset(:H4, :WGraph, function (i,)
  gr=chevieget(:H4, :WGraphs)
  if gr[i] isa Integer DualWGraph(4, gr[gr[i]])
  else gr[i]
  end
end)

chevieset(:H4, :HeckeRepresentation, function (param, sqrtparam, i)
  if sqrtparam[1]===nothing v=root(-param[1][1]//param[1][2])
  else v=-sqrtparam[1]//param[1][2]
  end
  -param[1][2]*WGraphToRepresentation(4,chevieget(:H4, :WGraph)(i), v)
end)

CHEVIE[:families][:HS4] = Dict{Symbol, Any}(:group => "SL2(5)", :name => "H4",
  :explanation => "DrinfeldDouble(SL_2(5))?ER(5)",
  :charLabels => map((i->begin "?" end), 1:74), :special=>9,
  :eigenvalues=>
  Cyc{Int64}[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, E(5,3), E(5,2),
 E(5,3), E(5,2), E(5,3), E(5,2), E(5,3), E(5,2), 1, -1, -1, -1, 1, 1, -1, -1,
 1, -1, E(5,3), E(5,2), E(5,3), E(5,2), -E(5,3), -E(5,2), -E(5,3), -E(5,2),
 E(4), -E(4), E(3), E(3,2), -E(3,2), -E(3), E(5,4), E(5), E(5,4), E(5), -E(5,
4), -E(5), -E(5,4), -E(5), E(3), E(3,2), E(3), E(3,2), E(5,4), E(5), E(5,4),
 E(5), E(15,2), E(15,13), E(15,8), E(15,7), E(5,4), E(5), E(5,4), E(5), -1, 1],
  :perm=>
   perm"(17,18)(19,20)(21,22)(23,24)(35,36)(37,38)(39,40)(41,42)(43,44)(45,
   46)(47,48)(49,50)(51,52)(53,54)(55,56)(57,58)(59,60)(61,62)(63,64)(65,66)(67,
   68)(69,70)(71,72)",
  :fourierMat=> 1//60*
Vector{Cyc{Rational{Int64}}}[[18, 0, -18, -6, -6, 18, 6, 6, 6, 6, -6, -6, -6,
 -6, 12, 0, 6, 6, -6, -6, -6, -6, 6, 6, 0, -18, 6, 6, 6, 6, -6, -6, 12, 0, 6,
 6, -6, -6, -6, -6, 6, 6, 0, 0, 0, 0, 0, 0, -6, -6, 6, 6, -6, -6, 6, 6, 0, 0,
 0, 0, -6, -6, -6, -6, 0, 0, 0, 0, -6, -6, -6, -6, 12, 12], [0, 45//2, 0, 0,
 0, 0, -15, -15, 15//2, 15//2, 0, 0, 0, 0, -15//2, 15, 0, 0, 0, 0, 0, 0, 0, 0,
 45//2, 0, -15, -15, 15//2, 15//2, 0, 0, -15//2, 15, 0, 0, 0, 0, 0, 0, 0, 0,
 -15, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 15, 15], [-18, 0, 18, -6, -6, 18, -6, -6, 6, 6, 6, 6, 6, 6,
 -12, 0, 6, 6, -6, -6, 6, 6, -6, -6, 0, -18, 6, 6, -6, -6, -6, -6, 12, 0, -6,
 -6, 6, 6, -6, -6, 6, 6, 0, 0, 0, 0, 0, 0, 6, 6, -6, -6, -6, -6, 6, 6, 0, 0,
 0, 0, -6, -6, -6, -6, 0, 0, 0, 0, 6, 6, 6, 6, 12, -12], [-6, 0, -6,
 12-2root(5), 12+2root(5), -6, -3-3root(5), -3+3root(5), 3-root(5), 3+root(5),
 -2, -2, 12+2root(5), 12-2root(5), 6, -10, 3+3root(5), 3+3root(5),
 -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5),
 0, -6, -3-3root(5), -3+3root(5), 3-root(5), 3+root(5), -2, -2, 6, -10,
 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5),
 -3+3root(5), -3+3root(5), 0, 0, 10, 10, 10, 10, 3-3root(5), 3-3root(5),
 -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5),
 -2root(5), -2root(5), -2root(5), -2root(5), -3+root(5), -3+root(5),
 -3-root(5), -3-root(5), -4root(5), -4root(5), -4root(5), -4root(5),
 -3-root(5), -3-root(5), -3+root(5), -3+root(5), 4, 4], [-6, 0, -6,
 12+2root(5), 12-2root(5), -6, -3+3root(5), -3-3root(5), 3+root(5), 3-root(5),
 -2, -2, 12-2root(5), 12+2root(5), 6, -10, 3-3root(5), 3-3root(5),
 -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5),
 0, -6, -3+3root(5), -3-3root(5), 3+root(5), 3-root(5), -2, -2, 6, -10,
 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5),
 -3-3root(5), -3-3root(5), 0, 0, 10, 10, 10, 10, 3+3root(5), 3+3root(5),
 -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5),
 2root(5), 2root(5), 2root(5), 2root(5), -3-root(5), -3-root(5), -3+root(5),
 -3+root(5), 4root(5), 4root(5), 4root(5), 4root(5), -3+root(5), -3+root(5),
 -3-root(5), -3-root(5), 4, 4], [18, 0, 18, -6, -6, 18, -6, -6, 6, 6, 6, 6,
 -6, -6, 12, 0, 6, 6, -6, -6, 6, 6, -6, -6, 0, 18, -6, -6, 6, 6, 6, 6, 12, 0,
 6, 6, -6, -6, 6, 6, -6, -6, 0, 0, 0, 0, 0, 0, 6, 6, -6, -6, 6, 6, -6, -6, 0,
 0, 0, 0, -6, -6, -6, -6, 0, 0, 0, 0, -6, -6, -6, -6, -12, -12], [6, -15, -6,
 -3-3root(5), -3+3root(5), -6, 12, 12, 3, 3, 3-3root(5), 3+3root(5),
 3-3root(5), 3+3root(5), 9, 0, 3+3root(5), 3+3root(5), -3+3root(5),
 -3+3root(5), 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5), 15, 6, -12,
 -12, -3, -3, -3+3root(5), -3-3root(5), -9, 0, -3-3root(5), -3-3root(5),
 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), 0,
 0, 0, 0, 0, 0, 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5), -3-3root(5),
 -3-3root(5), 3-3root(5), 3-3root(5), 0, 0, 0, 0, -3+3root(5), -3+3root(5),
 -3-3root(5), -3-3root(5), 0, 0, 0, 0, 3+3root(5), 3+3root(5), 3-3root(5),
 3-3root(5), 6, -6], [6, -15, -6, -3+3root(5), -3-3root(5), -6, 12, 12, 3, 3,
 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 9, 0, 3-3root(5), 3-3root(5),
 -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5),
 15, 6, -12, -12, -3, -3, -3-3root(5), -3+3root(5), -9, 0, -3+3root(5),
 -3+3root(5), 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5), 3+3root(5),
 3+3root(5), 0, 0, 0, 0, 0, 0, 3-3root(5), 3-3root(5), -3-3root(5),
 -3-3root(5), -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5), 0, 0, 0, 0,
 -3-3root(5), -3-3root(5), -3+3root(5), -3+3root(5), 0, 0, 0, 0, 3-3root(5),
 3-3root(5), 3+3root(5), 3+3root(5), 6, -6], [6, 15//2, 6, 3-root(5),
 3+root(5), 6, 3, 3, (9-4root(5))//2, (9+4root(5))//2, 7-3root(5), 7+3root(5),
 3+root(5), 3-root(5), 3//2, 5, -3+3root(5), -3+3root(5), 3+3root(5),
 3+3root(5), -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5), 15//2, 6, 3, 3,
 (9-4root(5))//2, (9+4root(5))//2, 7-3root(5), 7+3root(5), 3//2, 5,
 -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5),
 3+3root(5), 3+3root(5), 15, 15, 10, 10, 10, 10, -3+3root(5), -3+3root(5),
 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5),
 2root(5), 2root(5), 2root(5), 2root(5), 3-root(5), 3-root(5), 3+root(5),
 3+root(5), 4root(5), 4root(5), 4root(5), 4root(5), 3+root(5), 3+root(5),
 3-root(5), 3-root(5), 1, 1], [6, 15//2, 6, 3+root(5), 3-root(5), 6, 3, 3,
 (9+4root(5))//2, (9-4root(5))//2, 7+3root(5), 7-3root(5), 3-root(5),
 3+root(5), 3//2, 5, -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5),
 -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), 15//2, 6, 3, 3,
 (9+4root(5))//2, (9-4root(5))//2, 7+3root(5), 7-3root(5), 3//2, 5,
 -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5),
 3-3root(5), 3-3root(5), 15, 15, 10, 10, 10, 10, -3-3root(5), -3-3root(5),
 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5),
 -2root(5), -2root(5), -2root(5), -2root(5), 3+root(5), 3+root(5), 3-root(5),
 3-root(5), -4root(5), -4root(5), -4root(5), -4root(5), 3-root(5), 3-root(5),
 3+root(5), 3+root(5), 1, 1], [-6, 0, 6, -2, -2, 6, 3-3root(5), 3+3root(5),
 7-3root(5), 7+3root(5), 2, 2, 2, 2, 6, 10, -3+3root(5), -3+3root(5),
 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5), 0,
 -6, -3+3root(5), -3-3root(5), -7+3root(5), -7-3root(5), -2, -2, -6, -10,
 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5),
 -3-3root(5), -3-3root(5), 0, 0, -10, -10, 10, 10, -3-3root(5), -3-3root(5),
 3-3root(5), 3-3root(5), 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5),
 -10, -10, 10, 10, 3-3root(5), 3-3root(5), 3+3root(5), 3+3root(5), 0, 0, 0, 0,
 -3-3root(5), -3-3root(5), -3+3root(5), -3+3root(5), 4, -4], [-6, 0, 6, -2,
 -2, 6, 3+3root(5), 3-3root(5), 7+3root(5), 7-3root(5), 2, 2, 2, 2, 6, 10,
 -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5),
 3-3root(5), 3-3root(5), 0, -6, -3-3root(5), -3+3root(5), -7-3root(5),
 -7+3root(5), -2, -2, -6, -10, 3+3root(5), 3+3root(5), -3+3root(5),
 -3+3root(5), 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5), 0, 0, -10,
 -10, 10, 10, -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5), 3-3root(5),
 3-3root(5), -3-3root(5), -3-3root(5), -10, -10, 10, 10, 3+3root(5),
 3+3root(5), 3-3root(5), 3-3root(5), 0, 0, 0, 0, -3+3root(5), -3+3root(5),
 -3-3root(5), -3-3root(5), 4, -4], [-6, 0, 6, 12+2root(5), 12-2root(5), -6,
 3-3root(5), 3+3root(5), 3+root(5), 3-root(5), 2, 2, 12-2root(5), 12+2root(5),
 6, 10, 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5), -3+3root(5),
 -3+3root(5), 3+3root(5), 3+3root(5), 0, 6, 3-3root(5), 3+3root(5), 3+root(5),
 3-root(5), 2, 2, 6, 10, 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5),
 -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5), 0, 0, -10, -10, -10, -10,
 -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5),
 3-3root(5), 3-3root(5), 2root(5), 2root(5), 2root(5), 2root(5), -3-root(5),
 -3-root(5), -3+root(5), -3+root(5), 4root(5), 4root(5), 4root(5), 4root(5),
 -3+root(5), -3+root(5), -3-root(5), -3-root(5), -4, -4], [-6, 0, 6,
 12-2root(5), 12+2root(5), -6, 3+3root(5), 3-3root(5), 3-root(5), 3+root(5),
 2, 2, 12+2root(5), 12-2root(5), 6, 10, 3+3root(5), 3+3root(5), -3+3root(5),
 -3+3root(5), -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), 0, 6,
 3+3root(5), 3-3root(5), 3-root(5), 3+root(5), 2, 2, 6, 10, 3+3root(5),
 3+3root(5), -3+3root(5), -3+3root(5), -3-3root(5), -3-3root(5), 3-3root(5),
 3-3root(5), 0, 0, -10, -10, -10, -10, -3+3root(5), -3+3root(5), 3+3root(5),
 3+3root(5), -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5), -2root(5),
 -2root(5), -2root(5), -2root(5), -3+root(5), -3+root(5), -3-root(5),
 -3-root(5), -4root(5), -4root(5), -4root(5), -4root(5), -3-root(5),
 -3-root(5), -3+root(5), -3+root(5), -4, -4], [12, -15//2, -12, 6, 6, 12, 9,
 9, 3//2, 3//2, 6, 6, 6, 6, 21//2, 15, -6, -6, 6, 6, 6, 6, -6, -6, -15//2,
 -12, 9, 9, 3//2, 3//2, 6, 6, 21//2, 15, -6, -6, 6, 6, 6, 6, -6, -6, -15, -15,
 0, 0, 0, 0, 6, 6, -6, -6, 6, 6, -6, -6, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0,
 6, 6, 6, 6, 3, 3], [0, 15, 0, -10, -10, 0, 0, 0, 5, 5, 10, 10, 10, 10, 15,
 20, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -5, -5, -10, -10, -15, -20, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, -10, -10, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10,
 -10, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 10], [6, 0, 6, 3+3root(5),
 3-3root(5), 6, 3+3root(5), 3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), -6, 0, -3+3root(5), 12, -12, 3+3root(5),
 -3+3root(5), 12, -12, 3+3root(5), 0, 6, 3+3root(5), 3-3root(5), -3+3root(5),
 -3-3root(5), -3+3root(5), -3-3root(5), -6, 0, -3+3root(5), 12, -12,
 3+3root(5), -3+3root(5), 12, -12, 3+3root(5), 0, 0, 0, 0, 0, 0, -3-3root(5),
 -3+3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 3+3root(5),
 3-3root(5), 0, 0, 0, 0, 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 0, 0,
 0, 0, 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 6, 6], [6, 0, 6,
 3+3root(5), 3-3root(5), 6, 3+3root(5), 3-3root(5), -3+3root(5), -3-3root(5),
 -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), -6, 0, 12, -3+3root(5),
 3+3root(5), -12, 12, -3+3root(5), 3+3root(5), -12, 0, 6, 3+3root(5),
 3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), -3-3root(5), -6, 0, 12,
 -3+3root(5), 3+3root(5), -12, 12, -3+3root(5), 3+3root(5), -12, 0, 0, 0, 0,
 0, 0, -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), 0, 0, 0, 0, 3-3root(5), 3+3root(5),
 3-3root(5), 3+3root(5), 0, 0, 0, 0, 3-3root(5), 3+3root(5), 3-3root(5),
 3+3root(5), 6, 6], [-6, 0, -6, -3+3root(5), -3-3root(5), -6, -3+3root(5),
 -3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), -3-3root(5),
 -3+3root(5), 6, 0, -12, 3+3root(5), -3+3root(5), 12, -12, 3+3root(5),
 -3+3root(5), 12, 0, -6, -3+3root(5), -3-3root(5), 3+3root(5), 3-3root(5),
 3+3root(5), 3-3root(5), 6, 0, -12, 3+3root(5), -3+3root(5), 12, -12,
 3+3root(5), -3+3root(5), 12, 0, 0, 0, 0, 0, 0, 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5),
 0, 0, 0, 0, -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), 0, 0, 0, 0,
 -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), -6, -6], [-6, 0, -6,
 -3+3root(5), -3-3root(5), -6, -3+3root(5), -3-3root(5), 3+3root(5),
 3-3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 6, 0,
 3+3root(5), -12, 12, -3+3root(5), 3+3root(5), -12, 12, -3+3root(5), 0, -6,
 -3+3root(5), -3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 6,
 0, 3+3root(5), -12, 12, -3+3root(5), 3+3root(5), -12, 12, -3+3root(5), 0, 0,
 0, 0, 0, 0, 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), 3-3root(5),
 3+3root(5), -3+3root(5), -3-3root(5), 0, 0, 0, 0, -3+3root(5), -3-3root(5),
 -3+3root(5), -3-3root(5), 0, 0, 0, 0, -3+3root(5), -3-3root(5), -3+3root(5),
 -3-3root(5), -6, -6], [-6, 0, 6, 3+3root(5), 3-3root(5), 6, 3+3root(5),
 3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5),
 -3-3root(5), 6, 0, -3+3root(5), 12, -12, 3+3root(5), -3+3root(5), 12, -12,
 3+3root(5), 0, -6, -3-3root(5), -3+3root(5), 3-3root(5), 3+3root(5),
 3-3root(5), 3+3root(5), -6, 0, 3-3root(5), -12, 12, -3-3root(5), 3-3root(5),
 -12, 12, -3-3root(5), 0, 0, 0, 0, 0, 0, -3-3root(5), -3+3root(5), 3+3root(5),
 3-3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 0, 0, 0, 0,
 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 0, 0, 0, 0, -3-3root(5),
 -3+3root(5), -3-3root(5), -3+3root(5), -6, 6], [-6, 0, 6, 3+3root(5),
 3-3root(5), 6, 3+3root(5), 3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5),
 -3-3root(5), -3+3root(5), -3-3root(5), 6, 0, 12, -3+3root(5), 3+3root(5),
 -12, 12, -3+3root(5), 3+3root(5), -12, 0, -6, -3-3root(5), -3+3root(5),
 3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5), -6, 0, -12, 3-3root(5),
 -3-3root(5), 12, -12, 3-3root(5), -3-3root(5), 12, 0, 0, 0, 0, 0, 0,
 -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5),
 -3+3root(5), -3-3root(5), 0, 0, 0, 0, 3-3root(5), 3+3root(5), 3-3root(5),
 3+3root(5), 0, 0, 0, 0, -3+3root(5), -3-3root(5), -3+3root(5), -3-3root(5),
 -6, 6], [6, 0, -6, -3+3root(5), -3-3root(5), -6, -3+3root(5), -3-3root(5),
 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), -6,
 0, -12, 3+3root(5), -3+3root(5), 12, -12, 3+3root(5), -3+3root(5), 12, 0, 6,
 3-3root(5), 3+3root(5), -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5),
 6, 0, 12, -3-3root(5), 3-3root(5), -12, 12, -3-3root(5), 3-3root(5), -12, 0,
 0, 0, 0, 0, 0, 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), -3-3root(5),
 -3+3root(5), 3+3root(5), 3-3root(5), 0, 0, 0, 0, -3-3root(5), -3+3root(5),
 -3-3root(5), -3+3root(5), 0, 0, 0, 0, 3+3root(5), 3-3root(5), 3+3root(5),
 3-3root(5), 6, -6], [6, 0, -6, -3+3root(5), -3-3root(5), -6, -3+3root(5),
 -3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5),
 3-3root(5), -6, 0, 3+3root(5), -12, 12, -3+3root(5), 3+3root(5), -12, 12,
 -3+3root(5), 0, 6, 3-3root(5), 3+3root(5), -3-3root(5), -3+3root(5),
 -3-3root(5), -3+3root(5), 6, 0, -3-3root(5), 12, -12, 3-3root(5),
 -3-3root(5), 12, -12, 3-3root(5), 0, 0, 0, 0, 0, 0, 3-3root(5), 3+3root(5),
 -3+3root(5), -3-3root(5), -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5),
 0, 0, 0, 0, -3+3root(5), -3-3root(5), -3+3root(5), -3-3root(5), 0, 0, 0, 0,
 3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5), 6, -6], [0, 45//2, 0, 0, 0,
 0, 15, 15, 15//2, 15//2, 0, 0, 0, 0, -15//2, -15, 0, 0, 0, 0, 0, 0, 0, 0,
 45//2, 0, 15, 15, 15//2, 15//2, 0, 0, -15//2, -15, 0, 0, 0, 0, 0, 0, 0, 0,
 -15, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, -15, -15], [-18, 0, -18, -6, -6, 18, 6, 6, 6, 6, -6, -6, 6,
 6, -12, 0, 6, 6, -6, -6, -6, -6, 6, 6, 0, 18, -6, -6, -6, -6, 6, 6, 12, 0,
 -6, -6, 6, 6, 6, 6, -6, -6, 0, 0, 0, 0, 0, 0, -6, -6, 6, 6, 6, 6, -6, -6, 0,
 0, 0, 0, -6, -6, -6, -6, 0, 0, 0, 0, 6, 6, 6, 6, -12, 12], [6, -15, 6,
 -3-3root(5), -3+3root(5), -6, -12, -12, 3, 3, -3+3root(5), -3-3root(5),
 3-3root(5), 3+3root(5), 9, 0, 3+3root(5), 3+3root(5), -3+3root(5),
 -3+3root(5), -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), 15, -6, 12,
 12, -3, -3, 3-3root(5), 3+3root(5), -9, 0, -3-3root(5), -3-3root(5),
 3-3root(5), 3-3root(5), 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5), 0,
 0, 0, 0, 0, 0, -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), 3+3root(5),
 3+3root(5), -3+3root(5), -3+3root(5), 0, 0, 0, 0, -3+3root(5), -3+3root(5),
 -3-3root(5), -3-3root(5), 0, 0, 0, 0, 3+3root(5), 3+3root(5), 3-3root(5),
 3-3root(5), -6, 6], [6, -15, 6, -3+3root(5), -3-3root(5), -6, -12, -12, 3, 3,
 -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), 9, 0, 3-3root(5),
 3-3root(5), -3-3root(5), -3-3root(5), -3+3root(5), -3+3root(5), 3+3root(5),
 3+3root(5), 15, -6, 12, 12, -3, -3, 3+3root(5), 3-3root(5), -9, 0,
 -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5), 3-3root(5), 3-3root(5),
 -3-3root(5), -3-3root(5), 0, 0, 0, 0, 0, 0, -3+3root(5), -3+3root(5),
 3+3root(5), 3+3root(5), 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5), 0,
 0, 0, 0, -3-3root(5), -3-3root(5), -3+3root(5), -3+3root(5), 0, 0, 0, 0,
 3-3root(5), 3-3root(5), 3+3root(5), 3+3root(5), -6, 6], [6, 15//2, -6,
 3-root(5), 3+root(5), 6, -3, -3, (9-4root(5))//2, (9+4root(5))//2,
 -7+3root(5), -7-3root(5), 3+root(5), 3-root(5), 3//2, -5, -3+3root(5),
 -3+3root(5), 3+3root(5), 3+3root(5), 3-3root(5), 3-3root(5), -3-3root(5),
 -3-3root(5), 15//2, -6, -3, -3, (9-4root(5))//2, (9+4root(5))//2,
 -7+3root(5), -7-3root(5), 3//2, -5, -3+3root(5), -3+3root(5), 3+3root(5),
 3+3root(5), 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5), 15, 15, -10,
 -10, -10, -10, 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5), 3-3root(5),
 3-3root(5), -3-3root(5), -3-3root(5), 2root(5), 2root(5), 2root(5), 2root(5),
 3-root(5), 3-root(5), 3+root(5), 3+root(5), 4root(5), 4root(5), 4root(5),
 4root(5), 3+root(5), 3+root(5), 3-root(5), 3-root(5), -1, -1], [6, 15//2, -6,
 3+root(5), 3-root(5), 6, -3, -3, (9+4root(5))//2, (9-4root(5))//2,
 -7-3root(5), -7+3root(5), 3-root(5), 3+root(5), 3//2, -5, -3-3root(5),
 -3-3root(5), 3-3root(5), 3-3root(5), 3+3root(5), 3+3root(5), -3+3root(5),
 -3+3root(5), 15//2, -6, -3, -3, (9+4root(5))//2, (9-4root(5))//2,
 -7-3root(5), -7+3root(5), 3//2, -5, -3-3root(5), -3-3root(5), 3-3root(5),
 3-3root(5), 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5), 15, 15, -10,
 -10, -10, -10, 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5), 3+3root(5),
 3+3root(5), -3+3root(5), -3+3root(5), -2root(5), -2root(5), -2root(5),
 -2root(5), 3+root(5), 3+root(5), 3-root(5), 3-root(5), -4root(5), -4root(5),
 -4root(5), -4root(5), 3-root(5), 3-root(5), 3+root(5), 3+root(5), -1, -1],
 [-6, 0, -6, -2, -2, 6, -3+3root(5), -3-3root(5), 7-3root(5), 7+3root(5), -2,
 -2, 2, 2, 6, -10, -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5),
 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5), 0, 6, 3-3root(5),
 3+3root(5), -7+3root(5), -7-3root(5), 2, 2, -6, 10, 3-3root(5), 3-3root(5),
 -3-3root(5), -3-3root(5), -3+3root(5), -3+3root(5), 3+3root(5), 3+3root(5),
 0, 0, 10, 10, -10, -10, 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5),
 -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), -10, -10, 10, 10,
 3-3root(5), 3-3root(5), 3+3root(5), 3+3root(5), 0, 0, 0, 0, -3-3root(5),
 -3-3root(5), -3+3root(5), -3+3root(5), -4, 4], [-6, 0, -6, -2, -2, 6,
 -3-3root(5), -3+3root(5), 7+3root(5), 7-3root(5), -2, -2, 2, 2, 6, -10,
 -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), 3+3root(5), 3+3root(5),
 -3+3root(5), -3+3root(5), 0, 6, 3+3root(5), 3-3root(5), -7-3root(5),
 -7+3root(5), 2, 2, -6, 10, 3+3root(5), 3+3root(5), -3+3root(5), -3+3root(5),
 -3-3root(5), -3-3root(5), 3-3root(5), 3-3root(5), 0, 0, 10, 10, -10, -10,
 3-3root(5), 3-3root(5), -3-3root(5), -3-3root(5), -3+3root(5), -3+3root(5),
 3+3root(5), 3+3root(5), -10, -10, 10, 10, 3+3root(5), 3+3root(5), 3-3root(5),
 3-3root(5), 0, 0, 0, 0, -3+3root(5), -3+3root(5), -3-3root(5), -3-3root(5),
 -4, 4], [12, -15//2, 12, 6, 6, 12, -9, -9, 3//2, 3//2, -6, -6, 6, 6, 21//2,
 -15, -6, -6, 6, 6, -6, -6, 6, 6, -15//2, 12, -9, -9, 3//2, 3//2, -6, -6,
 21//2, -15, -6, -6, 6, 6, -6, -6, 6, 6, -15, -15, 0, 0, 0, 0, -6, -6, 6, 6,
 -6, -6, 6, 6, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 6, 6, 6, 6, -3, -3], [0,
 15, 0, -10, -10, 0, 0, 0, 5, 5, -10, -10, 10, 10, 15, -20, 0, 0, 0, 0, 0, 0,
 0, 0, -15, 0, 0, 0, -5, -5, 10, 10, -15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 -10, -10, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, -10, -10, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 10, -10], [6, 0, -6, 3+3root(5), 3-3root(5), 6,
 -3-3root(5), -3+3root(5), -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5),
 3-3root(5), 3+3root(5), -6, 0, -3+3root(5), 12, -12, 3+3root(5), 3-3root(5),
 -12, 12, -3-3root(5), 0, -6, -3-3root(5), -3+3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), -6, 0, -3+3root(5), 12, -12, 3+3root(5),
 3-3root(5), -12, 12, -3-3root(5), 0, 0, 0, 0, 0, 0, 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5),
 0, 0, 0, 0, 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 0, 0, 0, 0,
 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), -6, -6], [6, 0, -6,
 3+3root(5), 3-3root(5), 6, -3-3root(5), -3+3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5), -6, 0, 12,
 -3+3root(5), 3+3root(5), -12, -12, 3-3root(5), -3-3root(5), 12, 0, -6,
 -3-3root(5), -3+3root(5), -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5),
 -6, 0, 12, -3+3root(5), 3+3root(5), -12, -12, 3-3root(5), -3-3root(5), 12, 0,
 0, 0, 0, 0, 0, 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), 3-3root(5),
 3+3root(5), -3+3root(5), -3-3root(5), 0, 0, 0, 0, 3-3root(5), 3+3root(5),
 3-3root(5), 3+3root(5), 0, 0, 0, 0, 3-3root(5), 3+3root(5), 3-3root(5),
 3+3root(5), -6, -6], [-6, 0, 6, -3+3root(5), -3-3root(5), -6, 3-3root(5),
 3+3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), -3-3root(5),
 -3+3root(5), 6, 0, -12, 3+3root(5), -3+3root(5), 12, 12, -3-3root(5),
 3-3root(5), -12, 0, 6, 3-3root(5), 3+3root(5), 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), 6, 0, -12, 3+3root(5), -3+3root(5), 12, 12,
 -3-3root(5), 3-3root(5), -12, 0, 0, 0, 0, 0, 0, -3-3root(5), -3+3root(5),
 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), 0,
 0, 0, 0, -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), 0, 0, 0, 0,
 -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), 6, 6], [-6, 0, 6,
 -3+3root(5), -3-3root(5), -6, 3-3root(5), 3+3root(5), 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), 6, 0, 3+3root(5), -12,
 12, -3+3root(5), -3-3root(5), 12, -12, 3-3root(5), 0, 6, 3-3root(5),
 3+3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 6, 0,
 3+3root(5), -12, 12, -3+3root(5), -3-3root(5), 12, -12, 3-3root(5), 0, 0, 0,
 0, 0, 0, -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), 0, 0, 0, 0, -3+3root(5), -3-3root(5),
 -3+3root(5), -3-3root(5), 0, 0, 0, 0, -3+3root(5), -3-3root(5), -3+3root(5),
 -3-3root(5), 6, 6], [-6, 0, -6, 3+3root(5), 3-3root(5), 6, -3-3root(5),
 -3+3root(5), -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), -3+3root(5),
 -3-3root(5), 6, 0, -3+3root(5), 12, -12, 3+3root(5), 3-3root(5), -12, 12,
 -3-3root(5), 0, 6, 3+3root(5), 3-3root(5), 3-3root(5), 3+3root(5),
 -3+3root(5), -3-3root(5), -6, 0, 3-3root(5), -12, 12, -3-3root(5),
 -3+3root(5), 12, -12, 3+3root(5), 0, 0, 0, 0, 0, 0, 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5),
 0, 0, 0, 0, 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 0, 0, 0, 0,
 -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), 6, -6], [-6, 0, -6,
 3+3root(5), 3-3root(5), 6, -3-3root(5), -3+3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), 6, 0, 12,
 -3+3root(5), 3+3root(5), -12, -12, 3-3root(5), -3-3root(5), 12, 0, 6,
 3+3root(5), 3-3root(5), 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), -6,
 0, -12, 3-3root(5), -3-3root(5), 12, 12, -3+3root(5), 3+3root(5), -12, 0, 0,
 0, 0, 0, 0, 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), 0, 0, 0, 0, 3-3root(5), 3+3root(5),
 3-3root(5), 3+3root(5), 0, 0, 0, 0, -3+3root(5), -3-3root(5), -3+3root(5),
 -3-3root(5), 6, -6], [6, 0, 6, -3+3root(5), -3-3root(5), -6, 3-3root(5),
 3+3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 3+3root(5),
 3-3root(5), -6, 0, -12, 3+3root(5), -3+3root(5), 12, 12, -3-3root(5),
 3-3root(5), -12, 0, -6, -3+3root(5), -3-3root(5), -3-3root(5), -3+3root(5),
 3+3root(5), 3-3root(5), 6, 0, 12, -3-3root(5), 3-3root(5), -12, -12,
 3+3root(5), -3+3root(5), 12, 0, 0, 0, 0, 0, 0, -3-3root(5), -3+3root(5),
 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 0,
 0, 0, 0, -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), 0, 0, 0, 0,
 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), -6, 6], [6, 0, 6,
 -3+3root(5), -3-3root(5), -6, 3-3root(5), 3+3root(5), 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), -6, 0, 3+3root(5), -12, 12,
 -3+3root(5), -3-3root(5), 12, -12, 3-3root(5), 0, -6, -3+3root(5),
 -3-3root(5), -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), 6, 0,
 -3-3root(5), 12, -12, 3-3root(5), 3+3root(5), -12, 12, -3+3root(5), 0, 0, 0,
 0, 0, 0, -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), 3-3root(5),
 3+3root(5), -3+3root(5), -3-3root(5), 0, 0, 0, 0, -3+3root(5), -3-3root(5),
 -3+3root(5), -3-3root(5), 0, 0, 0, 0, 3-3root(5), 3+3root(5), 3-3root(5),
 3+3root(5), -6, 6], [0, -15, 0, 0, 0, 0, 0, 0, 15, 15, 0, 0, 0, 0, -15, 0, 0,
 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 15, 15, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0,
 0, -30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0], [0, -15, 0, 0, 0, 0, 0, 0, 15, 15, 0, 0, 0, 0, -15,
 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 15, 15, 0, 0, -15, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 10, 10, 0, 0, 0, 10, 10, -10, -10,
 -10, -10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -10, 10, 10, 0,
 -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 20, -20, 10, 0, 0, 0, 0, 0, 0, 0, 0,
 -10, 20, 10, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, -10], [0, 0, 0, 10,
 10, 0, 0, 0, 10, 10, -10, -10, -10, -10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, -10, -10, 10, 10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, -10, 10,
 -20, 0, 0, 0, 0, 0, 0, 0, 0, 20, -10, -20, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 10, -10], [0, 0, 0, 10, 10, 0, 0, 0, 10, 10, 10, 10, -10, -10, 0, -10,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -10, -10, -10, 0, 10, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, -20, 10, -10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, -10, -20, 10, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 10], [0, 0, 0, 10, 10, 0, 0, 0, 10, 10,
 10, 10, -10, -10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, -10, -10,
 -10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, -20, 20, -10, 0, 0, 0, 0, 0, 0,
 0, 0, -10, 20, 10, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 10], [-6, 0,
 6, 3-3root(5), 3+3root(5), 6, 3+3root(5), 3-3root(5), -3+3root(5),
 -3-3root(5), -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), 6, 0,
 -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5),
 3+3root(5), 3-3root(5), 0, -6, -3-3root(5), -3+3root(5), 3-3root(5),
 3+3root(5), 3+3root(5), 3-3root(5), -6, 0, 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5),
 0, 0, 0, 0, 0, 0, -3-3root(5), 12, -12, 3-3root(5), 3+3root(5), -12, 12,
 -3+3root(5), 0, 0, 0, 0, -12, 3-3root(5), 3+3root(5), -12, 0, 0, 0, 0,
 -3-3root(5), 12, 12, -3+3root(5), -6, 6], [-6, 0, 6, 3-3root(5), 3+3root(5),
 6, 3+3root(5), 3-3root(5), -3+3root(5), -3-3root(5), -3-3root(5),
 -3+3root(5), -3-3root(5), -3+3root(5), 6, 0, -3+3root(5), -3-3root(5),
 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), 0,
 -6, -3-3root(5), -3+3root(5), 3-3root(5), 3+3root(5), 3+3root(5), 3-3root(5),
 -6, 0, 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), 3-3root(5),
 3+3root(5), -3+3root(5), -3-3root(5), 0, 0, 0, 0, 0, 0, 12, -3-3root(5),
 3-3root(5), -12, -12, 3+3root(5), -3+3root(5), 12, 0, 0, 0, 0, 3-3root(5),
 -12, -12, 3+3root(5), 0, 0, 0, 0, 12, -3-3root(5), -3+3root(5), 12, -6, 6],
 [6, 0, -6, -3-3root(5), -3+3root(5), -6, -3+3root(5), -3-3root(5),
 3+3root(5), 3-3root(5), 3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5), -6,
 0, 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), 0, 6, 3-3root(5), 3+3root(5), -3-3root(5),
 -3+3root(5), -3+3root(5), -3-3root(5), 6, 0, -3-3root(5), -3+3root(5),
 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), 0,
 0, 0, 0, 0, 0, -12, 3-3root(5), -3-3root(5), 12, 12, -3+3root(5), 3+3root(5),
 -12, 0, 0, 0, 0, -3-3root(5), 12, 12, -3+3root(5), 0, 0, 0, 0, -12,
 3-3root(5), 3+3root(5), -12, 6, -6], [6, 0, -6, -3-3root(5), -3+3root(5), -6,
 -3+3root(5), -3-3root(5), 3+3root(5), 3-3root(5), 3-3root(5), 3+3root(5),
 3-3root(5), 3+3root(5), -6, 0, 3-3root(5), 3+3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), 0, 6,
 3-3root(5), 3+3root(5), -3-3root(5), -3+3root(5), -3+3root(5), -3-3root(5),
 6, 0, -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), 0, 0, 0, 0, 0, 0, 3-3root(5), -12, 12,
 -3-3root(5), -3+3root(5), 12, -12, 3+3root(5), 0, 0, 0, 0, 12, -3-3root(5),
 -3+3root(5), 12, 0, 0, 0, 0, 3-3root(5), -12, -12, 3+3root(5), 6, -6], [-6,
 0, -6, 3-3root(5), 3+3root(5), 6, -3-3root(5), -3+3root(5), -3+3root(5),
 -3-3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 6, 0,
 -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), 0, 6, 3+3root(5), 3-3root(5), 3-3root(5),
 3+3root(5), -3-3root(5), -3+3root(5), -6, 0, 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5),
 0, 0, 0, 0, 0, 0, 3+3root(5), -12, 12, -3+3root(5), -3-3root(5), 12, -12,
 3-3root(5), 0, 0, 0, 0, -12, 3-3root(5), 3+3root(5), -12, 0, 0, 0, 0,
 -3-3root(5), 12, 12, -3+3root(5), 6, -6], [-6, 0, -6, 3-3root(5), 3+3root(5),
 6, -3-3root(5), -3+3root(5), -3+3root(5), -3-3root(5), 3+3root(5),
 3-3root(5), -3-3root(5), -3+3root(5), 6, 0, -3+3root(5), -3-3root(5),
 3-3root(5), 3+3root(5), 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), 0,
 6, 3+3root(5), 3-3root(5), 3-3root(5), 3+3root(5), -3-3root(5), -3+3root(5),
 -6, 0, 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), 0, 0, 0, 0, 0, 0, -12, 3+3root(5),
 -3+3root(5), 12, 12, -3-3root(5), 3-3root(5), -12, 0, 0, 0, 0, 3-3root(5),
 -12, -12, 3+3root(5), 0, 0, 0, 0, 12, -3-3root(5), -3+3root(5), 12, 6, -6],
 [6, 0, 6, -3-3root(5), -3+3root(5), -6, 3-3root(5), 3+3root(5), 3+3root(5),
 3-3root(5), -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), -6, 0,
 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5),
 3+3root(5), 3-3root(5), 0, -6, -3+3root(5), -3-3root(5), -3-3root(5),
 -3+3root(5), 3-3root(5), 3+3root(5), 6, 0, -3-3root(5), -3+3root(5),
 3+3root(5), 3-3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 0,
 0, 0, 0, 0, 0, 12, -3+3root(5), 3+3root(5), -12, -12, 3-3root(5),
 -3-3root(5), 12, 0, 0, 0, 0, -3-3root(5), 12, 12, -3+3root(5), 0, 0, 0, 0,
 -12, 3-3root(5), 3+3root(5), -12, -6, 6], [6, 0, 6, -3-3root(5), -3+3root(5),
 -6, 3-3root(5), 3+3root(5), 3+3root(5), 3-3root(5), -3+3root(5), -3-3root(5),
 3-3root(5), 3+3root(5), -6, 0, 3-3root(5), 3+3root(5), -3+3root(5),
 -3-3root(5), -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), 0, -6,
 -3+3root(5), -3-3root(5), -3-3root(5), -3+3root(5), 3-3root(5), 3+3root(5),
 6, 0, -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), 3-3root(5),
 3+3root(5), -3+3root(5), -3-3root(5), 0, 0, 0, 0, 0, 0, -3+3root(5), 12, -12,
 3+3root(5), 3-3root(5), -12, 12, -3-3root(5), 0, 0, 0, 0, 12, -3-3root(5),
 -3+3root(5), 12, 0, 0, 0, 0, 3-3root(5), -12, -12, 3+3root(5), -6, 6], [0, 0,
 0, -2root(5), 2root(5), 0, 0, 0, 2root(5), -2root(5), -10, -10, 2root(5),
 -2root(5), 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2root(5), -2root(5),
 -10, -10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 20, 20, -10, 0, 0, 0, 0,
 0, 0, 0, 0, -2root(5), 4root(5), -2root(5), 4root(5), 4root(5), 4root(5),
 -4root(5), -4root(5), -4root(5), 8root(5), -4root(5), 8root(5), -4root(5),
 -4root(5), 4root(5), 4root(5), -10, -10], [0, 0, 0, -2root(5), 2root(5), 0,
 0, 0, 2root(5), -2root(5), -10, -10, 2root(5), -2root(5), 0, 10, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 2root(5), -2root(5), -10, -10, 0, 10, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 20, -10, -10, 20, 0, 0, 0, 0, 0, 0, 0, 0, 4root(5), -2root(5),
 4root(5), -2root(5), 4root(5), 4root(5), -4root(5), -4root(5), 8root(5),
 -4root(5), 8root(5), -4root(5), -4root(5), -4root(5), 4root(5), 4root(5),
 -10, -10], [0, 0, 0, -2root(5), 2root(5), 0, 0, 0, 2root(5), -2root(5), 10,
 10, 2root(5), -2root(5), 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 2root(5), -2root(5), 10, 10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, -20,
 -20, 10, 0, 0, 0, 0, 0, 0, 0, 0, -2root(5), 4root(5), -2root(5), 4root(5),
 4root(5), 4root(5), -4root(5), -4root(5), -4root(5), 8root(5), -4root(5),
 8root(5), -4root(5), -4root(5), 4root(5), 4root(5), 10, 10], [0, 0, 0,
 -2root(5), 2root(5), 0, 0, 0, 2root(5), -2root(5), 10, 10, 2root(5),
 -2root(5), 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2root(5), -2root(5),
 10, 10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 10, 10, -20, 0, 0, 0, 0,
 0, 0, 0, 0, 4root(5), -2root(5), 4root(5), -2root(5), 4root(5), 4root(5),
 -4root(5), -4root(5), 8root(5), -4root(5), 8root(5), -4root(5), -4root(5),
 -4root(5), 4root(5), 4root(5), 10, 10], [-6, 0, -6, -3+root(5), -3-root(5),
 -6, -3+3root(5), -3-3root(5), 3-root(5), 3+root(5), 3-3root(5), 3+3root(5),
 -3-root(5), -3+root(5), 6, 0, 3+3root(5), 3-3root(5), -3-3root(5),
 -3+3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 0, -6,
 -3+3root(5), -3-3root(5), 3-root(5), 3+root(5), 3-3root(5), 3+3root(5), 6, 0,
 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), 0, 0, 0, 0, 0, 0, -12, 3-3root(5), -3-3root(5), 12,
 -12, 3-3root(5), -3-3root(5), 12, 4root(5), 4root(5), 4root(5), 4root(5),
 7-root(5), 2+2root(5), 2-2root(5), 7+root(5), -10-2root(5), 10-2root(5),
 10-2root(5), -10-2root(5), 2-2root(5), 7+root(5), 7-root(5), 2+2root(5), -6,
 -6], [-6, 0, -6, -3+root(5), -3-root(5), -6, -3+3root(5), -3-3root(5),
 3-root(5), 3+root(5), 3-3root(5), 3+3root(5), -3-root(5), -3+root(5), 6, 0,
 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5),
 -3+3root(5), -3-3root(5), 0, -6, -3+3root(5), -3-3root(5), 3-root(5),
 3+root(5), 3-3root(5), 3+3root(5), 6, 0, 3-3root(5), 3+3root(5), -3+3root(5),
 -3-3root(5), 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), 0, 0, 0, 0, 0,
 0, 3-3root(5), -12, 12, -3-3root(5), 3-3root(5), -12, 12, -3-3root(5),
 4root(5), 4root(5), 4root(5), 4root(5), 2+2root(5), 7-root(5), 7+root(5),
 2-2root(5), 10-2root(5), -10-2root(5), -10-2root(5), 10-2root(5), 7+root(5),
 2-2root(5), 2+2root(5), 7-root(5), -6, -6], [-6, 0, -6, -3-root(5),
 -3+root(5), -6, -3-3root(5), -3+3root(5), 3+root(5), 3-root(5), 3+3root(5),
 3-3root(5), -3+root(5), -3-root(5), 6, 0, 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5),
 0, -6, -3-3root(5), -3+3root(5), 3+root(5), 3-root(5), 3+3root(5),
 3-3root(5), 6, 0, 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5),
 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), 0, 0, 0, 0, 0, 0,
 3+3root(5), -12, 12, -3+3root(5), 3+3root(5), -12, 12, -3+3root(5),
 -4root(5), -4root(5), -4root(5), -4root(5), 2-2root(5), 7+root(5), 7-root(5),
 2+2root(5), 10+2root(5), -10+2root(5), -10+2root(5), 10+2root(5), 7-root(5),
 2+2root(5), 2-2root(5), 7+root(5), -6, -6], [-6, 0, -6, -3-root(5),
 -3+root(5), -6, -3-3root(5), -3+3root(5), 3+root(5), 3-root(5), 3+3root(5),
 3-3root(5), -3+root(5), -3-root(5), 6, 0, 3-3root(5), 3+3root(5),
 -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5),
 0, -6, -3-3root(5), -3+3root(5), 3+root(5), 3-root(5), 3+3root(5),
 3-3root(5), 6, 0, 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5),
 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), 0, 0, 0, 0, 0, 0, -12,
 3+3root(5), -3+3root(5), 12, -12, 3+3root(5), -3+3root(5), 12, -4root(5),
 -4root(5), -4root(5), -4root(5), 7+root(5), 2-2root(5), 2+2root(5),
 7-root(5), -10+2root(5), 10+2root(5), 10+2root(5), -10+2root(5), 2+2root(5),
 7-root(5), 7+root(5), 2-2root(5), -6, -6], [0, 0, 0, -4root(5), 4root(5), 0,
 0, 0, 4root(5), -4root(5), 0, 0, 4root(5), -4root(5), 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 4root(5), -4root(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4root(5), 8root(5), -4root(5),
 8root(5), -10-2root(5), 10-2root(5), 10+2root(5), -10+2root(5), 10+2root(5),
 20-4root(5), -10+2root(5), -20-4root(5), 10+2root(5), -10+2root(5),
 -10-2root(5), 10-2root(5), 0, 0], [0, 0, 0, -4root(5), 4root(5), 0, 0, 0,
 4root(5), -4root(5), 0, 0, 4root(5), -4root(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 4root(5), -4root(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8root(5), -4root(5), 8root(5), -4root(5),
 10-2root(5), -10-2root(5), -10+2root(5), 10+2root(5), 20-4root(5),
 10+2root(5), -20-4root(5), -10+2root(5), -10+2root(5), 10+2root(5),
 10-2root(5), -10-2root(5), 0, 0], [0, 0, 0, -4root(5), 4root(5), 0, 0, 0,
 4root(5), -4root(5), 0, 0, 4root(5), -4root(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 4root(5), -4root(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4root(5), 8root(5), -4root(5), 8root(5),
 10-2root(5), -10-2root(5), -10+2root(5), 10+2root(5), -10+2root(5),
 -20-4root(5), 10+2root(5), 20-4root(5), -10+2root(5), 10+2root(5),
 10-2root(5), -10-2root(5), 0, 0], [0, 0, 0, -4root(5), 4root(5), 0, 0, 0,
 4root(5), -4root(5), 0, 0, 4root(5), -4root(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 4root(5), -4root(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8root(5), -4root(5), 8root(5), -4root(5),
 -10-2root(5), 10-2root(5), 10+2root(5), -10+2root(5), -20-4root(5),
 -10+2root(5), 20-4root(5), 10+2root(5), 10+2root(5), -10+2root(5),
 -10-2root(5), 10-2root(5), 0, 0], [-6, 0, 6, -3-root(5), -3+root(5), -6,
 3+3root(5), 3-3root(5), 3+root(5), 3-root(5), -3-3root(5), -3+3root(5),
 -3+root(5), -3-root(5), 6, 0, 3+3root(5), 3-3root(5), -3-3root(5),
 -3+3root(5), -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5), 0, 6,
 3+3root(5), 3-3root(5), 3+root(5), 3-root(5), -3-3root(5), -3+3root(5), 6, 0,
 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5),
 3+3root(5), 3-3root(5), 0, 0, 0, 0, 0, 0, -3-3root(5), 12, -12, 3-3root(5),
 -3-3root(5), 12, -12, 3-3root(5), -4root(5), -4root(5), -4root(5), -4root(5),
 2-2root(5), 7+root(5), 7-root(5), 2+2root(5), 10+2root(5), -10+2root(5),
 -10+2root(5), 10+2root(5), 7-root(5), 2+2root(5), 2-2root(5), 7+root(5), 6,
 6], [-6, 0, 6, -3-root(5), -3+root(5), -6, 3+3root(5), 3-3root(5), 3+root(5),
 3-root(5), -3-3root(5), -3+3root(5), -3+root(5), -3-root(5), 6, 0,
 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), -3+3root(5), -3-3root(5),
 3-3root(5), 3+3root(5), 0, 6, 3+3root(5), 3-3root(5), 3+root(5), 3-root(5),
 -3-3root(5), -3+3root(5), 6, 0, 3-3root(5), 3+3root(5), -3+3root(5),
 -3-3root(5), -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), 0, 0, 0, 0, 0,
 0, 12, -3-3root(5), 3-3root(5), -12, 12, -3-3root(5), 3-3root(5), -12,
 -4root(5), -4root(5), -4root(5), -4root(5), 7+root(5), 2-2root(5),
 2+2root(5), 7-root(5), -10+2root(5), 10+2root(5), 10+2root(5), -10+2root(5),
 2+2root(5), 7-root(5), 7+root(5), 2-2root(5), 6, 6], [-6, 0, 6, -3+root(5),
 -3-root(5), -6, 3-3root(5), 3+3root(5), 3-root(5), 3+root(5), -3+3root(5),
 -3-3root(5), -3-root(5), -3+root(5), 6, 0, 3+3root(5), 3-3root(5),
 -3-3root(5), -3+3root(5), -3-3root(5), -3+3root(5), 3+3root(5), 3-3root(5),
 0, 6, 3-3root(5), 3+3root(5), 3-root(5), 3+root(5), -3+3root(5), -3-3root(5),
 6, 0, 3+3root(5), 3-3root(5), -3-3root(5), -3+3root(5), -3-3root(5),
 -3+3root(5), 3+3root(5), 3-3root(5), 0, 0, 0, 0, 0, 0, 12, -3+3root(5),
 3+3root(5), -12, 12, -3+3root(5), 3+3root(5), -12, 4root(5), 4root(5),
 4root(5), 4root(5), 7-root(5), 2+2root(5), 2-2root(5), 7+root(5),
 -10-2root(5), 10-2root(5), 10-2root(5), -10-2root(5), 2-2root(5), 7+root(5),
 7-root(5), 2+2root(5), 6, 6], [-6, 0, 6, -3+root(5), -3-root(5), -6,
 3-3root(5), 3+3root(5), 3-root(5), 3+root(5), -3+3root(5), -3-3root(5),
 -3-root(5), -3+root(5), 6, 0, 3-3root(5), 3+3root(5), -3+3root(5),
 -3-3root(5), -3+3root(5), -3-3root(5), 3-3root(5), 3+3root(5), 0, 6,
 3-3root(5), 3+3root(5), 3-root(5), 3+root(5), -3+3root(5), -3-3root(5), 6, 0,
 3-3root(5), 3+3root(5), -3+3root(5), -3-3root(5), -3+3root(5), -3-3root(5),
 3-3root(5), 3+3root(5), 0, 0, 0, 0, 0, 0, -3+3root(5), 12, -12, 3+3root(5),
 -3+3root(5), 12, -12, 3+3root(5), 4root(5), 4root(5), 4root(5), 4root(5),
 2+2root(5), 7-root(5), 7+root(5), 2-2root(5), 10-2root(5), -10-2root(5),
 -10-2root(5), 10-2root(5), 7+root(5), 2-2root(5), 2+2root(5), 7-root(5), 6,
 6], [12, 15, 12, 4, 4, -12, 6, 6, 1, 1, 4, 4, -4, -4, 3, -10, 6, 6, -6, -6,
 -6, -6, 6, 6, -15, -12, -6, -6, -1, -1, -4, -4, -3, 10, -6, -6, 6, 6, 6, 6,
 -6, -6, 0, 0, 10, 10, -10, -10, -6, -6, 6, 6, 6, 6, -6, -6, -10, -10, 10, 10,
 -6, -6, -6, -6, 0, 0, 0, 0, 6, 6, 6, 6, 8, -8], [12, 15, -12, 4, 4, -12, -6,
 -6, 1, 1, -4, -4, -4, -4, 3, 10, 6, 6, -6, -6, 6, 6, -6, -6, -15, 12, 6, 6,
 -1, -1, 4, 4, -3, -10, -6, -6, 6, 6, -6, -6, 6, 6, 0, 0, -10, -10, 10, 10, 6,
 6, -6, -6, -6, -6, 6, 6, -10, -10, 10, 10, -6, -6, -6, -6, 0, 0, 0, 0, 6, 6,
 6, 6, -8, 8]])

chevieset(:H4, :UnipotentCharacters, function ()
  Dict{Symbol, Any}(:harishChandra=>[
  Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "H", :indices => 1:4, :rank => 4), :levi => [], :eigenvalue => 1, :parameterExponents => [1, 1, 1, 1], :cuspidalName => "", :charNumbers => 1:34),
  Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "I", :indices => [4, 3], :rank => 2, :bond => 10), :levi => 1:2, :eigenvalue => E(5, 3), :parameterExponents => [1, 5], :cuspidalName => "I_2(5)[1,2]", :charNumbers => [35, 44, 37, 45, 47, 53, 49, 51]),
  Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "I", :indices => [4, 3], :rank => 2, :bond => 10), :levi => 1:2, :eigenvalue => E(5, 2), :parameterExponents => [1, 5], :cuspidalName => "I_2(5)[1,3]", :charNumbers => [36, 43, 38, 46, 48, 54, 50, 52]),
  Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [4], :rank => 1), :levi => 1:3, :eigenvalue => E(4), :parameterExponents => [15], :cuspidalName => "H_3[i]", :charNumbers => [41, 39], :qEigen => 1 // 2),
  Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [4], :rank => 1), :levi => 1:3, :eigenvalue => -(E(4)), :parameterExponents => [15], :cuspidalName => "H_3[-i]", :charNumbers => [42, 40], :qEigen => 1 // 2),
  mkcuspidal("H_4",55,1),
  mkcuspidal("H_4",56,-1),
  mkcuspidal("H_4",57,-1;no=2),
  mkcuspidal("H_4",58,-1;no=3),
  mkcuspidal("H_4",59,1;no=2),
  mkcuspidal("H_4",60,1;no=3),
  mkcuspidal("H_4",61,-1;no=4),
  mkcuspidal("H_4",62,-1;no=5),
  mkcuspidal("H_4",63,1;no=4),
  mkcuspidal("H_4",64,-1;no=6),
  mkcuspidal("H_4",65,E(5,3)),
  mkcuspidal("H_4",66,E(5,2)),
  mkcuspidal("H_4",67,E(5,3);no=2),
  mkcuspidal("H_4",68,E(5,2);no=2),
  mkcuspidal("H_4",69,-E(5,3)),
  mkcuspidal("H_4",70,-E(5,2)),
  mkcuspidal("H_4",71,-E(5,3);no=2),
  mkcuspidal("H_4",72,-E(5,2);no=2),
  mkcuspidal("H_4",73,E(4)),
  mkcuspidal("H_4",74,-E(4)),
  mkcuspidal("H_4",75,E(3)),
  mkcuspidal("H_4",76,E(3,2)),
  mkcuspidal("H_4",77,-E(3,2)),
  mkcuspidal("H_4",78,-E(3)),
  mkcuspidal("H_4",79,E(5,4)),
  mkcuspidal("H_4",80,E(5)),
  mkcuspidal("H_4",81,E(5,4);no=2),
  mkcuspidal("H_4",82,E(5);no=2),
  mkcuspidal("H_4",83,-E(5,4)),
  mkcuspidal("H_4",84,-E(5)),
  mkcuspidal("H_4",85,-E(5,4);no=2),
  mkcuspidal("H_4",86,-E(5);no=2),
  mkcuspidal("H_4",87,E(3);no=2),
  mkcuspidal("H_4",88,E(3,2);no=2),
  mkcuspidal("H_4",89,E(3);no=3),
  mkcuspidal("H_4",90,E(3,2);no=3),
  mkcuspidal("H_4",91,E(5,4);no=3),
  mkcuspidal("H_4",92,E(5);no=3),
  mkcuspidal("H_4",93,E(5,4);no=4),
  mkcuspidal("H_4",94,E(5);no=4),
  mkcuspidal("H_4",95,E(15,2)),
  mkcuspidal("H_4",96,E(15,13)),
  mkcuspidal("H_4",97,E(15,8)),
  mkcuspidal("H_4",98,E(15,7)),
  mkcuspidal("H_4",99,E(5,4);no=5),
  mkcuspidal("H_4",100,E(5);no=5),
  mkcuspidal("H_4",101,E(5,4);no=6),
  mkcuspidal("H_4",102,E(5);no=6),
  mkcuspidal("H_4",103,-1;no=7),
  mkcuspidal("H_4",104,1;no=5)],
  :families => [Family("C1", [1]),
  Family(:C1,[2]),
  Family(:C1,[27]),
  Family(:C1,[28]),
  Family(:C1,[31],ennola=-1),
  Family(:C1,[32],ennola=-1),
  Family(Family(:Dihedral)(5), [3, 5, 35, 36], ennola = -1),
  Family(Family(:Dihedral)(5), [11, 13, 37, 38], ennola = 1),
  Family(Family(:Dihedral)(5), [12, 14, 44, 43], ennola = 1),
  Family(Family(:Dihedral)(5), [4, 6, 45, 46], ennola = -1),
  Family(Family(:TQZ)(2, -1, [1, -1]), [18, 20, 40, 39], cospecial=2,ennola=3),
  Family(Family(:TQZ)(2, -1, [1, -1]), [21, 19, 42, 41], cospecial=2,ennola=-3),
  Family(:HS4,[15,9,10,7,8,22,16,17,26,25,24,23,29,30,33,34,47,48,49,50,51,52,
               53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,
               74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,
               95,96,97,98,99,100,101,102,103,104],
         ennola=29)],
  :a=>[0,60,1,31,1,31,6,6,6,6,2,22,2,22,6,6,6,3,18,3,18,6,6,6,6,6,4,16,6,6,5,
       15,6,6,1,1,2,2,3,3,18,18,22,22,31,31,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
       6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
       6,6,6,6,6,6,6,6],
  :A=>[0,60,29,59,29,59,54,54,54,54,38,58,38,58,54,54,54,42,57,42,57,54,54,54,
       54,54,44,56,54,54,45,55,54,54,29,29,38,38,42,42,57,57,58,58,59,59,54,54,
       54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,
       54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,
       54,54,54,54,54,54,54,54])
end)

chevieset(:H4,:Discriminant,()->function(x1,x2,x3,x4)
return 356653503212267529442883791160074481878819871789501462448439296000000000000000000000000000000000000000000000000000000*x1*x2^4*x3^2*x4-
150282202635596488902001460719586939800220681018995060672718438400000000000000000000000000000000000000000000000000000*x1^2*x2^3*x3*x4^2-
10608134804031520104708690145314911956834295641977469821517824000000000000000000000000000000000000000000000000000000*x1^2*x2^3*x3^4-
11800154841021454897459070075847535916650553407969086838249881600000000000000000000000000000000000000000000000000*x1^2*x2^8*x3-
494067999438885545068703008852840174515500666787715200439025664000000000000000000000000000000000000000000000000000000000*x3^3*x4^2-
14843330030174837391194114855997437031176944900896633436562364825600000000000000000000000000000000000000000000000000000*x1^3*x2^2*x4^3+
1608561807482014139996724617914068119600770112775607271151579955200000000000000000000000000000000000000000000000000000*x1^3*x2^2*x3^3*x4+
3080989283094497910902659705909875720305820104953830376235178393600000000000000000000000000000000000000000000000000*x1^3*x2^7*x4+
2292877512371351093906354129635146935133755936955203377140282163200000000000000000000000000000000000000000000000000000000*x4^4+
422198315120155419583102853136047949570491230066697096227014574080000000000000000000000000000000000000000000000000000*x1^4*x2*x3^2*x4^2-
45663089881576628150949965054126620151545542004881507421991731200000000000000000000000000000000000000000000000000000*x1^4*x2*x3^5-
490010703556611692166288598476988488776848067628393738247266631680000000000000000000000000000000000000000000000000*x1^4*x2^6*x3^2-
1264357595004017790952069824926643633410121247448685162450502287360000000000000000000000000000000000000000000000000000*x1^5*x3*x4^3-
949284342615843831375344905995082597921731761313511375509022310400000000000000000000000000000000000000000000000000000*x2^5*x4^2-
102275636950576718002003440112080182303485110292577625260949504000000000000000000000000000000000000000000000000000000*x2^5*x3^3+
136233787550230781895336586591564116158800528054714184153790676992000000000000000000000000000000000000000000000000000*x1^5*x3^4*x4+
544799982032455386661353280740828188452434052840365716593925160960000000000000000000000000000000000000000000000000*x1^5*x2^5*x3*x4+
26615375957990556122862644204320897657931060968682942701240320000000000000000000000000000000000000000000000000000000000*x3^6+
36077760329787897197296956229427185602024150921130556352542130831360000000000000000000000000000000000000000000000000*x1^6*x2^4*x4^2-
1346200001103959873876941303131651634408970902362628091690637852672000000000000000000000000000000000000000000000000*x1^6*x2^4*x3^3-
2496698438655118845737962537601353223179877450381365879261794140160000000000000000000000000000000000000000000000*x1^6*x2^9-
1333396081663032413484849953112979399258651212562428808693807054848000000000000000000000000000000000000000000000000*x1^7*x2^3*x3^2*x4+
6018590469778329942785908426322243252721441383572826879426794881024000000000000000000000000000000000000000000000000*x1^8*x2^2*x3*x4^2-
189123385004041760279864039987757604614774381118723828436236133990400000000000000000000000000000000000000000000000*x1^8*x2^2*x3^4-
513997090601712561713963958026061236593225407986012301969321885696000000000000000000000000000000000000000000000*x1^8*x2^7*x3+
358806650688954821297136257389582982743595634035382886467725426688000000000000000000000000000000000000000000000000*x1^9*x2*x4^3-
155080933553343976666817954370760222347096629625079936696042546790400000000000000000000000000000000000000000000000*x1^9*x2*x3^3*x4-
39065525143987284325383991726004508911539059411572567307555277111296000000000000000000000000000000000000000000000*x1^9*x2^6*x4+
98254350512994971391087767162159074571294403886763008775631667200000000000000000000000000000000000000000000000000*x2^10+
261381769534821985006627324768876718709419974443252562496290868428800000000000000000000000000000000000000000000000*x1^10*x3^2*x4^2-
9383754800325065786142161621068713614238278274228581562600571011072000000000000000000000000000000000000000000000*x1^10*x3^5+
1070818014353726420541263336245355253461294409123818380456179951206400000000000000000000000000000000000000000000*x1^10*x2^5*x3^2-
9567436758413870615915706085977280837793583227921663244100511465472000000000000000000000000000000000000000000000*x1^11*x2^4*x3*x4-
1730707350400805079537113903478502222431079578031651380921888669696000000000000000000000000000000000000000000000*x1^12*x2^3*x4^2+
237178421863616741669731458234731599825103926974690677586022933463040000000000000000000000000000000000000000000*x1^12*x2^3*x3^3+
15920968903275590520797948075833817164144259040792169971976808221900800000000000000000000000000000000000000000*x1^12*x2^8-
779868662898864520206712366885644806722425871800792094526500692295680000000000000000000000000000000000000000000*x1^13*x2^2*x3^2*x4-
148352702294217899655615677168386338341362445427576257119904512081920000000000000000000000000000000000000000000*x1^14*x2*x3*x4^2+
13345081640410410873251539235182463013493253079071871995316182974464000000000000000000000000000000000000000000*x1^14*x2*x3^4+
5078778529221617769497250811154344340914481779862170580320888081612800000000000000000000000000000000000000000*x1^14*x2^6*x3-
58384911425425751487826728873121264595342841499398668519743684608000000000000000000000000000000000000000000*x1^15*x4^3-
24003205851272113316040598836714243639847713073294629617829616287744000000000000000000000000000000000000000000*x1^15*x3^3*x4+
2785759503819062570928406926666203006615197647150212527681111144267776000000000000000000000000000000000000000*x1^15*x2^5*x4+
581983957576292122072962366795216814659828351455553349496125513531392000000000000000000000000000000000000000*x1^16*x2^4*x3^2+
467648513973715734565562806573392493642638718565614327654937272516608000000000000000000000000000000000000000*x1^17*x2^3*x3*x4+
21333648518651179090666688229242067073042358661439962497827385376768000000000000000000000000000000000000000*x1^18*x2^2*x4^2+
31256956697687140965419220408683318765433562114064178615055391549030400000000000000000000000000000000000000*x1^18*x2^2*x3^3-
1496726027387190622003366092790850819674011805574853384935062401712128000000000000000000000000000000000000*x1^18*x2^7+
20435245083516387185432583651053810118336242646696930531922822142361600000000000000000000000000000000000000*x1^19*x2*x3^2*x4+
24143090243621602750053424800472314474716188459698008052865381171200000000000000000000000000000000000000*x1^20*x3*x4^2+
825945566910440031636249785986634184191933616916085895559565876920320000000000000000000000000000000000000*x1^20*x3^4-
369152035057094550722692894516954446422746649178908794948952874654105600000000000000000000000000000000000*x1^20*x2^5*x3-
67703854791501438962617500318553773898513103775121692180606498530918400000000000000000000000000000000000*x1^21*x2^4*x4-
30914956720845599960477752943426200941447502734443164071445467632762880000000000000000000000000000000000*x1^22*x2^3*x3^2-
5877363896170046689008088736846795184335919997029328665801452358205440000000000000000000000000000000000*x1^23*x2^2*x3*x4-
6851461834935666181982071336579704992665849095958583133226150133760000000000000000000000000000000000*x1^24*x2*x4^2-
937560914643194713655889439507158343377091183108106753843227879538688000000000000000000000000000000000*x1^24*x2*x3^3+
54014077249873704615888765518711745456717901191403559716781071018229760000000000000000000000000000000*x1^24*x2^6-
3326969412780435076808942585021920201205012285661391251739634565120000000000000000000000000000000000*x1^25*x3^2*x4+
9142238250570941781386539367398360335160620733378770664887238457819136000000000000000000000000000000*x1^26*x2^4*x3+
570754289462011686620454294733482428706872568858681356933135176040448000000000000000000000000000000*x1^27*x2^3*x4+
404481943674252686600367213364105558384478548443416194777568009571532800000000000000000000000000000*x1^28*x2^2*x3^2+
1888290434541999081031484057707938488872633570558865404000704292454400000000000000000000000000000*x1^29*x2*x3*x4+
557458477010703413948617366306871438606982413253592936758556753920000000000000000000000000000*x1^30*x4^2+
152760661598048314163747158989266497634237497828763469995349859368960000000000000000000000000000*x1^30*x3^3-
888365086960543158394015667170266349705385641000819744893206498723758080000000000000000000000000*x1^30*x2^5-
78561152948261019587394998484349091811813149270462428151765906636144640000000000000000000000000*x1^32*x2^3*x3-
269739037254000333237253355872986776481636014941781902230114690662400000000000000000000000000*x1^33*x2^2*x4-
130053533744184698431036357456332809885492167806897360819036283207680000000000000000000000000*x1^34*x2*x3^2-
153658065515162945957744360219709693461232051321307425180953346048000000000000000000000000*x1^35*x3*x4+
5791889299513301840860860493156228087130804768250845050046949079646208000000000000000000000*x1^36*x2^4+
37155928242821013710649530766847008992455961938389005589375048430387200000000000000000000*x1^38*x2^2*x3+
43605931222211099018926852567808725034374678685452179554775230054400000000000000000000*x1^39*x2*x4+
10585787435319014982259264242821571969036221735679976058591182848000000000000000000000*x1^40*x3^2-
3561814908987164024061797351925864030692888993779191208737787584184320000000000000000*x1^42*x2^3-
6008180456836737432576314705281900064560196547229739860790411329536000000000000000*x1^44*x2*x3-
2365389896256411024785141505808116771715495726038969476065630617600000000000000*x1^45*x4+
856344793127496718894798091416299809277608902649969916397049107046400000000000*x1^48*x2^2+
325954843203097104544873837959180360934425990637588386358585190400000000000*x1^50*x3-
92501219481135637317796208571321370424087725906250687861422929024000000*x1^54*x2+
3763440439874743890691733912248806724071319604383731976711794683*x1^60
end)

chevieset(:H4, :KLeftCellRepresentatives, [
  Dict{Symbol, Any}(:character => [1], :duflo => [1, 2, 3, 4], :reps => ""), 
  Dict{Symbol,Any}(:character=>[2], :duflo => [61, 62, 63, 64], :reps => ""), 
  Dict{Symbol,Any}(:character=>[5,3],:duflo=>[1,2,8,64],:reps=>[[16,2,3,87]]), 
  Dict{Symbol,Any}(:character=>[6,4],:duflo=>[1,66,63,64],:reps=>[[9,65,71,64]]),
  Dict{Symbol, Any}(:character => [13, 11], :duflo => [2, 1, 27, 103], :reps => [[3, 20, 1, 110]]), 
  Dict{Symbol, Any}(:character => [14, 12], :duflo => [1, 66, 68, 4], :reps => [[9, 65, 76, 4]]), 
  Dict{Symbol, Any}(:character => [20, 18], :duflo => [1, 2, 32, 120], :reps => [[23, 3, 2, 116], [24, 23, 112, 2], [33, 1, 110, 32]]), 
  Dict{Symbol, Any}(:character => [20, 18], :duflo => [19, 85, 10, 20], :reps => [[12, 6, 10, 109], [13, 20, 97, 6], [19, 12, 80, 70]]), 
  Dict{Symbol, Any}(:character => [21, 19], :duflo => [10, 63, 62, 94], :reps => [[15, 62, 73, 83], [15, 77, 13, 94], [21, 85, 5, 83]]), 
  Dict{Symbol, Any}(:character => [21, 19], :duflo => [19, 85, 10, 88], :reps => [[13, 81, 6, 76], [17, 67, 69, 88], [19, 69, 70, 76]]), 
  Dict{Symbol, Any}(:character => [27], :duflo => [2, 1, 24, 119], :reps => [[1, 35, 120, 39], [38, 2, 116, 24]]), 
  Dict{Symbol, Any}(:character => [27], :duflo => [12, 21, 102, 30], :reps => [[1, 12, 25, 119], [35, 1, 107, 25]]), 
  Dict{Symbol, Any}(:character => [27], :duflo => [33, 11, 115, 18], :reps => [[2, 30, 74, 100], [2, 30, 114, 40]]), 
  Dict{Symbol, Any}(:character => [28], :duflo => [1, 76, 4, 3], :reps => [[27, 72, 73, 86], [28, 92, 14, 86]]), 
  Dict{Symbol, Any}(:character => [28], :duflo => [36, 117, 54, 74], :reps => [[24, 102, 21, 18], [46, 110, 34, 100]]), 
  Dict{Symbol, Any}(:character => [28], :duflo => [40, 102, 30, 96], :reps => [[19, 94, 16, 10], [32, 68, 77, 96]]), 
  Dict{Symbol, Any}(:character => [31], :duflo => [1, 2, 3, 100], :reps => [[2, 28, 119, 44], [3, 39, 117, 1], [31, 1, 107, 3]]), 
  Dict{Symbol, Any}(:character => [31], :duflo => [1, 31, 119, 46], :reps => [[1, 31, 85, 106], [15, 30, 114, 12], [34, 12, 116, 15]]), 
  Dict{Symbol, Any}(:character => [31], :duflo => [1, 35, 106, 4], :reps => [[4, 17, 1, 117], [17, 16, 115, 48], [40, 4, 110, 1]]), 
  Dict{Symbol, Any}(:character => [31], :duflo => [34, 107, 3, 52], :reps => [[3, 39, 116, 12], [6, 24, 73, 112], [6, 24, 119, 52]]), 
  Dict{Symbol, Any}(:character => [32], :duflo => [2, 1, 79, 64], :reps => [[25, 97, 20, 1], [26, 64, 71, 101], [34, 96, 29, 101]]), 
  Dict{Symbol, Any}(:character => [32], :duflo => [27, 106, 26, 13], :reps => [[4, 13, 92, 66], [34, 66, 70, 103], [42, 107, 36, 103]]), 
  Dict{Symbol, Any}(:character => [32], :duflo => [31, 62, 63, 113], :reps => [[23, 10, 107, 62], [38, 117, 39, 10], [42, 105, 41, 113]]), 
  Dict{Symbol, Any}(:character => [32], :duflo => [45, 109, 44, 110], :reps => [[16, 17, 102, 69], [32, 115, 36, 17], [37, 69, 67, 110]]), 
  Dict{Symbol, Any}(:character => [34, 34, 33, 30, 29, 26, 25, 24, 23, 22, 10, 9], :duflo => [14, 64, 63, 62], :reps => [[5, 28, 100, 86], [5, 28, 117, 26], [5, 32, 105, 64], [10, 26, 90, 101], [10, 26, 120, 41], [13, 29, 110, 75], [13, 29, 118, 15], [15, 30, 102, 89], [15, 30, 120, 29], [16, 15, 111, 13], [16, 31, 112, 63], [17, 16, 88, 99], [17, 16, 117, 39], [17, 18, 92, 80], [17, 18, 108, 20], [18, 15, 80, 102], [18, 15, 116, 42], [20, 13, 77, 110], [20, 13, 119, 50], [24, 63, 62, 78], [24, 63, 82, 18], [26, 17, 101, 88], [26, 17, 119, 28], [28, 20, 103, 77], [28, 20, 116, 17], [29, 10, 91, 90], [29, 10, 114, 30], [30, 5, 89, 100], [30, 5, 118, 40], [33, 62, 78, 70], [33, 62, 92, 10], [36, 104, 5, 13], [37, 75, 98, 13], [37, 111, 13, 26], [41, 75, 64, 102], [41, 75, 106, 42], [42, 63, 113, 16], [42, 115, 16, 41], [43, 64, 109, 5], [43, 112, 5, 42], [45, 70, 80, 90], [45, 70, 103, 30], [46, 78, 70, 80], [46, 78, 91, 20], [47, 88, 99, 26], [47, 117, 26, 15], [49, 77, 110, 28], [49, 119, 28, 29], [50, 86, 63, 101], [50, 86, 105, 41], [52, 80, 102, 17], [53, 89, 100, 15], [53, 118, 15, 28], [55, 90, 101, 29]]), 
  Dict{Symbol, Any}(:character => [34, 34, 33, 30, 29, 26, 25, 24, 23, 22, 10, 9], :duflo => [31, 62, 92, 14], :reps => [[4, 21, 104, 5], [4, 40, 115, 62], [5, 30, 103, 81], [5, 30, 117, 21], [11, 20, 97, 78], [11, 20, 113, 18], [11, 33, 109, 68], [14, 21, 88, 101], [14, 21, 119, 41], [15, 18, 82, 107], [15, 18, 120, 47], [18, 25, 107, 80], [18, 25, 118, 20], [20, 28, 106, 85], [20, 28, 119, 25], [21, 22, 101, 90], [21, 22, 120, 30], [22, 11, 90, 97], [22, 11, 117, 37], [25, 4, 80, 98], [25, 4, 113, 38], [25, 14, 93, 88], [25, 14, 114, 28], [26, 96, 11, 5], [27, 68, 62, 73], [28, 5, 85, 103], [28, 5, 118, 43], [30, 15, 100, 82], [30, 15, 116, 22], [31, 62, 73, 74], [34, 81, 89, 5], [34, 104, 5, 18], [39, 80, 98, 18], [39, 113, 18, 21], [41, 62, 110, 4], [41, 112, 4, 47], [42, 73, 74, 75], [42, 73, 93, 15], [43, 78, 62, 107], [43, 78, 109, 47], [46, 68, 111, 11], [46, 115, 11, 41], [47, 81, 68, 101], [47, 81, 108, 41], [48, 74, 75, 88], [48, 74, 100, 28], [49, 75, 88, 82], [49, 75, 106, 22], [50, 90, 97, 21], [50, 117, 21, 20], [51, 85, 103, 20], [51, 118, 20, 30], [52, 82, 107, 30], [55, 88, 101, 25]]),
  Dict{Symbol, Any}(:character => [34, 34, 33, 33, 30, 29, 26, 25, 24, 23, 22, 17, 16, 15], :duflo => [19, 97, 52, 86], :reps => [[1, 12, 64, 102], [1, 12, 106, 42], [1, 35, 106, 85], [1, 35, 119, 25], [7, 1, 88, 8], [7, 36, 111, 74], [7, 36, 120, 14], [8, 25, 107, 1], [12, 21, 77, 110], [12, 21, 119, 50], [14, 25, 91, 96], [14, 25, 118, 36], [16, 7, 87, 81], [16, 7, 102, 21], [16, 31, 108, 79], [16, 31, 118, 19], [17, 16, 94, 87], [17, 16, 115, 27], [17, 26, 104, 72], [18, 17, 95, 94], [18, 17, 119, 34], [19, 8, 76, 105], [19, 8, 115, 45], [19, 14, 86, 91], [21, 14, 114, 7], [25, 18, 96, 95], [25, 18, 120, 35], [26, 7, 72, 111], [26, 7, 116, 51], [27, 19, 109, 76], [27, 19, 117, 16], [31, 1, 79, 106], [31, 1, 117, 46], [32, 102, 17, 1], [34, 12, 103, 77], [35, 1, 107, 64], [38, 76, 105, 27], [38, 115, 27, 25], [40, 85, 90, 1], [40, 107, 1, 27], [41, 75, 74, 66], [43, 74, 66, 91], [43, 74, 97, 31], [44, 66, 91, 78], [44, 66, 108, 18], [45, 77, 74, 94], [45, 77, 110, 34], [45, 119, 34, 14], [46, 74, 100, 7], [46, 114, 7, 34], [48, 72, 111, 17], [48, 116, 17, 36], [49, 85, 72, 96], [49, 85, 103, 36], [50, 78, 79, 95], [50, 78, 109, 35], [51, 79, 106, 16], [51, 117, 16, 35], [54, 95, 94, 25], [56, 91, 96, 19], [57, 96, 95, 14]]), 
  Dict{Symbol, Any}(:character => [34, 34, 33, 33, 30, 30, 29, 29, 26, 25, 24, 23, 17, 16, 8, 7], :duflo => [1, 35, 102, 64], :reps => [[1, 7, 63, 97], [1, 7, 100, 37], [1, 31, 100, 89], [1, 31, 118, 29], [2, 16, 64, 111], [2, 16, 113, 51], [2, 38, 113, 70], [2, 38, 119, 10], [7, 23, 80, 107], [7, 23, 118, 47], [10, 29, 93, 98], [10, 29, 120, 38], [11, 2, 77, 83], [11, 2, 97, 23], [11, 33, 105, 86], [11, 33, 120, 26], [13, 20, 91, 96], [13, 20, 118, 36], [13, 22, 95, 76], [16, 17, 73, 112], [16, 17, 119, 52], [17, 26, 112, 71], [17, 26, 117, 11], [20, 11, 96, 77], [20, 11, 111, 17], [20, 28, 110, 67], [22, 11, 76, 105], [22, 11, 115, 45], [23, 10, 109, 2], [26, 10, 88, 93], [26, 10, 114, 33], [28, 2, 67, 113], [28, 2, 116, 53], [29, 13, 98, 91], [29, 13, 119, 31], [31, 1, 104, 63], [31, 16, 103, 73], [33, 1, 86, 100], [33, 1, 117, 40], [34, 71, 101, 17], [34, 111, 17, 29], [36, 7, 102, 80], [38, 2, 109, 64], [38, 71, 64, 105], [38, 71, 108, 45], [39, 104, 1, 17], [40, 70, 99, 2], [40, 109, 2, 36], [41, 80, 70, 96], [41, 80, 107, 36], [41, 118, 36, 10], [42, 70, 76, 93], [42, 70, 103, 33], [43, 64, 107, 1], [43, 110, 1, 45], [45, 67, 113, 20], [45, 116, 20, 38], [47, 73, 86, 91], [47, 73, 112, 31], [47, 119, 31, 26], [48, 82, 70, 76], [49, 91, 96, 29], [50, 76, 105, 13], [52, 89, 67, 98], [52, 89, 102, 38], [53, 86, 100, 11], [53, 117, 11, 31], [56, 93, 98, 26], [57, 98, 91, 10]])])
