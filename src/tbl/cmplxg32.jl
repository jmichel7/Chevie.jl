#  tbl/cmplxg32.jl      CHEVIE library       Gunter Malle and Jean Michel
#  Copyright (C) 1998-  The CHEVIE Team

chevieset(:G32,:simpleroots,[0 0 -1 0;
                             E(4)//root(3) E(4)//root(3) E(4)//root(3) 0;
                             0 1 0 0;
                             E(4)//root(3) -E(4)//root(3) 0 -E(4)//root(3)])

chevieset(:G32,:ordergens,fill(3,4))

chevieset(:G32,:HyperplaneRepresentatives, [1])

chevieset(:G32, :BraidRelations, [[[1,2,1], [2,1,2]], [[2,3,2], [3,2,3]],
  [[3, 4, 3], [4, 3, 4]], [[1, 3], [3, 1]], [[1, 4], [4, 1]], [[2, 4], [4, 2]]])

chevieset(:G32, :ReflectionDegrees, [12, 18, 24, 30])

chevieset(:G32, :NrConjugacyClasses, 102)

chevieset(:G32, :ParabolicRepresentatives, s->
  [[Int[]], [[1]], [[1, 2], [1, 3]], [1:3, [1, 3, 4]], [1:4]][s+1])

# in BW, classes 34,62,84 are (z^5)^(1/4), (z^5)^(1/2), (z^3)^(1/2)
# classes 30,41,58 are (z1414)^(1/2), (z14)^(1/2), z(z14)^(1/2)
# this gives the monomial part of the eigenvalues. Vanishing due to
# rationality of characters and Schur relations of Spetsial algebra conclude.
chevieset(:G32, :ClassNames, [".", "1", "12", "31", "11", "121", "421", "123",
  "131", "1232", "aa1211211", "4311", "c", "3131", "1211211", "4211", "42211",
  "cc", "a32", "d", "aaaa12", "44211", "1232z", "aa123", "a32zzzzz", "aa121121",
  "a", "ccc", "442211", "dd14", "211211", "121zzzzz", "aaaa1211211", "zd",
  "cccc", "4211211", "a32z", "11434z", "a32zzz", "aa13", "dd1", "zzc", "121z",
  "aa12", "1434zzzzz", "1232zzzzz", "44211211", "1zzzzz", "1434z", "1232zzzz",
  "ddd", "11434zzzzz", "3131z", "11z", "1232zzz", "131zzzzz", "aa1", "zdd1",
  "a32zzzz", "dd", "131z", "zzdd", "1434zz", "1232zz", "aa", "1211214z", "zc",
  "12112114zz", "aaaa", "131zzz", "1134z", "a32zz", "12112144z", "1434zzz",
  "121zz", "11434zzzz", "121zzzz", "11434zzz", "az", "1211214zz", "121121z",
  "124z", "12zz", "zdd", "11zzzz", "12z", "121121zz", "13z", "124zz", "121zzz",
  "11zzzzz", "13zz", "1z", "z", "13zzz", "11zzz", "1zz", "1zzz", "zzzzz",
  "zzz", "zz", "zzzz"])

chevieset(:G32, :WordsClassRepresentatives, map(x->collect(
  replace(x,"."=>"","z"=>"4321"^5,"c"=>"4321","d"=>"12432","a"=>"121321")).-'0',
  chevieget(:G32, :ClassNames)))

chevieset(:G32, :PowerMaps, [nothing, [1, 5, 2, 14, 2, 31, 9, 27, 9, 19, 40, 4, 18, 4, 5, 47, 14, 35, 10, 60, 57, 36, 72, 26, 50, 69, 65, 67, 9, 53, 1, 81, 4, 62, 18, 5, 64, 80, 10, 57, 88, 35, 87, 14, 86, 59, 2, 85, 26, 72, 84, 27, 92, 97, 19, 40, 40, 95, 64, 94, 57, 99, 86, 59, 69, 65, 67, 92, 65, 9, 92, 50, 97, 47, 81, 80, 87, 36, 85, 85, 101, 57, 69, 100, 97, 97, 102, 4, 40, 31, 69, 92, 65, 101, 14, 2, 85, 5, 102, 1, 102, 101], [1, 1, 31, 1, 1, 6, 31, 6, 1, 65, 31, 31, 28, 1, 31, 6, 31, 67, 69, 51, 31, 6, 91, 6, 93, 31, 31, 28, 31, 84, 31, 90, 31, 51, 67, 31, 93, 90, 93, 1, 84, 28, 90, 31, 90, 91, 31, 100, 90, 65, 51, 90, 100, 100, 91, 100, 1, 84, 69, 84, 100, 84, 6, 65, 1, 31, 67, 31, 1, 100, 31, 69, 31, 90, 6, 6, 6, 90, 31, 31, 31, 31, 31, 84, 1, 31, 31, 100, 31, 90, 100, 1, 100, 100, 100, 100, 1, 100, 100, 100, 1, 1], nothing, [1, 5, 15, 14, 2, 6, 29, 24, 9, 19, 21, 17, 94, 4, 3, 22, 12, 101, 10, 34, 11, 16, 25, 8, 23, 27, 26, 100, 7, 30, 31, 43, 44, 20, 102, 47, 46, 45, 55, 57, 58, 99, 32, 33, 38, 37, 36, 54, 52, 72, 51, 49, 53, 48, 39, 61, 40, 41, 64, 62, 56, 60, 76, 59, 69, 83, 1, 71, 65, 70, 68, 50, 79, 78, 77, 63, 75, 74, 73, 86, 87, 89, 66, 84, 97, 80, 81, 95, 82, 90, 93, 92, 91, 99, 88, 98, 85, 96, 94, 100, 102, 101], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], nothing, nothing, nothing, [1, 5, 15, 14, 2, 6, 29, 24, 9, 19, 21, 17, 42, 4, 3, 22, 12, 35, 10, 34, 11, 16, 25, 8, 23, 27, 26, 28, 7, 30, 31, 43, 44, 20, 18, 47, 46, 45, 55, 57, 58, 13, 32, 33, 38, 37, 36, 54, 52, 72, 51, 49, 53, 48, 39, 61, 40, 41, 64, 62, 56, 60, 76, 59, 69, 83, 67, 71, 65, 70, 68, 50, 79, 78, 77, 63, 75, 74, 73, 86, 87, 89, 66, 84, 97, 80, 81, 95, 82, 90, 93, 92, 91, 99, 88, 98, 85, 96, 94, 100, 102, 101], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], nothing, nothing, nothing, [1, 5, 15, 14, 2, 6, 29, 24, 9, 19, 21, 17, 42, 4, 3, 22, 12, 35, 10, 34, 11, 16, 25, 8, 23, 27, 26, 28, 7, 30, 31, 43, 44, 20, 18, 47, 46, 45, 55, 57, 58, 13, 32, 33, 38, 37, 36, 54, 52, 72, 51, 49, 53, 48, 39, 61, 40, 41, 64, 62, 56, 60, 76, 59, 69, 83, 67, 71, 65, 70, 68, 50, 79, 78, 77, 63, 75, 74, 73, 86, 87, 89, 66, 84, 97, 80, 81, 95, 82, 90, 93, 92, 91, 99, 88, 98, 85, 96, 94, 100, 102, 101], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], nothing, nothing, nothing, [1, 5, 15, 14, 2, 6, 29, 24, 9, 19, 21, 17, 42, 4, 3, 22, 12, 35, 10, 34, 11, 16, 25, 8, 23, 27, 26, 28, 7, 30, 31, 43, 44, 20, 18, 47, 46, 45, 55, 57, 58, 13, 32, 33, 38, 37, 36, 54, 52, 72, 51, 49, 53, 48, 39, 61, 40, 41, 64, 62, 56, 60, 76, 59, 69, 83, 67, 71, 65, 70, 68, 50, 79, 78, 77, 63, 75, 74, 73, 86, 87, 89, 66, 84, 97, 80, 81, 95, 82, 90, 93, 92, 91, 99, 88, 98, 85, 96, 94, 100, 102, 101], nothing, nothing, nothing, nothing, nothing, [1, 5, 15, 14, 2, 6, 29, 24, 9, 19, 21, 17, 42, 4, 3, 22, 12, 35, 10, 34, 11, 16, 25, 8, 23, 27, 26, 28, 7, 30, 31, 43, 44, 20, 18, 47, 46, 45, 55, 57, 58, 13, 32, 33, 38, 37, 36, 54, 52, 72, 51, 49, 53, 48, 39, 61, 40, 41, 64, 62, 56, 60, 76, 59, 69, 83, 67, 71, 65, 70, 68, 50, 79, 78, 77, 63, 75, 74, 73, 86, 87, 89, 66, 84, 97, 80, 81, 95, 82, 90, 93, 92, 91, 99, 88, 98, 85, 96, 94, 100, 102, 101]])

chevieset(:G32, :ClassInfo, Dict{Symbol, Any}(
  :classtext => chevieget(:G32, :WordsClassRepresentatives),
  :classnames => chevieget(:G32, :ClassNames),
  :classparams => chevieget(:G32, :ClassNames),
  :orders => [1, 3, 6, 3, 3, 4, 6, 12, 3, 9, 6, 6, 30, 3, 6, 12, 6, 15, 9, 24, 6, 12, 18, 12, 18, 6, 6, 10, 6, 12, 2, 12, 6, 24, 15, 6, 18, 12, 18, 3, 12, 30, 12, 6, 12, 18, 6, 6, 12, 9, 8, 12, 6, 6, 18, 6, 3, 12, 9, 12, 6, 12, 12, 9, 3, 6, 5, 6, 3, 6, 6, 9, 6, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 4, 3, 6, 6, 6, 6, 4, 6, 3, 6, 6, 6, 6, 3, 6, 6, 2, 3, 3],
  :classes => [1, 40, 360, 240, 40, 540, 1440, 2160, 480, 2880, 1440, 1440, 5184, 240, 360, 2160, 1440, 5184, 2880, 6480, 1440, 2160, 2880, 2160, 2880, 360, 360, 5184, 1440, 4320, 90, 540, 1440, 6480, 5184, 360, 2880, 2160, 2880, 480, 4320, 5184, 540, 1440, 2160, 2880, 360, 40, 2160, 2880, 6480, 2160, 240, 40, 2880, 480, 480, 4320, 2880, 540, 480, 540, 2160, 2880, 40, 360, 5184, 1440, 40, 480, 1440, 2880, 360, 2160, 540, 2160, 540, 2160, 360, 360, 90, 1440, 360, 540, 40, 360, 90, 240, 1440, 540, 40, 240, 40, 1, 240, 40, 40, 40, 1, 1, 1, 1]))

chevieset(:G32, :CharInfo, function ()
  res=Dict{Symbol,Any}(:charparams=>[[1,0],[1,80],[1,40],[4,61],[4,21],[4,11],
    [4,41],[4,51],[4,1],[5,36],[5,44],[5,4],[5,12],[5,52],[5,20],[6,48],[6,8],
    [6,28],[10,30],[10,2],[10,34],[10,42],[10,10],[10,14],[15,24],[15,6],
    [15,8],[15,16],[15,38],[15,22],[20,33],[20,12],[20,13],[20,9,1],[20,35],
    [20,29,1],[20,3],[20,25],[20,31],[20,9,2],[20,17],[20,29,2],[20,21],[20,7],
    [20,19],[20,5],[20,20],[20,16],[24,6],[24,26],[24,16],[30,12,2],[30,12,1],
    [30,8],[30,28],[30,24],[30,4],[30,20,2],[30,20,1],[30,16],[36,7],[36,27],
    [36,17],[36,5],[36,15],[36,25],[40,24],[40,14],[40,10],[40,18],[40,22],
    [40,8],[45,6],[45,14],[45,22],[45,18],[45,10],[45,26],[60,15,2],[60,12],
    [60,7],[60,15,1],[60,17],[60,11,1],[60,9],[60,19],[60,13],[60,11,2],[60,20],
    [60,16],[64,18],[64,21],[64,8],[64,16],[64,13],[64,11],[80,9],[80,13],
    [80,17],[81,12],[81,14],[81,10]],
# The labelling is determined as follows:
# phi{30,12}'' and phi{60,15}'' are real
# The complex conjugate of phi{20,9}' is phi{20,3}
# The complex conjugate of phi{20,29}' is phi{20,13}
# The complex conjugate of phi{30,12}' is phi{30,24}
# The complex conjugate of phi{30,20}' is phi{30,16}
# The complex conjugate of phi{60,11}' is phi{60,7}
# The complex conjugate of phi{60,15}' is phi{60,9}
  :hgal=>perm"(93,96)(94,95)(100,102,101)",
  :extRefl=>[1,9,17,5,3])
  res[:b]=map(x->x[2],res[:charparams])
  res[:charnames]=exceptioCharName.(res[:charparams])
  res
end)

# Irrationality of chars:
# f36,f45 use E(3); f64 uses root(v*w); f81 uses root(u*v*w,3)
chevieset(:G32, :HeckeCharTable, function (para, rt)
  # @Mvp a,b,c,d,e,f possibilities are
  # a=+-1 c=+-1 b in 1, -1, 3, -3 d=+-E(3) e in +-1,+-3,+-5
  a=b=c=e=f=1
  d=E(3)
  u,v,w=para[1]
  f1(u)=map(i->u^length(i),chevieget(:G32, :WordsClassRepresentatives))
  f4(v,w)=[4,v+3*w,w*(2*w+v),2*w*(w+v),v^2+3*w^2,2*w^3,
w^2*(w+2*v),w^2*(w+v),w*(v*w+v^2+2*w^2),w^4,
-w^11*(-w+v)*(w^7+v*w^6+w^5*v^2+v^3*w^4+2*v^4*w^3+2*w^2*v^5+2*w*v^6+v^7),
w^2*(v*w+v^2+w^2),v*w^3,2*w^2*(v^2+w^2),-w^3*(-w+v)*(2*w^3+2*v*w^2+2*v^2*w+v^3),
w^3*(w+v),-w^2*(-w+v)*(v*w+v^2+w^2),-v^2*w^6,w^8,0,w^17*(v^8*w+v^9+w^9),
w^3*(v^2+w^2),-v^5*w^19,w^10*(w+v)*(v^4-w*v^3+v^2*w^2-v*w^3+w^4),-v^25*w^83,
-w^11*(-w+v)*(w^6+v*w^5+v^2*w^4+v^3*w^3+2*w^2*v^4+2*w*v^5+2*v^6),
-w^4*(-w+v)*(w+v),v^3*w^9,-w^3*(-w+v)*(v^2+w^2),0,
-2*w^3*(-w+v)*(v*w+v^2+w^2),-2*v^25*w^78,
-w^19*(-w+v)*(v*w+v^2+w^2)*(w^9+w^6*v^3+w^3*v^6+v^8*w+v^9),0,-v^4*w^12,
-w^4*(-w+v)*(w^2+2*v*w+2*v^2),-v^5*w^23,-v^5*w^18*(v^2+w^2),-v^15*w^53,
w^9*(w+v)*(w^4-v*w^3+v^2*w^2-w*v^3+2*v^4),0,v^11*w^33,-2*v^5*w^18,
w^9*(v*w+v^2+w^2)*(w^3-v*w^2+v^3),-v^25*w^78*(w+v),-v^25*w^79,
-w^5*(-w+v)*(w^2+v*w+2*v^2),-v^25*w^75*(v+3*w),-v^5*w^18*(w+v),v^20*w^64,0,
-v^25*w^78*(v^2+w^2),-2*v^5*w^17*(v^2+w^2),-v^5*w^15*(v^2+3*w^2),-v^15*w^49,
-v^25*w^76*(v*w+v^2+2*w^2),w^8*(2*v^4*w+v^5+w^5),0,
v^20*w^68,0,-v^5*w^16*(v*w+v^2+2*w^2),0,v^10*w^33*(w+v),v^10*w^34,
w^8*(3*v^4+w^4),v^5*w^19*(-w+v)*(w^2+2*v*w+2*v^2),-v^6*w^18,
-v^10*w^34*(-w+v)*(w+v)*(v*w+v^2+w^2),w^16*(3*v^8+w^8),
-v^15*w^46*(v*w+v^2+2*w^2),-v^5*w^17*(v*w+v^2+w^2),v^10*w^38,
v^5*w^20*(-w+v)*(w^2+v*w+2*v^2),-v^15*w^48*(w+v),2*v^10*w^33,
v^20*w^63*(v^2+w^2),2*v^20*w^63,-v^15*w^48*(v^2+w^2),
v^5*w^19*(-w+v)*(w+v),-v^10*w^34*(-w+v)*(w^2+2*v*w+2*v^2),
2*v^5*w^18*(-w+v)*(v*w+v^2+w^2),-v^5*w^17*(w+2*v),v^10*w^31*(2*w+v),0,
v^20*w^60*(v^2+3*w^2),-v^5*w^16*(2*w+v),-2*v^10*w^33*(-w+v)*(v*w+v^2+w^2),
-2*v^5*w^16*(w+v),v^10*w^32*(w+2*v),-2*v^15*w^48,-v^25*w^75*(v^2+3*w^2),
2*v^10*w^31*(w+v),-v^5*w^15*(v+3*w),-4*v^5*w^15,-2*v^15*w^46*(w+v),
-v^15*w^45*(v^2+3*w^2),v^10*w^30*(v+3*w),-v^15*w^45*(v+3*w),
-4*v^25*w^75,-4*v^15*w^45,4*v^10*w^30,4*v^20*w^60]
  f5(u,v,w)=[5,2*u+3*w,w*(2*u+w),2*u*w+u^2+2*w^2,2*u^2+3*w^2,w^3,
w*(u*w+u^2+w^2),u*w^2,u*w^2+u^2*w+u^3+2*w^3,-u^2*w^2,
u^4*w^9*(u*w+u^2+w^2)*(-u^4-u*w^3+w^4),w*(u*w^2+u^3+w^3),0,2*u^2*w^2+u^4+2*w^4,
w^3*(-2*u^3*w-2*u^4+w^4),w^4,w*(-u*w^3-u^2*w^2-u^3*w-u^4+w^4),0,-u^4*w^4,
-u^2*w^3,u^8*w^13*(u*w+u^2+w^2)*(u^3-u^2*w+w^3),w^5,-u^10*w^14,u^5*w^10,
-u^44*w^64,u^4*w^9*(w^5-2*u^3*w^2-2*u^5),-w^3*u^2*(2*u+w),0,
w*(u*w+u^2+w^2)*(-u^3+u^2*w-2*u*w^2+w^3),u^6*w^6,
w^3*(-4*u^3+w^3),u^40*w^63,u^8*w^15*(-u^3-u^2*w+w^3)*(u^5+u^2*w^3+w^5),
-u^10*w^15,0,w^3*(-2*u^3*w-2*u^4+w^4),-u^12*w^16,u^8*w^17,-u^28*w^40,
u^4*w^6*(w^4+2*u*w^3+u^2*w^2+u^4),u^5*w^6,0,u^8*w^15,w^7*u^4*(u*w^2+u^3+w^3)
,u^40*w^64,-u^42*w^62,w^3*(w^5-2*u^3*w^2-2*u^5),w^60*u^40*(2*u+3*w),u^8*w^
16,-u^34*w^50,-u^6*w^9,u^40*w^65,u^8*w^12*(2*u^2*w^2+u^4+2*w^4),u^8*w^12*(2
*u^2+3*w^2),-u^26*w^38,u^40*w^60*(u*w^2+u^2*w+u^3+2*w^3),u^4*w^6*(u*w^2+u^2*w
+u^3+2*w^3),u^13*w^18,-u^36*w^52,u^4*w^6,u^8*w^12*(u*w^2+u^2*w+u^3+2*w^3),
u^20*w^30,u^16*w^28,-u^18*w^26,u^4*w^6*(2*u^2+3*w^2),
u^8*w^15*(-2*u^3*w-2*u^4+w^4),0,u^16*w^27*(w^5-u^3*w^2-2*u^4*w-u^5),
u^8*w^12*(3*w^4+2*u^4),u^24*w^36*(u*w^2+u^2*w+u^3+2*w^3),u^8*w^13*(u*w^2+
u^3+w^3),-u^20*w^28,u^8*w^15*(w^5-2*u^3*w^2-2*u^5),u^24*w^40,u^16*w^27,u^32
*w^53,u^32*w^51,u^24*w^41,-w^15*u^10*(2*u+w),u^16*w^27*(-2*u^3*w-2*u^4+w^4),
u^8*w^15*(-4*u^3+w^3),u^8*w^13*(u*w+u^2+w^2),w^25*u^16*(2*u+w),u^12*w^18,u^
32*w^48*(2*u^2+3*w^2),w^13*u^8*(2*u+w),u^16*w^27*(-4*u^3+w^3),u^8*w^12*(2*u*w
+u^2+2*w^2),u^16*w^25*(u*w+u^2+w^2),u^24*w^39,u^40*w^60*(2*u^2+3*w^2),u^16*w
^24*(2*u*w+u^2+2*w^2),w^12*u^8*(2*u+3*w),5*u^8*w^12,u^24*w^36*(2*u*w+u^2+2*w^
2),u^24*w^36*(2*u^2+3*w^2),w^24*u^16*(2*u+3*w),w^36*u^24*(2*u+3*w),5*u^40*w^
60,5*u^24*w^36,5*u^16*w^24,5*u^32*w^48]
  f6(v,w)=[6,3*v+3*w,(w+v)^2,4*v*w+v^2+w^2,3*v^2+3*w^2,
(w+v)*(v^2-v*w+w^2),2*v*w*(w+v),v*w*(w+v),(w+v)*(v*w+v^2+w^2), 0,
w^4*v^4*(w+v)*(w^10-v*w^9+v^2*w^8-2*v^3*w^7+v^4*w^6-v^5*w^5+v^6*w^4-2*v^7*w^3+v^8*w^2-v^9*w+v^10), v*w*(w+v)^2, v^2*w^2,
4*v^2*w^2+v^4+w^4, (w+v)*(-w^3+v*w^2+v^3)*(-w^3-v^2*w+v^3), v*w*(v^2+w^2), -v^2*
w^2*(w+v), w^4*v^4, 0, 0, v^8*w^8*(v^2-v*w+w^2)*(w^6-v^3*w^3+v^6)*(w+v)^2, v^2*w
^2*(w+v), 0, v^5*w^5*(w+v)*(v^4-w*v^3+v^2*w^2-v*w^3+w^4), 0, w^4*v^4*(w^10-2*v^3
*w^7-2*v^7*w^3+v^10), -v^2*w^2*(v^2+w^2), v^6*w^6, -v*w*(v^2+w^2)*(v^2-v*w+w^2),
v^5*w^7+v^7*w^5, -4*v^3*w^3+v^6+w^6, v^50*w^50*(w+v)*(v^2-v*w+w^2), v^8*w^8*(w+
v)*(w^14-w^13*v+w^12*v^2-2*v^3*w^11+v^4*w^10-v^5*w^9+w^8*v^6-v^7*w^7+w^6*v^8-v^9
*w^5+v^10*w^4-2*w^3*v^11+w^2*v^12-w*v^13+v^14), 0, v^8*w^8, v*w*(w+v)*(w^4-v*w^3
-v^2*w^2-w*v^3+v^4), 0, v^12*w^12*(w+v), 0, w^4*v^4*(v*w+v^2+w^2)*(w^4+v*w^3-2*v
^2*w^2+w*v^3+v^4), v^5*w^5*(v+w), v^22*w^22, v^10*w^10*(w+v)*(v^2-v*w+w^2),
w^4*v^4*(v^4-w*v^3+v^2*w^2-v*w^3+w^4)*(w+v)^2, v^51*w^51*(v^2+w^2), 0, v^2*w^2*(
w^4-2*v*w^3-2*w*v^3+v^4), 3*v^50*w^50*(w+v), v^11*w^11*(v^2+w^2), 0, 0, v^52*w^
52*(w+v), v^10*w^10*(4*v^2*w^2+v^4+w^4), 3*v^10*w^10*(v^2+w^2), 0, v^50*w^50*(w+
v)*(v*w+v^2+w^2), w^4*v^4*(w+v)*(v*w+v^2+w^2)*(2*w^2-3*v*w+2*v^2),
v^15*w^15*(v+w), 0, 2*v^5*w^5, v^10*w^10*(w+v)*(v*w+v^2+w^2), 2*v^25*w^25,
v^21*w^21*(v^2+w^2), 0, 3*w^4*v^4*(w^4+v^4), v^11*w^11*(w+v)*(w^
4-v*w^3-v^2*w^2-w*v^3+v^4), v^12*w^12, v^21*w^21*(w^6-v^2*w^4-2*v^3*w^3-w^2*v^4+
v^6), 3*v^8*w^8*(w^8+v^8), v^30*w^30*(w+v)*(v*w+v^2+w^2), v^11*w^11*(w+v)^2, 0,
v^12*w^12*(w^4-2*v*w^3-2*w*v^3+v^4), v^31*w^31*(v^2+w^2), v^20*w^20*(w+v)*(v^2-v
*w+w^2), v^42*w^42*(w+v), v^40*w^40*(w+v)*(v^2-v*w+w^2), v^32*w^32*(w+v), -v^12*
w^12*(v^2+w^2), v^21*w^21*(w+v)*(w^4-v*w^3-v^2*w^2-w*v^3+v^4), v^10*w^10*(-4*v^3
*w^3+v^6+w^6), 2*v^11*w^11*(w+v), v^20*w^20*(w+v)^2, 2*v^15*w^15, 3*v^40*w^40*(v
^2+w^2), v^10*w^10*(w+v)^2, v^20*w^20*(-4*v^3*w^3+v^6+w^6), v^10*w^10*(4*v*w+v^2
+w^2), 2*v^21*w^21*(w+v), v^30*w^30*(w+v)*(v^2-v*w+w^2), 3*v^50*w^50*(v^2+w^2),
v^20*w^20*(4*v*w+v^2+w^2), 3*v^10*w^10*(w+v), 6*v^10*w^10, v^30*w^30*(4*v*w+v^2+
w^2), 3*v^30*w^30*(v^2+w^2), 3*v^20*w^20*(w+v), 3*v^30*w^30*(w+v), 6*v^50*w^50,
6*v^30*w^30, 6*v^20*w^20, 6*v^40*w^40]
  f10(u,v,w)=[10, u+6*v+3*w, v*(2*w+3*v), 2*u*v+4*v*w+3*v^2+w^2, u^2+6*v^2+3*w^2, v*(-u*w+3*v
^2), v*(u*v+w^2+2*v*w+v^2), v^2*(w+v), u*v^2+2*v*w^2+u^2*v+2*v^2*w+3*v^3+w^3, v^
4, v^8*(-v*u^2*w^8-v^2*u^2*w^7+v^5*u^2*w^4+u^4*w^7+v*u^4*w^6+u^5*w^6-v^3*w^8-v^4
*w^7+v^7*w^4+v^11), v*(w^3+u^2*v+v*w^2+v^2*w+v^3), 0, 2*u^2*v^2+4*v^2*w^2+3*v^4+
w^4, v^2*(u^2*w^3+u^2*v*w^2+u^3*w^2-2*v*w^4-2*v^2*w^3+3*v^5), v^2*(-u*w+u*v+v*w+
v^2), v*(u*v^3-w^4+u^2*w^2+u^2*v^2-v*w^3+v^4), 0, v^8, 0, v^13*(u^4*w^9+v*u^4*w^
8+v^4*w^9+v^5*w^8+v^13), v^3*(-u*w+u^2+w^2+v^2), u^2*v^16*w^6, v^10*(w+v)*(v^4-w
*v^3+v^2*w^2-v*w^3+w^4), u^10*v^68*w^30, v^8*(-2*v*u^2*w^7+v^4*u^2*w^4+3*u^4*w^6
-2*v^3*w^7+v^6*w^4+v^10), v^3*(2*u*w^2-v*w^2+v^3), 0, v*(-w^5+u^2*v*w^2+2*u^2*v^
3-2*v^2*w^3+2*v^3*w^2-v^4*w+v^5),
-u*v^6*w^3*(w^2+v^2), v^2*(3*u^2*w^2-4*v*w^3+3*v^4), v^61
*w^30*u^10*(-u*w+3*v^2), v^14*(-v*u^4*w^12-v^2*u^4*w^11+v^5*u^4*w^8+u^6*w^11+v*u
^6*w^10+u^7*w^10-v^5*w^12-v^6*w^11+v^9*w^8+v^17), 0, 0, v^3*(u*v^3+3*u^2
*w^2-2*w^4-2*v*w^3+w*v^3+v^4), u^2*v^20*w^6, u^2*v^15*w^6*(-u*w+u^2+w^2+v^2), u^
6*v^44*w^18, v^6*(u^2*w^6+2*v*u^2*w^5+v^2*u^2*w^4+2*v*u^3*w^4+2*v^3*w^5+w^4*v^4+
v^8),-u*v^6*w^3*(v+w),0,v^13*w^6*u^2*(-u*w+3*v^2), v^7*(u^2*w^5+v*u^2*w^4+w^5*v^2+v^
3*w^4+v^7), v^62*w^30*u^10*(-u*w+u*v+v*w+v^2), u^10*v^64*w^30, v^3*(3*u^2*v*w^2+
u^2*v^3-2*w^5-2*v^2*w^3+v^3*w^2+v^5), v^60*u^10*w^30*(u+6*v+3*w), v^14*w^6*u^2*(
-u*w+u*v+v*w+v^2), u^8*v^52*w^24, 0, u^10*v^63*w^30*(-u*w+u^2+w^2+v^2), u^2*v^12
*w^6*(2*u^2*v^2+4*v^2*w^2+3*v^4+w^4), u^2*v^12*w^6*(u^2+6*v^2+3*w^2), u^6*v^40*w
^18, u^10*v^60*w^30*(u*v^2+2*v*w^2+u^2*v+2*v^2*w+3*v^3+w^3), v^6*(2*u^2*w^5+3*v*
u^2*w^4+u^3*w^4+w^5*v^2+2*v^3*w^4+v^7), -u^3*v^18*w^9*(v+w), u^8*v^56*w^24,
-2*u*v^6*w^3, u^2*v^12*w^6*(u*v^2+2*v*w^2+u^2*v+2*v^2*w+3*v^3+w^3),
-2*u^5*v^30*w^15, v^26*w^12*u^4*(-u*w+u*v+v*w+v^2),
u^4*v^28*w^12, v^6*(6*u^2*w^4+3*v^2*w^4+v^6), u^2*v^15*w^6*(u
*v^3+3*u^2*w^2-2*w^4-2*v*w^3+w*v^3+v^4), 0, u^4*v^27*w^12*(-w^5-2*v*w^4-v^2*w^3+
v^4*w+v^5+u*v^4+u^2*w^3+u^2*v*w^2+u^3*w^2), v^12*(6*u^4*w^8+3*v^4*w^8+v^12), u^6
*v^36*w^18*(u*v^2+2*v*w^2+u^2*v+2*v^2*w+3*v^3+w^3), u^2*v^13*w^6*(w^3+u^2*v+v*w^
2+v^2*w+v^3), u^4*v^32*w^12, u^2*v^15*w^6*(3*u^2*v*w^2+u^2*v^3-2*w^5-2*v^2*w^3+v
^3*w^2+v^5), v^38*w^18*u^6*(-u*w+u*v+v*w+v^2), v^25*w^12*u^4*(-u*w+3*v^2), u^8*v
^51*w^24*(-u*w+u^2+w^2+v^2), v^49*w^24*u^8*(-u*w+3*v^2), u^6*v^39*w^18*(-u*w+u^2
+w^2+v^2), u^2*v^15*w^6*(2*u*w^2-v*w^2+v^3), u^4*v^27*w^12*(u*v^3+3*u^2*w^2-2*w^
4-2*v*w^3+w*v^3+v^4), u^2*v^14*w^6*(3*u^2*w^2-4*v*w^3+3*v^4), u^2*v^13*w^6*(u*v+
w^2+2*v*w+v^2), v^25*u^4*w^12*(2*w+3*v),-2*u^3*v^18*w^9, u^8*v^48*w^24*(u^2+6*v^2+3*w
^2), v^13*u^2*w^6*(2*w+3*v), u^4*v^26*w^12*(3*u^2*w^2-4*v*w^3+3*v^4), u^2*v^12*w
^6*(2*u*v+4*v*w+3*v^2+w^2), u^4*v^25*w^12*(u*v+w^2+2*v*w+v^2), v^37*w^18*u^6*(-u
*w+3*v^2), u^10*v^60*w^30*(u^2+6*v^2+3*w^2), u^4*v^24*w^12*(2*u*v+4*v*w+3*v^2+w^
2), v^12*u^2*w^6*(u+6*v+3*w), 10*u^2*v^12*w^6, u^6*v^36*w^18*(2*u*v+4*v*w+3*v^2+
w^2), u^6*v^36*w^18*(u^2+6*v^2+3*w^2), v^24*u^4*w^12*(u+6*v+3*w), v^36*u^6*w^18*
(u+6*v+3*w), 10*u^10*v^60*w^30, 10*u^6*v^36*w^18, 10*u^4*v^24*w^12, 10*u^8*v^48*
w^24]
  f15(u,v,w)=[15, 3*u+6*v+6*w, (v+w)^2,
  2*u*v+2*u*w+4*v*w+u^2+3*v^2+3*w^2, 3*u^2+6*v^2+6*w^2,
-3*u*v*w+v^3+w^3, (v+w)*(v^2+w^2), -u*v*w, u*v^2+u*w^2+2*v*w^2+u^2*v+u^2*w+2*v^2
*w+u^3+3*v^3+3*w^3, 0, u^2*v^4*w^4*(w^9-w^6*v^3-w^5*v^4-w^4*v^5-w^3*v^6+v^9+w^5*
v^2*u^2+w^4*v^3*u^2+w^3*u^2*v^4+w^2*u^2*v^5+w^4*v^2*u^3+w^2*u^3*v^4+w^3*v^2*u^4+
w^2*v^3*u^4+w^2*v^2*u^5), (v^2-v*w+w^2)*(v+w)^2, 0, 2*u^2*v^2+2*u^2*w^2+4*v^2*w^
2+u^4+3*v^4+3*w^4, 3*u^2*v^2*w^3+3*u^2*v^3*w^2+3*u^3*v^2*w^2-2*v^3*w^4-2*v^4*w^3
+v^7+w^7, -u*v*w^2-u*v^2*w-u^2*v*w+v^4+w^4, u*v^2*w^2-v*w^4+u^2*v*w^2+u^2*v^2*w+
u^2*v^3+u^2*w^3+u^3*v^2+u^3*w^2-v^4*w+v^5+w^5, 0, 0, u*v^2*w^2, u^4*v^8*w^8*(v^4
-v^3*w+v^2*w^2-v*w^3+w^4)*(v+w)^2, -u*v*w^3-u*v^3*w-u^3*v*w+v^5+w^5, 0, -u^5*v^5
*w^5, 0, u^2*v^4*w^4*(3*u^2*v^2*w^4+3*u^2*v^4*w^2-2*v^3*w^5+3*u^4*v^2*w^2-2*v^5*
w^3+v^8+w^8), u*v^2*w^2*(2*v+2*w+3*u), 0, -v*w^5+3*u^2*v^2*w^2+u^2*v^4+u^2*w^4+v
^2*w^4-2*v^3*w^3+u^4*v^2+u^4*w^2+v^4*w^2-v^5*w+v^6+w^6,
u^2*v^4*w^4*(w^2+v^2+u^2),9*u^2*v^2*w^2
-4*v^3*w^3+v^6+w^6, -u^20*v^40*w^40*(3*u*v*w-v^3-w^3), u^4*v^8*w^8*(w^11-w^8*v^3
-w^7*v^4-w^4*v^7-w^3*v^8+v^11+w^7*v^2*u^2+w^6*v^3*u^2+w^3*v^6*u^2+w^2*u^2*v^7+w^
6*v^2*u^3+w^2*v^6*u^3+w^3*v^2*u^6+w^2*v^3*u^6+u^7*v^2*w^2),  u^5*v^10*w^10, 0,
3*u^2*
v^2*w^3+3*u^2*v^3*w^2+3*u^3*v^2*w^2-2*v^3*w^4-2*v^4*w^3+v^7+w^7, 0, -u^4*v^8*w^8
*(u*v*w^3+u*v^3*w+u^3*v*w-v^5-w^5), 0, u^2*v^4*w^4*(w^4+2*v*w^3+2*v^2*w^2+2*v^3*
w+v^4+2*w^3*u+2*v^3*u+u^2*w^2+u^2*v^2+u^4), u^2*v^4*w^4*(u+v+w), 0,
-u^4*v^8*w^8*(3*u*v*w-
v^3-w^3), u^2*v^4*w^4*(v^2-v*w+w^2)*(v+w)^2, -u^20*v^40*w^40*(u*v*w^2+u*v^2*w+u^
2*v*w-v^4-w^4), 0, 3*u^2*v^2*w^4+3*u^2*v^4*w^2-2*v^3*w^5+3*u^4*v^2*w^2-2*v^5*w^3
+v^8+w^8, 3*u^20*v^40*w^40*(2*v+2*w+u), -u^4*v^8*w^8*(u*v*w^2+u*v^2*w+u^2*v*w-v^
4-w^4), 0, u^3*v^6*w^6, -u^20*v^40*w^40*(u*v*w^3+u*v^3*w+u^3*v*w-v^5-w^5), u^4*v
^8*w^8*(2*u^2*v^2+2*u^2*w^2+4*v^2*w^2+u^4+3*v^4+3*w^4), 3*u^4*v^8*w^8*(u^2+2*v^2
+2*w^2), 0, u^20*v^40*w^40*(u*v^2+u*w^2+2*v*w^2+u^2*v+u^2*w+2*v^2*w+u^3+3*v^3+3*
w^3), u^2*v^4*w^4*(u*v^2+u*w^2+2*v*w^2+u^2*v+u^2*w+2*v^2*w+u^3+3*v^3+3*w^3),
u^6*v^12*w^12*(v+w+u), 0, 3*u^2*v^4*w^4,
u^4*v^8*w^8*(u*v^2+u*w^2+2*v*w^2+u^2*v+u^2*w+2*v^2*w+u^3+3*v^3+3*w^3),
3*u^10*v^20*w^20, -u^8*v^16*w^16*(u*v*w^2+u*v^2*w+u^2*v*w-v^4-w^4),
0, 3*u^2*v^4*w^4*(u^2+2*v^2+2*w^2), u^4*v^8*w^8*(3*u^2*v^2*w^3+3*u^2*v^3*w^2+3*u
^3*v^2*w^2-2*v^3*w^4-2*v^4*w^3+v^7+w^7), 0, u^8*v^16*w^16*(w^8-v^3*w^5-2*v^4*w^4
-v^5*w^3+v^8+u^2*v^2*w^4+2*w^3*v^3*u^2+u^2*v^4*w^2+2*w^3*v^2*u^3+2*w^2*v^3*u^3+u
^4*v^2*w^2), 3*u^4*v^8*w^8*(2*w^4+2*v^4+u^4), u^12*v^24*w^24*(u*v^2+u*w^2+2*v*w^
2+u^2*v+u^2*w+2*v^2*w+u^3+3*v^3+3*w^3), u^4*v^8*w^8*(v^2-v*w+w^2)*(v+w)^2, 0, u^
4*v^8*w^8*(3*u^2*v^2*w^4+3*u^2*v^4*w^2-2*v^3*w^5+3*u^4*v^2*w^2-2*v^5*w^3+v^8+w^8
), -u^12*v^24*w^24*(u*v*w^2+u*v^2*w+u^2*v*w-v^4-w^4), -u^8*v^16*w^16*(3*u*v*w-v^
3-w^3), -u^16*v^32*w^32*(u*v*w^3+u*v^3*w+u^3*v*w-v^5-w^5), -u^16*v^32*w^32*(3*u*
v*w-v^3-w^3), -u^12*v^24*w^24*(u*v*w^3+u*v^3*w+u^3*v*w-v^5-w^5), u^5*v^10*w^10*(
2*v+2*w+3*u), u^8*v^16*w^16*(3*u^2*v^2*w^3+3*u^2*v^3*w^2+3*u^3*v^2*w^2-2*v^3*w^4
-2*v^4*w^3+v^7+w^7), u^4*v^8*w^8*(9*u^2*v^2*w^2-4*v^3*w^3+v^6+w^6), u^4*v^8*w^8*
(v+w)*(v^2+w^2), u^8*v^16*w^16*(v+w)^2, 3*u^6*v^12*w^12,
3*u^16*v^32*w^32*(u^2+2*v^2+2*w^2),
u^4*v^8*w^8*(v+w)^2, u^8*v^16*w^16*(9*u^2*v^2*w^2-4*v^3*w^3+v^6+w^6), u^4
*v^8*w^8*(2*u*v+2*u*w+4*v*w+u^2+3*v^2+3*w^2), u^8*v^16*w^16*(v+w)*(v^2+w^2), -u^
12*v^24*w^24*(3*u*v*w-v^3-w^3), 3*u^20*v^40*w^40*(u^2+2*v^2+2*w^2), u^8*v^16*w^
16*(2*u*v+2*u*w+4*v*w+u^2+3*v^2+3*w^2), 3*u^4*v^8*w^8*(2*v+2*w+u), 15*u^4*v^8*w^
8, u^12*v^24*w^24*(2*u*v+2*u*w+4*v*w+u^2+3*v^2+3*w^2), 3*u^12*v^24*w^24*(u^2+2*v
^2+2*w^2), 3*u^8*v^16*w^16*(2*v+2*w+u), 3*u^12*v^24*w^24*(2*v+2*w+u), 15*u^20*v^
40*w^40, 15*u^12*v^24*w^24, 15*u^8*v^16*w^16, 15*u^16*v^32*w^32]
  f15b(u,v,w)=[15, 9*u+3*v+3*w, 2*u*(v+w+2*u),
  4*u*v+4*u*w+2*v*w+5*u^2, 9*u^2+3*v^2+3*w^2, u*(-v*w+4*u^2), 2*u*(w+u)*(u+v),
u^2*(v+w+u), 2*u*v^2+2*u*w^2+v*w^2+2*u^2*v+2*u^2*w+v^2*w+5*u^3, u^2*(-v*w+u^2),
u^8*(v^5*w^6+v^6*w^5-u*v^3*w^7+u*v^5*w^5-u*v^7*w^3
-w^6*v^3*u^2-w^3*v^6*u^2-u^3*v^8-u^3*w^8-u^4*v^7-u^4*w^7+u^5*v^3*w^3+u^7*v^4+u^7
*w^4+u^11), u*(v*w^2+v^2*w+u*v^2+u*w^2+u^2*v+u^2*w+2*u^3), 0, 4*u^2*v^2+4*u^2*w^
2+2*v^2*w^2+5*u^4, u^2*(w^3*v^2+v^3*w^2+u*v^2*w^2-2*u*v^4-2*u*w^4-2*u^2*v^3-2*u^
2*w^3+4*u^5), u^2*(-v*w+u*v+u*w+2*u^2), u*(-v*w^3+v^2*w^2-v^3*w-v^3*u-w^3*u-2*u^
2*v*w+u^2*v^2+u^2*w^2+2*u^4), 0, u^4*(-v*w+u^2)*(u^2+v*w), -u^3*v*w, u^13*(v^6*w
^7+v^7*w^6+u*v^6*w^6+u^4*v^9+u^4*w^9+u^5*v^8+u^5*w^8+u^13), u^3*(-v*w+v^2+w^2+2*
u^2), u^14*v^4*w^4*(-v*w+u^2), u^10*(v^5+w^5+u^5), u^64*v^20*w^20*(-v*w+u^2)*(u^
2+v*w), u^8*(3*v^5*w^5-2*u*w^6*v^3-2*u*w^3*v^6-2*u^3*v^7-2*u^3*w^7+u^4*v^3*w^3+u
^6*v^4+u^6*w^4+u^10), u^4*(-v^2-w^2+u^2), 0, u*(-w^3*v^2-v^3*w^2+u*v^2*w^2-u^2*v
*w^2-u^2*v^2*w-u^2*v^3-u^2*w^3+2*u^3*v^2+2*u^3*w^2-u^4*v-u^4*w+2*u^5),
-u^8*v^2*w^2,
u^2*(3*v^2*w^2-4*v^3*u-4*w^3*u+4*u^4), u^61*v^20*w^20*(-v*w+4*u^2), u^14*(v^8*
w^9+v^9*w^8-u*v^6*w^10+u*v^8*w^8-u*v^10*w^6-u^2*v^6*w^9-u^2*v^9*w^6+u^5*v^6*w^6-
u^5*v^12-u^5*w^12-u^6*v^11-u^6*w^11+u^9*v^8+u^9*w^8+u^17), -u^15*v^5*w^5, 0,
u^3*(-2
*v*w^3+3*v^2*w^2-2*v^3*w-2*v^3*u-2*w^3*u+u^3*v+u^3*w+2*u^4), u^16*v^4*w^4*(-v*w+
u^2)*(u^2+v*w), u^15*v^4*w^4*(-v*w+v^2+w^2+2*u^2), u^40*v^12*w^12*(-v*w+u^2)*(u^
2+v*w), u^6*(2*v^4*w^4+2*u*v^3*w^4+2*u*v^4*w^3+2*w^3*v^3*u^2+2*u^3*v^5+2*u^3*w^5
+u^4*v^4+u^4*w^4+u^8), -u^7*v^2*w^2, 0, u^13*v^4*w^4*(-v*w+4*u^2), u^7*(v^3*w^4+v^4
*w^3+u*w^3*v^3+u^2*v^5+u^2*w^5+u^3*v^4+u^3*w^4+u^7), u^62*v^20*w^20*(-v*w+u*v+u*
w+2*u^2), u^62*v^20*w^20*(-v*w+u^2), u^3*(-2*w^3*v^2-2*v^3*w^2+3*u*v^2*w^2-2*u^2
*v^3-2*u^2*w^3+u^3*v^2+u^3*w^2+2*u^5), 3*u^60*v^20*w^20*(v+w+3*u), u^14*v^4*w^4*
(-v*w+u*v+u*w+2*u^2), u^50*v^16*w^16*(-v*w+u^2), -u^9*v^3*w^3, u^63*v^20*w^20*(-
v*w+v^2+w^2+2*u^2), u^12*v^4*w^4*(4*u^2*v^2+4*u^2*w^2+2*v^2*w^2+5*u^4), 3*u^12*v
^4*w^4*(w^2+v^2+3*u^2), u^38*v^12*w^12*(-v*w+u^2),
u^60*v^20*w^20*(2*u*v^2+2*u*w^2+v*w^2+2*u^2*v+2*u^2*w+v^2*w+5*u^3),
u^6*(2*v^3*w^4+2*v^4*w^3+4*u*w^3*v^3+u^2*v^5+u^2*w^5+2*u^3*v^4+2*u^3*w^4+u^7),
-u^19*v^6*w^6, u^52*v^16*w^16*(-v*w+u^2)*(u^2+v*w),-u^6*v^2*w^2,
u^12*v^4*w^4*(2*u*v^2+2*u*w^2+v*w^2+2*u^2*v+2*u^2*w+v^2*w+5*u^3),
-u^30*v^10*w^10,u^26*v^8*w^8*(-v*w+u*v+u*w+2*u^2),u^26*v^8*w^8*(-v*w+u^2),u^6
*(8*v^3*w^3+3*u^2*v^4+3*u^2*w^4+u^6), u^15*v^4*w^4*(-2*v*w^3+3*v^2*w^2-2*v^3*w-2
*v^3*u-2*w^3*u+u^3*v+u^3*w+2*u^4), 0, u^27*v^8*w^8*(-v*w^4+w^3*v^2+v^3*w^2-v^4*w
-u*w^4-u*v*w^3+u*v^2*w^2-u*v^3*w-u*v^4-u^2*w^3-u^2*v^3+u^4*w+u^4*v+2*u^5), u^12*
(8*v^6*w^6+3*u^4*v^8+3*u^4*w^8+u^12), u^36*v^12*w^12*(2*u*v^2+2*u*w^2+v*w^2+2*u^
2*v+2*u^2*w+v^2*w+5*u^3), u^13*v^4*w^4*(v*w^2+v^2*w+u*v^2+u*w^2+u^2*v+u^2*w+2*u^
3), u^28*v^8*w^8*(-v*w+u^2)*(u^2+v*w), u^15*v^4*w^4*(-2*w^3*v^2-2*v^3*w^2+3*u*v^
2*w^2-2*u^2*v^3-2*u^2*w^3+u^3*v^2+u^3*w^2+2*u^5), u^38*v^12*w^12*(-v*w+u*v+u*w+2
*u^2), u^25*v^8*w^8*(-v*w+4*u^2), u^51*v^16*w^16*(-v*w+v^2+w^2+2*u^2), u^49*v^16
*w^16*(-v*w+4*u^2), u^39*v^12*w^12*(-v*w+v^2+w^2+2*u^2), u^16*v^4*w^4*(-v^2-w^2+
u^2), u^27*v^8*w^8*(-2*v*w^3+3*v^2*w^2-2*v^3*w-2*v^3*u-2*w^3*u+u^3*v+u^3*w+2*u^4
), u^14*v^4*w^4*(3*v^2*w^2-4*v^3*u-4*w^3*u+4*u^4), 2*u^13*v^4*w^4*(w+u)*(u+v), 2
*u^25*v^8*w^8*(v+w+2*u),-u^18*v^6*w^6,3*u^48*v^16*w^16*(w^2+v^2+3*u^2), 2*u^13*v^4
*w^4*(v+w+2*u), u^26*v^8*w^8*(3*v^2*w^2-4*v^3*u-4*w^3*u+4*u^4), u^12*v^4*w^4*(4*
u*v+4*u*w+2*v*w+5*u^2), 2*u^25*v^8*w^8*(w+u)*(u+v), u^37*v^12*w^12*(-v*w+4*u^2),
3*u^60*v^20*w^20*(w^2+v^2+3*u^2), u^24*v^8*w^8*(4*u*v+4*u*w+2*v*w+5*u^2), 3*u^12
*v^4*w^4*(v+w+3*u), 15*u^12*v^4*w^4, u^36*v^12*w^12*(4*u*v+4*u*w+2*v*w+5*u^2), 3
*u^36*v^12*w^12*(w^2+v^2+3*u^2), 3*u^24*v^8*w^8*(v+w+3*u), 3*u^36*v^12*w^12*(v+w
+3*u), 15*u^60*v^20*w^20, 15*u^36*v^12*w^12, 15*u^24*v^8*w^8,15*u^48*v^16*w^16]

  f20a(u,v,w)=[20, 2*u+9*v+9*w, (v+2*w)*(2*v+w),
  2*(v+w)*(2*v+2*w+u), 2*u^2+9*v^2+9*w^2, -2*u*
v*w+2*v^3+2*w^3, u*v*w+3*v*w^2+3*v^2*w+v^3+w^3, v*w*(v+w), u*v^2+u*w^2+4*v*w^2+u
^2*v+u^2*w+4*v^2*w+4*v^3+4*w^3, -v^2*w^2, v^4*w^4*(w^9*u^2-w^6*v^3*u^2-u^2*v^4*w
^5-u^2*v^5*w^4-w^3*v^6*u^2+v^9*u^2+w^5*v^2*u^4+w^4*v^3*u^4+w^3*v^4*u^4+w^2*v^5*u
^4+w^11+w^4*v^2*u^5+w^2*v^4*u^5-w^8*v^3-w^7*v^4-v^5*w^6-v^6*w^5-w^4*v^7-w^3*v^8+
v^11), 2*v*w^3+u^2*v*w+2*v^2*w^2+2*v^3*w+v^4+w^4, 0, 2*(v^2+w^2)*(u^2+2*v^2+2*w^
2), 2*u^2*v^2*w^3+2*u^2*v^3*w^2+2*u^3*v^2*w^2-5*v^3*w^4-5*v^4*w^3+2*v^7+2*w^7, -
(v+w)*(u*v*w-v^3-w^3), -u*v*w^3-u*v^3*w-v*w^4+u^2*v*w^2+u^2*v^2*w+u^2*v^3+u^2*w^
3-w^3*v^2-v^3*w^2-v^4*w+v^5+w^5, 0, -v^4*w^4, 0, v^8*w^8*(w^6*u^4+w^5*v*u^4+w*v^
5*u^4+u^4*v^6+w^10+v*w^9+v^5*w^5+w*v^9+v^10), -(v^2+w^2)*(u*v*w-v^3-w^3), u^2*v^
11*w^11, v^5*w^5*(v+w)*(v^4-v^3*w+v^2*w^2-v*w^3+w^4), u^10*v^49*w^49, v^4*w^4*(u
^2*w^8-2*w^5*v^3*u^2-2*w^3*u^2*v^5+u^2*v^8+3*w^4*v^2*u^4+3*w^2*u^4*v^4+w^10-2*w^
7*v^3-2*v^5*w^5-2*w^3*v^7+v^10), v^2*w^2*(v+w)*(-v-w+2*u), 0, (v^2+w^2)*(v^4-2*v
^3*w+u^2*v^2+v^2*w^2-u^2*v*w-2*v*w^3+u^2*w^2+w^4), 0, 6*u^2*v^2*w^2-10*v
^3*w^3+2*v^6+2*w^6, 2*u^10*v^45*w^45*(u*v*w-v^3-w^3), w^8*v^8*(w^11*u^4-w^8*v^3*
u^4-w^7*v^4*u^4-w^4*v^7*u^4-w^3*v^8*u^4+v^11*u^4+w^7*v^2*u^6+w^6*v^3*u^6+w^3*v^6
*u^6+w^2*v^7*u^6+w^6*v^2*u^7+w^2*v^6*u^7+w^15-w^12*v^3-w^11*v^4-w^8*v^7-w^7*v^8-
w^4*v^11-w^3*v^12+v^15), 0, 0, -2*u*w^3*v^3+v*w^6+3*u^2*v^2*w^3+3*u^2*v^
3*w^2-4*v^3*w^4-4*v^4*w^3+v^6*w+v^7+w^7, u^2*v^13*w^13, u^2*(v^2+w^2)*v^9*w^9*(u
*v*w-v^3-w^3), u^6*v^31*w^31, v^4*w^4*(v+w)*(v^5+v^4*w+u^2*v^3+2*u^3*v^2+u^2*v^2
*w+u^2*v*w^2+v*w^4-2*u^3*v*w+w^5+u^2*w^3+2*u^3*w^2), 0, 0, 2*u^2*v^9*w^9
*(u*v*w-v^3-w^3), v^4*w^4*(u^2*w^4+u^2*v*w^3+u^2*v^3*w+u^2*v^4+w^6+v*w^5+v^3*w^3
+v^5*w+v^6), u^10*(v+w)*v^45*w^45*(u*v*w-v^3-w^3), u^10*v^47*w^47, 3*u^2*v^2*w^4
-2*w^3*v^3*u^2+3*u^2*v^4*w^2+w^6*v^2-4*v^3*w^5-4*v^5*w^3+v^6*w^2+v^8+w^8, -u^10*
v^45*w^45*(2*u+9*v+9*w), u^2*(v+w)*v^9*w^9*(u*v*w-v^3-w^3), -u^8*v^38*w^38, 0, u
^10*(v^2+w^2)*v^45*w^45*(u*v*w-v^3-w^3), -2*u^2*v^9*w^9*(v^2+w^2)*(u^2+2*v^2+2*w
^2), -u^2*v^9*w^9*(2*u^2+9*v^2+9*w^2), u^6*v^29*w^29, -u^10*v^45*w^45*(u*v^2+u*w
^2+4*v*w^2+u^2*v+u^2*w+4*v^2*w+4*v^3+4*w^3), v^4*w^4*(3*u^2*w^3+2*u^2*v*w^2+2*u^
2*v^2*w+3*u^2*v^3+u^3*w^2+u^3*v^2+2*w^5+v*w^4+w^3*v^2+v^3*w^2+v^4*w+2*v^5),
0, -u^8*v^40*w^40, 0, -u^2*v^9*w^9*(u*v^2+u*w^2+4*v*w^2+u^2*v+u^2*w+4*v^
2*w+4*v^3+4*w^3), 0, -u^4*(v+w)*v^18*w^18*(u*v*w-v^3-w^3), -u^4*v^20*w^
20, v^4*w^4*(6*u^2*w^2+6*u^2*v^2+3*w^4+2*v^2*w^2+3*v^4), -u^2*v^9*w^9*(-2*u*w^3*
v^3+v*w^6+3*u^2*v^2*w^3+3*u^2*v^3*w^2-4*v^3*w^4-4*v^4*w^3+v^6*w+v^7+w^7), 0, u^4
*v^18*w^18*(v+w)*(v^7-2*v^4*w^3-2*v^3*w^4-u*w^3*v^3+u^2*v^3*w^2+u^2*v^2*w^3+u^3*
v^2*w^2+w^7), v^8*w^8*(6*u^4*w^4+6*u^4*v^4+3*w^8+2*v^4*w^4+3*v^8), -u^6*v^27*w^
27*(u*v^2+u*w^2+4*v*w^2+u^2*v+u^2*w+4*v^2*w+4*v^3+4*w^3), -u^2*v^9*w^9*(2*v*w^3+
u^2*v*w+2*v^2*w^2+2*v^3*w+v^4+w^4), -u^4*v^22*w^22, -u^2*v^9*w^9*(3*u^2*v^2*w^4
-2*w^3*v^3*u^2+3*u^2*v^4*w^2+w^6*v^2-4*v^3*w^5-4*v^5*w^3+v^6*w^2+v^8+w^8),
u^6*(v
+w)*v^27*w^27*(u*v*w-v^3-w^3), -2*u^4*v^18*w^18*(u*v*w-v^3-w^3), -u^8*(v^2+w^2)*
v^36*w^36*(u*v*w-v^3-w^3), -2*u^8*v^36*w^36*(u*v*w-v^3-w^3), u^6*(v^2+w^2)*v^27*
w^27*(u*v*w-v^3-w^3), -u^2*v^11*w^11*(v+w)*(-v-w+2*u), u^4*v^18*w^18*(-2*u*w^3*v
^3+v*w^6+3*u^2*v^2*w^3+3*u^2*v^3*w^2-4*v^3*w^4-4*v^4*w^3+v^6*w+v^7+w^7), -2*u^2*
v^9*w^9*(w^6-5*v^3*w^3+v^6+3*u^2*v^2*w^2), -u^2*v^9*w^9*(u*v*w+3*v*w^2+3*v^2*w+v
^3+w^3), u^4*v^18*w^18*(v+2*w)*(2*v+w), 0, u^8*v^36*w^36*(2*u^2+9*v^2+9*
w^2), -u^2*v^9*w^9*(v+2*w)*(2*v+w), 2*u^4*v^18*w^18*(w^6-5*v^3*w^3+v^6+3*u^2*v^2
*w^2), -2*u^2*(v+w)*v^9*w^9*(2*v+2*w+u), u^4*v^18*w^18*(u*v*w+3*v*w^2+3*v^2*w+v^
3+w^3), 2*u^6*v^27*w^27*(u*v*w-v^3-w^3), -u^10*v^45*w^45*(2*u^2+9*v^2+9*w^2), 2*
u^4*(v+w)*v^18*w^18*(2*v+2*w+u), -u^2*v^9*w^9*(2*u+9*v+9*w), -20*u^2*v^9*w^9, -2
*u^6*(v+w)*v^27*w^27*(2*v+2*w+u), -u^6*v^27*w^27*(2*u^2+9*v^2+9*w^2), u^4*v^18*w
^18*(2*u+9*v+9*w), -u^6*v^27*w^27*(2*u+9*v+9*w), -20*u^10*v^45*w^45, -20*u^6*v^
27*w^27, 20*u^4*v^18*w^18, 20*u^8*v^36*w^36]
  f20b(u,v,w)=[20, 8*u+6*v+6*w, 2*u*v+2*u*w+u^2+v^2+w^2,
4*u*v+4*u*w+6*v*w+4*u^2+v^2+w^2, 8*u^2+6*v^2+6*w^2,
(v+w+u)*(v^2-v*w-u*v+w^2-u*w+u^2), 2*u*v*w+v*w^2+u^2*v+u^2*w+v^2*
w+u^3, 0, 2*u*v^2+2*u*w^2+3*v*w^2+2*u^2*v+2*u^2*w+3*v^2*w+4*u^3+v^3+w^3, -u^2*v*
w, u^4*v^2*w^2*(w^11+v^11+w^7*v^2*u^2+w^6*v^3*u^2+w^3*v^6*u^2+w^2*u^2*v^7-u^3*w^
8+w^6*v^2*u^3+w^2*u^3*v^6-u^3*v^8-u^4*w^7+w^4*v^3*u^4+w^3*v^4*u^4-u^4*v^7-w^5*v*
u^5+u^5*v^3*w^3-w*v^5*u^5-w^4*v*u^6-w*u^6*v^4+w*v*u^9), u*v*w^2+u*v^2*w+2*v^2*w^
2+u^3*v+u^3*w+u^4, 0, 4*u^2*v^2+4*u^2*w^2+6*v^2*w^2+4*u^4+v^4+w^4, 3*u^2*v^2*w^3
+3*u^2*v^3*w^2+3*u^3*v^2*w^2-2*u^3*v^4-2*u^3*w^4-2*u^4*v^3-2*u^4*w^3+u^7+v^7+w^7
, -u*v*w^2-u*v^2*w+v*w^3-u^2*v*w+v^3*w+u^4, -u*v*w^3+u*v^2*w^2-u*v^3*w+v*w^4+u^2
*v*w^2+u^2*v^2*w+w^3*v^2-2*u^3*v*w+u^3*v^2+u^3*w^2+v^3*w^2-u^4*v-u^4*w+v^4*w+u^5
, 0, -u^4*v^2*w^2, 0, u^8*v^4*w^4*(w^10+v^10+u*w^9+v^9*u+u^5*w^3*v^2+u^5*v^3*w^2
+u^6*v^2*w^2), -u*v*w^3-u*v^3*w+w^3*v^2-u^3*v*w+v^3*w^2+u^5, -u^10*v^7*w^7, 0, -
u^44*v^32*w^32, u^4*v^2*w^2*(w^10+v^10+3*v^2*u^2*w^6+3*w^2*u^2*v^6-2*u^3*w^7-2*u
^3*v^7+3*u^4*v^3*w^3-2*u^5*v*w^4-2*u^5*v^4*w+w*v*u^8), 2*u^2*v*w*(v^2+w^2), 0, -
u*v^2*w^3-u*v^3*w^2+3*u^2*v^2*w^2+u^2*v^4+u^2*w^4+2*v^2*w^4-u^3*v*w^2-u^3*v^2*w-
u^3*v^3-u^3*w^3+u^4*v^2+u^4*w^2+2*v^4*w^2-u^5*v-u^5*w+u^6,
u^4*v^3*w^5+u^4*v^5*w^3+2*u^6*v^3*w^3,
9*u^2*v^2*w^2-4*u^3*v^3-4*u^3*w^3+u^6+v^6+w^6,
u^40*v^30*w^30*(v+w+u)*(v^2-v*w-u*v+w^2-u*w+u^2),
u^8*v^4*w^4*(w^15+v^15+w^11*v^2*u^2+w^10*v^3*u^2+w^3*u^2*v^10+w^2*v^11*u^
2-w^12*u^3+w^10*v^2*u^3+w^2*v^10*u^3-v^12*u^3-w^11*u^4-v^11*u^4+w^5*u^6*v^4+w^4*
u^6*v^5-w^6*v^2*u^7+w^4*u^7*v^4-w^2*v^6*u^7-w^5*u^8*v^2-w^2*u^8*v^5+w^2*v^2*u^11
), 0, 0, v*w^6+3*u^2*v^2*w^3+3*u^2*v^3*w^2-2*u^3*v*w^3+3*u^3*v^2*w^2-2*u
^3*v^3*w-2*u^4*v^3-2*u^4*w^3+v^6*w+u^7, -u^12*v^8*w^8, u^8*v^6*w^6*(-u*v*w^3-u*v
^3*w+w^3*v^2-u^3*v*w+v^3*w^2+u^5), -u^28*v^20*w^20, u^4*v^2*w^2*(w^6+2*v*w^5+2*v
^5*w+v^6+2*w^5*u+2*v^5*u+u^2*w^4+2*u^2*v^2*w^2+u^2*v^4+2*u^3*v*w^2+2*u^3*v^2*w+2
*w*v*u^4),
u^4*v^3*w^3*(a*(u+v+w)+u), 0,
u^8*v^6*w^6*(v+w+u)*(v^2-v*w-u*v+w^2-u*w+u^2), u^4*v^2*
w^2*(w^6+v^6+w^5*u+v^5*u+u^3*v*w^2+u^3*v^2*w+w*v*u^4), u^40*v^30*w^30*(-u*v*w^2-
u*v^2*w+v*w^3-u^2*v*w+v^3*w+u^4), -u^42*v^31*w^31, 3*u^2*v^2*w^4+3*u^2*v^4*w^2+w
^6*v^2-2*w^3*v^2*u^3-2*w^2*v^3*u^3+3*u^4*v^2*w^2-2*u^5*v^3-2*u^5*w^3+v^6*w^2+u^8
, 2*u^40*v^30*w^30*(3*v+3*w+4*u), u^8*v^6*w^6*(-u*v*w^2-u*v^2*w+v*w^3-u^2*v*w+v^
3*w+u^4), -u^34*v^25*w^25, 0, u^40*v^30*w^30*(-u*v*w^3-u*v^3*w+w^3*v^2-u^3*v*w+v
^3*w^2+u^5), u^8*v^6*w^6*(4*u^2*v^2+4*u^2*w^2+6*v^2*w^2+4*u^4+v^4+w^4), 2*u^8*v^
6*w^6*(3*w^2+3*v^2+4*u^2), -u^26*v^19*w^19, u^40*v^30*w^30*(2*u*v^2+2*u*w^2+3*v*
w^2+2*u^2*v+2*u^2*w+3*v^2*w+4*u^3+v^3+w^3), u^4*v^2*w^2*(3*w^5+v*w^4+v^4*w+3*v^5
+2*w^4*u+2*v^4*u+2*u^2*v*w^2+2*u^2*v^2*w+4*u^3*v*w),
u^12*v^9*w^9*(a*(u+v+w)+u), -u^36*v^26*w^26,
4*u^4*v^3*w^3, u^8*v^6*w^6*(2*u*v^2+2*u*w^2+3*v*w^2+2*u^2*v+2*u^2*w+3*v^2*w+4*u^
3+v^3+w^3), 4*u^20*v^15*w^15, u^16*v^12*w^12*(-u*v*w^2-u*v^2*w+v*w^3-u^2*v*w+v^3*w+u^4)
, -u^18*v^13*w^13, 2*u^4*v^2*w^2*(3*w^4+3*v^4+4*u^2*v*w), u^8*v^6*w^6*(v*w^6+3*u
^2*v^2*w^3+3*u^2*v^3*w^2-2*u^3*v*w^3+3*u^3*v^2*w^2-2*u^3*v^3*w-2*u^4*v^3-2*u^4*w
^3+v^6*w+u^7), 0, u^16*v^12*w^12*(v*w^7+w*v^7+u^2*v^2*w^4+2*w^3*v^3*u^2+u^2*v^4*
w^2-v*u^3*w^4+2*w^3*v^2*u^3+2*w^2*v^3*u^3-w*v^4*u^3-u^4*w^4-v*u^4*w^3+u^4*v^2*w^
2-u^4*v^3*w-u^4*v^4-u^5*w^3-u^5*v^3+u^8), 2*u^8*v^4*w^4*(3*w^8+3*v^8+4*u^4*v^2*w
^2), u^24*v^18*w^18*(2*u*v^2+2*u*w^2+3*v*w^2+2*u^2*v+2*u^2*w+3*v^2*w+4*u^3+v^3+w
^3), u^8*v^6*w^6*(u*v*w^2+u*v^2*w+2*v^2*w^2+u^3*v+u^3*w+u^4), -u^20*v^14*w^14, u
^8*v^6*w^6*(3*u^2*v^2*w^4+3*u^2*v^4*w^2+w^6*v^2-2*w^3*v^2*u^3-2*w^2*v^3*u^3+3*u^
4*v^2*w^2-2*u^5*v^3-2*u^5*w^3+v^6*w^2+u^8), u^24*v^18*w^18*(-u*v*w^2-u*v^2*w+v*w
^3-u^2*v*w+v^3*w+u^4), u^16*v^12*w^12*(v+w+u)*(v^2-v*w-u*v+w^2-u*w+u^2), u^32*v^
24*w^24*(-u*v*w^3-u*v^3*w+w^3*v^2-u^3*v*w+v^3*w^2+u^5), u^32*v^24*w^24*(v+w+u)*(
v^2-v*w-u*v+w^2-u*w+u^2), u^24*v^18*w^18*(-u*v*w^3-u*v^3*w+w^3*v^2-u^3*v*w+v^3*w
^2+u^5), 2*u^10*v^7*w^7*(v^2+w^2), u^16*v^12*w^12*(v*w^6+3*u^2*v^2*w^3+3*u^2*v^3
*w^2-2*u^3*v*w^3+3*u^3*v^2*w^2-2*u^3*v^3*w-2*u^4*v^3-2*u^4*w^3+v^6*w+u^7), u^8*v
^6*w^6*(9*u^2*v^2*w^2-4*u^3*v^3-4*u^3*w^3+u^6+v^6+w^6), u^8*v^6*w^6*(2*u*v*w+v*w
^2+u^2*v+u^2*w+v^2*w+u^3), u^16*v^12*w^12*(2*u*v+2*u*w+u^2+v^2+w^2), 4*u^12*v^9*w^9,
2*u^32*v^24*w^24*(3*w^2+3*v^2+4*u^2), u^8*v^6*w^6*(2*u*v+2*u*w+u^2+v^2+w^2), u^
16*v^12*w^12*(9*u^2*v^2*w^2-4*u^3*v^3-4*u^3*w^3+u^6+v^6+w^6), u^8*v^6*w^6*(4*u*v
+4*u*w+6*v*w+4*u^2+v^2+w^2), u^16*v^12*w^12*(2*u*v*w+v*w^2+u^2*v+u^2*w+v^2*w+u^3
), u^24*v^18*w^18*(v+w+u)*(v^2-v*w-u*v+w^2-u*w+u^2), 2*u^40*v^30*w^30*(3*w^2+3*v
^2+4*u^2), u^16*v^12*w^12*(4*u*v+4*u*w+6*v*w+4*u^2+v^2+w^2), 2*u^8*v^6*w^6*(3*v+
3*w+4*u), 20*u^8*v^6*w^6, u^24*v^18*w^18*(4*u*v+4*u*w+6*v*w+4*u^2+v^2+w^2), 2*u^
24*v^18*w^18*(3*w^2+3*v^2+4*u^2), 2*u^16*v^12*w^12*(3*v+3*w+4*u), 2*u^24*v^18*w^
18*(3*v+3*w+4*u), 20*u^40*v^30*w^30, 20*u^24*v^18*w^18, 20*u^16*v^12*w^12, 20*u^
32*v^24*w^24]
  f20c(u,v,w)=[20, 6*u+11*v+3*w, v*(4*v+4*u+w), 6*u*v+2*u*w+4*v*w+2*u^2+6*v^2, 6*u^2+11*v^2+3*
w^2, -2*v*(-2*v^2+u*w), v*(u+2*v)*(v+w+u), v^2*(u+v), 3*u*v^2+u*w^2+2*v*w^2+3*u^
2*v+u^2*w+2*v^2*w+2*u^3+6*v^3, -v^2*(u*w+u^2-v^2), -v^8*(v*u^3*w^7+w^6*v^2*u^3-v
^5*u^3*w^3-w^2*v^5*u^4-u^4*v^7-u^5*w^6-w^5*v*u^5-2*u^6*w^5-w^4*v*u^6+u^6*v^2*w^3
-u^7*w^4+u^7*v*w^3+u^7*v^2*w^2+v^4*u^7+v*u^8*w^2+u^8*v^3+v^2*u^9+v*u^10-v^11), v
*(u*w^2+2*u*v^2+u^2*v+v*w^2+u^3+v^2*w+2*v^3), 0, 6*u^2*v^2+2*u^2*w^2+4*v^2*w^2+2
*u^4+6*v^4, -v^2*(-2*u^2*w^3-2*u^2*v*w^2-2*u^3*w^2+4*u^3*v^2+v*w^4+4*u^4*v+w^3*v
^2-4*v^5), -v*(u*v*w-u*v^2+u^2*w-v^2*w-2*v^3), u*v^2*w^2-u*v^3*w-v^4*u+u^2*v*w^2
-w^3*v^2-u^3*v*w-u^3*v^2+u^3*w^2+v^3*w^2-u^4*v+2*v^5, 0, -v^4*(u^2*w^2+u^4-v^4),
0, v^13*(u^6*w^7+v*u^6*w^6+u^7*w^6+u^8*v*w^4+v^5*u^8+u^9*w^4+v^4*u^9+u^13+v^13),
-v*(u*v^2*w-u^2*v^2+u^3*w-v^2*w^2-2*v^4), u^6*v^13*w^3*(u*w+u^2-v^2), v^10*(u+v)
*(u^4-u^3*v+u^2*v^2-u*v^3+v^4), u^30*v^59*w^15*(u^2*w^2+u^4-v^4), -v^8*(2*v*u^3*
w^6-u^3*v^4*w^3-w^2*u^4*v^4-u^4*v^6-3*u^5*w^5-3*u^6*w^4+2*v*u^6*w^3+2*v*u^7*w^2+
2*u^7*v^3+2*v*u^9-v^10), -v^3*(-2*u^2*w+u^2*v+2*u^3-v^3), 0, -u*v^3*w^2-2*v^5*u+
2*u^2*v^2*w^2+2*u^2*v^4-u^3*v*w^2-3*u^3*v^3-v^3*w^3+u^4*v^2+u^4*w^2+2*v^4*w^2-u^
5*v-v^5*w+2*v^6, 0, -2*v^2*(-3*u^2*w^2+4*u^3*v+v*w^3-2*v^4), 2*u^30*v^56
*w^15*(-2*v^2+u*w), -v^14*(v*u^6*w^10+v^2*u^6*w^9-v^5*u^6*w^6-u^8*w^9-v*u^8*w^8-
v^5*u^8*w^4-v^9*u^8-u^9*w^8+v^2*u^9*w^6-u^10*w^7-u^11*w^6+v^2*u^11*w^4+v^6*u^11+
v*u^12*w^4+v^5*u^12+v^2*u^15+v*u^16-v^17), 0, 0, -v^2*(-v^4*u-3*u^2*v*w^
2-3*u^3*w^2+2*u^3*v*w+4*u^3*v^2+2*u^4*v+2*w^3*v^2-v^4*w-2*v^5), u^6*v^15*w^3*(u^
2*w^2+u^4-v^4), u^6*v^12*w^3*(u*v^2*w-u^2*v^2+u^3*w-v^2*w^2-2*v^4), u^18*v^37*w^
9*(u^2*w^2+u^4-v^4), v^6*(2*v*u^3*w^4+2*w^3*v^2*u^3+2*u^4*w^4+4*v*u^4*w^3+u^4*v^
2*w^2+u^4*v^4+2*u^5*v*w^2+2*u^5*v^3+u^6*w^2+u^6*v^2+u^8+v^8), 0, 0, 2*u^
6*w^3*v^12*(-2*v^2+u*w), v^7*(u^3*w^4+u^3*v*w^3+u^4*w^3+u^4*v*w^2+u^4*v^3+u^5*w^
2+u^5*v^2+u^7+v^7), u^30*v^56*w^15*(u*v*w-u*v^2+u^2*w-v^2*w-2*v^3), u^30*v^57*w^
15*(u*w+u^2-v^2), -v^2*(-3*u^2*v^2*w^2-u^2*v^4+2*u^3*v*w^2+4*u^3*v^3-3*u^4*w^2+2
*u^5*v+2*v^3*w^3-v^4*w^2-2*v^6), -u^30*v^55*w^15*(6*u+11*v+3*w), u^6*v^12*w^3*(u
*v*w-u*v^2+u^2*w-v^2*w-2*v^3), -u^24*v^46*w^12*(u*w+u^2-v^2), 0, u^30*v^56*w^15*
(u*v^2*w-u^2*v^2+u^3*w-v^2*w^2-2*v^4), -2*u^6*v^11*w^3*(2*v^2*w^2+3*v^4+u^2*w^2+
3*u^2*v^2+u^4), -u^6*v^11*w^3*(6*u^2+11*v^2+3*w^2), u^18*v^35*w^9*(u*w+u^2-v^2),
-u^30*v^55*w^15*(3*u*v^2+u*w^2+2*v*w^2+3*u^2*v+u^2*w+2*v^2*w+2*u^3+6*v^3), v^6*(
2*u^3*w^4+4*u^3*v*w^3+3*u^4*w^3+3*u^4*v*w^2+2*u^4*v^3+2*u^5*w^2+u^5*v^2+u^6*v+u^
7+v^7), 0, -u^24*v^48*w^12*(u^2*w^2+u^4-v^4), 0, -u^6*v^11*w^3*(3*u*v^2+
u*w^2+2*v*w^2+3*u^2*v+u^2*w+2*v^2*w+2*u^3+6*v^3), 0, -u^12*v^23*w^6*(u*v
*w-u*v^2+u^2*w-v^2*w-2*v^3), -u^12*v^24*w^6*(u*w+u^2-v^2), v^6*(8*u^3*w^3+6*u^4*
w^2+3*u^4*v^2+2*u^6+v^6), u^6*v^13*w^3*(-v^4*u-3*u^2*v*w^2-3*u^3*w^2+2*u^3*v*w+4
*u^3*v^2+2*u^4*v+2*w^3*v^2-v^4*w-2*v^5), 0, -u^12*v^24*w^6*(v^2*w^4+v^3*w^3-v^5*
w-2*v^6-v^5*u-u^2*v*w^3-u^2*v^2*w^2-u^3*w^3-2*u^3*v*w^2+u^3*v^2*w+2*u^3*v^3-u^4*
w^2+w*v*u^4+3*u^4*v^2+u^5*v), v^12*(8*u^6*w^6+6*u^8*w^4+3*v^4*u^8+2*u^12+v^12),
-u^18*v^33*w^9*(3*u*v^2+u*w^2+2*v*w^2+3*u^2*v+u^2*w+2*v^2*w+2*u^3+6*v^3), -u^6*v
^12*w^3*(u*w^2+2*u*v^2+u^2*v+v*w^2+u^3+v^2*w+2*v^3), -u^12*v^26*w^6*(u^2*w^2+u^4
-v^4), u^6*v^13*w^3*(-3*u^2*v^2*w^2-u^2*v^4+2*u^3*v*w^2+4*u^3*v^3-3*u^4*w^2+2*u^
5*v+2*v^3*w^3-v^4*w^2-2*v^6), u^18*v^34*w^9*(u*v*w-u*v^2+u^2*w-v^2*w-2*v^3), -2*
u^12*v^23*w^6*(-2*v^2+u*w), -u^24*v^45*w^12*(u*v^2*w-u^2*v^2+u^3*w-v^2*w^2-2*v^4
), -2*u^24*v^45*w^12*(-2*v^2+u*w), u^18*v^34*w^9*(u*v^2*w-u^2*v^2+u^3*w-v^2*w^2-
2*v^4), u^6*v^14*w^3*(-2*u^2*w+u^2*v+2*u^3-v^3), -u^12*v^24*w^6*(-v^4*u-3*u^2*v*
w^2-3*u^3*w^2+2*u^3*v*w+4*u^3*v^2+2*u^4*v+2*w^3*v^2-v^4*w-2*v^5), 2*u^6*v^13*w^3
*(-3*u^2*w^2+4*u^3*v+v*w^3-2*v^4), -u^6*v^12*w^3*(u+2*v)*(v+w+u), u^12*v^23*w^6*
(4*v+4*u+w), 0, u^24*v^44*w^12*(6*u^2+11*v^2+3*w^2), -u^6*v^12*w^3*(4*v+
4*u+w), -2*u^12*v^24*w^6*(-3*u^2*w^2+4*u^3*v+v*w^3-2*v^4), -2*u^6*v^11*w^3*(2*v*
w+3*v^2+u*w+3*u*v+u^2), u^12*v^23*w^6*(u+2*v)*(v+w+u), 2*u^18*v^34*w^9*(-2*v^2+u
*w), -u^30*v^55*w^15*(6*u^2+11*v^2+3*w^2), 2*u^12*v^22*w^6*(2*v*w+3*v^2+u*w+3*u*
v+u^2), -u^6*v^11*w^3*(6*u+11*v+3*w), -20*u^6*v^11*w^3, -2*u^18*v^33*w^9*(2*v*w+
3*v^2+u*w+3*u*v+u^2), -u^18*v^33*w^9*(6*u^2+11*v^2+3*w^2), u^12*v^22*w^6*(6*u+11
*v+3*w), -u^18*v^33*w^9*(6*u+11*v+3*w), -20*u^30*v^55*w^15, -20*u^18*v^33*w^9,
20*u^12*v^22*w^6, 20*u^24*v^44*w^12]
  f20d(u,v,w)=[20, 3*u+8*v+9*w, u*w+4*v*w+2*v^2+2*w^2, 4*u*v+2*u*w+8*v*w+2*v^2+4*w^2, 3*u^2+8*
v^2+9*w^2, -2*u*v*w+2*v^3+2*w^3, 2*u*v*w+u*v^2+3*v*w^2+2*v^2*w+w^3, v*w*(w+v), 2
*u*v^2+u*w^2+4*v*w^2+2*u^2*v+u^2*w+4*v^2*w+2*v^3+4*w^3, -u*v*w^2, -v^3*w^4*(u^2*
v^6*w^4+w^3*v^7*u^2-v^10*u^2-u^3*w^9+v^3*u^3*w^6+w^5*v^4*u^3-w^3*v^5*u^4-u^4*v^6
*w^2-v*w^11-w^5*v^2*u^5-w^4*v^3*u^5-w^2*v^5*u^5+u^6*w^6-u^6*v^2*w^4+w^5*u^7+v^4*
w^8+v^5*w^7+v^8*w^4+w^3*v^9-v^12), u*v^2*w+2*v*w^3+u^2*v*w+u^2*v^2+2*v^2*w^2+v^3
*w+w^4, 0, 4*u^2*v^2+2*u^2*w^2+8*v^2*w^2+2*v^4+4*w^4, 2*u^2*v^2*w^3+2*u^2*v^3*w^
2+2*u^3*v^2*w^2-u^3*w^4-4*v^3*w^4-u^4*w^3-4*v^4*w^3+2*v^7+2*w^7, -u*v*w^2-u*v^2*
w+u*v^3+v*w^3+v^3*w+w^4, -2*u*v*w^3-u*v^3*w+v^4*u-v*w^4+u^2*v*w^2+u^2*v^2*w+u^2*
v^3+u^2*w^3-u^3*v*w-v^3*w^2+w^5, 0, -u^2*v^2*w^4, 0, v^6*w^8*(w*v^7*u^4+u^4*v^8+
u^6*w^6+w^5*v*u^6+w^5*u^7+v^2*w^10+v^3*w^9+w*v^11+v^12), -u*v*w^3-u*v^3*w+u^2*v^
3+w^3*v^2+v^3*w^2+w^5, u^4*v^9*w^11, v^5*w^5*(w+v)*(w^4-v*w^3+v^2*w^2-v^3*w+v^4)
, u^17*v^42*w^49, -v^3*w^4*(2*w^3*v^6*u^2-v^9*u^2-u^3*w^8+2*w^5*v^3*u^3-3*w^2*v^
5*u^4-v*w^10-3*w^4*v^2*u^5+2*u^6*w^5+2*v^4*w^7+2*w^3*v^8-v^11), v^2*w^2*(-v^2+2*
u*v-w^2), 0, -u*v^2*w^3-2*v*w^5-u^2*v*w^3+2*u^2*v^2*w^2-u^2*v^3*w+2*u^2*v^4+u^2*
w^4+2*v^2*w^4-u^3*v^2*w-3*v^3*w^3+2*v^4*w^2-v^5*w+w^6, 0, 6*u^2*v^2*w^2-
2*u^3*w^3-8*v^3*w^3+2*v^6+2*w^6, 2*u^15*v^40*w^45*(-v^3+u*v*w-w^3), -v^6*w^8*(w^
4*u^4*v^9+w^3*v^10*u^4-v^13*u^4-w^11*u^6+w^8*v^3*u^6+w^7*v^4*u^6-w^3*v^8*u^6-w^2
*v^9*u^6-w^2*v^8*u^7-w^7*v^2*u^8-w^6*v^3*u^8-v^2*w^15+u^9*w^8-v^2*u^9*w^6+u^10*w
^7+w^12*v^5+w^11*v^6+v^13*w^4+v^14*w^3-v^17), 0, 0, -2*u*v^3*w^3+u*v^6+v
*w^6+3*u^2*v^2*w^3+3*u^2*v^3*w^2-2*u^3*v*w^3-4*v^3*w^4-2*v^4*w^3+v^6*w+w^7, u^5*
v^10*w^13, -u^3*v^8*w^9*(-u*v*w^3-u*v^3*w+u^2*v^3+w^3*v^2+v^3*w^2+w^5), u^11*v^
26*w^31, v^3*w^4*(u^2*v^3*w^2+2*w*v^4*u^2+v^5*u^2+2*u^3*w^4+2*u^3*v*w^3+2*u^3*v^
4+2*u^4*w^3+2*u^4*v*w^2+v*w^6+2*v^2*w^5+2*v^6*w+v^7), 0, 0, 2*u^3*v^8*w^
9*(-v^3+u*v*w-w^3), v^3*w^4*(w*v^4*u^2+v^5*u^2+u^3*w^4+u^3*v*w^3+u^4*w^3+v*w^6+v
^2*w^5+v^6*w+v^7), -u^15*v^40*w^45*(-u*v*w^2-u*v^2*w+u*v^3+v*w^3+v^3*w+w^4), u^
16*v^41*w^47, 3*u^2*v^2*w^4-2*w^3*v^3*u^2+3*u^2*v^4*w^2+u^2*v^6+w^6*v^2-2*w^3*v^
2*u^3-4*v^3*w^5-2*v^5*w^3+v^6*w^2+w^8, -u^15*v^40*w^45*(3*u+8*v+9*w), -u^3*v^8*w
^9*(-u*v*w^2-u*v^2*w+u*v^3+v*w^3+v^3*w+w^4), -u^13*v^33*w^38, 0, -u^15*v^40*w^45
*(-u*v*w^3-u*v^3*w+u^2*v^3+w^3*v^2+v^3*w^2+w^5), -2*u^3*v^8*w^9*(2*w^4+4*v^2*w^2
+v^4+u^2*w^2+2*u^2*v^2), -u^3*v^8*w^9*(3*u^2+8*v^2+9*w^2), u^10*v^25*w^29, -u^15
*v^40*w^45*(2*u*v^2+u*w^2+4*v*w^2+2*u^2*v+u^2*w+4*v^2*w+2*v^3+4*w^3), v^3*w^4*(2
*u^2*v^3*w+3*u^2*v^4+4*u^3*w^3+2*u^3*v*w^2+u^3*v^3+2*u^4*w^2+2*v*w^5+v^2*w^4+v^5
*w+2*v^6), 0, -u^14*v^34*w^40, 0, -u^3*v^8*w^9*(2*u*v^2+u*w^2+4*v*w^2+2*
u^2*v+u^2*w+4*v^2*w+2*v^3+4*w^3), 0, u^6*v^16*w^18*(-u*v*w^2-u*v^2*w+u*v
^3+v*w^3+v^3*w+w^4), -u^7*v^17*w^20, v^3*w^4*(6*u^2*v^3+8*u^3*w^2+3*v*w^4+3*v^5)
, u^3*v^8*w^9*(-w^7-v*w^6+4*v^3*w^4+2*v^4*w^3-v^6*w+2*u*v^3*w^3-u*v^6-3*u^2*v^2*
w^3-3*u^2*v^3*w^2+2*u^3*v*w^3), 0, -u^6*v^16*w^18*(-w^8-w^7*v+2*v^3*w^5+3*w^4*v^
4+v^5*w^3-w*v^7+w^4*v^3*u+w^3*v^4*u-v^7*u-u^2*v^2*w^4-2*w^3*v^3*u^2-u^2*v^4*w^2+
v*u^3*w^4-w^3*v^2*u^3-w^2*v^3*u^3+v*u^4*w^3), v^6*w^8*(6*u^4*v^6+8*u^6*w^4+3*v^2
*w^8+3*v^10), -u^9*v^24*w^27*(2*u*v^2+u*w^2+4*v*w^2+2*u^2*v+u^2*w+4*v^2*w+2*v^3+
4*w^3), -u^3*v^8*w^9*(u*v^2*w+2*v*w^3+u^2*v*w+u^2*v^2+2*v^2*w^2+v^3*w+w^4), -u^8
*v^18*w^22, u^3*v^8*w^9*(-w^8-w^6*v^2+4*v^3*w^5+2*v^5*w^3-v^6*w^2-3*u^2*v^2*w^4+
2*w^3*v^3*u^2-3*u^2*v^4*w^2-u^2*v^6+2*w^3*v^2*u^3), -u^9*v^24*w^27*(-u*v*w^2-u*v
^2*w+u*v^3+v*w^3+v^3*w+w^4), -2*u^6*v^16*w^18*(-v^3+u*v*w-w^3), u^12*v^32*w^36*(
-u*v*w^3-u*v^3*w+u^2*v^3+w^3*v^2+v^3*w^2+w^5), -2*u^12*v^32*w^36*(-v^3+u*v*w-w^3
), -u^9*v^24*w^27*(-u*v*w^3-u*v^3*w+u^2*v^3+w^3*v^2+v^3*w^2+w^5), -u^3*v^10*w^11
*(-v^2+2*u*v-w^2), -u^6*v^16*w^18*(-w^7-v*w^6+4*v^3*w^4+2*v^4*w^3-v^6*w+2*u*v^3*
w^3-u*v^6-3*u^2*v^2*w^3-3*u^2*v^3*w^2+2*u^3*v*w^3), 2*u^3*v^8*w^9*(-w^6+4*v^3*w^
3-v^6-3*u^2*v^2*w^2+u^3*w^3), -u^3*v^8*w^9*(2*u*v*w+u*v^2+3*v*w^2+2*v^2*w+w^3),
u^6*v^16*w^18*(u*w+4*v*w+2*v^2+2*w^2), 0, u^12*v^32*w^36*(3*u^2+8*v^2+9*
w^2), -u^3*v^8*w^9*(u*w+4*v*w+2*v^2+2*w^2), -2*u^6*v^16*w^18*(-w^6+4*v^3*w^3-v^6
-3*u^2*v^2*w^2+u^3*w^3), -2*u^3*v^8*w^9*(v^2+4*v*w+2*u*v+2*w^2+u*w), u^6*v^16*w^
18*(2*u*v*w+u*v^2+3*v*w^2+2*v^2*w+w^3), 2*u^9*v^24*w^27*(-v^3+u*v*w-w^3), -u^15*
v^40*w^45*(3*u^2+8*v^2+9*w^2), 2*u^6*v^16*w^18*(v^2+4*v*w+2*u*v+2*w^2+u*w), -u^3
*v^8*w^9*(3*u+8*v+9*w), -20*u^3*v^8*w^9, -2*u^9*v^24*w^27*(v^2+4*v*w+2*u*v+2*w^2
+u*w), -u^9*v^24*w^27*(3*u^2+8*v^2+9*w^2), u^6*v^16*w^18*(3*u+8*v+9*w), -u^9*v^
24*w^27*(3*u+8*v+9*w), -20*u^15*v^40*w^45, -20*u^9*v^24*w^27, 20*u^6*v^16*w^18,
20*u^12*v^32*w^36]
  f24(u,v,w)=[24, 12*u+6*v+6*w, 2*u*(v+w+2*u), 6*u*v+6*u*w+2*v*w+6*u^2+2*v^2+2*w^2, 12*u^2+6*
v^2+6*w^2, 4*u*(-v*w+u^2), u*(v^2+w^2+2*u*v+2*u*w+2*u^2), u*(-v*w+u^2), 3*u*v^2+
3*u*w^2+v*w^2+3*u^2*v+3*u^2*w+v^2*w+6*u^3+2*v^3+2*w^3, u^2*(-v*w+u^2), u^6*(v^6*
w^7+v^7*w^6+u*v^6*w^6+u^2*v^4*w^7+2*u^2*v^5*w^6+2*u^2*v^6*w^5+u^2*v^7*w^4-u^3*v^
2*w^8-u^3*v^3*w^7+u^3*v^4*w^6+u^3*v^5*w^5+u^3*v^6*w^4-u^3*v^7*w^3-u^3*v^8*w^2-u^
4*v^2*w^7-u^4*v^3*w^6-u^4*v^6*w^3-u^4*v^7*w^2+u^7*v^2*w^4+u^7*v^3*w^3+u^7*v^4*w^
2+u^13), u*(v^3+w^3+u*v^2+u*w^2+u^2*v+u^2*w+2*u^3), -u^2*v*w, 6*u^2*v^2+6*u^2*w^
2+2*v^2*w^2+6*u^4+2*v^4+2*w^4, 2*u^2*(2*w^3*v^2+2*v^3*w^2+2*u*v^2*w^2-v^4*u-w^4*
u-u^2*v^3-u^2*w^3+2*u^5), u*(v+w+2*u)*(-v*w+u^2), 2*u*v^2*w^2-v^4*u-w^4*u+u^2*v*
w^2+u^2*v^2*w+w^3*v^2+u^3*v^2+u^3*w^2+v^3*w^2+2*u^5, -u^4*v^2*w^2, u^4*(-v*w+u^2
)*(v*w+u^2), 0, u^13*(v^4*w^9+v^6*w^7+v^7*w^6+v^9*w^4+u*v^4*w^8+u*v^6*w^6+u*v^8*
w^4+u^13), u*(-v*w+u^2)*(2*u^2+v^2+w^2), v^5*u^12*w^5*(-v*w+u^2), u^5*(-v*w+u^2)
*(u^8+u^6*w*v+u^4*v^2*w^2+w^3*v^3*u^2+w^4*v^4), u^54*v^25*w^25*(-v*w+u^2)*(v*w+u
^2), u^6*(3*v^6*w^6+3*u^2*v^4*w^6+3*u^2*v^5*w^5+3*u^2*v^6*w^4-2*u^3*v^2*w^7-2*v^
3*u^3*w^6-2*u^3*v^6*w^3-2*u^3*v^7*w^2+u^6*v^2*w^4+u^6*v^3*w^3+u^6*v^4*w^2+u^12),
u^2*(3*v^2*w^2+2*u*v*w^2+2*u*v^2*w+u^4), -u^6*v^3*w^3, -v^5*u-u*w^5+4*u^2*v^2*w^
2+u^2*v^4+u^2*w^4+v^2*w^4-2*u^3*v^3-2*u^3*w^3+3*u^4*v^2+3*u^4*w^2+v^4*w^2-u^5*v-
u^5*w+2*u^6, 0, 4*u^2*(3*v^2*w^2-u*v^3-u*w^3+u^4), 4*u^51*v^25*w^25*(-v*
w+u^2), u^10*(v^10*w^11+v^11*w^10+u*v^10*w^10+u^4*v^6*w^11+u^4*v^7*w^10+u^4*v^8*
w^9+u^4*v^9*w^8+u^4*v^10*w^7+u^4*v^11*w^6-u^5*v^4*w^12+u^5*v^8*w^8-u^5*v^12*w^4-
u^6*v^4*w^11-u^6*v^6*w^9-u^6*v^9*w^6-u^6*v^11*w^4+u^9*v^4*w^8+u^9*v^6*w^6+u^9*v^
8*w^4+u^21), 0, -u^8*w^4*v^4, u^2*(3*w^3*v^2+3*v^3*w^2+6*u*v^2*w^2-2*v^4
*u-2*w^4*u-2*u^2*v^3-2*u^2*w^3+u^4*v+u^4*w+2*u^5), u^14*v^5*w^5*(-v*w+u^2)*(v*w+
u^2), u^11*v^5*w^5*(-v*w+u^2)*(2*u^2+v^2+w^2), u^34*v^15*w^15*(-v*w+u^2)*(v*w+u^
2), u^4*(v^4*w^6+v^6*w^4+u^2*v^2*w^6+3*u^2*v^4*w^4+u^2*v^6*w^2+2*u^3*v^2*w^5+4*u
^3*v^3*w^4+4*u^3*v^4*w^3+2*u^3*v^5*w^2+u^4*v^2*w^4+2*u^4*w^3*v^3+u^4*v^4*w^2+u^
10), 0, -u^22*v^11*w^11, 4*u^11*v^5*w^5*(-v*w+u^2), u^7*(v^2*w^5+v^3*w^4
+v^4*w^3+v^5*w^2+u*v^2*w^4+u*v^3*w^3+u*v^4*w^2+u^7), u^51*v^25*w^25*(v+w+2*u)*(-
v*w+u^2), u^52*v^25*w^25*(-v*w+u^2), u^2*(3*v^2*w^4+3*v^4*w^2-2*v^5*u-2*u*w^5+6*
u^2*v^2*w^2-2*u^3*v^3-2*u^3*w^3+u^4*v^2+u^4*w^2+2*u^6), 6*u^50*v^25*w^25*(v+w+2*
u), u^11*v^5*w^5*(v+w+2*u)*(-v*w+u^2), u^42*v^20*w^20*(-v*w+u^2), 0, u^51*v^25*w
^25*(-v*w+u^2)*(2*u^2+v^2+w^2), 2*u^10*v^5*w^5*(w^4+v^2*w^2+v^4+3*u^2*w^2+3*u^2*
v^2+3*u^4), 6*u^10*v^5*w^5*(2*u^2+v^2+w^2), u^32*v^15*w^15*(-v*w+u^2), u^50*v^25
*w^25*(3*u*v^2+3*u*w^2+v*w^2+3*u^2*v+3*u^2*w+v^2*w+6*u^3+2*v^3+2*w^3), u^4*(v^4*
w^5+v^5*w^4+u*v^4*w^4+2*v^2*u^2*w^5+3*u^2*v^3*w^4+3*u^2*v^4*w^3+2*u^2*v^5*w^2+3*
u^3*v^2*w^4+4*u^3*w^3*v^3+3*u^3*v^4*w^2+u^9), 0, u^44*v^20*w^20*(-v*w+u^
2)*(v*w+u^2), 0, u^10*v^5*w^5*(3*u*v^2+3*u*w^2+v*w^2+3*u^2*v+3*u^2*w+v^2*w+6*u^3
+2*v^3+2*w^3), 0, u^21*v^10*w^10*(v+w+2*u)*(-v*w+u^2), u^22*v^10*w^10*(-
v*w+u^2), u^4*(3*w^4*v^4+6*u^2*v^2*w^4+8*w^3*v^3*u^2+6*u^2*v^4*w^2+u^8), u^12*v^
5*w^5*(3*w^3*v^2+3*v^3*w^2+6*u*v^2*w^2-2*v^4*u-2*w^4*u-2*u^2*v^3-2*u^2*w^3+u^4*v
+u^4*w+2*u^5), -u^12*v^6*w^6, u^22*v^10*w^10*(v^2*w^4+2*v^3*w^3+v^4*w^2-u*w^5+3*
u*v^2*w^3+3*u*v^3*w^2-v^5*u-2*u^2*w^4+2*u^2*v^2*w^2-2*u^2*v^4-u^3*w^3-u^3*v^3+u^
5*w+u^5*v+2*u^6), u^8*(3*v^8*w^8+6*u^4*v^4*w^8+8*u^4*v^6*w^6+6*u^4*v^8*w^4+u^16)
, u^30*v^15*w^15*(3*u*v^2+3*u*w^2+v*w^2+3*u^2*v+3*u^2*w+v^2*w+6*u^3+2*v^3+2*w^3)
, u^11*v^5*w^5*(v^3+w^3+u*v^2+u*w^2+u^2*v+u^2*w+2*u^3), u^24*v^10*w^10*(-v*w+u^2
)*(v*w+u^2), u^12*v^5*w^5*(3*v^2*w^4+3*v^4*w^2-2*v^5*u-2*u*w^5+6*u^2*v^2*w^2-2*u
^3*v^3-2*u^3*w^3+u^4*v^2+u^4*w^2+2*u^6), u^31*v^15*w^15*(v+w+2*u)*(-v*w+u^2), 4*
u^21*v^10*w^10*(-v*w+u^2), u^41*v^20*w^20*(-v*w+u^2)*(2*u^2+v^2+w^2), 4*u^41*v^
20*w^20*(-v*w+u^2), u^31*v^15*w^15*(-v*w+u^2)*(2*u^2+v^2+w^2), u^12*v^5*w^5*(3*v
^2*w^2+2*u*v*w^2+2*u*v^2*w+u^4), u^22*v^10*w^10*(3*w^3*v^2+3*v^3*w^2+6*u*v^2*w^2
-2*v^4*u-2*w^4*u-2*u^2*v^3-2*u^2*w^3+u^4*v+u^4*w+2*u^5), 4*u^12*v^5*w^5*(3*v^2*w
^2-u*v^3-u*w^3+u^4), u^11*v^5*w^5*(v^2+w^2+2*u*v+2*u*w+2*u^2), 2*u^21*v^10*w^10*
(v+w+2*u), 0, 6*u^40*v^20*w^20*(2*u^2+v^2+w^2), 2*u^11*v^5*w^5*(v+w+2*u)
, 4*u^22*v^10*w^10*(3*v^2*w^2-u*v^3-u*w^3+u^4), 2*u^10*v^5*w^5*(w^2+v*w+v^2+3*u*
w+3*u*v+3*u^2), u^21*v^10*w^10*(v^2+w^2+2*u*v+2*u*w+2*u^2), 4*u^31*v^15*w^15*(-v
*w+u^2), 6*u^50*v^25*w^25*(2*u^2+v^2+w^2), 2*u^20*v^10*w^10*(w^2+v*w+v^2+3*u*w+3
*u*v+3*u^2), 6*u^10*v^5*w^5*(v+w+2*u), 24*u^10*v^5*w^5, 2*u^30*v^15*w^15*(w^2+v*
w+v^2+3*u*w+3*u*v+3*u^2), 6*u^30*v^15*w^15*(2*u^2+v^2+w^2), 6*u^20*v^10*w^10*(v+
w+2*u), 6*u^30*v^15*w^15*(v+w+2*u), 24*u^50*v^25*w^25, 24*u^30*v^15*w^15, 24*u^
20*v^10*w^10, 24*u^40*v^20*w^20]
  f30a(u,v,w)=[30, 12*u+9*v+9*w, 4*u*v+4*u*w+2*v*w+u^2, 6*u*v+6*u*w+6*v*w+6*u^2+3*v^2+3*w^2,
12*u^2+9*v^2+9*w^2, u*(-3*v*w+u^2), 2*u*v*w+u*v^2+u*w^2+v*w^2+2*u^2*v+2*u^2*w+v^
2*w+u^3, u*v*w, 3*u*v^2+3*u*w^2+3*v*w^2+3*u^2*v+3*u^2*w+3*v^2*w+6*u^3+3*v^3+3*w^
3, -u^2*(w^2+v*w+v^2), u^4*(v^7*w^8+v^8*w^7-u^2*v^6*w^7-u^2*v^7*w^6+u^3*v^4*w^8-
u^3*v^6*w^6+u^3*v^8*w^4+u^4*v^4*w^7+u^4*v^5*w^6+u^4*v^6*w^5+u^4*v^7*w^4-u^5*v^3*
w^7+u^5*v^5*w^5-u^5*v^7*w^3-u^5*v^10-u^5*w^10-u^6*v^3*w^6-u^6*v^6*w^3-u^6*v^9-u^
6*w^9+u^9*w^3*v^3), u*v*w^2+u*v^2*w+u*v^3+u*w^3+v*w^3+2*u^3*v+2*u^3*w+v^3*w+u^4,
0, 6*u^2*v^2+6*u^2*w^2+6*v^2*w^2+6*u^4+3*v^4+3*w^4, 3*u^2*v^2*w^3+3*u^2*v^3*w^2+
3*u^3*v^2*w^2-4*u^3*v^4-4*u^3*w^4-2*v^3*w^4-4*u^4*v^3-4*u^4*w^3-2*v^4*w^3+u^7, u
*(-v*w^2-v^2*w-u*v*w+u^3), -u*v*w^3+u*v^2*w^2-u*v^3*w-v^4*u-w^4*u-v*w^4+u^2*v*w^
2+u^2*v^2*w-u^2*v^3-u^2*w^3-2*u^3*v*w-2*u^4*v-2*u^4*w-v^4*w+u^5, 0, -u^4*(w^2-v*
w+v^2)*(w^2+v*w+v^2), 0, u^8*(-v^9*w^9-u*v^8*w^9-u*v^9*w^8+u^5*v^6*w^7+u^5*v^7*w
^6+u^5*v^13+u^5*w^13+u^6*v^6*w^6), u*(-v*w^3-v^3*w-u^2*v*w+u^4), -u^10*v^6*w^6*(
w^2+v*w+v^2), u^5*v^5*w^5, -u^44*v^30*w^30*(w^2-v*w+v^2)*(w^2+v*w+v^2), u^4*(2*v
^7*w^7-3*u^2*v^6*w^6+2*u^3*v^4*w^7+2*u^3*v^7*w^4+3*u^4*v^5*w^5-2*u^5*v^3*w^6-2*u
^5*v^6*w^3-2*u^5*v^9-2*u^5*w^9+u^8*w^3*v^3), -u^2*(-3*v^2*w^2+2*u*v^3+2*u*w^3),
0, -u*v^2*w^3-u*v^3*w^2-v^5*u-u*w^5-v*w^5+3*u^2*v^2*w^2+u^2*v^4+u^2*w^4+v^2*w^4-
u^3*v*w^2-u^3*v^2*w-3*u^3*v^3-3*u^3*w^3-2*v^3*w^3+u^4*v^2+u^4*w^2+v^4*w^2-2*u^5*
v-2*u^5*w-v^5*w+u^6,
u^4*v^3*w^5+u^4*v^5*w^3,
9*u^2*v^2*w^2-8*u^3*v^3-8*u^3*w^3-4*v^3*w^3+u^6,
u^41*v^30*w^30*(-3*v*w+u^2), u^8*(v^11*w^12+v^12*w^11-u^2*v^10*w^11-u^2*v^11*w^
10+u^3*v^8*w^12-u^3*v^10*w^10+u^3*v^12*w^8+u^4*v^8*w^11+u^4*v^11*w^8+u^6*v^8*w^9
+u^6*v^9*w^8-u^7*v^6*w^10+u^7*v^8*w^8-u^7*v^10*w^6-u^7*v^16-u^7*w^16-u^8*v^6*w^9
-u^8*v^9*w^6-u^8*v^15-u^8*w^15+u^11*v^6*w^6), 0, 0, 3*u^2*v^2*w^3+3*u^2*
v^3*w^2-2*u^3*v*w^3+3*u^3*v^2*w^2-2*u^3*v^3*w-2*u^3*v^4-2*u^3*w^4-2*v^3*w^4-4*u^
4*v^3-4*u^4*w^3-2*v^4*w^3+u^7, -u^12*v^6*w^6*(w^2+v*w+v^2)*(w^2-v*w+v^2), u^9*v^
6*w^6*(-v*w^3-v^3*w-u^2*v*w+u^4), -u^28*v^18*w^18*(w^2+v*w+v^2)*(w^2-v*w+v^2), u
^4*(-v^4*w^6-2*v^5*w^5-v^6*w^4-2*u*v^4*w^5-2*u*v^5*w^4+u^2*v^4*w^4+u^2*v^8+u^2*w
^8+2*u^3*v^3*w^4+2*u^3*v^4*w^3+2*u^4*w^3*v^3+u^4*v^6+u^4*w^6),
u^4*v^3*w^3*(b*(u+v+w)-u), 0, u^9*v^6*w^6*(-3*v*w+u^2),
u^4*(-v^5*w^5-u*v^4*w^5-u*v^5*w^4+u^3*v^3*w^4+u^3*v^4*w^3
+u^3*v^7+u^3*w^7+u^4*w^3*v^3), u^41*v^30*w^30*(-v*w^2-v^2*w-u*v*w+u^3), -u^42*v^
30*w^30*(w^2+v*w+v^2), 3*u^2*v^2*w^4+3*u^2*v^4*w^2-2*w^3*v^2*u^3-2*w^2*v^3*u^3-2
*u^3*v^5-2*u^3*w^5-2*v^3*w^5+3*u^4*v^2*w^2-4*u^5*v^3-4*u^5*w^3-2*v^5*w^3+u^8, 3*
u^40*v^30*w^30*(3*v+3*w+4*u), u^9*v^6*w^6*(-v*w^2-v^2*w-u*v*w+u^3), -u^34*v^24*w
^24*(w^2+v*w+v^2), 0, u^41*v^30*w^30*(-v*w^3-v^3*w-u^2*v*w+u^4), 3*u^8*v^6*w^6*(
w^4+2*v^2*w^2+v^4+2*u^2*w^2+2*u^2*v^2+2*u^4), 3*u^8*v^6*w^6*(3*w^2+3*v^2+4*u^2),
-u^26*v^18*w^18*(w^2+v*w+v^2), 3*u^40*v^30*w^30*(w^3+v*w^2+v^2*w+v^3+u*w^2+u*v^2
+u^2*w+u^2*v+2*u^3), u^4*(-3*v^4*w^5-3*v^5*w^4-3*u*v^4*w^4+2*u^2*v^3*w^4+2*u^2*v
^4*w^3+u^2*v^7+u^2*w^7+4*u^3*w^3*v^3+u^3*v^6+u^3*w^6),
u^12*v^9*w^9*(b*(u+v+w)-u),
-u^36*v^24*w^24*(w^2+v*w+v^2)*(w^2-v*w+v^2), 2*u^4*w^3*v^3,
3*u^8*v^6*w^6*(w^3+v*w^2+v^2*w+v^3+u*w^2+u*v^2+u^2*w+u^2*v+2*u^3),
2*u^20*v^15*w^15, u^17*v^12*w^12*(-v*w^2-v^2*w-u*v*w+u^3),
-u^18*v^12*w^12*(w^2+v*w+v^2), u^4*(-9*w^4*v^4+8*w^3*v^3*u^2+2*u^2*v^6+2*u
^2*w^6), u^8*v^6*w^6*(3*u^2*v^2*w^3+3*u^2*v^3*w^2-2*u^3*v*w^3+3*u^3*v^2*w^2-2*u^
3*v^3*w-2*u^3*v^4-2*u^3*w^4-2*v^3*w^4-4*u^4*v^3-4*u^4*w^3-2*v^4*w^3+u^7), 0, u^
16*v^12*w^12*(-v^3*w^5-2*w^4*v^4-v^5*w^3+u^2*v^2*w^4+2*w^3*v^3*u^2+u^2*v^4*w^2-u
^3*w^5-w^4*v*u^3+2*w^3*v^2*u^3+2*w^2*v^3*u^3-w*v^4*u^3-u^3*v^5-3*u^4*w^4-u^4*v*w
^3+u^4*v^2*w^2-u^4*v^3*w-3*u^4*v^4-2*u^5*w^3-2*u^5*v^3+u^8), u^8*(-9*v^8*w^8+8*u
^4*v^6*w^6+2*u^4*v^12+2*u^4*w^12), 3*u^24*v^18*w^18*(w^3+v*w^2+v^2*w+v^3+u*w^2+u
*v^2+u^2*w+u^2*v+2*u^3), u^8*v^6*w^6*(u*v*w^2+u*v^2*w+u*v^3+u*w^3+v*w^3+2*u^3*v+
2*u^3*w+v^3*w+u^4), -u^20*v^12*w^12*(w^2+v*w+v^2)*(w^2-v*w+v^2), u^8*v^6*w^6*(3*
u^2*v^2*w^4+3*u^2*v^4*w^2-2*w^3*v^2*u^3-2*w^2*v^3*u^3-2*u^3*v^5-2*u^3*w^5-2*v^3*
w^5+3*u^4*v^2*w^2-4*u^5*v^3-4*u^5*w^3-2*v^5*w^3+u^8), u^25*v^18*w^18*(-v*w^2-v^2
*w-u*v*w+u^3), u^17*v^12*w^12*(-3*v*w+u^2), u^33*v^24*w^24*(-v*w^3-v^3*w-u^2*v*w
+u^4), u^33*v^24*w^24*(-3*v*w+u^2), u^25*v^18*w^18*(-v*w^3-v^3*w-u^2*v*w+u^4), -
u^10*v^6*w^6*(-3*v^2*w^2+2*u*v^3+2*u*w^3), u^16*v^12*w^12*(3*u^2*v^2*w^3+3*u^2*v
^3*w^2-2*u^3*v*w^3+3*u^3*v^2*w^2-2*u^3*v^3*w-2*u^3*v^4-2*u^3*w^4-2*v^3*w^4-4*u^4
*v^3-4*u^4*w^3-2*v^4*w^3+u^7), u^8*v^6*w^6*(9*u^2*v^2*w^2-8*u^3*v^3-8*u^3*w^3-4*
v^3*w^3+u^6), u^8*v^6*w^6*(2*u*v*w+u*v^2+u*w^2+v*w^2+2*u^2*v+2*u^2*w+v^2*w+u^3),
u^16*v^12*w^12*(4*u*v+4*u*w+2*v*w+u^2), 2*u^12*v^9*w^9, 3*u^32*v^24*w^24*(3*w^2+3*v^2
+4*u^2), u^8*v^6*w^6*(4*u*v+4*u*w+2*v*w+u^2), u^16*v^12*w^12*(9*u^2*v^2*w^2-8*u^
3*v^3-8*u^3*w^3-4*v^3*w^3+u^6), 3*u^8*v^6*w^6*(w^2+2*v*w+v^2+2*u*w+2*u*v+2*u^2),
u^16*v^12*w^12*(2*u*v*w+u*v^2+u*w^2+v*w^2+2*u^2*v+2*u^2*w+v^2*w+u^3), u^25*v^18*
w^18*(-3*v*w+u^2), 3*u^40*v^30*w^30*(3*w^2+3*v^2+4*u^2), 3*u^16*v^12*w^12*(w^2+2
*v*w+v^2+2*u*w+2*u*v+2*u^2), 3*u^8*v^6*w^6*(3*v+3*w+4*u), 30*u^8*v^6*w^6, 3*u^24
*v^18*w^18*(w^2+2*v*w+v^2+2*u*w+2*u*v+2*u^2), 3*u^24*v^18*w^18*(3*w^2+3*v^2+4*u^
2), 3*u^16*v^12*w^12*(3*v+3*w+4*u), 3*u^24*v^18*w^18*(3*v+3*w+4*u), 30*u^40*v^30
*w^30, 30*u^24*v^18*w^18, 30*u^16*v^12*w^12, 30*u^32*v^24*w^24]
  f30b(u,v,w)=[30, 9*u+15*v+6*w, 4*u*v+2*v*w+u^2+5*v^2,
10*u*v+4*u*w+6*v*w+2*u^2+7*v^2+w^2, 9*u^2+15*v^2+6*w^2, -4*u*v*w+u^3+5*v^3,
2*v*(u+v)*(u+w+v), v^2*(u+v),
5*u*v^2+2*u*w^2+3*v*w^2+5*u^2*v+2*u^2*w+3*v^2*w+2*u^3+7*v^3+w^3, -v^2*(-v^2+u*w),
v^4*(-u^6*
v^6*w^3+u^4*v^5*w^6-v^6*u^7*w^2-v^5*u^8*w^2+v^9*u^3*w^3+v^9*u^4*w^2+v^4*u^7*w^4+
v^5*u^6*w^4-v^5*u^7*w^3+2*v^4*u^6*w^5+2*v^4*u^5*w^6+u^13*w^2-v^3*u^10*w^2+v^3*u^
8*w^4-v^4*u^9*w^2+v^2*u^9*w^4+v^2*u^8*w^5-u^2*v^6*w^7-u^3*v^6*w^6+u^4*v^4*w^7+u^
5*v^5*w^5+v^15+v^11*u^4-v^8*u^7-v^7*u^8+v^9*u^2*w^4-v^5*u^2*w^8-v^5*u^3*w^7), v*
(u*w^2+2*u*v^2+u^2*w+3*u^2*v+v*w^2+u^3+v^2*w+2*v^3), 0, 10*u^2*v^2+4*u^2*w^2+6*v
^2*w^2+2*u^4+7*v^4+w^4, 4*u^2*v^2*w^3+4*u^2*v^3*w^2+4*u^3*v^2*w^2-4*u^3*v^4-2*v^
3*w^4-4*u^4*v^3-2*v^4*w^3+u^7+5*v^7, v*(-u*w^2-2*u*v*w+2*u*v^2-u^2*w+u^3+v^2*w+2
*v^3), -u*v*w^3+u*v^2*w^2-2*u*v^3*w+2*u^2*v*w^2+u^2*v^2*w+u^2*v^3+u^2*w^3-u^3*v*
w-u^3*v^2+u^3*w^2+2*v^3*w^2+2*v^5, 0, -v^4*(-v^2+u*w)*(v^2+u*w), 0, v^8*(v^5*u^4
*w^9+v^6*u^4*w^8+v^5*u^6*w^7+u^6*v^6*w^6+v^5*u^7*w^6+u^8*v^6*w^4+v^10*u^8+u^9*v^
5*w^4+u^9*v^9+v*u^13*w^4+u^14*w^4+v^18), v*(-u*w^3-2*u*v^2*w+2*u^2*v^2-u^3*w+u^3
*v+v^2*w^2+2*v^4), -u^6*v^12*w^4*(-v^2+u*w), v^10*(u+v)*(u^4-u^3*v+u^2*v^2-u*v^3
+v^4), -u^30*v^54*w^20*(-v^2+u*w)*(v^2+u*w), v^4*(-2*v^5*u^2*w^7+u^2*v^8*w^4-2*v
^5*u^3*w^6+u^3*v^8*w^3+3*u^4*v^4*w^6+u^4*v^8*w^2+u^4*v^10+3*u^5*v^4*w^5+3*u^6*v^
4*w^4-2*v^5*u^6*w^3-2*u^7*v^5*w^2-2*u^7*v^7+3*u^8*v^2*w^4-2*v^3*u^9*w^2+u^12*w^2
+v^14), v^2*(2*u*v*w^2+2*u^2*v*w-u^2*v^2+2*u^3*w+v^4), 0, -(u^2+v^2)*(u^3*v-2*u^
2*v^2-u^2*w^2+u*v*w^2+2*u*v^3+v^3*w-3*v^2*w^2-2*v^4-w^4+v*w^3),
u^3*v^5*w^4+u^3*v^7*w^2,
12*u^2*v^2*w^2-8*u^3*v^3-4*v^3*w^3+u^6+5*v^6, u^30*v^50*w^20*(-4*u*v*w+u^3+5*v^3),
v^8*(u^8*v^11*w^4+u^6*v^11*w^6-u^9*v^8*w^6+u^8*v^7*w^8+u^8*v^6*w^9+u^9*v^6*w^8-u^4
*v^8*w^11-v^12*u^11-v^11*u^12+u^10*v^6*w^7+u^8*v^15+v^23+u^11*v^6*w^6+v^6*u^6*w^
11-v^7*u^4*w^12+v^2*u^15*w^6-v^7*u^12*w^4+v^3*u^14*w^6+u^19*w^4-v^3*u^16*w^4+v^2
*u^14*w^7-v^8*u^11*w^4+u^4*v^11*w^8-u^6*v^8*w^9+u^7*v^6*w^10-u^15*v^4*w^4),
0, 0, v*(-2*u*v^2*w^3+2*v^5*u+3*u^2*v*w^3+6*u^2*v^2*w^2+3*u^3*v*w^2-2*u^
3*v^2*w-4*u^3*v^3-2*u^4*v^2-2*v^3*w^3+u^6+v^5*w+2*v^6), -u^6*v^14*w^4*(-v^2+u*w)
*(v^2+u*w), u^6*v^11*w^4*(-u*w^3-2*u*v^2*w+2*u^2*v^2-u^3*w+u^3*v+v^2*w^2+2*v^4),
-u^18*v^34*w^12*(-v^2+u*w)*(v^2+u*w), v^4*(v^2*u^2*w^6+2*v^3*u^2*w^5+u^2*v^4*w^4
+4*u^3*v^3*w^4+2*u^3*v^4*w^3+2*v^2*u^4*w^4+4*u^4*w^3*v^3+v^4*u^4*w^2+u^4*v^6+2*v
^3*u^5*w^2+2*v^5*u^5+2*u^6*v^2*w^2+2*u^7*w^3+2*v*u^7*w^2+u^8*w^2+v^10),
u^3*v^5*w^2*(c*(u+v+w)-u), 0,
u^6*v^10*w^4*(-4*u*v*w+u^3+5*v^3), v^4*(v^3*u^2*w^5+u^2*v^4*w^4+u^3*v^3*w^
4+u^3*v^4*w^3+u^4*w^3*v^3+v^4*u^4*w^2+u^4*v^6+v^3*u^5*w^2+v^5*u^5+v*u^7*w^2+u^8*
w^2+v^10), u^30*v^51*w^20*(-u*w^2-2*u*v*w+2*u*v^2-u^2*w+u^3+v^2*w+2*v^3), -u^30*
v^52*w^20*(-v^2+u*w), v^2*(3*u^2*w^4-2*u^2*v*w^3+6*u^2*v^2*w^2+2*u^2*v^4-2*u^3*v
*w^2-4*u^3*v^3+3*u^4*w^2-2*u^5*v-2*v^3*w^3+u^6+v^4*w^2+2*v^6), 3*u^30*v^50*w^20*
(5*v+2*w+3*u), u^6*v^11*w^4*(-u*w^2-2*u*v*w+2*u*v^2-u^2*w+u^3+v^2*w+2*v^3), -u^
24*v^42*w^16*(-v^2+u*w), 0, u^30*v^51*w^20*(-u*w^3-2*u*v^2*w+2*u^2*v^2-u^3*w+u^3
*v+v^2*w^2+2*v^4), u^6*v^10*w^4*(10*u^2*v^2+4*u^2*w^2+6*v^2*w^2+2*u^4+7*v^4+w^4)
, 3*u^6*v^10*w^4*(2*w^2+5*v^2+3*u^2), -u^18*v^32*w^12*(-v^2+u*w), u^30*v^50*w^20
*(5*u*v^2+2*u*w^2+3*v*w^2+5*u^2*v+2*u^2*w+3*v^2*w+2*u^3+7*v^3+w^3), v^4*(2*v^2*u
^2*w^5+3*u^2*v^3*w^4+3*v^2*u^3*w^4+4*u^3*w^3*v^3+3*v^2*u^4*w^3+3*v^3*u^4*w^2+2*v
^5*u^4+2*v^2*u^5*w^2+v^4*u^5+u^6*w^3+2*u^6*v*w^2+3*u^7*w^2+v^9),
u^9*v^15*w^6*(c*(u+v+w)-u),
-u^24*v^44*w^16*(-v^2+u*w)*(v^2+u*w), 2*u^3*v^5*w^2,
u^6*v^10*w^4*(5*u*v^2+2*u*w^2+3*v*w^2+5*u^2*v+2*u^2*w+3*v^2*w+2*u^3+7*v^3+w^3),
2*u^15*v^25*w^10, u^12*v^21*w^8*(-u*w^2-2*u*v*w+2*u*v^2-u^2*w+u^3+v^2*w+2*v^3),
-u^12*v^22*w^8*(-v^2+u*w), v^4*(6*u^2
*v^2*w^4+8*w^3*v^2*u^3+6*u^4*v^2*w^2+3*u^4*v^4+6*u^6*w^2+v^8), u^6*v^11*w^4*(-2*
u*v^2*w^3+2*v^5*u+3*u^2*v*w^3+6*u^2*v^2*w^2+3*u^3*v*w^2-2*u^3*v^2*w-4*u^3*v^3-2*
u^4*v^2-2*v^3*w^3+u^6+v^5*w+2*v^6), 0, u^12*v^21*w^8*(-v^3*w^4-v^4*w^3+v^6*w+2*v
^7-v^2*u*w^4-u*v^3*w^3+2*u*v^6+v*u^2*w^4+3*u^2*v^2*w^3+2*u^2*v^3*w^2+2*u^3*v*w^3
+3*u^3*v^2*w^2-u^3*v^3*w-2*u^3*v^4+w^2*v*u^4-u^4*v^2*w-3*u^4*v^3-v^2*u^5+u^7), v
^8*(6*v^4*u^4*w^8+8*v^4*u^6*w^6+6*v^4*u^8*w^4+3*u^8*v^8+6*u^12*w^4+v^16), u^18*v
^30*w^12*(5*u*v^2+2*u*w^2+3*v*w^2+5*u^2*v+2*u^2*w+3*v^2*w+2*u^3+7*v^3+w^3), u^6*
v^11*w^4*(u*w^2+2*u*v^2+u^2*w+3*u^2*v+v*w^2+u^3+v^2*w+2*v^3), -u^12*v^24*w^8*(-v
^2+u*w)*(v^2+u*w), u^6*v^12*w^4*(3*u^2*w^4-2*u^2*v*w^3+6*u^2*v^2*w^2+2*u^2*v^4-2
*u^3*v*w^2-4*u^3*v^3+3*u^4*w^2-2*u^5*v-2*v^3*w^3+u^6+v^4*w^2+2*v^6), u^18*v^31*w
^12*(-u*w^2-2*u*v*w+2*u*v^2-u^2*w+u^3+v^2*w+2*v^3), u^12*v^20*w^8*(-4*u*v*w+u^3+
5*v^3), u^24*v^41*w^16*(-u*w^3-2*u*v^2*w+2*u^2*v^2-u^3*w+u^3*v+v^2*w^2+2*v^4), u
^24*v^40*w^16*(-4*u*v*w+u^3+5*v^3), u^18*v^31*w^12*(-u*w^3-2*u*v^2*w+2*u^2*v^2-u
^3*w+u^3*v+v^2*w^2+2*v^4), u^6*v^12*w^4*(2*u*v*w^2+2*u^2*v*w-u^2*v^2+2*u^3*w+v^4
), u^12*v^21*w^8*(-2*u*v^2*w^3+2*v^5*u+3*u^2*v*w^3+6*u^2*v^2*w^2+3*u^3*v*w^2-2*u
^3*v^2*w-4*u^3*v^3-2*u^4*v^2-2*v^3*w^3+u^6+v^5*w+2*v^6), u^6*v^10*w^4*(12*u^2*v^
2*w^2-8*u^3*v^3-4*v^3*w^3+u^6+5*v^6), 2*u^6*v^11*w^4*(u+v)*(u+w+v), u^12*v^20*w^
8*(4*u*v+2*v*w+u^2+5*v^2), 2*u^9*v^15*w^6, 3*u^24*v^40*w^16*(2*w^2+5*v^2+3*u^2), u^6*
v^10*w^4*(4*u*v+2*v*w+u^2+5*v^2), u^12*v^20*w^8*(12*u^2*v^2*w^2-8*u^3*v^3-4*v^3*
w^3+u^6+5*v^6), u^6*v^10*w^4*(10*u*v+4*u*w+6*v*w+2*u^2+7*v^2+w^2), 2*u^12*v^21*w
^8*(u+v)*(u+w+v), u^18*v^30*w^12*(-4*u*v*w+u^3+5*v^3), 3*u^30*v^50*w^20*(2*w^2+5
*v^2+3*u^2), u^12*v^20*w^8*(10*u*v+4*u*w+6*v*w+2*u^2+7*v^2+w^2), 3*u^6*v^10*w^4*
(5*v+2*w+3*u), 30*u^6*v^10*w^4, u^18*v^30*w^12*(10*u*v+4*u*w+6*v*w+2*u^2+7*v^2+w
^2), 3*u^18*v^30*w^12*(2*w^2+5*v^2+3*u^2), 3*u^12*v^20*w^8*(5*v+2*w+3*u), 3*u^18
*v^30*w^12*(5*v+2*w+3*u), 30*u^30*v^50*w^20, 30*u^18*v^30*w^12, 30*u^12*v^20*w^8
, 30*u^24*v^40*w^16]
  f36(u,v,w,j)=[36,18*u+9*v+9*w,4*u*v+4*u*w+v*w+6*u^2,
10*u*v+10*u*w+4*v*w+8*u^2+2*v^2+2*w^2,18*u^2+9*v^2+9*w^2,-4*u*v*w+6*u^3,
3*u*v*w+u*v^2+u*w^2+4*u^2*v+4*u^2*w+2*u^3,-j*u*v*w+u^2*v+u^2*w+u^3,5*u*v^2+
5*u*w^2+2*v*w^2+5*u^2*v+5*u^2*w+2*v^2*w+8*u^3+2*v^3+2*w^3,-u^2*v*w+u^4,-
j*u^4*v^7*w^8-j*u^4*v^8*w^7+j*u^6*v^6*w^7+j*u^6*v^7*w^6-
j*u^7*v^4*w^8+j*u^7*v^6*w^6-j*u^7*v^8*w^4-(2*j+j^2)*u^8*v^4*w^7+
2*u^8*v^5*w^6+2*u^8*v^6*w^5-(2*j+j^2)*u^8*v^7*w^4-u^9*v^2*w^8-
u^9*v^3*w^7+u^9*v^4*w^6+u^9*v^5*w^5+u^9*v^6*w^4-u^9*v^7*w^3-u^9*v^8*w^2-
u^10*v^2*w^7-u^10*v^3*w^6-u^10*v^6*w^3-u^10*v^7*w^2-u^11*v^8-u^11*w^8-
u^12*v^7-u^12*w^7+u^13*v^2*w^4+u^13*v^3*w^3+u^13*v^4*w^2+u^15*v^4+u^15*w^4+
u^19,u*v*w^2+u*v^2*w+u*v^3+u*w^3+u^2*v*w+2*u^2*v^2+2*u^2*w^2+2*u^3*v+2*u^3*w+
2*u^4,-j*u^2*v*w,10*u^2*v^2+10*u^2*w^2+4*v^2*w^2+8*u^4+2*v^4+2*w^4,
4*u^2*v^2*w^3+4*u^2*v^3*w^2+4*u^3*v^2*w^2-4*u^3*v^4-4*u^3*w^4-v^3*w^4-
4*u^4*v^3-4*u^4*w^3-v^4*w^3+6*u^7,-u*v*w^2-u*v^2*w-2*u^2*v*w+2*u^3*v+2*u^3*w+
2*u^4,-2*u*v*w^3+2*u*v^2*w^2-2*u*v^3*w-u*v^4-u*w^4+u^2*v*w^2+u^2*v^2*w-
u^2*v^3-u^2*w^3+v^2*w^3-2*u^3*v*w+u^3*v^2+u^3*w^2+v^3*w^2+2*u^5,
j^2*u^4*v^2*w^2,-u^4*v^2*w^2+u^8,0,j^2*u^8*v^9*w^9+j^2*u^9*v^8*w^9+
j^2*u^9*v^9*w^8+u^13*v^4*w^9+u^13*v^6*w^7+u^13*v^7*w^6+u^13*v^9*w^4+
u^14*v^4*w^8+u^14*v^6*w^6+u^14*v^8*w^4+u^17*v^9+u^17*w^9+u^18*v^8+u^18*w^8+
u^26,-u*v*w^3-u*v^3*w-2*u^3*v*w+2*u^3*v^2+2*u^3*w^2+2*u^5,j^2*u^12*v^6*w^6-
j^2*u^14*v^5*w^5,-j^2*u^5*v^5*w^5+u^10*v^5+u^10*w^5+u^15,
j*u^54*v^27*w^27-j*u^58*v^25*w^25,-2*j*u^4*v^7*w^7+
3*j*u^6*v^6*w^6-2*j*u^7*v^4*w^7-2*j*u^7*v^7*w^4+3*u^8*v^4*w^6+
3*u^8*v^5*w^5+3*u^8*v^6*w^4-2*u^9*v^2*w^7-2*u^9*v^3*w^6-2*u^9*v^6*w^3-
2*u^9*v^7*w^2-2*u^11*v^7-2*u^11*w^7+u^12*v^2*w^4+u^12*v^3*w^3+u^12*v^4*w^2+
u^14*v^4+u^14*w^4+u^18,-3*j^2*u^2*v^2*w^2+2*u^3*v*w^2+2*u^3*v^2*w-u^4*v^2-
u^4*w^2+u^6,-u^6*v^3*w^3,-u*v^2*w^3-u*v^3*w^2-u*v^5-u*w^5-u^2*v*w^3+
4*u^2*v^2*w^2-u^2*v^3*w+u^2*v^4+u^2*w^4+v^2*w^4-u^3*v*w^2-u^3*v^2*w-3*u^3*v^3-
3*u^3*w^3+4*u^4*v^2+4*u^4*w^2+v^4*w^2-2*u^5*v-2*u^5*w+2*u^6,0,
12*u^2*v^2*w^2-8*u^3*v^3-8*u^3*w^3-2*v^3*w^3+6*u^6,4*j*u^51*v^26*w^26-
6*j*u^53*v^25*w^25,-j^2*u^8*v^11*w^12-j^2*u^8*v^12*w^11+
j^2*u^10*v^10*w^11+j^2*u^10*v^11*w^10-j^2*u^11*v^8*w^12+
j^2*u^11*v^10*w^10-j^2*u^11*v^12*w^8-j^2*u^12*v^8*w^11-
j^2*u^12*v^11*w^8+u^14*v^6*w^11+u^14*v^7*w^10+u^14*v^8*w^9+u^14*v^9*w^8+
u^14*v^10*w^7+u^14*v^11*w^6-u^15*v^4*w^12+u^15*v^8*w^8-u^15*v^12*w^4-
u^16*v^4*w^11-u^16*v^6*w^9-u^16*v^9*w^6-u^16*v^11*w^4+u^19*v^4*w^8+
u^19*v^6*w^6+u^19*v^8*w^4-u^19*v^12-u^19*w^12-u^20*v^11-u^20*w^11+u^23*v^8+
u^23*w^8+u^31,0,j*u^8*v^4*w^4,-2*u*v^3*w^3+3*u^2*v^2*w^3+
3*u^2*v^3*w^2-2*u^3*v*w^3+6*u^3*v^2*w^2-2*u^3*v^3*w-2*u^3*v^4-2*u^3*w^4-
4*u^4*v^3-4*u^4*w^3+2*u^6*v+2*u^6*w+2*u^7,j^2*u^14*v^7*w^7-
j^2*u^18*v^5*w^5,j^2*u^11*v^6*w^8+j^2*u^11*v^8*w^6-
2*j^2*u^13*v^5*w^7+2*j^2*u^13*v^6*w^6-2*j^2*u^13*v^7*w^5-
2*j^2*u^15*v^5*w^5,u^34*v^17*w^17-u^38*v^15*w^15,j*u^4*v^4*w^6+
2*j*u^4*v^5*w^5+j*u^4*v^6*w^4+2*j*u^5*v^4*w^5+2*j*u^5*v^5*w^4+
u^6*v^2*w^6+(-j-2*j^2)*u^6*v^4*w^4+u^6*v^6*w^2+2*u^7*v^2*w^5+
4*u^7*v^3*w^4+4*u^7*v^4*w^3+2*u^7*v^5*w^2+u^8*v^2*w^4+2*u^8*v^3*w^3+
u^8*v^4*w^2+2*u^9*v^5+2*u^9*w^5+u^10*v^4+u^10*w^4+u^14,0,-
j^2*u^22*v^11*w^11,4*j^2*u^11*v^6*w^6-6*j^2*u^13*v^5*w^5,
j*u^4*v^5*w^5+j*u^5*v^4*w^5+j*u^5*v^5*w^4+u^7*v^2*w^5+u^7*v^3*w^4+
u^7*v^4*w^3+u^7*v^5*w^2+u^8*v^2*w^4+u^8*v^3*w^3+u^8*v^4*w^2+u^9*v^5+u^9*w^5+
u^10*v^4+u^10*w^4+u^14,j*u^51*v^26*w^27+j*u^51*v^27*w^26+
2*j*u^52*v^26*w^26-2*j*u^53*v^25*w^26-2*j*u^53*v^26*w^25-
2*j*u^54*v^25*w^25,j*u^52*v^26*w^26-j*u^54*v^25*w^25,3*u^2*v^2*w^4-
2*u^2*v^3*w^3+3*u^2*v^4*w^2-2*u^3*v^2*w^3-2*u^3*v^3*w^2-2*u^3*v^5-2*u^3*w^5+
6*u^4*v^2*w^2-4*u^5*v^3-4*u^5*w^3+2*u^6*v^2+2*u^6*w^2+2*u^8,-
9*j*u^50*v^25*w^26-9*j*u^50*v^26*w^25-18*j*u^51*v^25*w^25,
j^2*u^11*v^6*w^7+j^2*u^11*v^7*w^6+2*j^2*u^12*v^6*w^6-
2*j^2*u^13*v^5*w^6-2*j^2*u^13*v^6*w^5-2*j^2*u^14*v^5*w^5,-
j^2*u^42*v^21*w^21+j^2*u^44*v^20*w^20,0,j*u^51*v^26*w^28+
j*u^51*v^28*w^26-2*j*u^53*v^25*w^27+2*j*u^53*v^26*w^26-
2*j*u^53*v^27*w^25-2*j*u^55*v^25*w^25,-2*j^2*u^10*v^5*w^9-
4*j^2*u^10*v^7*w^7-2*j^2*u^10*v^9*w^5-10*j^2*u^12*v^5*w^7-
10*j^2*u^12*v^7*w^5-8*j^2*u^14*v^5*w^5,-9*j^2*u^10*v^5*w^7-
9*j^2*u^10*v^7*w^5-18*j^2*u^12*v^5*w^5,u^32*v^16*w^16-u^34*v^15*w^15,-
2*j*u^50*v^25*w^28-2*j*u^50*v^26*w^27-2*j*u^50*v^27*w^26-
2*j*u^50*v^28*w^25-5*j*u^51*v^25*w^27-5*j*u^51*v^27*w^25-
5*j*u^52*v^25*w^26-5*j*u^52*v^26*w^25-8*j*u^53*v^25*w^25,
3*j*u^4*v^4*w^5+3*j*u^4*v^5*w^4+3*j*u^5*v^4*w^4+2*u^6*v^2*w^5+
3*u^6*v^3*w^4+3*u^6*v^4*w^3+2*u^6*v^5*w^2+3*u^7*v^2*w^4+4*u^7*v^3*w^3+
3*u^7*v^4*w^2+u^8*v^5+u^8*w^5+2*u^9*v^4+2*u^9*w^4+u^13,0,-
j^2*u^44*v^22*w^22+j^2*u^48*v^20*w^20,0,-2*j^2*u^10*v^5*w^8-
2*j^2*u^10*v^6*w^7-2*j^2*u^10*v^7*w^6-2*j^2*u^10*v^8*w^5-
5*j^2*u^11*v^5*w^7-5*j^2*u^11*v^7*w^5-5*j^2*u^12*v^5*w^6-
5*j^2*u^12*v^6*w^5-8*j^2*u^13*v^5*w^5,0,-j*u^21*v^11*w^12-
j*u^21*v^12*w^11-2*j*u^22*v^11*w^11+2*j*u^23*v^10*w^11+
2*j*u^23*v^11*w^10+2*j*u^24*v^10*w^10,-j*u^22*v^11*w^11+
j*u^24*v^10*w^10,9*j*u^4*v^4*w^4+6*u^6*v^2*w^4+8*u^6*v^3*w^3+
6*u^6*v^4*w^2+3*u^8*v^4+3*u^8*w^4+u^12,2*j^2*u^11*v^8*w^8-
3*j^2*u^12*v^7*w^8-3*j^2*u^12*v^8*w^7+2*j^2*u^13*v^5*w^9+
2*j^2*u^13*v^6*w^8-6*j^2*u^13*v^7*w^7+2*j^2*u^13*v^8*w^6+
2*j^2*u^13*v^9*w^5+4*j^2*u^14*v^5*w^8+4*j^2*u^14*v^8*w^5-
2*j^2*u^16*v^5*w^6-2*j^2*u^16*v^6*w^5-2*j^2*u^17*v^5*w^5,
u^12*v^6*w^6,-j*u^21*v^13*w^14-j*u^21*v^14*w^13+j*u^22*v^12*w^14+
2*j*u^22*v^13*w^13+j*u^22*v^14*w^12-j*u^23*v^10*w^15-
j*u^23*v^11*w^14+3*j*u^23*v^12*w^13+3*j*u^23*v^13*w^12-
j*u^23*v^14*w^11-j*u^23*v^15*w^10-3*j*u^24*v^10*w^14-
j*u^24*v^11*w^13+2*j*u^24*v^12*w^12-j*u^24*v^13*w^11-
3*j*u^24*v^14*w^10-2*j*u^25*v^10*w^13-2*j*u^25*v^13*w^10+
2*j*u^27*v^10*w^11+2*j*u^27*v^11*w^10+2*j*u^28*v^10*w^10,
9*j^2*u^8*v^8*w^8+6*u^12*v^4*w^8+8*u^12*v^6*w^6+6*u^12*v^8*w^4+3*u^16*v^8+
3*u^16*w^8+u^24,-2*u^30*v^15*w^18-2*u^30*v^16*w^17-2*u^30*v^17*w^16-
2*u^30*v^18*w^15-5*u^31*v^15*w^17-5*u^31*v^17*w^15-5*u^32*v^15*w^16-
5*u^32*v^16*w^15-8*u^33*v^15*w^15,-j^2*u^11*v^5*w^8-j^2*u^11*v^6*w^7-
j^2*u^11*v^7*w^6-j^2*u^11*v^8*w^5-2*j^2*u^12*v^5*w^7-
j^2*u^12*v^6*w^6-2*j^2*u^12*v^7*w^5-2*j^2*u^13*v^5*w^6-
2*j^2*u^13*v^6*w^5-2*j^2*u^14*v^5*w^5,-j*u^24*v^12*w^12+
j*u^28*v^10*w^10,-3*j^2*u^12*v^7*w^9+2*j^2*u^12*v^8*w^8-
3*j^2*u^12*v^9*w^7+2*j^2*u^13*v^5*w^10+2*j^2*u^13*v^7*w^8+
2*j^2*u^13*v^8*w^7+2*j^2*u^13*v^10*w^5-6*j^2*u^14*v^7*w^7+
4*j^2*u^15*v^5*w^8+4*j^2*u^15*v^8*w^5-2*j^2*u^16*v^5*w^7-
2*j^2*u^16*v^7*w^5-2*j^2*u^18*v^5*w^5,u^31*v^16*w^17+u^31*v^17*w^16+
2*u^32*v^16*w^16-2*u^33*v^15*w^16-2*u^33*v^16*w^15-2*u^34*v^15*w^15,-
4*j*u^21*v^11*w^11+6*j*u^23*v^10*w^10,-j^2*u^41*v^21*w^23-
j^2*u^41*v^23*w^21+2*j^2*u^43*v^20*w^22-2*j^2*u^43*v^21*w^21+
2*j^2*u^43*v^22*w^20+2*j^2*u^45*v^20*w^20,-4*j^2*u^41*v^21*w^21+
6*j^2*u^43*v^20*w^20,u^31*v^16*w^18+u^31*v^18*w^16-2*u^33*v^15*w^17+
2*u^33*v^16*w^16-2*u^33*v^17*w^15-2*u^35*v^15*w^15,3*j*u^12*v^7*w^7-
2*j^2*u^13*v^6*w^7-2*j^2*u^13*v^7*w^6+j^2*u^14*v^5*w^7+
j^2*u^14*v^7*w^5-j^2*u^16*v^5*w^5,-2*j*u^21*v^13*w^13+
3*j*u^22*v^12*w^13+3*j*u^22*v^13*w^12-2*j*u^23*v^10*w^14-
2*j*u^23*v^11*w^13+6*j*u^23*v^12*w^12-2*j*u^23*v^13*w^11-
2*j*u^23*v^14*w^10-4*j*u^24*v^10*w^13-4*j*u^24*v^13*w^10+
2*j*u^26*v^10*w^11+2*j*u^26*v^11*w^10+2*j*u^27*v^10*w^10,
2*j^2*u^10*v^8*w^8-12*j^2*u^12*v^7*w^7+8*j^2*u^13*v^5*w^8+
8*j^2*u^13*v^8*w^5-6*j^2*u^16*v^5*w^5,-j^2*u^11*v^5*w^7-
3*j^2*u^11*v^6*w^6-j^2*u^11*v^7*w^5-4*j^2*u^12*v^5*w^6-
4*j^2*u^12*v^6*w^5-2*j^2*u^13*v^5*w^5,j*u^20*v^11*w^11+
4*j*u^21*v^10*w^11+4*j*u^21*v^11*w^10+6*j*u^22*v^10*w^10,0,
9*j^2*u^40*v^20*w^22+9*j^2*u^40*v^22*w^20+18*j^2*u^42*v^20*w^20,-
j^2*u^10*v^6*w^6-4*j^2*u^11*v^5*w^6-4*j^2*u^11*v^6*w^5-
6*j^2*u^12*v^5*w^5,-2*j*u^20*v^13*w^13+12*j*u^22*v^12*w^12-
8*j*u^23*v^10*w^13-8*j*u^23*v^13*w^10+6*j*u^26*v^10*w^10,-
2*j^2*u^10*v^5*w^7-4*j^2*u^10*v^6*w^6-2*j^2*u^10*v^7*w^5-
10*j^2*u^11*v^5*w^6-10*j^2*u^11*v^6*w^5-8*j^2*u^12*v^5*w^5,
j*u^21*v^10*w^12+3*j*u^21*v^11*w^11+j*u^21*v^12*w^10+
4*j*u^22*v^10*w^11+4*j*u^22*v^11*w^10+2*j*u^23*v^10*w^10,
4*u^31*v^16*w^16-6*u^33*v^15*w^15,-9*j*u^50*v^25*w^27-
9*j*u^50*v^27*w^25-18*j*u^52*v^25*w^25,2*j*u^20*v^10*w^12+
4*j*u^20*v^11*w^11+2*j*u^20*v^12*w^10+10*j*u^21*v^10*w^11+
10*j*u^21*v^11*w^10+8*j*u^22*v^10*w^10,-9*j^2*u^10*v^5*w^6-
9*j^2*u^10*v^6*w^5-18*j^2*u^11*v^5*w^5,-36*j^2*u^10*v^5*w^5,-
2*u^30*v^15*w^17-4*u^30*v^16*w^16-2*u^30*v^17*w^15-10*u^31*v^15*w^16-
10*u^31*v^16*w^15-8*u^32*v^15*w^15,-9*u^30*v^15*w^17-9*u^30*v^17*w^15-
18*u^32*v^15*w^15,9*j*u^20*v^10*w^11+9*j*u^20*v^11*w^10+
18*j*u^21*v^10*w^10,-9*u^30*v^15*w^16-9*u^30*v^16*w^15-18*u^31*v^15*w^15,-
36*j*u^50*v^25*w^25,-36*u^30*v^15*w^15,36*j*u^20*v^10*w^10,
36*j^2*u^40*v^20*w^20]
  f40(u,v,w)=[40,10*u+
12*v+18*w,2*u*v+4*u*w+6*v*w+4*w^2,6*u*v+10*u*w+10*v*w+2*u^2+4*v^2+8*w^2,
10*u^2+12*v^2+18*w^2,-4*u*v*w+4*w^3,4*u*v*w+u*v^2+3*u*w^2+3*v*w^2+u^2*w+
2*v^2*w+2*w^3,u*v*w+u*w^2+v*w^2,3*u*v^2+5*u*w^2+5*v*w^2+3*u^2*v+5*u^2*w+
5*v^2*w+2*u^3+4*v^3+8*w^3,-u*v*w^2-v^2*w^2,u^2*v^4*w^13-u^2*v^7*w^10-
u^2*v^8*w^9+u^3*v^3*w^13-u^3*v^6*w^10-u^3*v^7*w^9+u^4*v^6*w^9+2*u^4*v^7*w^8+
u^4*v^8*w^7+u^4*w^15+v^4*w^15+u^5*v^5*w^9+2*u^5*v^6*w^8-u^6*v^3*w^10+
u^6*v^5*w^8-u^6*v^6*w^7-u^6*v^7*w^6-u^7*v^3*w^9+u^7*v^4*w^8-u^7*v^6*w^6+
u^7*v^8*w^4-u^7*w^12-v^7*w^12+u^8*v^4*w^7+u^8*v^7*w^4-u^8*w^11-v^8*w^11-
v^9*w^10-v^10*w^9,u*v*w^2+u*v^2*w+u*v^3+2*u*w^3+2*v*w^3+2*u^2*v*w+u^2*w^2+
v^2*w^2+u^3*w+2*v^3*w+2*w^4,0,6*u^2*v^2+10*u^2*w^2+10*v^2*w^2+2*u^4+4*v^4+
8*w^4,4*u^2*v^2*w^3+4*u^2*v^3*w^2+4*u^3*v^2*w^2-2*u^3*v^4-4*u^3*w^4-6*v^3*w^4-
2*u^4*v^3-4*u^4*w^3-6*v^4*w^3+4*w^7,-2*u*v*w^2-u*v^2*w+u*w^3+v*w^3-u^2*v*w+
2*w^4,-3*u*v*w^3+u*v^2*w^2-3*u*v^3*w-u*v^4-u*w^4-v*w^4+u^2*v*w^2+2*u^2*v^2*w+
u^2*v^3+u^2*w^3-2*u^3*v*w-u^3*w^2-v^3*w^2-u^4*w-2*v^4*w+2*w^5,0,-u^2*v^2*w^4-
v^4*w^4,0,u^4*v^8*w^14+u^4*v^9*w^13+u^6*v^6*w^14+u^6*v^7*w^13+u^7*v^6*w^13-
u^8*v^9*w^9+u^8*w^18+v^8*w^18-u^9*v^8*w^9-u^9*v^9*w^8+u^9*w^17+v^9*w^17+
v^13*w^13,-2*u*v*w^3-u*v^3*w+u^2*w^3+v^2*w^3-u^3*v*w+2*w^5,-u^5*v^8*w^11-
u^6*v^7*w^11,u^5*v^5*w^5+u^5*w^10+v^5*w^10,-u^25*v^34*w^49-u^27*v^32*w^49,
u^2*v^4*w^12-2*u^2*v^7*w^9+u^3*v^3*w^12-2*u^3*v^6*w^9+3*u^4*v^6*w^8+
2*u^4*v^7*w^7+u^4*w^14+v^4*w^14+3*u^5*v^5*w^8-2*u^6*v^3*w^9-3*u^6*v^6*w^6+
2*u^7*v^4*w^7+2*u^7*v^7*w^4-2*u^7*w^11-2*v^7*w^11-2*v^9*w^9,2*u*v^2*w^3+
3*u^2*v^2*w^2-u^2*w^4-v^2*w^4-2*v^3*w^3,0,-u*v^2*w^3-u*v^3*w^2-u*v^5-2*u*w^5-
2*v*w^5-2*u^2*v*w^3+4*u^2*v^2*w^2-2*u^2*v^3*w+u^2*v^4+3*u^2*w^4+3*v^2*w^4-
u^3*v*w^2-u^3*v^2*w-u^3*v^3-3*u^3*w^3-4*v^3*w^3+u^4*v^2+u^4*w^2+v^4*w^2-u^5*w-
2*v^5*w+2*w^6,0,12*u^2*v^2*w^2-4*u^3*v^3-8*u^3*w^3-12*v^3*w^3+4*w^6,
4*u^25*v^30*w^48-4*u^26*v^31*w^46,u^4*v^8*w^19-u^4*v^11*w^16-u^4*v^12*w^15+
u^6*v^6*w^19-u^6*v^9*w^16+u^6*v^11*w^14+u^7*v^10*w^14+u^8*v^8*w^15+
u^8*v^9*w^14+u^8*v^11*w^12+u^8*v^12*w^11+u^8*w^23+v^8*w^23-u^9*v^6*w^16+
u^9*v^8*w^14-u^10*v^6*w^15-u^10*v^10*w^11-u^10*v^11*w^10+u^11*v^8*w^12-
u^11*v^10*w^10+u^11*v^12*w^8-u^11*w^20-v^11*w^20+u^12*v^8*w^11+u^12*v^11*w^8-
u^12*w^19-v^12*w^19-v^15*w^16-v^16*w^15,0,0,-4*u*v^3*w^3+u*w^6+v*w^6+
6*u^2*v^2*w^3+3*u^2*v^3*w^2-2*u^3*v*w^3+3*u^3*v^2*w^2-2*u^3*v^3*w-2*u^3*v^4-
4*u^3*w^4-4*v^3*w^4-2*u^4*w^3-4*v^4*w^3+2*w^7,-u^5*v^10*w^13-u^7*v^8*w^13,
2*u^5*v^6*w^14+u^5*v^8*w^12-2*u^6*v^7*w^12-u^6*v^9*w^10+u^7*v^6*w^12-
u^8*v^7*w^10,-u^15*v^22*w^31-u^17*v^20*w^31,u^2*v^4*w^8+2*u^2*v^5*w^7+
u^2*v^6*w^6+2*u^3*v^3*w^8+4*u^3*v^4*w^7+2*u^4*v^3*w^7+u^4*v^4*w^6-
2*u^4*v^5*w^5-u^4*v^6*w^4+u^4*w^10+v^4*w^10-2*u^5*v^4*w^5-2*u^5*v^5*w^4+
2*u^5*w^9+2*v^5*w^9-u^6*v^4*w^4+v^6*w^8+v^8*w^6,0,0,4*u^5*v^6*w^12-
4*u^6*v^7*w^10,u^2*v^4*w^8+u^2*v^5*w^7+u^3*v^3*w^8+u^3*v^4*w^7+u^4*v^3*w^7-
u^4*v^5*w^5+u^4*w^10+v^4*w^10-u^5*v^4*w^5-u^5*v^5*w^4+u^5*w^9+v^5*w^9+v^7*w^7,
2*u^25*v^30*w^49+u^25*v^31*w^48+u^26*v^30*w^48-2*u^26*v^31*w^47-
u^26*v^32*w^46-u^27*v^31*w^46,-u^25*v^32*w^47-u^26*v^31*w^47,6*u^2*v^2*w^4-
4*u^2*v^3*w^3+3*u^2*v^4*w^2+u^2*w^6+v^2*w^6-2*u^3*v^2*w^3-2*u^3*v^3*w^2-
2*u^3*v^5-4*u^3*w^5-4*v^3*w^5+3*u^4*v^2*w^2-2*u^5*w^3-4*v^5*w^3+2*w^8,
18*u^25*v^30*w^46+12*u^25*v^31*w^45+10*u^26*v^30*w^45,2*u^5*v^6*w^13+
u^5*v^7*w^12+u^6*v^6*w^12-2*u^6*v^7*w^11-u^6*v^8*w^10-u^7*v^7*w^10,-
u^20*v^26*w^38-u^21*v^25*w^38,0,2*u^25*v^30*w^50+u^25*v^32*w^48-
2*u^26*v^31*w^48-u^26*v^33*w^46+u^27*v^30*w^48-u^28*v^31*w^46,8*u^5*v^6*w^13+
10*u^5*v^8*w^11+4*u^5*v^10*w^9+10*u^7*v^6*w^11+6*u^7*v^8*w^9+2*u^9*v^6*w^9,
18*u^5*v^6*w^11+12*u^5*v^8*w^9+10*u^7*v^6*w^9,-u^15*v^20*w^29-u^16*v^19*w^29,
8*u^25*v^30*w^48+5*u^25*v^31*w^47+5*u^25*v^32*w^46+4*u^25*v^33*w^45+
5*u^26*v^30*w^47+3*u^26*v^32*w^45+5*u^27*v^30*w^46+3*u^27*v^31*w^45+
2*u^28*v^30*w^45,3*u^2*v^4*w^7+2*u^2*v^5*w^6+4*u^3*v^3*w^7+3*u^3*v^4*w^6+
2*u^4*v^3*w^6-3*u^4*v^4*w^5-3*u^4*v^5*w^4+2*u^4*w^9+2*v^4*w^9-3*u^5*v^4*w^4+
u^5*w^8+v^5*w^8+v^6*w^7+v^7*w^6,0,-u^20*v^28*w^40-u^22*v^26*w^40,0,
8*u^5*v^6*w^12+5*u^5*v^7*w^11+5*u^5*v^8*w^10+4*u^5*v^9*w^9+5*u^6*v^6*w^11+
3*u^6*v^8*w^9+5*u^7*v^6*w^10+3*u^7*v^7*w^9+2*u^8*v^6*w^9,0,
2*u^10*v^12*w^22+u^10*v^13*w^21+u^11*v^12*w^21-2*u^11*v^13*w^20-
u^11*v^14*w^19-u^12*v^13*w^19,-u^10*v^14*w^20-u^11*v^13*w^20,6*u^2*v^4*w^6+
8*u^3*v^3*w^6-9*u^4*v^4*w^4+3*u^4*w^8+3*v^4*w^8+2*v^6*w^6,2*u^5*v^6*w^16+
u^5*v^7*w^15-4*u^5*v^9*w^13-4*u^5*v^10*w^12+u^6*v^6*w^15-4*u^6*v^9*w^12+
6*u^7*v^8*w^12+3*u^7*v^9*w^11-4*u^8*v^6*w^13-2*u^8*v^7*w^12+3*u^8*v^8*w^11-
2*u^8*v^9*w^10-2*u^8*v^10*w^9-2*u^9*v^6*w^12,0,2*u^10*v^12*w^26+
u^10*v^13*w^25-2*u^10*v^15*w^23-4*u^10*v^16*w^22-2*u^10*v^17*w^21+
u^11*v^12*w^25-2*u^11*v^15*w^22-2*u^11*v^16*w^21+2*u^12*v^14*w^22+
3*u^12*v^15*w^21+u^12*v^16*w^20-2*u^13*v^12*w^23-u^13*v^13*w^22+
3*u^13*v^14*w^21+2*u^13*v^15*w^20-u^13*v^16*w^19-u^13*v^17*w^18-
3*u^14*v^12*w^22-u^14*v^13*w^21+u^14*v^14*w^20-u^14*v^15*w^19-u^14*v^16*w^18-
u^15*v^12*w^21,6*u^4*v^8*w^12+8*u^6*v^6*w^12-9*u^8*v^8*w^8+3*u^8*w^16+
3*v^8*w^16+2*v^12*w^12,8*u^15*v^18*w^30+5*u^15*v^19*w^29+5*u^15*v^20*w^28+
4*u^15*v^21*w^27+5*u^16*v^18*w^29+3*u^16*v^20*w^27+5*u^17*v^18*w^28+
3*u^17*v^19*w^27+2*u^18*v^18*w^27,2*u^5*v^6*w^13+2*u^5*v^7*w^12+u^5*v^8*w^11+
2*u^5*v^9*w^10+2*u^6*v^6*w^12+u^6*v^7*w^11+u^6*v^8*w^10+u^6*v^9*w^9+
u^7*v^6*w^11+2*u^7*v^7*w^10+u^8*v^6*w^10,-u^10*v^16*w^22-u^12*v^14*w^22,
2*u^5*v^6*w^17+u^5*v^8*w^15-4*u^5*v^9*w^14-4*u^5*v^11*w^12+u^7*v^6*w^15+
6*u^7*v^8*w^13-4*u^7*v^9*w^12+3*u^7*v^10*w^11-4*u^8*v^6*w^14-2*u^8*v^8*w^12-
2*u^8*v^9*w^11-2*u^8*v^11*w^9+3*u^9*v^8*w^11-2*u^10*v^6*w^12,2*u^15*v^18*w^31+
u^15*v^19*w^30+u^16*v^18*w^30-2*u^16*v^19*w^29-u^16*v^20*w^28-u^17*v^19*w^28,
4*u^10*v^12*w^21-4*u^11*v^13*w^19,2*u^20*v^24*w^41+u^20*v^26*w^39-
2*u^21*v^25*w^39-u^21*v^27*w^37+u^22*v^24*w^39-u^23*v^25*w^37,
4*u^20*v^24*w^39-4*u^21*v^25*w^37,2*u^15*v^18*w^32+u^15*v^20*w^30-
2*u^16*v^19*w^30-u^16*v^21*w^28+u^17*v^18*w^30-u^18*v^19*w^28,-u^5*v^8*w^13-
2*u^5*v^9*w^12+2*u^6*v^8*w^12-u^7*v^6*w^13+3*u^7*v^8*w^11,2*u^10*v^12*w^25+
u^10*v^13*w^24-4*u^10*v^15*w^22-4*u^10*v^16*w^21+u^11*v^12*w^24-
4*u^11*v^15*w^21+6*u^12*v^14*w^21+3*u^12*v^15*w^20-4*u^13*v^12*w^22-
2*u^13*v^13*w^21+3*u^13*v^14*w^20-2*u^13*v^15*w^19-2*u^13*v^16*w^18-
2*u^14*v^12*w^21,4*u^5*v^6*w^15-12*u^5*v^9*w^12+12*u^7*v^8*w^11-
8*u^8*v^6*w^12-4*u^8*v^9*w^9,2*u^5*v^6*w^12+3*u^5*v^7*w^11+2*u^5*v^8*w^10+
3*u^6*v^6*w^11+4*u^6*v^7*w^10+u^6*v^8*w^9+u^7*v^6*w^10,4*u^10*v^12*w^20+
6*u^10*v^13*w^19+4*u^11*v^12*w^19+2*u^11*v^13*w^18,0,
18*u^20*v^24*w^38+12*u^20*v^26*w^36+10*u^22*v^24*w^36,4*u^5*v^6*w^11+
6*u^5*v^7*w^10+4*u^6*v^6*w^10+2*u^6*v^7*w^9,4*u^10*v^12*w^24-
12*u^10*v^15*w^21+12*u^12*v^14*w^20-8*u^13*v^12*w^21-4*u^13*v^15*w^18,
8*u^5*v^6*w^11+10*u^5*v^7*w^10+4*u^5*v^8*w^9+10*u^6*v^6*w^10+6*u^6*v^7*w^9+
2*u^7*v^6*w^9,2*u^10*v^12*w^21+3*u^10*v^13*w^20+2*u^10*v^14*w^19+
3*u^11*v^12*w^20+4*u^11*v^13*w^19+u^11*v^14*w^18+u^12*v^12*w^19,
4*u^15*v^18*w^30-4*u^16*v^19*w^28,18*u^25*v^30*w^47+12*u^25*v^32*w^45+
10*u^27*v^30*w^45,8*u^10*v^12*w^20+10*u^10*v^13*w^19+4*u^10*v^14*w^18+
10*u^11*v^12*w^19+6*u^11*v^13*w^18+2*u^12*v^12*w^18,18*u^5*v^6*w^10+
12*u^5*v^7*w^9+10*u^6*v^6*w^9,40*u^5*v^6*w^9,8*u^15*v^18*w^29+
10*u^15*v^19*w^28+4*u^15*v^20*w^27+10*u^16*v^18*w^28+6*u^16*v^19*w^27+
2*u^17*v^18*w^27,18*u^15*v^18*w^29+12*u^15*v^20*w^27+10*u^17*v^18*w^27,
18*u^10*v^12*w^19+12*u^10*v^13*w^18+10*u^11*v^12*w^18,18*u^15*v^18*w^28+
12*u^15*v^19*w^27+10*u^16*v^18*w^27,40*u^25*v^30*w^45,40*u^15*v^18*w^27,
40*u^10*v^12*w^18,40*u^20*v^24*w^36]
  f45(u,v,w,j)=[45,18*u+18*v+9*w,8*u*v+2*u*w+2*v*w+
3*u^2+3*v^2,14*u*v+8*u*w+8*v*w+7*u^2+7*v^2+w^2,18*u^2+18*v^2+9*w^2,-5*u*v*w+
3*u^3+3*v^3,4*u*v*w+4*u*v^2+4*u^2*v+2*u^2*w+2*v^2*w+u^3+v^3,-j^2*u*v*w+
u*v^2+u^2*v,7*u*v^2+4*u*w^2+4*v*w^2+7*u^2*v+4*u^2*w+4*v^2*w+7*u^3+7*v^3+w^3,-
u*v^2*w-u^2*v*w-u^2*v^2,-u^3*v^9*w^7-u^3*v^10*w^6+u^3*v^13*w^3-
j^2*u^4*v^7*w^8-j^2*u^4*v^8*w^7+u^4*v^13*w^2+u^4*v^15+u^5*v^8*w^6+
u^5*v^9*w^5+j^2*u^6*v^6*w^7+j^2*u^6*v^7*w^6+2*u^6*v^8*w^5+u^6*v^9*w^4-
u^6*v^10*w^3-j^2*u^7*v^4*w^8+j^2*u^7*v^6*w^6+(-j-2*j^2)*u^7*v^8*w^4-
u^7*v^9*w^3-u^7*v^10*w^2-u^7*v^12-j^2*u^8*v^4*w^7+u^8*v^5*w^6+
2*u^8*v^6*w^5+(-j-2*j^2)*u^8*v^7*w^4-u^8*v^9*w^2-u^8*v^11-u^9*v^3*w^7+
u^9*v^5*w^5+u^9*v^6*w^4-u^9*v^7*w^3-u^9*v^8*w^2-u^9*v^10-u^10*v^3*w^6-
u^10*v^6*w^3-u^10*v^7*w^2-u^10*v^9-u^11*v^8-u^12*v^7+u^13*v^3*w^3+
u^13*v^4*w^2+u^15*v^4,2*u*v*w^2+u*v^2*w+3*u*v^3+u^2*v*w+2*u^2*v^2+u^2*w^2+
v^2*w^2+3*u^3*v+u^3*w+v^3*w+u^4+v^4,0,14*u^2*v^2+8*u^2*w^2+8*v^2*w^2+7*u^4+
7*v^4+w^4,5*u^2*v^2*w^3+5*u^2*v^3*w^2+5*u^3*v^2*w^2-8*u^3*v^4-2*u^3*w^4-
2*v^3*w^4-8*u^4*v^3-2*u^4*w^3-2*v^4*w^3+3*u^7+3*v^7,-u*v*w^2-2*u*v^2*w+u*v^3-
2*u^2*v*w+u^3*v+u^3*w+v^3*w+u^4+v^4,-2*u*v*w^3+2*u*v^2*w^2-3*u*v^3*w-2*u*v^4+
2*u^2*v*w^2+u^2*v^2*w-u^2*v^3-3*u^3*v*w-u^3*v^2+2*u^3*w^2+2*v^3*w^2-2*u^4*v+
u^5+v^5,0,-u^2*v^4*w^2-u^4*v^2*w^2-u^4*v^4,j^2*u^2*v^2*w,u^6*v^13*w^7+
u^6*v^14*w^6+u^7*v^13*w^6+j*u^8*v^9*w^9+u^8*v^14*w^4+u^8*v^18+
j*u^9*v^8*w^9+j*u^9*v^9*w^8+u^9*v^13*w^4+u^9*v^17+u^13*v^6*w^7+
u^13*v^7*w^6+u^13*v^9*w^4+u^13*v^13+u^14*v^6*w^6+u^14*v^8*w^4+u^17*v^9+
u^18*v^8,-u*v*w^3-2*u*v^3*w+u^2*v^3-2*u^3*v*w+u^3*v^2+u^3*w^2+v^3*w^2+u^5+v^5,
-j^2*u^9*v^10*w^5-j^2*u^10*v^9*w^5-j^2*u^10*v^10*w^4,-
j*u^5*v^5*w^5+u^5*v^10+u^10*v^5,-j*u^42*v^44*w^22-j*u^44*v^42*w^22-
j*u^44*v^44*w^20,-2*u^3*v^9*w^6+u^3*v^12*w^3-2*j^2*u^4*v^7*w^7+
u^4*v^12*w^2+u^4*v^14+3*u^5*v^8*w^5+3*j^2*u^6*v^6*w^6+3*u^6*v^8*w^4-
2*u^6*v^9*w^3-2*j^2*u^7*v^4*w^7-2*j^2*u^7*v^7*w^4-2*u^7*v^9*w^2-
2*u^7*v^11+3*u^8*v^5*w^5+3*u^8*v^6*w^4-2*u^9*v^3*w^6-2*u^9*v^6*w^3-
2*u^9*v^7*w^2-2*u^9*v^9-2*u^11*v^7+u^12*v^3*w^3+u^12*v^4*w^2+u^14*v^4,-
3*j*u^2*v^2*w^2+2*u^2*v^3*w-u^2*v^4+2*u^3*v^2*w-2*u^3*v^3-u^4*v^2,0,-
u*v^2*w^3-2*u*v^3*w^2-3*u*v^5-u^2*v*w^3+5*u^2*v^2*w^2-u^2*v^3*w+3*u^2*v^4+
u^2*w^4+v^2*w^4-2*u^3*v*w^2-u^3*v^2*w-6*u^3*v^3-u^3*w^3-v^3*w^3+3*u^4*v^2+
3*u^4*w^2+3*v^4*w^2-3*u^5*v-u^5*w-v^5*w+u^6+v^6,
-j*u^4*v^4*w^4-j*u^4*v^6*w^2-j*u^6*v^4*w^2,
15*u^2*v^2*w^2-16*u^3*v^3-4*u^3*w^3-4*v^3*w^3+3*u^6+3*v^6,3*j*u^40*v^43*w^20-
5*j*u^41*v^41*w^21+3*j*u^43*v^40*w^20,-u^6*v^15*w^10-u^6*v^16*w^9+
u^6*v^19*w^6-j*u^8*v^11*w^12-j*u^8*v^12*w^11+u^8*v^14*w^9+u^8*v^15*w^8+
u^8*v^19*w^4+u^8*v^23+u^9*v^14*w^8-u^9*v^16*w^6+j*u^10*v^10*w^11+
j*u^10*v^11*w^10+u^10*v^14*w^7-j*u^11*v^8*w^12+j*u^11*v^10*w^10-
j*u^11*v^12*w^8+u^11*v^14*w^6-u^11*v^16*w^4-u^11*v^20-j*u^12*v^8*w^11-
j*u^12*v^11*w^8-u^12*v^15*w^4-u^12*v^19+u^14*v^8*w^9+u^14*v^9*w^8+
u^14*v^10*w^7+u^14*v^11*w^6-u^15*v^6*w^10+u^15*v^8*w^8-u^15*v^12*w^4-
u^15*v^16-u^16*v^6*w^9-u^16*v^9*w^6-u^16*v^11*w^4-u^16*v^15+u^19*v^6*w^6+
u^19*v^8*w^4-u^19*v^12-u^20*v^11+u^23*v^8,j*u^10*v^10*w^5,0,-2*u*v^3*w^3+u*v^6+
3*u^2*v^2*w^3+6*u^2*v^3*w^2-2*u^3*v*w^3+6*u^3*v^2*w^2-4*u^3*v^3*w-6*u^3*v^4-
6*u^4*v^3-2*u^4*w^3-2*v^4*w^3+u^6*v+u^6*w+v^6*w+u^7+v^7,-j^2*u^10*v^12*w^6-
j^2*u^12*v^10*w^6-j^2*u^12*v^12*w^4,j^2*u^8*v^11*w^6+
j^2*u^8*v^13*w^4-j^2*u^9*v^9*w^7-2*j^2*u^9*v^11*w^5+
j^2*u^10*v^11*w^4+j^2*u^11*v^8*w^6-2*j^2*u^11*v^9*w^5+
j^2*u^11*v^10*w^4+j^2*u^13*v^8*w^4,-u^26*v^28*w^14-u^28*v^26*w^14-
u^28*v^28*w^12,2*u^3*v^7*w^4+2*u^3*v^8*w^3+j^2*u^4*v^4*w^6+
2*j^2*u^4*v^5*w^5+(-2*j-j^2)*u^4*v^6*w^4+4*u^4*v^7*w^3+u^4*v^8*w^2+
u^4*v^10+2*j^2*u^5*v^4*w^5+2*j^2*u^5*v^5*w^4+2*u^5*v^7*w^2+2*u^5*v^9+
(-2*j-j^2)*u^6*v^4*w^4+2*u^6*v^6*w^2+u^6*v^8+2*u^7*v^3*w^4+4*u^7*v^4*w^3+
2*u^7*v^5*w^2+2*u^8*v^3*w^3+u^8*v^4*w^2+u^8*v^6+2*u^9*v^5+u^10*v^4,
u^4*v^4*w^2*d*(u+v+w),
0,3*j^2*u^8*v^11*w^4-5*j^2*u^9*v^9*w^5+3*j^2*u^11*v^8*w^4,
u^3*v^7*w^4+u^3*v^8*w^3+j^2*u^4*v^5*w^5+u^4*v^7*w^3+u^4*v^8*w^2+u^4*v^10+
j^2*u^5*v^4*w^5+j^2*u^5*v^5*w^4+u^5*v^7*w^2+u^5*v^9+u^7*v^3*w^4+
u^7*v^4*w^3+u^7*v^5*w^2+u^7*v^7+u^8*v^3*w^3+u^8*v^4*w^2+u^9*v^5+u^10*v^4,
j*u^40*v^43*w^21+j*u^40*v^44*w^20-j*u^41*v^41*w^22-
2*j*u^41*v^42*w^21+j*u^41*v^43*w^20-2*j*u^42*v^41*w^21+
j*u^43*v^40*w^21+j*u^43*v^41*w^20+j*u^44*v^40*w^20,-
j*u^41*v^42*w^21-j*u^42*v^41*w^21-j*u^42*v^42*w^20,3*u^2*v^2*w^4-
2*u^2*v^3*w^3+6*u^2*v^4*w^2+u^2*v^6-2*u^3*v^2*w^3-4*u^3*v^3*w^2-6*u^3*v^5+
6*u^4*v^2*w^2-6*u^5*v^3-2*u^5*w^3-2*v^5*w^3+u^6*v^2+u^6*w^2+v^6*w^2+u^8+v^8,
9*j*u^40*v^40*w^21+18*j*u^40*v^41*w^20+18*j*u^41*v^40*w^20,
j^2*u^8*v^11*w^5+j^2*u^8*v^12*w^4-j^2*u^9*v^9*w^6-
2*j^2*u^9*v^10*w^5+j^2*u^9*v^11*w^4-2*j^2*u^10*v^9*w^5+
j^2*u^11*v^8*w^5+j^2*u^11*v^9*w^4+j^2*u^12*v^8*w^4,-
j^2*u^33*v^34*w^17-j^2*u^34*v^33*w^17-j^2*u^34*v^34*w^16,u^6*v^6*w^3,
j*u^40*v^43*w^22+j*u^40*v^45*w^20-j*u^41*v^41*w^23-
2*j*u^41*v^43*w^21+j*u^42*v^43*w^20+j*u^43*v^40*w^22-
2*j*u^43*v^41*w^21+j*u^43*v^42*w^20+j*u^45*v^40*w^20,
j^2*u^8*v^8*w^8+8*j^2*u^8*v^10*w^6+7*j^2*u^8*v^12*w^4+
8*j^2*u^10*v^8*w^6+14*j^2*u^10*v^10*w^4+7*j^2*u^12*v^8*w^4,
9*j^2*u^8*v^8*w^6+18*j^2*u^8*v^10*w^4+18*j^2*u^10*v^8*w^4,-
u^25*v^26*w^13-u^26*v^25*w^13-u^26*v^26*w^12,j*u^40*v^40*w^23+
4*j*u^40*v^41*w^22+4*j*u^40*v^42*w^21+7*j*u^40*v^43*w^20+
4*j*u^41*v^40*w^22+7*j*u^41*v^42*w^20+4*j*u^42*v^40*w^21+
7*j*u^42*v^41*w^20+7*j*u^43*v^40*w^20,2*u^3*v^6*w^4+4*u^3*v^7*w^3+
3*j^2*u^4*v^4*w^5+3*j^2*u^4*v^5*w^4+3*u^4*v^6*w^3+3*u^4*v^7*w^2+
2*u^4*v^9+3*j^2*u^5*v^4*w^4+2*u^5*v^6*w^2+u^5*v^8+2*u^6*v^3*w^4+
3*u^6*v^4*w^3+2*u^6*v^5*w^2+u^6*v^7+4*u^7*v^3*w^3+3*u^7*v^4*w^2+u^7*v^6+
u^8*v^5+2*u^9*v^4,
j^2*d*u^12*v^12*w^6*(u+v+w),
-j^2*u^34*v^36*w^18-j^2*u^36*v^34*w^18-j^2*u^36*v^36*w^16,
-3*j*u^4*v^4*w^2,j^2*u^8*v^8*w^7+
4*j^2*u^8*v^9*w^6+4*j^2*u^8*v^10*w^5+7*j^2*u^8*v^11*w^4+
4*j^2*u^9*v^8*w^6+7*j^2*u^9*v^10*w^4+4*j^2*u^10*v^8*w^5+
7*j^2*u^10*v^9*w^4+7*j^2*u^11*v^8*w^4,-3*j^2*u^20*v^20*w^10,j*u^16*v^19*w^9+
j*u^16*v^20*w^8-j*u^17*v^17*w^10-2*j*u^17*v^18*w^9+
j*u^17*v^19*w^8-2*j*u^18*v^17*w^9+j*u^19*v^16*w^9+j*u^19*v^17*w^8+
j*u^20*v^16*w^8,-j*u^17*v^18*w^9-j*u^18*v^17*w^9-j*u^18*v^18*w^8,
8*u^3*v^6*w^3+9*j^2*u^4*v^4*w^4+6*u^4*v^6*w^2+3*u^4*v^8+8*u^6*v^3*w^3+
6*u^6*v^4*w^2+2*u^6*v^6+3*u^8*v^4,-2*j^2*u^8*v^12*w^7+j^2*u^8*v^14*w^5+
j^2*u^8*v^15*w^4-2*j^2*u^9*v^11*w^7+j^2*u^9*v^14*w^4+
3*j^2*u^10*v^10*w^7+6*j^2*u^10*v^11*w^6-2*j^2*u^11*v^9*w^7+
6*j^2*u^11*v^10*w^6-4*j^2*u^11*v^11*w^5-6*j^2*u^11*v^12*w^4-
2*j^2*u^12*v^8*w^7-6*j^2*u^12*v^11*w^4+j^2*u^14*v^8*w^5+
j^2*u^14*v^9*w^4+j^2*u^15*v^8*w^4,0,-j*u^16*v^20*w^12-
j*u^16*v^21*w^11+j*u^16*v^23*w^9+j*u^16*v^24*w^8-j*u^17*v^19*w^12-
j*u^17*v^20*w^11+j*u^17*v^23*w^8+j*u^18*v^18*w^12+
3*j*u^18*v^19*w^11+2*j*u^18*v^20*w^10-j*u^19*v^17*w^12+
3*j*u^19*v^18*w^11+4*j*u^19*v^19*w^10-2*j*u^19*v^20*w^9-
3*j*u^19*v^21*w^8-j*u^20*v^16*w^12-j*u^20*v^17*w^11+
2*j*u^20*v^18*w^10-2*j*u^20*v^19*w^9-6*j*u^20*v^20*w^8-
j*u^21*v^16*w^11-3*j*u^21*v^19*w^8+j*u^23*v^16*w^9+
j*u^23*v^17*w^8+j*u^24*v^16*w^8,8*u^6*v^12*w^6+9*j*u^8*v^8*w^8+
6*u^8*v^12*w^4+3*u^8*v^16+8*u^12*v^6*w^6+6*u^12*v^8*w^4+2*u^12*v^12+
3*u^16*v^8,u^24*v^24*w^15+4*u^24*v^25*w^14+4*u^24*v^26*w^13+7*u^24*v^27*w^12+
4*u^25*v^24*w^14+7*u^25*v^26*w^12+4*u^26*v^24*w^13+7*u^26*v^25*w^12+
7*u^27*v^24*w^12,j^2*u^8*v^10*w^6+j^2*u^8*v^11*w^5+j^2*u^8*v^12*w^4+
2*j^2*u^9*v^9*w^6+j^2*u^9*v^10*w^5+3*j^2*u^9*v^11*w^4+
j^2*u^10*v^8*w^6+j^2*u^10*v^9*w^5+2*j^2*u^10*v^10*w^4+
j^2*u^11*v^8*w^5+3*j^2*u^11*v^9*w^4+j^2*u^12*v^8*w^4,-
j*u^18*v^20*w^10-j*u^20*v^18*w^10-j*u^20*v^20*w^8,-
2*j^2*u^8*v^13*w^7+j^2*u^8*v^14*w^6+j^2*u^8*v^16*w^4+
3*j^2*u^10*v^10*w^8-2*j^2*u^10*v^11*w^7+6*j^2*u^10*v^12*w^6+
j^2*u^10*v^14*w^4-2*j^2*u^11*v^10*w^7-4*j^2*u^11*v^11*w^6-
6*j^2*u^11*v^13*w^4+6*j^2*u^12*v^10*w^6-2*j^2*u^13*v^8*w^7-
6*j^2*u^13*v^11*w^4+j^2*u^14*v^8*w^6+j^2*u^14*v^10*w^4+
j^2*u^16*v^8*w^4,u^24*v^27*w^13+u^24*v^28*w^12-u^25*v^25*w^14-
2*u^25*v^26*w^13+u^25*v^27*w^12-2*u^26*v^25*w^13+u^27*v^24*w^13+
u^27*v^25*w^12+u^28*v^24*w^12,3*j*u^16*v^19*w^8-5*j*u^17*v^17*w^9+
3*j*u^19*v^16*w^8,j^2*u^32*v^35*w^18+j^2*u^32*v^37*w^16-
j^2*u^33*v^33*w^19-2*j^2*u^33*v^35*w^17+j^2*u^34*v^35*w^16+
j^2*u^35*v^32*w^18-2*j^2*u^35*v^33*w^17+j^2*u^35*v^34*w^16+
j^2*u^37*v^32*w^16,3*j^2*u^32*v^35*w^16-5*j^2*u^33*v^33*w^17+
3*j^2*u^35*v^32*w^16,u^24*v^27*w^14+u^24*v^29*w^12-u^25*v^25*w^15-
2*u^25*v^27*w^13+u^26*v^27*w^12+u^27*v^24*w^14-2*u^27*v^25*w^13+
u^27*v^26*w^12+u^29*v^24*w^12,-3*u^10*v^10*w^6+2*j^2*u^10*v^11*w^5-
j^2*u^10*v^12*w^4+2*j^2*u^11*v^10*w^5-2*j^2*u^11*v^11*w^4-
j^2*u^12*v^10*w^4,-2*j*u^16*v^20*w^11+j*u^16*v^22*w^9+
j*u^16*v^23*w^8-2*j*u^17*v^19*w^11+j*u^17*v^22*w^8+
3*j*u^18*v^18*w^11+6*j*u^18*v^19*w^10-2*j*u^19*v^17*w^11+
6*j*u^19*v^18*w^10-4*j*u^19*v^19*w^9-6*j*u^19*v^20*w^8-
2*j*u^20*v^16*w^11-6*j*u^20*v^19*w^8+j*u^22*v^16*w^9+
j*u^22*v^17*w^8+j*u^23*v^16*w^8,-4*j^2*u^8*v^11*w^7+
3*j^2*u^8*v^14*w^4+15*j^2*u^10*v^10*w^6-4*j^2*u^11*v^8*w^7-
16*j^2*u^11*v^11*w^4+3*j^2*u^14*v^8*w^4,2*j^2*u^8*v^10*w^5+
j^2*u^8*v^11*w^4+4*j^2*u^9*v^9*w^5+4*j^2*u^9*v^10*w^4+
2*j^2*u^10*v^8*w^5+4*j^2*u^10*v^9*w^4+j^2*u^11*v^8*w^4,
2*j*u^16*v^17*w^9+3*j*u^16*v^18*w^8+2*j*u^17*v^16*w^9+
8*j*u^17*v^17*w^8+3*j*u^18*v^16*w^8,-3*u^12*v^12*w^6,9*j^2*u^32*v^32*w^18+
18*j^2*u^32*v^34*w^16+18*j^2*u^34*v^32*w^16,2*j^2*u^8*v^9*w^5+
3*j^2*u^8*v^10*w^4+2*j^2*u^9*v^8*w^5+8*j^2*u^9*v^9*w^4+
3*j^2*u^10*v^8*w^4,-4*j*u^16*v^19*w^11+3*j*u^16*v^22*w^8+
15*j*u^18*v^18*w^10-4*j*u^19*v^16*w^11-16*j*u^19*v^19*w^8+
3*j*u^22*v^16*w^8,j^2*u^8*v^8*w^6+8*j^2*u^8*v^9*w^5+
7*j^2*u^8*v^10*w^4+8*j^2*u^9*v^8*w^5+14*j^2*u^9*v^9*w^4+
7*j^2*u^10*v^8*w^4,2*j*u^16*v^18*w^9+j*u^16*v^19*w^8+
4*j*u^17*v^17*w^9+4*j*u^17*v^18*w^8+2*j*u^18*v^16*w^9+
4*j*u^18*v^17*w^8+j*u^19*v^16*w^8,3*u^24*v^27*w^12-5*u^25*v^25*w^13+
3*u^27*v^24*w^12,9*j*u^40*v^40*w^22+18*j*u^40*v^42*w^20+
18*j*u^42*v^40*w^20,j*u^16*v^16*w^10+8*j*u^16*v^17*w^9+
7*j*u^16*v^18*w^8+8*j*u^17*v^16*w^9+14*j*u^17*v^17*w^8+
7*j*u^18*v^16*w^8,9*j^2*u^8*v^8*w^5+18*j^2*u^8*v^9*w^4+
18*j^2*u^9*v^8*w^4,45*j^2*u^8*v^8*w^4,u^24*v^24*w^14+8*u^24*v^25*w^13+
7*u^24*v^26*w^12+8*u^25*v^24*w^13+14*u^25*v^25*w^12+7*u^26*v^24*w^12,
9*u^24*v^24*w^14+18*u^24*v^26*w^12+18*u^26*v^24*w^12,9*j*u^16*v^16*w^9+
18*j*u^16*v^17*w^8+18*j*u^17*v^16*w^8,9*u^24*v^24*w^13+
18*u^24*v^25*w^12+18*u^25*v^24*w^12,45*j*u^40*v^40*w^20,45*u^24*v^24*w^12,
45*j*u^16*v^16*w^8,45*j^2*u^32*v^32*w^16]
  f60a(u,v,w)=[60,18*u+21*v+21*w,4*u*v+
4*u*w+7*v*w+2*u^2+2*v^2+2*w^2,14*u*v+14*u*w+12*v*w+4*u^2+8*v^2+8*w^2,18*u^2+
21*v^2+21*w^2,-8*u*v*w+2*u^3+2*v^3+2*w^3,5*u*v*w+3*u*v^2+3*u*w^2+2*v*w^2+
2*u^2*v+2*u^2*w+2*v^2*w+v^3+w^3,u*v*w,7*u*v^2+7*u*w^2+6*v*w^2+7*u^2*v+7*u^2*w+
6*v^2*w+4*u^3+8*v^3+8*w^3,-u*v*w^2-u*v^2*w-v^2*w^2,u^2*v^4*w^13-u^2*v^7*w^10-
u^2*v^8*w^9-u^2*v^9*w^8-u^2*v^10*w^7+u^2*v^13*w^4+u^3*v^3*w^13-u^3*v^6*w^10-
u^3*v^7*w^9-u^3*v^9*w^7-u^3*v^10*w^6+u^3*v^13*w^3+u^4*v^6*w^9+2*u^4*v^7*w^8+
2*u^4*v^8*w^7+u^4*v^9*w^6+u^5*v^5*w^9+2*u^5*v^6*w^8+2*u^5*v^8*w^6+u^5*v^9*w^5-
u^6*v^3*w^10+u^6*v^5*w^8-u^6*v^6*w^7-u^6*v^7*w^6+u^6*v^8*w^5-u^6*v^10*w^3-
u^7*v^3*w^9+u^7*v^4*w^8-u^7*v^6*w^6+u^7*v^8*w^4-u^7*v^9*w^3+2*u^8*v^4*w^7+
u^8*v^5*w^6+u^8*v^6*w^5+2*u^8*v^7*w^4-u^9*v^2*w^8+u^9*v^4*w^6+u^9*v^6*w^4-
u^9*v^8*w^2-v^9*w^10-u^10*v^2*w^7-u^10*v^7*w^2-v^10*w^9+u^13*v^2*w^4+
u^13*v^4*w^2,u*v*w^2+u*v^2*w+2*u*v^3+2*u*w^3+2*v*w^3+3*u^2*v*w+2*u^2*v^2+
2*u^2*w^2+u^3*v+u^3*w+2*v^3*w+v^4+w^4,0,14*u^2*v^2+14*u^2*w^2+12*v^2*w^2+
4*u^4+8*v^4+8*w^4,8*u^2*v^2*w^3+8*u^2*v^3*w^2+8*u^3*v^2*w^2-4*u^3*v^4-
4*u^3*w^4-7*v^3*w^4-4*u^4*v^3-4*u^4*w^3-7*v^4*w^3+2*u^7+2*v^7+2*w^7,-
3*u*v*w^2-3*u*v^2*w+u*v^3+u*w^3-2*u^2*v*w+u^3*v+u^3*w+v^4+w^4,-4*u*v*w^3+
2*u*v^2*w^2-4*u*v^3*w-u*v^4-u*w^4-2*v*w^4+3*u^2*v*w^2+3*u^2*v^2*w+2*u^2*v^3+
2*u^2*w^3+v^2*w^3-2*u^3*v*w+v^3*w^2-2*v^4*w+v^5+w^5,0,-u^2*v^2*w^4-
u^2*v^4*w^2-v^4*w^4,0,u^4*v^8*w^14+u^4*v^9*w^13+u^4*v^13*w^9+u^4*v^14*w^8+
u^6*v^6*w^14+u^6*v^7*w^13+u^6*v^13*w^7+u^6*v^14*w^6+u^7*v^6*w^13+u^7*v^13*w^6-
u^8*v^9*w^9-u^9*v^8*w^9-u^9*v^9*w^8+u^13*v^4*w^9+u^13*v^9*w^4+v^13*w^13+
u^14*v^4*w^8+u^14*v^8*w^4,-3*u*v*w^3-3*u*v^3*w+u^2*v^3+u^2*w^3-2*u^3*v*w+
u^3*v^2+u^3*w^2+v^5+w^5,u^6*v^9*w^9+u^7*v^8*w^9+u^7*v^9*w^8,u^5*v^5*w^5,
u^30*v^39*w^39+u^32*v^37*w^39+u^32*v^39*w^37,u^2*v^4*w^12-2*u^2*v^7*w^9-
2*u^2*v^9*w^7+u^2*v^12*w^4+u^3*v^3*w^12-2*u^3*v^6*w^9-2*u^3*v^9*w^6+
u^3*v^12*w^3+3*u^4*v^6*w^8+2*u^4*v^7*w^7+3*u^4*v^8*w^6+3*u^5*v^5*w^8+
3*u^5*v^8*w^5-2*u^6*v^3*w^9-3*u^6*v^6*w^6-2*u^6*v^9*w^3+2*u^7*v^4*w^7+
2*u^7*v^7*w^4+3*u^8*v^4*w^6+3*u^8*v^6*w^4-2*u^9*v^2*w^7-2*u^9*v^7*w^2-
2*v^9*w^9+u^12*v^2*w^4+u^12*v^4*w^2,2*u*v^2*w^3+2*u*v^3*w^2+3*u^2*v^2*w^2+
2*u^3*v*w^2+2*u^3*v^2*w-2*v^3*w^3,0,-u*v^2*w^3-u*v^3*w^2-2*u*v^5-2*u*w^5-
2*v*w^5-3*u^2*v*w^3+8*u^2*v^2*w^2-3*u^2*v^3*w+4*u^2*v^4+4*u^2*w^4+3*v^2*w^4-
u^3*v*w^2-u^3*v^2*w-3*u^3*v^3-3*u^3*w^3-4*v^3*w^3+3*u^4*v^2+3*u^4*w^2+
3*v^4*w^2-u^5*v-u^5*w-2*v^5*w+v^6+w^6,0,24*u^2*v^2*w^2-8*u^3*v^3-
8*u^3*w^3-14*v^3*w^3+2*u^6+2*v^6+2*w^6,-2*u^30*v^35*w^38-2*u^30*v^38*w^35+
8*u^31*v^36*w^36-2*u^33*v^35*w^35,u^4*v^8*w^19-u^4*v^11*w^16-u^4*v^12*w^15-
u^4*v^15*w^12-u^4*v^16*w^11+u^4*v^19*w^8+u^6*v^6*w^19-u^6*v^9*w^16+
u^6*v^11*w^14+u^6*v^14*w^11-u^6*v^16*w^9+u^6*v^19*w^6+u^7*v^10*w^14+
u^7*v^14*w^10+u^8*v^8*w^15+u^8*v^9*w^14+u^8*v^11*w^12+u^8*v^12*w^11+
u^8*v^14*w^9+u^8*v^15*w^8-u^9*v^6*w^16+u^9*v^8*w^14+u^9*v^14*w^8-u^9*v^16*w^6-
u^10*v^6*w^15-u^10*v^10*w^11-u^10*v^11*w^10-u^10*v^15*w^6+u^11*v^8*w^12-
u^11*v^10*w^10+u^11*v^12*w^8+u^12*v^8*w^11+u^12*v^11*w^8+u^14*v^6*w^11+
u^14*v^7*w^10+u^14*v^10*w^7+u^14*v^11*w^6-u^15*v^4*w^12+u^15*v^6*w^10+
u^15*v^10*w^6-u^15*v^12*w^4-v^15*w^16-u^16*v^4*w^11-u^16*v^11*w^4-v^16*w^15+
u^19*v^4*w^8+u^19*v^8*w^4,0,0,-6*u*v^3*w^3+u*v^6+u*w^6+9*u^2*v^2*w^3+
9*u^2*v^3*w^2-2*u^3*v*w^3+6*u^3*v^2*w^2-2*u^3*v^3*w-4*u^3*v^4-4*u^3*w^4-
4*v^3*w^4-2*u^4*v^3-2*u^4*w^3-4*v^4*w^3+u^6*v+u^6*w+v^7+w^7,u^6*v^11*w^11+
u^8*v^9*w^11+u^8*v^11*w^9,-u^6*v^7*w^12-u^6*v^12*w^7+3*u^7*v^8*w^10+
3*u^7*v^10*w^8-u^8*v^7*w^10-u^8*v^10*w^7-u^9*v^7*w^9+2*u^9*v^8*w^8-
u^9*v^9*w^7,u^18*v^25*w^25+u^20*v^23*w^25+u^20*v^25*w^23,u^2*v^4*w^8+
2*u^2*v^5*w^7+2*u^2*v^6*w^6+2*u^2*v^7*w^5+u^2*v^8*w^4+2*u^3*v^3*w^8+
4*u^3*v^4*w^7+4*u^3*v^7*w^4+2*u^3*v^8*w^3+2*u^4*v^3*w^7+u^4*v^4*w^6-
2*u^4*v^5*w^5+u^4*v^6*w^4+2*u^4*v^7*w^3-2*u^5*v^4*w^5-2*u^5*v^5*w^4+
u^6*v^2*w^6-u^6*v^4*w^4+u^6*v^6*w^2+v^6*w^8+2*u^7*v^2*w^5+2*u^7*v^3*w^4+
2*u^7*v^4*w^3+2*u^7*v^5*w^2+u^8*v^2*w^4+u^8*v^4*w^2+v^8*w^6,0,0,-
2*u^6*v^7*w^10-2*u^6*v^10*w^7+8*u^7*v^8*w^8-2*u^9*v^7*w^7,u^2*v^4*w^8+
u^2*v^5*w^7+u^2*v^7*w^5+u^2*v^8*w^4+u^3*v^3*w^8+u^3*v^4*w^7+u^3*v^7*w^4+
u^3*v^8*w^3+u^4*v^3*w^7-u^4*v^5*w^5+u^4*v^7*w^3-u^5*v^4*w^5-u^5*v^5*w^4+
u^7*v^2*w^5+u^7*v^5*w^2+v^7*w^7+u^8*v^2*w^4+u^8*v^4*w^2,-u^30*v^35*w^39-
u^30*v^39*w^35-u^31*v^35*w^38+3*u^31*v^36*w^37+3*u^31*v^37*w^36-
u^31*v^38*w^35+2*u^32*v^36*w^36-u^33*v^35*w^36-u^33*v^36*w^35,u^30*v^37*w^37+
u^31*v^36*w^37+u^31*v^37*w^36,9*u^2*v^2*w^4-6*u^2*v^3*w^3+9*u^2*v^4*w^2+
u^2*v^6+u^2*w^6-2*u^3*v^2*w^3-2*u^3*v^3*w^2-4*u^3*v^5-4*u^3*w^5-4*v^3*w^5+
6*u^4*v^2*w^2-2*u^5*v^3-2*u^5*w^3-4*v^5*w^3+u^6*v^2+u^6*w^2+v^8+w^8,-
21*u^30*v^35*w^36-21*u^30*v^36*w^35-18*u^31*v^35*w^35,-u^6*v^7*w^11-
u^6*v^11*w^7-u^7*v^7*w^10+3*u^7*v^8*w^9+3*u^7*v^9*w^8-u^7*v^10*w^7+
2*u^8*v^8*w^8-u^9*v^7*w^8-u^9*v^8*w^7,-u^24*v^30*w^30-u^25*v^29*w^30-
u^25*v^30*w^29,0,-u^30*v^35*w^40-u^30*v^40*w^35+3*u^31*v^36*w^38+
3*u^31*v^38*w^36-u^32*v^35*w^38-u^32*v^38*w^35-u^33*v^35*w^37+
2*u^33*v^36*w^36-u^33*v^37*w^35,-8*u^6*v^7*w^11-12*u^6*v^9*w^9-8*u^6*v^11*w^7-
14*u^8*v^7*w^9-14*u^8*v^9*w^7-4*u^10*v^7*w^7,-21*u^6*v^7*w^9-21*u^6*v^9*w^7-
18*u^8*v^7*w^7,u^18*v^23*w^23+u^19*v^22*w^23+u^19*v^23*w^22,-8*u^30*v^35*w^38-
6*u^30*v^36*w^37-6*u^30*v^37*w^36-8*u^30*v^38*w^35-7*u^31*v^35*w^37-
7*u^31*v^37*w^35-7*u^32*v^35*w^36-7*u^32*v^36*w^35-4*u^33*v^35*w^35,
3*u^2*v^4*w^7+2*u^2*v^5*w^6+2*u^2*v^6*w^5+3*u^2*v^7*w^4+4*u^3*v^3*w^7+
3*u^3*v^4*w^6+3*u^3*v^6*w^4+4*u^3*v^7*w^3+2*u^4*v^3*w^6-3*u^4*v^4*w^5-
3*u^4*v^5*w^4+2*u^4*v^6*w^3-3*u^5*v^4*w^4+2*u^6*v^2*w^5+u^6*v^3*w^4+
u^6*v^4*w^3+2*u^6*v^5*w^2+v^6*w^7+3*u^7*v^2*w^4+3*u^7*v^4*w^2+v^7*w^6,
0,-u^24*v^32*w^32-u^26*v^30*w^32-u^26*v^32*w^30,0,-8*u^6*v^7*w^10-
6*u^6*v^8*w^9-6*u^6*v^9*w^8-8*u^6*v^10*w^7-7*u^7*v^7*w^9-7*u^7*v^9*w^7-
7*u^8*v^7*w^8-7*u^8*v^8*w^7-4*u^9*v^7*w^7,0,u^12*v^14*w^18+
u^12*v^18*w^14+u^13*v^14*w^17-3*u^13*v^15*w^16-3*u^13*v^16*w^15+
u^13*v^17*w^14-2*u^14*v^15*w^15+u^15*v^14*w^15+u^15*v^15*w^14,-u^12*v^16*w^16-
u^13*v^15*w^16-u^13*v^16*w^15,6*u^2*v^4*w^6+6*u^2*v^6*w^4+8*u^3*v^3*w^6+
8*u^3*v^6*w^3-9*u^4*v^4*w^4+6*u^6*v^2*w^4+6*u^6*v^4*w^2+2*v^6*w^6,-
u^6*v^7*w^14+4*u^6*v^10*w^11+4*u^6*v^11*w^10-u^6*v^14*w^7-u^7*v^7*w^13+
6*u^7*v^10*w^10-u^7*v^13*w^7-9*u^8*v^9*w^10-9*u^8*v^10*w^9+4*u^9*v^7*w^11+
2*u^9*v^8*w^10-6*u^9*v^9*w^9+2*u^9*v^10*w^8+4*u^9*v^11*w^7+2*u^10*v^7*w^10+
2*u^10*v^10*w^7-u^12*v^7*w^8-u^12*v^8*w^7,0,u^12*v^14*w^22-2*u^12*v^17*w^19-
4*u^12*v^18*w^18-2*u^12*v^19*w^17+u^12*v^22*w^14+u^13*v^14*w^21-
3*u^13*v^17*w^18-3*u^13*v^18*w^17+u^13*v^21*w^14+3*u^14*v^16*w^18+
6*u^14*v^17*w^17+3*u^14*v^18*w^16-2*u^15*v^14*w^19-u^15*v^15*w^18+
5*u^15*v^16*w^17+5*u^15*v^17*w^16-u^15*v^18*w^15-2*u^15*v^19*w^14-
3*u^16*v^14*w^18-u^16*v^15*w^17+2*u^16*v^16*w^16-u^16*v^17*w^15-
3*u^16*v^18*w^14-u^17*v^14*w^17-u^17*v^17*w^14+u^19*v^14*w^15+u^19*v^15*w^14,
6*u^4*v^8*w^12+6*u^4*v^12*w^8+8*u^6*v^6*w^12+8*u^6*v^12*w^6-9*u^8*v^8*w^8+
6*u^12*v^4*w^8+6*u^12*v^8*w^4+2*v^12*w^12,-8*u^18*v^21*w^24-6*u^18*v^22*w^23-
6*u^18*v^23*w^22-8*u^18*v^24*w^21-7*u^19*v^21*w^23-7*u^19*v^23*w^21-
7*u^20*v^21*w^22-7*u^20*v^22*w^21-4*u^21*v^21*w^21,-u^6*v^7*w^11-
2*u^6*v^8*w^10-2*u^6*v^10*w^8-u^6*v^11*w^7-2*u^7*v^7*w^10-u^7*v^8*w^9-
u^7*v^9*w^8-2*u^7*v^10*w^7-2*u^8*v^7*w^9-3*u^8*v^8*w^8-2*u^8*v^9*w^7-
u^9*v^7*w^8-u^9*v^8*w^7,-u^12*v^18*w^18-u^14*v^16*w^18-u^14*v^18*w^16,-
u^6*v^7*w^15+4*u^6*v^10*w^12+4*u^6*v^12*w^10-u^6*v^15*w^7-u^8*v^7*w^13-
9*u^8*v^9*w^11+6*u^8*v^10*w^10-9*u^8*v^11*w^9-u^8*v^13*w^7+4*u^9*v^7*w^12+
2*u^9*v^9*w^10+2*u^9*v^10*w^9+4*u^9*v^12*w^7-6*u^10*v^9*w^9+2*u^11*v^7*w^10+
2*u^11*v^10*w^7-u^12*v^7*w^9-u^12*v^9*w^7,-u^18*v^21*w^25-u^18*v^25*w^21-
u^19*v^21*w^24+3*u^19*v^22*w^23+3*u^19*v^23*w^22-u^19*v^24*w^21+
2*u^20*v^22*w^22-u^21*v^21*w^22-u^21*v^22*w^21,2*u^12*v^14*w^17+
2*u^12*v^17*w^14-8*u^13*v^15*w^15+2*u^15*v^14*w^14,u^24*v^28*w^33+
u^24*v^33*w^28-3*u^25*v^29*w^31-3*u^25*v^31*w^29+u^26*v^28*w^31+
u^26*v^31*w^28+u^27*v^28*w^30-2*u^27*v^29*w^29+u^27*v^30*w^28,
2*u^24*v^28*w^31+2*u^24*v^31*w^28-8*u^25*v^29*w^29+2*u^27*v^28*w^28,-
u^18*v^21*w^26-u^18*v^26*w^21+3*u^19*v^22*w^24+3*u^19*v^24*w^22-
u^20*v^21*w^24-u^20*v^24*w^21-u^21*v^21*w^23+2*u^21*v^22*w^22-u^21*v^23*w^21,
2*u^6*v^10*w^10-2*u^7*v^9*w^10-2*u^7*v^10*w^9-3*u^8*v^9*w^9-2*u^9*v^8*w^9-
2*u^9*v^9*w^8,u^12*v^14*w^21-4*u^12*v^17*w^18-4*u^12*v^18*w^17+u^12*v^21*w^14+
u^13*v^14*w^20-6*u^13*v^17*w^17+u^13*v^20*w^14+9*u^14*v^16*w^17+
9*u^14*v^17*w^16-4*u^15*v^14*w^18-2*u^15*v^15*w^17+6*u^15*v^16*w^16-
2*u^15*v^17*w^15-4*u^15*v^18*w^14-2*u^16*v^14*w^17-2*u^16*v^17*w^14+
u^18*v^14*w^15+u^18*v^15*w^14,-2*u^6*v^7*w^13+14*u^6*v^10*w^10-2*u^6*v^13*w^7-
24*u^8*v^9*w^9+8*u^9*v^7*w^10+8*u^9*v^10*w^7-2*u^12*v^7*w^7,-u^6*v^7*w^10-
2*u^6*v^8*w^9-2*u^6*v^9*w^8-u^6*v^10*w^7-3*u^7*v^7*w^9-5*u^7*v^8*w^8-
3*u^7*v^9*w^7-2*u^8*v^7*w^8-2*u^8*v^8*w^7,2*u^12*v^14*w^16+7*u^12*v^15*w^15+
2*u^12*v^16*w^14+4*u^13*v^14*w^15+4*u^13*v^15*w^14+2*u^14*v^14*w^14,0,
21*u^24*v^28*w^30+21*u^24*v^30*w^28+18*u^26*v^28*w^28,-2*u^6*v^7*w^9-
7*u^6*v^8*w^8-2*u^6*v^9*w^7-4*u^7*v^7*w^8-4*u^7*v^8*w^7-2*u^8*v^7*w^7,
2*u^12*v^14*w^20-14*u^12*v^17*w^17+2*u^12*v^20*w^14+24*u^14*v^16*w^16-
8*u^15*v^14*w^17-8*u^15*v^17*w^14+2*u^18*v^14*w^14,-8*u^6*v^7*w^9-
12*u^6*v^8*w^8-8*u^6*v^9*w^7-14*u^7*v^7*w^8-14*u^7*v^8*w^7-4*u^8*v^7*w^7,
u^12*v^14*w^17+2*u^12*v^15*w^16+2*u^12*v^16*w^15+u^12*v^17*w^14+
3*u^13*v^14*w^16+5*u^13*v^15*w^15+3*u^13*v^16*w^14+2*u^14*v^14*w^15+
2*u^14*v^15*w^14,-2*u^18*v^21*w^24-2*u^18*v^24*w^21+8*u^19*v^22*w^22-
2*u^21*v^21*w^21,-21*u^30*v^35*w^37-21*u^30*v^37*w^35-18*u^32*v^35*w^35,
8*u^12*v^14*w^16+12*u^12*v^15*w^15+8*u^12*v^16*w^14+14*u^13*v^14*w^15+
14*u^13*v^15*w^14+4*u^14*v^14*w^14,-21*u^6*v^7*w^8-21*u^6*v^8*w^7-
18*u^7*v^7*w^7,-60*u^6*v^7*w^7,-8*u^18*v^21*w^23-12*u^18*v^22*w^22-
8*u^18*v^23*w^21-14*u^19*v^21*w^22-14*u^19*v^22*w^21-4*u^20*v^21*w^21,-
21*u^18*v^21*w^23-21*u^18*v^23*w^21-18*u^20*v^21*w^21,21*u^12*v^14*w^15+
21*u^12*v^15*w^14+18*u^13*v^14*w^14,-21*u^18*v^21*w^22-21*u^18*v^22*w^21-
18*u^19*v^21*w^21,-60*u^30*v^35*w^35,-60*u^18*v^21*w^21,60*u^12*v^14*w^14,
60*u^24*v^28*w^28]
  f60b(u,v,w)=[60,24*u+18*v+18*w,6*u*v+6*u*w+4*v*w+5*u^2+v^2+w^2,
16*u*v+16*u*w+10*v*w+8*u^2+5*v^2+5*w^2,24*u^2+18*v^2+18*w^2,-7*u*v*w+5*u^3+v^3+w^3,
6*u*v*w+3*u*v^2+3*u*w^2+v*w^2+4*u^2*v+4*u^2*w+v^2*w+u^3,u*v*w+u^2*v+u^2*w,
8*u*v^2+8*u*w^2+5*v*w^2+8*u^2*v+8*u^2*w+5*v^2*w+8*u^3+5*v^3+5*w^3,-u*v*w^2-
u*v^2*w-u^2*v*w,u^3*v^3*w^13-u^3*v^6*w^10-u^3*v^7*w^9-u^3*v^9*w^7-
u^3*v^10*w^6+u^3*v^13*w^3+u^4*v^7*w^8+u^4*v^8*w^7+u^5*v^5*w^9+u^5*v^6*w^8+
u^5*v^8*w^6+u^5*v^9*w^5-u^6*v^3*w^10+u^6*v^5*w^8-u^6*v^6*w^7-u^6*v^7*w^6+
u^6*v^8*w^5-u^6*v^10*w^3-u^7*v^3*w^9+u^7*v^4*w^8-u^7*v^6*w^6+u^7*v^8*w^4-
u^7*v^9*w^3+2*u^8*v^4*w^7+2*u^8*v^5*w^6+2*u^8*v^6*w^5+2*u^8*v^7*w^4-
u^9*v^2*w^8-u^9*v^3*w^7+u^9*v^4*w^6+u^9*v^5*w^5+u^9*v^6*w^4-u^9*v^7*w^3-
u^9*v^8*w^2-u^10*v^2*w^7-u^10*v^3*w^6-u^10*v^6*w^3-u^10*v^7*w^2-u^11*v^8-
u^11*w^8-u^12*v^7-u^12*w^7+u^13*v^2*w^4+u^13*v^3*w^3+u^13*v^4*w^2+u^15*v^4+
u^15*w^4,2*u*v*w^2+2*u*v^2*w+2*u*v^3+2*u*w^3+v*w^3+2*u^2*v*w+3*u^2*v^2+
3*u^2*w^2+2*u^3*v+2*u^3*w+v^3*w+u^4,0,16*u^2*v^2+16*u^2*w^2+10*v^2*w^2+8*u^4+
5*v^4+5*w^4,7*u^2*v^2*w^3+7*u^2*v^3*w^2+7*u^3*v^2*w^2-6*u^3*v^4-6*u^3*w^4-
4*v^3*w^4-6*u^4*v^3-6*u^4*w^3-4*v^4*w^3+5*u^7+v^7+w^7,-2*u*v*w^2-2*u*v^2*w+
u*v^3+u*w^3-3*u^2*v*w+2*u^3*v+2*u^3*w+u^4,-4*u*v*w^3+3*u*v^2*w^2-4*u*v^3*w-
u*v^4-u*w^4-v*w^4+2*u^2*v*w^2+2*u^2*v^2*w+v^2*w^3-4*u^3*v*w+u^3*v^2+u^3*w^2+
v^3*w^2-v^4*w+u^5,0,-u^2*v^2*w^4-u^2*v^4*w^2-u^4*v^2*w^2,0,u^6*v^6*w^14+
u^6*v^7*w^13+u^6*v^13*w^7+u^6*v^14*w^6+u^7*v^6*w^13+u^7*v^13*w^6-u^8*v^9*w^9-
u^9*v^8*w^9-u^9*v^9*w^8+u^13*v^4*w^9+u^13*v^6*w^7+u^13*v^7*w^6+u^13*v^9*w^4+
u^14*v^4*w^8+u^14*v^6*w^6+u^14*v^8*w^4+u^17*v^9+u^17*w^9+u^18*v^8+u^18*w^8,-
2*u*v*w^3-2*u*v^3*w+u^2*v^3+u^2*w^3-3*u^3*v*w+2*u^3*v^2+2*u^3*w^2+u^5,-
u^9*v^7*w^8-u^9*v^8*w^7-u^10*v^7*w^7,u^5*v^5*w^5+u^10*v^5+u^10*w^5,-
u^42*v^32*w^34-u^42*v^34*w^32-u^44*v^32*w^32,u^3*v^3*w^12-2*u^3*v^6*w^9-
2*u^3*v^9*w^6+u^3*v^12*w^3+2*u^4*v^7*w^7+3*u^5*v^5*w^8+3*u^5*v^8*w^5-
2*u^6*v^3*w^9-3*u^6*v^6*w^6-2*u^6*v^9*w^3+2*u^7*v^4*w^7+2*u^7*v^7*w^4+
3*u^8*v^4*w^6+3*u^8*v^5*w^5+3*u^8*v^6*w^4-2*u^9*v^2*w^7-2*u^9*v^3*w^6-
2*u^9*v^6*w^3-2*u^9*v^7*w^2-2*u^11*v^7-2*u^11*w^7+u^12*v^2*w^4+u^12*v^3*w^3+
u^12*v^4*w^2+u^14*v^4+u^14*w^4,3*u^2*v^2*w^2+2*u^3*v*w^2+2*u^3*v^2*w-u^4*v^2-
u^4*w^2,0,-2*u*v^2*w^3-2*u*v^3*w^2-2*u*v^5-2*u*w^5-v*w^5-2*u^2*v*w^3+
7*u^2*v^2*w^2-2*u^2*v^3*w+3*u^2*v^4+3*u^2*w^4+2*v^2*w^4-2*u^3*v*w^2-
2*u^3*v^2*w-4*u^3*v^3-4*u^3*w^3-2*v^3*w^3+5*u^4*v^2+5*u^4*w^2+2*v^4*w^2-
2*u^5*v-2*u^5*w-v^5*w+u^6,
u^4*v^3*w^5+u^4*v^5*w^3+2*u^6*v^3*w^3,21*u^2*v^2*w^2-12*u^3*v^3-12*u^3*w^3-
8*v^3*w^3+5*u^6+v^6+w^6,u^40*v^30*w^33+u^40*v^33*w^30-7*u^41*v^31*w^31+
5*u^43*v^30*w^30,u^6*v^6*w^19-u^6*v^9*w^16-u^6*v^10*w^15-u^6*v^15*w^10-
u^6*v^16*w^9+u^6*v^19*w^6+u^8*v^8*w^15+u^8*v^9*w^14+u^8*v^11*w^12+
u^8*v^12*w^11+u^8*v^14*w^9+u^8*v^15*w^8-u^9*v^6*w^16+u^9*v^8*w^14+
u^9*v^14*w^8-u^9*v^16*w^6-u^10*v^6*w^15-u^10*v^10*w^11-u^10*v^11*w^10-
u^10*v^15*w^6+u^11*v^8*w^12-u^11*v^10*w^10+u^11*v^12*w^8+u^12*v^8*w^11+
u^12*v^11*w^8+u^14*v^6*w^11+u^14*v^7*w^10+u^14*v^8*w^9+u^14*v^9*w^8+
u^14*v^10*w^7+u^14*v^11*w^6-u^15*v^4*w^12+u^15*v^8*w^8-u^15*v^12*w^4-
u^16*v^4*w^11-u^16*v^6*w^9-u^16*v^9*w^6-u^16*v^11*w^4+u^19*v^4*w^8+
u^19*v^6*w^6+u^19*v^8*w^4-u^19*v^12-u^19*w^12-u^20*v^11-u^20*w^11+u^23*v^8+
u^23*w^8,0,0,-4*u*v^3*w^3+u*v^6+u*w^6+6*u^2*v^2*w^3+6*u^2*v^3*w^2-
4*u^3*v*w^3+9*u^3*v^2*w^2-4*u^3*v^3*w-4*u^3*v^4-4*u^3*w^4-2*v^3*w^4-4*u^4*v^3-
4*u^4*w^3-2*v^4*w^3+2*u^6*v+2*u^6*w+u^7,-u^10*v^8*w^10-u^10*v^10*w^8-
u^12*v^8*w^8,-2*u^9*v^7*w^9-2*u^9*v^9*w^7+u^10*v^6*w^9+u^10*v^9*w^6+
2*u^11*v^6*w^8-3*u^11*v^7*w^7+2*u^11*v^8*w^6+u^13*v^6*w^6,-u^26*v^20*w^22-
u^26*v^22*w^20-u^28*v^20*w^20,2*u^3*v^3*w^8+2*u^3*v^4*w^7+2*u^3*v^7*w^4+
2*u^3*v^8*w^3+2*u^4*v^3*w^7+u^4*v^4*w^6-2*u^4*v^5*w^5+u^4*v^6*w^4+
2*u^4*v^7*w^3-2*u^5*v^4*w^5-2*u^5*v^5*w^4+u^6*v^2*w^6+u^6*v^4*w^4+u^6*v^6*w^2+
2*u^7*v^2*w^5+4*u^7*v^3*w^4+4*u^7*v^4*w^3+2*u^7*v^5*w^2+u^8*v^2*w^4+
2*u^8*v^3*w^3+u^8*v^4*w^2+2*u^9*v^5+2*u^9*w^5+u^10*v^4+u^10*w^4,
u^4*v^3*w^3*(e*(u+v+w)+u),0,
u^8*v^6*w^9+u^8*v^9*w^6-7*u^9*v^7*w^7+5*u^11*v^6*w^6,u^3*v^3*w^8+u^3*v^4*w^7+
u^3*v^7*w^4+u^3*v^8*w^3+u^4*v^3*w^7-u^4*v^5*w^5+u^4*v^7*w^3-u^5*v^4*w^5-
u^5*v^5*w^4+u^7*v^2*w^5+u^7*v^3*w^4+u^7*v^4*w^3+u^7*v^5*w^2+u^8*v^2*w^4+
u^8*v^3*w^3+u^8*v^4*w^2+u^9*v^5+u^9*w^5+u^10*v^4+u^10*w^4,u^41*v^30*w^33-
2*u^41*v^31*w^32-2*u^41*v^32*w^31+u^41*v^33*w^30-3*u^42*v^31*w^31+
2*u^43*v^30*w^31+2*u^43*v^31*w^30+u^44*v^30*w^30,-u^41*v^31*w^32-
u^41*v^32*w^31-u^42*v^31*w^31,6*u^2*v^2*w^4-4*u^2*v^3*w^3+6*u^2*v^4*w^2+
u^2*v^6+u^2*w^6-4*u^3*v^2*w^3-4*u^3*v^3*w^2-4*u^3*v^5-4*u^3*w^5-2*v^3*w^5+
9*u^4*v^2*w^2-4*u^5*v^3-4*u^5*w^3-2*v^5*w^3+2*u^6*v^2+2*u^6*w^2+u^8,
18*u^40*v^30*w^31+18*u^40*v^31*w^30+24*u^41*v^30*w^30,u^9*v^6*w^9-
2*u^9*v^7*w^8-2*u^9*v^8*w^7+u^9*v^9*w^6-3*u^10*v^7*w^7+2*u^11*v^6*w^7+
2*u^11*v^7*w^6+u^12*v^6*w^6,-u^33*v^25*w^26-u^33*v^26*w^25-u^34*v^25*w^25,0,-
2*u^41*v^31*w^33-2*u^41*v^33*w^31+u^42*v^30*w^33+u^42*v^33*w^30+
2*u^43*v^30*w^32-3*u^43*v^31*w^31+2*u^43*v^32*w^30+u^45*v^30*w^30,
5*u^8*v^6*w^10+10*u^8*v^8*w^8+5*u^8*v^10*w^6+16*u^10*v^6*w^8+16*u^10*v^8*w^6+
8*u^12*v^6*w^6,18*u^8*v^6*w^8+18*u^8*v^8*w^6+24*u^10*v^6*w^6,-u^25*v^19*w^20-
u^25*v^20*w^19-u^26*v^19*w^19,5*u^40*v^30*w^33+5*u^40*v^31*w^32+
5*u^40*v^32*w^31+5*u^40*v^33*w^30+8*u^41*v^30*w^32+8*u^41*v^32*w^30+
8*u^42*v^30*w^31+8*u^42*v^31*w^30+8*u^43*v^30*w^30,4*u^3*v^3*w^7+
2*u^3*v^4*w^6+2*u^3*v^6*w^4+4*u^3*v^7*w^3+2*u^4*v^3*w^6-3*u^4*v^4*w^5-
3*u^4*v^5*w^4+2*u^4*v^6*w^3-3*u^5*v^4*w^4+2*u^6*v^2*w^5+3*u^6*v^3*w^4+
3*u^6*v^4*w^3+2*u^6*v^5*w^2+3*u^7*v^2*w^4+4*u^7*v^3*w^3+3*u^7*v^4*w^2+u^8*v^5+
u^8*w^5+2*u^9*v^4+2*u^9*w^4,
u^12*v^9*w^9*(e*(u+v+w)+u),
-u^34*v^26*w^28-u^34*v^28*w^26-
u^36*v^26*w^26,4*u^4*v^3*w^3,5*u^8*v^6*w^9+5*u^8*v^7*w^8+5*u^8*v^8*w^7+
5*u^8*v^9*w^6+8*u^9*v^6*w^8+8*u^9*v^8*w^6+8*u^10*v^6*w^7+8*u^10*v^7*w^6+
8*u^11*v^6*w^6,4*u^20*v^15*w^15,u^17*v^12*w^15-2*u^17*v^13*w^14-2*u^17*v^14*w^13+
u^17*v^15*w^12-3*u^18*v^13*w^13+2*u^19*v^12*w^13+2*u^19*v^13*w^12+
u^20*v^12*w^12,-u^17*v^13*w^14-u^17*v^14*w^13-u^18*v^13*w^13,8*u^3*v^3*w^6+
8*u^3*v^6*w^3-9*u^4*v^4*w^4+6*u^6*v^2*w^4+8*u^6*v^3*w^3+6*u^6*v^4*w^2+
3*u^8*v^4+3*u^8*w^4,-2*u^8*v^9*w^10-2*u^8*v^10*w^9+u^9*v^6*w^12-4*u^9*v^9*w^9+
u^9*v^12*w^6+6*u^10*v^8*w^9+6*u^10*v^9*w^8-4*u^11*v^6*w^10-4*u^11*v^7*w^9+
9*u^11*v^8*w^8-4*u^11*v^9*w^7-4*u^11*v^10*w^6-4*u^12*v^6*w^9-4*u^12*v^9*w^6+
2*u^14*v^6*w^7+2*u^14*v^7*w^6+u^15*v^6*w^6,0,-u^16*v^15*w^17-2*u^16*v^16*w^16-
u^16*v^17*w^15+u^17*v^12*w^19-2*u^17*v^15*w^16-2*u^17*v^16*w^15+
u^17*v^19*w^12+2*u^18*v^14*w^16+4*u^18*v^15*w^15+2*u^18*v^16*w^14-
2*u^19*v^12*w^17-2*u^19*v^13*w^16+5*u^19*v^14*w^15+5*u^19*v^15*w^14-
2*u^19*v^16*w^13-2*u^19*v^17*w^12-4*u^20*v^12*w^16-2*u^20*v^13*w^15+
3*u^20*v^14*w^14-2*u^20*v^15*w^13-4*u^20*v^16*w^12-2*u^21*v^12*w^15-
2*u^21*v^15*w^12+2*u^23*v^12*w^13+2*u^23*v^13*w^12+u^24*v^12*w^12,
8*u^6*v^6*w^12+8*u^6*v^12*w^6-9*u^8*v^8*w^8+6*u^12*v^4*w^8+8*u^12*v^6*w^6+
6*u^12*v^8*w^4+3*u^16*v^8+3*u^16*w^8,5*u^24*v^18*w^21+5*u^24*v^19*w^20+
5*u^24*v^20*w^19+5*u^24*v^21*w^18+8*u^25*v^18*w^20+8*u^25*v^20*w^18+
8*u^26*v^18*w^19+8*u^26*v^19*w^18+8*u^27*v^18*w^18,u^8*v^7*w^9+u^8*v^9*w^7+
2*u^9*v^6*w^9+2*u^9*v^7*w^8+2*u^9*v^8*w^7+2*u^9*v^9*w^6+3*u^10*v^6*w^8+
2*u^10*v^7*w^7+3*u^10*v^8*w^6+2*u^11*v^6*w^7+2*u^11*v^7*w^6+u^12*v^6*w^6,-
u^18*v^14*w^16-u^18*v^16*w^14-u^20*v^14*w^14,-2*u^8*v^9*w^11-2*u^8*v^11*w^9+
u^10*v^6*w^12+6*u^10*v^8*w^10-4*u^10*v^9*w^9+6*u^10*v^10*w^8+u^10*v^12*w^6-
4*u^11*v^6*w^11-4*u^11*v^8*w^9-4*u^11*v^9*w^8-4*u^11*v^11*w^6+9*u^12*v^8*w^8-
4*u^13*v^6*w^9-4*u^13*v^9*w^6+2*u^14*v^6*w^8+2*u^14*v^8*w^6+u^16*v^6*w^6,
u^25*v^18*w^21-2*u^25*v^19*w^20-2*u^25*v^20*w^19+u^25*v^21*w^18-
3*u^26*v^19*w^19+2*u^27*v^18*w^19+2*u^27*v^19*w^18+u^28*v^18*w^18,
u^16*v^12*w^15+u^16*v^15*w^12-7*u^17*v^13*w^13+5*u^19*v^12*w^12,-
2*u^33*v^25*w^27-2*u^33*v^27*w^25+u^34*v^24*w^27+u^34*v^27*w^24+
2*u^35*v^24*w^26-3*u^35*v^25*w^25+2*u^35*v^26*w^24+u^37*v^24*w^24,
u^32*v^24*w^27+u^32*v^27*w^24-7*u^33*v^25*w^25+5*u^35*v^24*w^24,-
2*u^25*v^19*w^21-2*u^25*v^21*w^19+u^26*v^18*w^21+u^26*v^21*w^18+
2*u^27*v^18*w^20-3*u^27*v^19*w^19+2*u^27*v^20*w^18+u^29*v^18*w^18,
3*u^10*v^8*w^8+2*u^11*v^7*w^8+2*u^11*v^8*w^7-u^12*v^6*w^8-u^12*v^8*w^6,-
2*u^16*v^15*w^16-2*u^16*v^16*w^15+u^17*v^12*w^18-4*u^17*v^15*w^15+
u^17*v^18*w^12+6*u^18*v^14*w^15+6*u^18*v^15*w^14-4*u^19*v^12*w^16-
4*u^19*v^13*w^15+9*u^19*v^14*w^14-4*u^19*v^15*w^13-4*u^19*v^16*w^12-
4*u^20*v^12*w^15-4*u^20*v^15*w^12+2*u^22*v^12*w^13+2*u^22*v^13*w^12+
u^23*v^12*w^12,u^8*v^6*w^12-8*u^8*v^9*w^9+u^8*v^12*w^6+21*u^10*v^8*w^8-
12*u^11*v^6*w^9-12*u^11*v^9*w^6+5*u^14*v^6*w^6,u^8*v^7*w^8+u^8*v^8*w^7+
3*u^9*v^6*w^8+6*u^9*v^7*w^7+3*u^9*v^8*w^6+4*u^10*v^6*w^7+4*u^10*v^7*w^6+
u^11*v^6*w^6,u^16*v^12*w^14+4*u^16*v^13*w^13+u^16*v^14*w^12+6*u^17*v^12*w^13+
6*u^17*v^13*w^12+5*u^18*v^12*w^12,4*u^12*v^9*w^9,18*u^32*v^24*w^26+
18*u^32*v^26*w^24+24*u^34*v^24*w^24,u^8*v^6*w^8+4*u^8*v^7*w^7+u^8*v^8*w^6+
6*u^9*v^6*w^7+6*u^9*v^7*w^6+5*u^10*v^6*w^6,u^16*v^12*w^18-8*u^16*v^15*w^15+
u^16*v^18*w^12+21*u^18*v^14*w^14-12*u^19*v^12*w^15-12*u^19*v^15*w^12+
5*u^22*v^12*w^12,5*u^8*v^6*w^8+10*u^8*v^7*w^7+5*u^8*v^8*w^6+16*u^9*v^6*w^7+
16*u^9*v^7*w^6+8*u^10*v^6*w^6,u^16*v^13*w^14+u^16*v^14*w^13+3*u^17*v^12*w^14+
6*u^17*v^13*w^13+3*u^17*v^14*w^12+4*u^18*v^12*w^13+4*u^18*v^13*w^12+
u^19*v^12*w^12,u^24*v^18*w^21+u^24*v^21*w^18-7*u^25*v^19*w^19+
5*u^27*v^18*w^18,18*u^40*v^30*w^32+18*u^40*v^32*w^30+24*u^42*v^30*w^30,
5*u^16*v^12*w^14+10*u^16*v^13*w^13+5*u^16*v^14*w^12+16*u^17*v^12*w^13+
16*u^17*v^13*w^12+8*u^18*v^12*w^12,18*u^8*v^6*w^7+18*u^8*v^7*w^6+
24*u^9*v^6*w^6,60*u^8*v^6*w^6,5*u^24*v^18*w^20+10*u^24*v^19*w^19+
5*u^24*v^20*w^18+16*u^25*v^18*w^19+16*u^25*v^19*w^18+8*u^26*v^18*w^18,
18*u^24*v^18*w^20+18*u^24*v^20*w^18+24*u^26*v^18*w^18,18*u^16*v^12*w^13+
18*u^16*v^13*w^12+24*u^17*v^12*w^12,18*u^24*v^18*w^19+18*u^24*v^19*w^18+
24*u^25*v^18*w^18,60*u^40*v^30*w^30,60*u^24*v^18*w^18,60*u^16*v^12*w^12,
60*u^32*v^24*w^24]
  f60c(u,v,w)=[60,24*u+21*v+15*w,8*u*v+4*u*w+3*v*w+4*u^2+2*v^2,16*u*v+
12*u*w+10*v*w+10*u^2+8*v^2+4*w^2,24*u^2+21*v^2+15*w^2,-8*u*v*w+4*u^3+2*v^3,
4*u*v*w+4*u*v^2+u*w^2+v*w^2+4*u^2*v+3*u^2*w+v^2*w+2*u^3+v^3,u^2*v,8*u*v^2+
6*u*w^2+5*v*w^2+8*u^2*v+6*u^2*w+5*v^2*w+10*u^3+8*v^3+4*w^3,-u*v^2*w-u^2*v*w-
u^2*v^2,-u^3*v^9*w^7-u^3*v^10*w^6+u^3*v^13*w^3+u^4*v^7*w^8+u^4*v^8*w^7+
u^4*v^13*w^2+u^5*v^8*w^6+u^5*v^9*w^5+2*u^6*v^8*w^5+u^6*v^9*w^4-u^6*v^10*w^3+
u^7*v^4*w^8+2*u^7*v^8*w^4-u^7*v^9*w^3-u^7*v^10*w^2+2*u^8*v^4*w^7+
2*u^8*v^5*w^6+2*u^8*v^6*w^5+2*u^8*v^7*w^4-u^8*v^9*w^2-u^9*v^2*w^8-u^9*v^3*w^7+
u^9*v^4*w^6+u^9*v^5*w^5+u^9*v^6*w^4-u^9*v^7*w^3-u^9*v^8*w^2-u^9*v^10-
u^10*v^2*w^7-u^10*v^3*w^6-u^10*v^6*w^3-u^10*v^7*w^2-u^10*v^9-u^11*v^8-
u^12*v^7+u^13*v^2*w^4+u^13*v^3*w^3+u^13*v^4*w^2+u^15*v^4,2*u*v*w^2+u*v^2*w+
3*u*v^3+u*w^3+v*w^3+u^2*v*w+2*u^2*v^2+u^2*w^2+3*u^3*v+2*u^3*w+v^3*w+2*u^4+v^4,
0,16*u^2*v^2+12*u^2*w^2+10*v^2*w^2+10*u^4+8*v^4+4*w^4,8*u^2*v^2*w^3+
8*u^2*v^3*w^2+8*u^3*v^2*w^2-8*u^3*v^4-4*u^3*w^4-3*v^3*w^4-8*u^4*v^3-4*u^4*w^3-
3*v^4*w^3+4*u^7+2*v^7,-2*u*v*w^2-3*u*v^2*w+u*v^3-3*u^2*v*w+u^3*v+u^3*w+2*u^4+
v^4,-2*u*v*w^3+3*u*v^2*w^2-3*u*v^3*w-2*u*v^4-u*w^4-v*w^4+3*u^2*v*w^2+
2*u^2*v^2*w+v^2*w^3-3*u^3*v*w+2*u^3*w^2+2*v^3*w^2-2*u^4*v-u^4*w-v^4*w+2*u^5+
v^5,0,-u^2*v^4*w^2-u^4*v^2*w^2-u^4*v^4,0,u^6*v^13*w^7+u^6*v^14*w^6+
u^7*v^13*w^6-u^8*v^9*w^9+u^8*v^14*w^4-u^9*v^8*w^9-u^9*v^9*w^8+u^9*v^13*w^4+
u^13*v^4*w^9+u^13*v^6*w^7+u^13*v^7*w^6+u^13*v^9*w^4+u^13*v^13+u^14*v^4*w^8+
u^14*v^6*w^6+u^14*v^8*w^4+u^17*v^9+u^18*v^8,-2*u*v*w^3-3*u*v^3*w+u^2*v^3-
3*u^3*v*w+u^3*v^2+u^3*w^2+2*u^5+v^5,u^9*v^9*w^6+u^10*v^8*w^6+u^10*v^9*w^5,
u^10*v^5,u^42*v^39*w^27+u^44*v^37*w^27+u^44*v^39*w^25,-2*u^3*v^9*w^6+
u^3*v^12*w^3+2*u^4*v^7*w^7+u^4*v^12*w^2+3*u^5*v^8*w^5+3*u^6*v^8*w^4-
2*u^6*v^9*w^3+2*u^7*v^4*w^7+2*u^7*v^7*w^4-2*u^7*v^9*w^2+3*u^8*v^4*w^6+
3*u^8*v^5*w^5+3*u^8*v^6*w^4-2*u^9*v^2*w^7-2*u^9*v^3*w^6-2*u^9*v^6*w^3-
2*u^9*v^7*w^2-2*u^9*v^9-2*u^11*v^7+u^12*v^2*w^4+u^12*v^3*w^3+u^12*v^4*w^2+
u^14*v^4,6*u^2*v^2*w^2+2*u^2*v^3*w+2*u^3*v*w^2+2*u^3*v^2*w-2*u^3*v^3-u^4*v^2,
0,-u*v^2*w^3-2*u*v^3*w^2-3*u*v^5-u*w^5-v*w^5-u^2*v*w^3+8*u^2*v^2*w^2-
u^2*v^3*w+4*u^2*v^4+2*u^2*w^4+2*v^2*w^4-2*u^3*v*w^2-u^3*v^2*w-6*u^3*v^3-
3*u^3*w^3-2*v^3*w^3+4*u^4*v^2+4*u^4*w^2+3*v^4*w^2-3*u^5*v-2*u^5*w-v^5*w+2*u^6+
v^6,0, 24*u^2*v^2*w^2-16*u^3*v^3-8*u^3*w^3-6*v^3*w^3+4*u^6+2*v^6,
-2*u^40*v^38*w^25+8*u^41*v^36*w^26-4*u^43*v^35*w^25,
-u^6*v^15*w^10-u^6*v^16*w^9+u^6*v^19*w^6+u^8*v^11*w^12+u^8*v^12*w^11+u^8*v^14*w^9+
u^8*v^15*w^8+u^8*v^19*w^4+u^9*v^14*w^8-u^9*v^16*w^6+u^10*v^14*w^7+
u^11*v^8*w^12+u^11*v^12*w^8+u^11*v^14*w^6-u^11*v^16*w^4+u^12*v^8*w^11+
u^12*v^11*w^8-u^12*v^15*w^4+u^14*v^6*w^11+u^14*v^7*w^10+u^14*v^8*w^9+
u^14*v^9*w^8+u^14*v^10*w^7+u^14*v^11*w^6-u^15*v^4*w^12+u^15*v^8*w^8-
u^15*v^12*w^4-u^15*v^16-u^16*v^4*w^11-u^16*v^6*w^9-u^16*v^9*w^6-u^16*v^11*w^4-
u^16*v^15+u^19*v^4*w^8+u^19*v^6*w^6+u^19*v^8*w^4-u^19*v^12-u^20*v^11+u^23*v^8,
0,0,-2*u*v^3*w^3+u*v^6+6*u^2*v^2*w^3+9*u^2*v^3*w^2-2*u^3*v*w^3+
9*u^3*v^2*w^2-4*u^3*v^3*w-6*u^3*v^4-2*u^3*w^4-2*v^3*w^4-6*u^4*v^3-4*u^4*w^3-
2*v^4*w^3+u^6*v+u^6*w+2*u^7+v^7,
u^10*v^11*w^7+u^12*v^9*w^7+u^12*v^11*w^5,-
u^8*v^12*w^5+2*u^9*v^8*w^8+3*u^9*v^10*w^6-u^10*v^10*w^5-u^11*v^7*w^7+
3*u^11*v^8*w^6-u^11*v^9*w^5-2*u^13*v^7*w^5,u^26*v^25*w^17+u^28*v^23*w^17+
u^28*v^25*w^15,2*u^3*v^7*w^4+2*u^3*v^8*w^3-2*u^4*v^5*w^5+2*u^4*v^6*w^4+
4*u^4*v^7*w^3+u^4*v^8*w^2-2*u^5*v^4*w^5-2*u^5*v^5*w^4+2*u^5*v^7*w^2+
u^6*v^2*w^6+2*u^6*v^4*w^4+2*u^6*v^6*w^2+u^6*v^8+2*u^7*v^2*w^5+4*u^7*v^3*w^4+
4*u^7*v^4*w^3+2*u^7*v^5*w^2+u^8*v^2*w^4+2*u^8*v^3*w^3+u^8*v^4*w^2+u^8*v^6+
2*u^9*v^5+u^10*v^4,0,0,-2*u^8*v^10*w^5+8*u^9*v^8*w^6-4*u^11*v^7*w^5,
u^3*v^7*w^4+u^3*v^8*w^3-u^4*v^5*w^5+u^4*v^7*w^3+u^4*v^8*w^2-u^5*v^4*w^5-
u^5*v^5*w^4+u^5*v^7*w^2+u^7*v^2*w^5+u^7*v^3*w^4+u^7*v^4*w^3+u^7*v^5*w^2+
u^7*v^7+u^8*v^2*w^4+u^8*v^3*w^3+u^8*v^4*w^2+u^9*v^5+u^10*v^4,-u^40*v^39*w^25+
2*u^41*v^36*w^27+3*u^41*v^37*w^26-u^41*v^38*w^25+3*u^42*v^36*w^26-
u^43*v^35*w^26-u^43*v^36*w^25-2*u^44*v^35*w^25,u^41*v^37*w^26+u^42*v^36*w^26+
u^42*v^37*w^25,6*u^2*v^2*w^4-2*u^2*v^3*w^3+9*u^2*v^4*w^2+u^2*v^6-
2*u^3*v^2*w^3-4*u^3*v^3*w^2-6*u^3*v^5-2*u^3*w^5-2*v^3*w^5+9*u^4*v^2*w^2-
6*u^5*v^3-4*u^5*w^3-2*v^5*w^3+u^6*v^2+u^6*w^2+2*u^8+v^8,-15*u^40*v^35*w^26-
21*u^40*v^36*w^25-24*u^41*v^35*w^25,-u^8*v^11*w^5+2*u^9*v^8*w^7+3*u^9*v^9*w^6-
u^9*v^10*w^5+3*u^10*v^8*w^6-u^11*v^7*w^6-u^11*v^8*w^5-2*u^12*v^7*w^5,-
u^33*v^30*w^21-u^34*v^29*w^21-u^34*v^30*w^20,0,-u^40*v^40*w^25+
2*u^41*v^36*w^28+3*u^41*v^38*w^26-u^42*v^38*w^25-u^43*v^35*w^27+
3*u^43*v^36*w^26-u^43*v^37*w^25-2*u^45*v^35*w^25,-4*u^8*v^7*w^9-
10*u^8*v^9*w^7-8*u^8*v^11*w^5-12*u^10*v^7*w^7-16*u^10*v^9*w^5-10*u^12*v^7*w^5,
-15*u^8*v^7*w^7-21*u^8*v^9*w^5-24*u^10*v^7*w^5,u^25*v^23*w^16+u^26*v^22*w^16+
u^26*v^23*w^15,-4*u^40*v^35*w^28-5*u^40*v^36*w^27-5*u^40*v^37*w^26-
8*u^40*v^38*w^25-6*u^41*v^35*w^27-8*u^41*v^37*w^25-6*u^42*v^35*w^26-
8*u^42*v^36*w^25-10*u^43*v^35*w^25,2*u^3*v^6*w^4+4*u^3*v^7*w^3-2*u^4*v^4*w^5-
2*u^4*v^5*w^4+3*u^4*v^6*w^3+3*u^4*v^7*w^2-2*u^5*v^4*w^4+2*u^5*v^6*w^2+
2*u^6*v^2*w^5+3*u^6*v^3*w^4+3*u^6*v^4*w^3+2*u^6*v^5*w^2+u^6*v^7+3*u^7*v^2*w^4+
4*u^7*v^3*w^3+3*u^7*v^4*w^2+u^7*v^6+u^8*v^5+2*u^9*v^4,0,-
u^34*v^32*w^22-u^36*v^30*w^22-u^36*v^32*w^20,0,-4*u^8*v^7*w^8-5*u^8*v^8*w^7-
5*u^8*v^9*w^6-8*u^8*v^10*w^5-6*u^9*v^7*w^7-8*u^9*v^9*w^5-6*u^10*v^7*w^6-
8*u^10*v^8*w^5-10*u^11*v^7*w^5,0,u^16*v^18*w^10-2*u^17*v^15*w^12-
3*u^17*v^16*w^11+u^17*v^17*w^10-3*u^18*v^15*w^11+u^19*v^14*w^11+
u^19*v^15*w^10+2*u^20*v^14*w^10,-u^17*v^16*w^11-u^18*v^15*w^11-u^18*v^16*w^10,
8*u^3*v^6*w^3-6*u^4*v^4*w^4+6*u^4*v^6*w^2+6*u^6*v^2*w^4+8*u^6*v^3*w^3+
6*u^6*v^4*w^2+2*u^6*v^6+3*u^8*v^4,2*u^8*v^10*w^9+2*u^8*v^11*w^8-u^8*v^14*w^5+
2*u^9*v^10*w^8-u^9*v^13*w^5-6*u^10*v^9*w^8-9*u^10*v^10*w^7+2*u^11*v^7*w^9+
2*u^11*v^8*w^8-9*u^11*v^9*w^7+4*u^11*v^10*w^6+6*u^11*v^11*w^5+4*u^12*v^7*w^8+
6*u^12*v^10*w^5-u^14*v^7*w^6-u^14*v^8*w^5-2*u^15*v^7*w^5,0,-u^16*v^17*w^15-
2*u^16*v^18*w^14-u^16*v^19*w^13+u^16*v^22*w^10-u^17*v^17*w^14-u^17*v^18*w^13+
u^17*v^21*w^10+2*u^18*v^16*w^14+5*u^18*v^17*w^13+3*u^18*v^18*w^12-
u^19*v^14*w^15-u^19*v^15*w^14+5*u^19*v^16*w^13+6*u^19*v^17*w^12-
2*u^19*v^18*w^11-3*u^19*v^19*w^10-3*u^20*v^14*w^14-u^20*v^15*w^13+
3*u^20*v^16*w^12-2*u^20*v^17*w^11-6*u^20*v^18*w^10-2*u^21*v^14*w^13-
3*u^21*v^17*w^10+u^23*v^14*w^11+u^23*v^15*w^10+2*u^24*v^14*w^10,
8*u^6*v^12*w^6-6*u^8*v^8*w^8+6*u^8*v^12*w^4+6*u^12*v^4*w^8+8*u^12*v^6*w^6+
6*u^12*v^8*w^4+2*u^12*v^12+3*u^16*v^8,-4*u^24*v^21*w^18-5*u^24*v^22*w^17-
5*u^24*v^23*w^16-8*u^24*v^24*w^15-6*u^25*v^21*w^17-8*u^25*v^23*w^15-
6*u^26*v^21*w^16-8*u^26*v^22*w^15-10*u^27*v^21*w^15,-u^8*v^8*w^8-u^8*v^10*w^6-
u^8*v^11*w^5-u^9*v^7*w^8-2*u^9*v^8*w^7-u^9*v^9*w^6-3*u^9*v^10*w^5-
u^10*v^7*w^7-u^10*v^8*w^6-2*u^10*v^9*w^5-2*u^11*v^7*w^6-3*u^11*v^8*w^5-
2*u^12*v^7*w^5,-u^18*v^18*w^12-u^20*v^16*w^12-u^20*v^18*w^10,2*u^8*v^10*w^10+
2*u^8*v^12*w^8-u^8*v^15*w^5-6*u^10*v^9*w^9+2*u^10*v^10*w^8-9*u^10*v^11*w^7-
u^10*v^13*w^5+2*u^11*v^7*w^10+2*u^11*v^9*w^8+4*u^11*v^10*w^7+6*u^11*v^12*w^5-
9*u^12*v^9*w^7+4*u^13*v^7*w^8+6*u^13*v^10*w^5-u^14*v^7*w^7-u^14*v^9*w^5-
2*u^16*v^7*w^5,-u^24*v^25*w^15+2*u^25*v^22*w^17+3*u^25*v^23*w^16-
u^25*v^24*w^15+3*u^26*v^22*w^16-u^27*v^21*w^16-u^27*v^22*w^15-
2*u^28*v^21*w^15,2*u^16*v^17*w^10-8*u^17*v^15*w^11+4*u^19*v^14*w^10,
u^32*v^33*w^20-2*u^33*v^29*w^23-3*u^33*v^31*w^21+u^34*v^31*w^20+
u^35*v^28*w^22-3*u^35*v^29*w^21+u^35*v^30*w^20+2*u^37*v^28*w^20,
2*u^32*v^31*w^20-8*u^33*v^29*w^21+4*u^35*v^28*w^20,-u^24*v^26*w^15+
2*u^25*v^22*w^18+3*u^25*v^24*w^16-u^26*v^24*w^15-u^27*v^21*w^17+
3*u^27*v^22*w^16-u^27*v^23*w^15-2*u^29*v^21*w^15,-6*u^10*v^9*w^7-
2*u^10*v^10*w^6-2*u^11*v^8*w^7-2*u^11*v^9*w^6+2*u^11*v^10*w^5+u^12*v^9*w^5,-
2*u^16*v^17*w^14-2*u^16*v^18*w^13+u^16*v^21*w^10-2*u^17*v^17*w^13+
u^17*v^20*w^10+6*u^18*v^16*w^13+9*u^18*v^17*w^12-2*u^19*v^14*w^14-
2*u^19*v^15*w^13+9*u^19*v^16*w^12-4*u^19*v^17*w^11-6*u^19*v^18*w^10-
4*u^20*v^14*w^13-6*u^20*v^17*w^10+u^22*v^14*w^11+u^22*v^15*w^10+
2*u^23*v^14*w^10,6*u^8*v^10*w^8-2*u^8*v^13*w^5-24*u^10*v^9*w^7+8*u^11*v^7*w^8+
16*u^11*v^10*w^5-4*u^14*v^7*w^5,-u^8*v^8*w^7-u^8*v^9*w^6-u^8*v^10*w^5-
u^9*v^7*w^7-4*u^9*v^8*w^6-4*u^9*v^9*w^5-3*u^10*v^7*w^6-4*u^10*v^8*w^5-
2*u^11*v^7*w^5,3*u^16*v^15*w^11+2*u^16*v^16*w^10+4*u^17*v^14*w^11+
8*u^17*v^15*w^10+4*u^18*v^14*w^10,0,15*u^32*v^28*w^22+
21*u^32*v^30*w^20+24*u^34*v^28*w^20,-3*u^8*v^8*w^6-2*u^8*v^9*w^5-
4*u^9*v^7*w^6-8*u^9*v^8*w^5-4*u^10*v^7*w^5,-6*u^16*v^17*w^13+2*u^16*v^20*w^10+
24*u^18*v^16*w^12-8*u^19*v^14*w^13-16*u^19*v^17*w^10+4*u^22*v^14*w^10,-
4*u^8*v^7*w^7-10*u^8*v^8*w^6-8*u^8*v^9*w^5-12*u^9*v^7*w^6-16*u^9*v^8*w^5-
10*u^10*v^7*w^5,u^16*v^15*w^12+u^16*v^16*w^11+u^16*v^17*w^10+u^17*v^14*w^12+
4*u^17*v^15*w^11+4*u^17*v^16*w^10+3*u^18*v^14*w^11+4*u^18*v^15*w^10+
2*u^19*v^14*w^10,-2*u^24*v^24*w^15+8*u^25*v^22*w^16-4*u^27*v^21*w^15,-
15*u^40*v^35*w^27-21*u^40*v^37*w^25-24*u^42*v^35*w^25,4*u^16*v^14*w^12+
10*u^16*v^15*w^11+8*u^16*v^16*w^10+12*u^17*v^14*w^11+16*u^17*v^15*w^10+
10*u^18*v^14*w^10,-15*u^8*v^7*w^6-21*u^8*v^8*w^5-24*u^9*v^7*w^5,-
60*u^8*v^7*w^5,-4*u^24*v^21*w^17-10*u^24*v^22*w^16-8*u^24*v^23*w^15-
12*u^25*v^21*w^16-16*u^25*v^22*w^15-10*u^26*v^21*w^15,-15*u^24*v^21*w^17-
21*u^24*v^23*w^15-24*u^26*v^21*w^15,15*u^16*v^14*w^11+21*u^16*v^15*w^10+
24*u^17*v^14*w^10,-15*u^24*v^21*w^16-21*u^24*v^22*w^15-24*u^25*v^21*w^15,-
60*u^40*v^35*w^25,-60*u^24*v^21*w^15,60*u^16*v^14*w^10,60*u^32*v^28*w^20]
 f80(u,v,w)=[80,32*u+24*v+24*w,
8*u*v+8*u*w+4*v*w+6*u^2+2*v^2+2*w^2,20*u*v+20*u*w+16*v*w+12*u^2+6*v^2+6*w^2,
32*u^2+24*v^2+24*w^2,-10*u*v*w+6*u^3+2*v^3+2*w^3,8*u*v*w+3*u*v^2+3*u*w^2+
2*v*w^2+5*u^2*v+5*u^2*w+2*v^2*w+2*u^3,u*v*w+u^2*v+u^2*w,10*u*v^2+10*u*w^2+
8*v*w^2+10*u^2*v+10*u^2*w+8*v^2*w+12*u^3+6*v^3+6*w^3,-u*v*w^2-u*v^2*w-
2*u^2*v*w,u^3*v^3*w^13-u^3*v^6*w^10-u^3*v^7*w^9-u^3*v^9*w^7-u^3*v^10*w^6+
u^3*v^13*w^3+u^4*v^2*w^13+u^4*v^7*w^8+u^4*v^8*w^7+u^4*v^13*w^2+u^5*v^5*w^9+
u^5*v^6*w^8+u^5*v^8*w^6+u^5*v^9*w^5-u^6*v^3*w^10+u^6*v^4*w^9+2*u^6*v^5*w^8-
u^6*v^6*w^7-u^6*v^7*w^6+2*u^6*v^8*w^5+u^6*v^9*w^4-u^6*v^10*w^3-u^7*v^2*w^10-
u^7*v^3*w^9+2*u^7*v^4*w^8-u^7*v^6*w^6+2*u^7*v^8*w^4-u^7*v^9*w^3-u^7*v^10*w^2-
u^8*v^2*w^9+2*u^8*v^4*w^7+3*u^8*v^5*w^6+3*u^8*v^6*w^5+2*u^8*v^7*w^4-
u^8*v^9*w^2-u^9*v^2*w^8-2*u^9*v^3*w^7+u^9*v^4*w^6+2*u^9*v^5*w^5+u^9*v^6*w^4-
2*u^9*v^7*w^3-u^9*v^8*w^2-u^10*v^2*w^7-2*u^10*v^3*w^6-2*u^10*v^6*w^3-
u^10*v^7*w^2-u^11*v^8-u^11*w^8-u^12*v^7-u^12*w^7+u^13*v^2*w^4+2*u^13*v^3*w^3+
u^13*v^4*w^2+u^15*v^4+u^15*w^4,3*u*v*w^2+3*u*v^2*w+2*u*v^3+2*u*w^3+v*w^3+
2*u^2*v*w+3*u^2*v^2+3*u^2*w^2+2*v^2*w^2+3*u^3*v+3*u^3*w+v^3*w+2*u^4,0,
20*u^2*v^2+20*u^2*w^2+16*v^2*w^2+12*u^4+6*v^4+6*w^4,10*u^2*v^2*w^3+
10*u^2*v^3*w^2+10*u^3*v^2*w^2-8*u^3*v^4-8*u^3*w^4-4*v^3*w^4-8*u^4*v^3-
8*u^4*w^3-4*v^4*w^3+6*u^7+2*v^7+2*w^7,-3*u*v*w^2-3*u*v^2*w+u*v^3+u*w^3+v*w^3-
4*u^2*v*w+2*u^3*v+2*u^3*w+v^3*w+2*u^4,-5*u*v*w^3+4*u*v^2*w^2-5*u*v^3*w-u*v^4-
u*w^4+3*u^2*v*w^2+3*u^2*v^2*w+2*v^2*w^3-6*u^3*v*w+2*u^3*v^2+2*u^3*w^2+
2*v^3*w^2-u^4*v-u^4*w+2*u^5,0,-u^2*v^2*w^4-u^2*v^4*w^2-2*u^4*v^2*w^2,0,
u^6*v^6*w^14+u^6*v^7*w^13+u^6*v^13*w^7+u^6*v^14*w^6+u^7*v^6*w^13+u^7*v^13*w^6+
u^8*v^4*w^14-u^8*v^9*w^9+u^8*v^14*w^4+u^9*v^4*w^13-u^9*v^8*w^9-u^9*v^9*w^8+
u^9*v^13*w^4+u^13*v^4*w^9+2*u^13*v^6*w^7+2*u^13*v^7*w^6+u^13*v^9*w^4+
u^14*v^4*w^8+2*u^14*v^6*w^6+u^14*v^8*w^4+u^17*v^9+u^17*w^9+u^18*v^8+u^18*w^8,-
3*u*v*w^3-3*u*v^3*w+u^2*v^3+u^2*w^3+v^2*w^3-4*u^3*v*w+2*u^3*v^2+2*u^3*w^2+
v^3*w^2+2*u^5,u^9*v^7*w^8+u^9*v^8*w^7+2*u^10*v^7*w^7,u^5*v^5*w^5+u^10*v^5+
u^10*w^5,u^42*v^32*w^34+u^42*v^34*w^32+2*u^44*v^32*w^32,u^3*v^3*w^12-
2*u^3*v^6*w^9-2*u^3*v^9*w^6+u^3*v^12*w^3+u^4*v^2*w^12+2*u^4*v^7*w^7+
u^4*v^12*w^2+3*u^5*v^5*w^8+3*u^5*v^8*w^5-2*u^6*v^3*w^9+3*u^6*v^4*w^8-
3*u^6*v^6*w^6+3*u^6*v^8*w^4-2*u^6*v^9*w^3-2*u^7*v^2*w^9+2*u^7*v^4*w^7+
2*u^7*v^7*w^4-2*u^7*v^9*w^2+3*u^8*v^4*w^6+6*u^8*v^5*w^5+3*u^8*v^6*w^4-
2*u^9*v^2*w^7-4*u^9*v^3*w^6-4*u^9*v^6*w^3-2*u^9*v^7*w^2-2*u^11*v^7-2*u^11*w^7+
u^12*v^2*w^4+2*u^12*v^3*w^3+u^12*v^4*w^2+u^14*v^4+u^14*w^4,2*u^2*v*w^3+
3*u^2*v^2*w^2+2*u^2*v^3*w+2*u^3*v*w^2+2*u^3*v^2*w-u^4*v^2-u^4*w^2,0,-
3*u*v^2*w^3-3*u*v^3*w^2-2*u*v^5-2*u*w^5-v*w^5-2*u^2*v*w^3+10*u^2*v^2*w^2-
2*u^2*v^3*w+4*u^2*v^4+4*u^2*w^4+4*v^2*w^4-3*u^3*v*w^2-3*u^3*v^2*w-5*u^3*v^3-
5*u^3*w^3-2*v^3*w^3+6*u^4*v^2+6*u^4*w^2+4*v^4*w^2-3*u^5*v-3*u^5*w-v^5*w+2*u^6,
0,30*u^2*v^2*w^2-16*u^3*v^3-16*u^3*w^3-8*v^3*w^3+6*u^6+2*v^6+2*w^6,-
2*u^40*v^30*w^33-2*u^40*v^33*w^30+10*u^41*v^31*w^31-6*u^43*v^30*w^30,
u^6*v^6*w^19-u^6*v^9*w^16-u^6*v^10*w^15-u^6*v^15*w^10-u^6*v^16*w^9+
u^6*v^19*w^6+u^8*v^4*w^19+u^8*v^8*w^15+u^8*v^9*w^14+u^8*v^11*w^12+
u^8*v^12*w^11+u^8*v^14*w^9+u^8*v^15*w^8+u^8*v^19*w^4-u^9*v^6*w^16+
u^9*v^8*w^14+u^9*v^14*w^8-u^9*v^16*w^6+u^10*v^7*w^14-u^10*v^10*w^11-
u^10*v^11*w^10+u^10*v^14*w^7-u^11*v^4*w^16+u^11*v^6*w^14+u^11*v^8*w^12-
u^11*v^10*w^10+u^11*v^12*w^8+u^11*v^14*w^6-u^11*v^16*w^4-u^12*v^4*w^15+
u^12*v^8*w^11+u^12*v^11*w^8-u^12*v^15*w^4+u^14*v^6*w^11+u^14*v^7*w^10+
2*u^14*v^8*w^9+2*u^14*v^9*w^8+u^14*v^10*w^7+u^14*v^11*w^6-u^15*v^4*w^12-
u^15*v^6*w^10+2*u^15*v^8*w^8-u^15*v^10*w^6-u^15*v^12*w^4-u^16*v^4*w^11-
2*u^16*v^6*w^9-2*u^16*v^9*w^6-u^16*v^11*w^4+u^19*v^4*w^8+2*u^19*v^6*w^6+
u^19*v^8*w^4-u^19*v^12-u^19*w^12-u^20*v^11-u^20*w^11+u^23*v^8+u^23*w^8,
0,0,-4*u*v^3*w^3+u*v^6+u*w^6+v*w^6+9*u^2*v^2*w^3+9*u^2*v^3*w^2-
6*u^3*v*w^3+12*u^3*v^2*w^2-6*u^3*v^3*w-4*u^3*v^4-4*u^3*w^4-2*v^3*w^4-
6*u^4*v^3-6*u^4*w^3-2*v^4*w^3+2*u^6*v+2*u^6*w+v^6*w+2*u^7,u^10*v^8*w^10+
u^10*v^10*w^8+2*u^12*v^8*w^8,-u^8*v^8*w^9-u^8*v^9*w^8+3*u^9*v^7*w^9+
3*u^9*v^9*w^7-u^10*v^6*w^9-u^10*v^9*w^6-2*u^11*v^6*w^8+4*u^11*v^7*w^7-
2*u^11*v^8*w^6-2*u^13*v^6*w^6,u^26*v^20*w^22+u^26*v^22*w^20+2*u^28*v^20*w^20,
2*u^3*v^3*w^8+2*u^3*v^4*w^7+2*u^3*v^7*w^4+2*u^3*v^8*w^3+u^4*v^2*w^8+
4*u^4*v^3*w^7+u^4*v^4*w^6-2*u^4*v^5*w^5+u^4*v^6*w^4+4*u^4*v^7*w^3+u^4*v^8*w^2+
2*u^5*v^2*w^7-2*u^5*v^4*w^5-2*u^5*v^5*w^4+2*u^5*v^7*w^2+2*u^6*v^2*w^6+
3*u^6*v^4*w^4+2*u^6*v^6*w^2+2*u^7*v^2*w^5+6*u^7*v^3*w^4+6*u^7*v^4*w^3+
2*u^7*v^5*w^2+u^8*v^2*w^4+4*u^8*v^3*w^3+u^8*v^4*w^2+2*u^9*v^5+2*u^9*w^5+
u^10*v^4+u^10*w^4,0,0,-2*u^8*v^6*w^9-2*u^8*v^9*w^6+10*u^9*v^7*w^7-
6*u^11*v^6*w^6,u^3*v^3*w^8+u^3*v^4*w^7+u^3*v^7*w^4+u^3*v^8*w^3+u^4*v^2*w^8+
u^4*v^3*w^7-u^4*v^5*w^5+u^4*v^7*w^3+u^4*v^8*w^2+u^5*v^2*w^7-u^5*v^4*w^5-
u^5*v^5*w^4+u^5*v^7*w^2+u^7*v^2*w^5+2*u^7*v^3*w^4+2*u^7*v^4*w^3+u^7*v^5*w^2+
u^8*v^2*w^4+2*u^8*v^3*w^3+u^8*v^4*w^2+u^9*v^5+u^9*w^5+u^10*v^4+u^10*w^4,-
u^40*v^31*w^33-u^40*v^33*w^31-u^41*v^30*w^33+3*u^41*v^31*w^32+
3*u^41*v^32*w^31-u^41*v^33*w^30+4*u^42*v^31*w^31-2*u^43*v^30*w^31-
2*u^43*v^31*w^30-2*u^44*v^30*w^30,u^41*v^31*w^32+u^41*v^32*w^31+
2*u^42*v^31*w^31,9*u^2*v^2*w^4-4*u^2*v^3*w^3+9*u^2*v^4*w^2+u^2*v^6+u^2*w^6+
v^2*w^6-6*u^3*v^2*w^3-6*u^3*v^3*w^2-4*u^3*v^5-4*u^3*w^5-2*v^3*w^5+
12*u^4*v^2*w^2-6*u^5*v^3-6*u^5*w^3-2*v^5*w^3+2*u^6*v^2+2*u^6*w^2+v^6*w^2+
2*u^8,-24*u^40*v^30*w^31-24*u^40*v^31*w^30-32*u^41*v^30*w^30,-u^8*v^7*w^9-
u^8*v^9*w^7-u^9*v^6*w^9+3*u^9*v^7*w^8+3*u^9*v^8*w^7-u^9*v^9*w^6+
4*u^10*v^7*w^7-2*u^11*v^6*w^7-2*u^11*v^7*w^6-2*u^12*v^6*w^6,-u^33*v^25*w^26-
u^33*v^26*w^25-2*u^34*v^25*w^25,0,-u^40*v^32*w^33-u^40*v^33*w^32+
3*u^41*v^31*w^33+3*u^41*v^33*w^31-u^42*v^30*w^33-u^42*v^33*w^30-
2*u^43*v^30*w^32+4*u^43*v^31*w^31-2*u^43*v^32*w^30-2*u^45*v^30*w^30,-
6*u^8*v^6*w^10-16*u^8*v^8*w^8-6*u^8*v^10*w^6-20*u^10*v^6*w^8-20*u^10*v^8*w^6-
12*u^12*v^6*w^6,-24*u^8*v^6*w^8-24*u^8*v^8*w^6-32*u^10*v^6*w^6,u^25*v^19*w^20+
u^25*v^20*w^19+2*u^26*v^19*w^19,-6*u^40*v^30*w^33-8*u^40*v^31*w^32-
8*u^40*v^32*w^31-6*u^40*v^33*w^30-10*u^41*v^30*w^32-10*u^41*v^32*w^30-
10*u^42*v^30*w^31-10*u^42*v^31*w^30-12*u^43*v^30*w^30,4*u^3*v^3*w^7+
2*u^3*v^4*w^6+2*u^3*v^6*w^4+4*u^3*v^7*w^3+3*u^4*v^2*w^7+3*u^4*v^3*w^6-
3*u^4*v^4*w^5-3*u^4*v^5*w^4+3*u^4*v^6*w^3+3*u^4*v^7*w^2+2*u^5*v^2*w^6-
3*u^5*v^4*w^4+2*u^5*v^6*w^2+2*u^6*v^2*w^5+5*u^6*v^3*w^4+5*u^6*v^4*w^3+
2*u^6*v^5*w^2+3*u^7*v^2*w^4+8*u^7*v^3*w^3+3*u^7*v^4*w^2+u^8*v^5+u^8*w^5+
2*u^9*v^4+2*u^9*w^4,0,-u^34*v^26*w^28-u^34*v^28*w^26-2*u^36*v^26*w^26,
0,-6*u^8*v^6*w^9-8*u^8*v^7*w^8-8*u^8*v^8*w^7-6*u^8*v^9*w^6-10*u^9*v^6*w^8-
10*u^9*v^8*w^6-10*u^10*v^6*w^7-10*u^10*v^7*w^6-12*u^11*v^6*w^6,0,
u^16*v^13*w^15+u^16*v^15*w^13+u^17*v^12*w^15-3*u^17*v^13*w^14-
3*u^17*v^14*w^13+u^17*v^15*w^12-4*u^18*v^13*w^13+2*u^19*v^12*w^13+
2*u^19*v^13*w^12+2*u^20*v^12*w^12,-u^17*v^13*w^14-u^17*v^14*w^13-
2*u^18*v^13*w^13,8*u^3*v^3*w^6+8*u^3*v^6*w^3+6*u^4*v^2*w^6-9*u^4*v^4*w^4+
6*u^4*v^6*w^2+6*u^6*v^2*w^4+16*u^6*v^3*w^3+6*u^6*v^4*w^2+3*u^8*v^4+3*u^8*w^4,-
u^8*v^7*w^12+2*u^8*v^9*w^10+2*u^8*v^10*w^9-u^8*v^12*w^7-u^9*v^6*w^12+
4*u^9*v^9*w^9-u^9*v^12*w^6-9*u^10*v^8*w^9-9*u^10*v^9*w^8+4*u^11*v^6*w^10+
6*u^11*v^7*w^9-12*u^11*v^8*w^8+6*u^11*v^9*w^7+4*u^11*v^10*w^6+6*u^12*v^6*w^9+
6*u^12*v^9*w^6-2*u^14*v^6*w^7-2*u^14*v^7*w^6-2*u^15*v^6*w^6,0,u^16*v^13*w^19-
u^16*v^15*w^17-2*u^16*v^16*w^16-u^16*v^17*w^15+u^16*v^19*w^13+u^17*v^12*w^19-
2*u^17*v^15*w^16-2*u^17*v^16*w^15+u^17*v^19*w^12+3*u^18*v^14*w^16+
6*u^18*v^15*w^15+3*u^18*v^16*w^14-2*u^19*v^12*w^17-3*u^19*v^13*w^16+
7*u^19*v^14*w^15+7*u^19*v^15*w^14-3*u^19*v^16*w^13-2*u^19*v^17*w^12-
5*u^20*v^12*w^16-3*u^20*v^13*w^15+4*u^20*v^14*w^14-3*u^20*v^15*w^13-
5*u^20*v^16*w^12-3*u^21*v^12*w^15-3*u^21*v^15*w^12+2*u^23*v^12*w^13+
2*u^23*v^13*w^12+2*u^24*v^12*w^12,8*u^6*v^6*w^12+8*u^6*v^12*w^6+
6*u^8*v^4*w^12-9*u^8*v^8*w^8+6*u^8*v^12*w^4+6*u^12*v^4*w^8+16*u^12*v^6*w^6+
6*u^12*v^8*w^4+3*u^16*v^8+3*u^16*w^8,-6*u^24*v^18*w^21-8*u^24*v^19*w^20-
8*u^24*v^20*w^19-6*u^24*v^21*w^18-10*u^25*v^18*w^20-10*u^25*v^20*w^18-
10*u^26*v^18*w^19-10*u^26*v^19*w^18-12*u^27*v^18*w^18,-u^8*v^7*w^9-
2*u^8*v^8*w^8-u^8*v^9*w^7-2*u^9*v^6*w^9-3*u^9*v^7*w^8-3*u^9*v^8*w^7-
2*u^9*v^9*w^6-3*u^10*v^6*w^8-2*u^10*v^7*w^7-3*u^10*v^8*w^6-3*u^11*v^6*w^7-
3*u^11*v^7*w^6-2*u^12*v^6*w^6,-u^18*v^14*w^16-u^18*v^16*w^14-2*u^20*v^14*w^14,
-u^8*v^8*w^12+2*u^8*v^9*w^11+2*u^8*v^11*w^9-u^8*v^12*w^8-u^10*v^6*w^12-
9*u^10*v^8*w^10+4*u^10*v^9*w^9-9*u^10*v^10*w^8-u^10*v^12*w^6+4*u^11*v^6*w^11+
6*u^11*v^8*w^9+6*u^11*v^9*w^8+4*u^11*v^11*w^6-12*u^12*v^8*w^8+6*u^13*v^6*w^9+
6*u^13*v^9*w^6-2*u^14*v^6*w^8-2*u^14*v^8*w^6-2*u^16*v^6*w^6,-u^24*v^19*w^21-
u^24*v^21*w^19-u^25*v^18*w^21+3*u^25*v^19*w^20+3*u^25*v^20*w^19-
u^25*v^21*w^18+4*u^26*v^19*w^19-2*u^27*v^18*w^19-2*u^27*v^19*w^18-
2*u^28*v^18*w^18,2*u^16*v^12*w^15+2*u^16*v^15*w^12-10*u^17*v^13*w^13+
6*u^19*v^12*w^12,u^32*v^26*w^27+u^32*v^27*w^26-3*u^33*v^25*w^27-
3*u^33*v^27*w^25+u^34*v^24*w^27+u^34*v^27*w^24+2*u^35*v^24*w^26-
4*u^35*v^25*w^25+2*u^35*v^26*w^24+2*u^37*v^24*w^24,2*u^32*v^24*w^27+
2*u^32*v^27*w^24-10*u^33*v^25*w^25+6*u^35*v^24*w^24,-u^24*v^20*w^21-
u^24*v^21*w^20+3*u^25*v^19*w^21+3*u^25*v^21*w^19-u^26*v^18*w^21-
u^26*v^21*w^18-2*u^27*v^18*w^20+4*u^27*v^19*w^19-2*u^27*v^20*w^18-
2*u^29*v^18*w^18,-2*u^10*v^7*w^9-3*u^10*v^8*w^8-2*u^10*v^9*w^7-2*u^11*v^7*w^8-
2*u^11*v^8*w^7+u^12*v^6*w^8+u^12*v^8*w^6,u^16*v^13*w^18-2*u^16*v^15*w^16-
2*u^16*v^16*w^15+u^16*v^18*w^13+u^17*v^12*w^18-4*u^17*v^15*w^15+
u^17*v^18*w^12+9*u^18*v^14*w^15+9*u^18*v^15*w^14-4*u^19*v^12*w^16-
6*u^19*v^13*w^15+12*u^19*v^14*w^14-6*u^19*v^15*w^13-4*u^19*v^16*w^12-
6*u^20*v^12*w^15-6*u^20*v^15*w^12+2*u^22*v^12*w^13+2*u^22*v^13*w^12+
2*u^23*v^12*w^12,-2*u^8*v^6*w^12+8*u^8*v^9*w^9-2*u^8*v^12*w^6-30*u^10*v^8*w^8+
16*u^11*v^6*w^9+16*u^11*v^9*w^6-6*u^14*v^6*w^6,-2*u^8*v^7*w^8-2*u^8*v^8*w^7-
3*u^9*v^6*w^8-8*u^9*v^7*w^7-3*u^9*v^8*w^6-5*u^10*v^6*w^7-5*u^10*v^7*w^6-
2*u^11*v^6*w^6,2*u^16*v^12*w^14+4*u^16*v^13*w^13+2*u^16*v^14*w^12+
8*u^17*v^12*w^13+8*u^17*v^13*w^12+6*u^18*v^12*w^12,0,
24*u^32*v^24*w^26+24*u^32*v^26*w^24+32*u^34*v^24*w^24,-2*u^8*v^6*w^8-
4*u^8*v^7*w^7-2*u^8*v^8*w^6-8*u^9*v^6*w^7-8*u^9*v^7*w^6-6*u^10*v^6*w^6,
2*u^16*v^12*w^18-8*u^16*v^15*w^15+2*u^16*v^18*w^12+30*u^18*v^14*w^14-
16*u^19*v^12*w^15-16*u^19*v^15*w^12+6*u^22*v^12*w^12,-6*u^8*v^6*w^8-
16*u^8*v^7*w^7-6*u^8*v^8*w^6-20*u^9*v^6*w^7-20*u^9*v^7*w^6-12*u^10*v^6*w^6,
2*u^16*v^13*w^14+2*u^16*v^14*w^13+3*u^17*v^12*w^14+8*u^17*v^13*w^13+
3*u^17*v^14*w^12+5*u^18*v^12*w^13+5*u^18*v^13*w^12+2*u^19*v^12*w^12,-
2*u^24*v^18*w^21-2*u^24*v^21*w^18+10*u^25*v^19*w^19-6*u^27*v^18*w^18,-
24*u^40*v^30*w^32-24*u^40*v^32*w^30-32*u^42*v^30*w^30,6*u^16*v^12*w^14+
16*u^16*v^13*w^13+6*u^16*v^14*w^12+20*u^17*v^12*w^13+20*u^17*v^13*w^12+
12*u^18*v^12*w^12,-24*u^8*v^6*w^7-24*u^8*v^7*w^6-32*u^9*v^6*w^6,-
80*u^8*v^6*w^6,-6*u^24*v^18*w^20-16*u^24*v^19*w^19-6*u^24*v^20*w^18-
20*u^25*v^18*w^19-20*u^25*v^19*w^18-12*u^26*v^18*w^18,-24*u^24*v^18*w^20-
24*u^24*v^20*w^18-32*u^26*v^18*w^18,24*u^16*v^12*w^13+24*u^16*v^13*w^12+
32*u^17*v^12*w^12,-24*u^24*v^18*w^19-24*u^24*v^19*w^18-32*u^25*v^18*w^18,-
80*u^40*v^30*w^30,-80*u^24*v^18*w^18,80*u^16*v^12*w^12,80*u^32*v^24*w^24]
 f64(u,v,w,r)=
[64,16*u+24*v+24*w,4*(v+w)*(v+w+u),4*(v+u+2*w)*(2*v+u+w),16*u^2+24*v^2+24*w^2,
-8*u*v*w+4*v^3+4*w^3,(v+w+u)*(v^2+u*v+4*v*w+w^2+u*w),v*w*(v+w+u),6*u*v^2+6*u*w^2
+10*v*w^2+6*u^2*v+6*u^2*w+10*v^2*w+4*u^3+8*v^3+8*w^3,-u*v*w*(v+w),-v^2*w^2*(v^5*w
^10+v^10*w^5-w^7*v^3*u^5-w^3*v^7*u^5+w^8*v*u^6-w^7*v^2*u^6+w^5*v^4*u^6+w^4*v^5*u^6-
w^2*v^7*u^6+w*v^8*u^6+w^7*v*u^7+w^4*v^4*u^7+w*v^7*u^7+v^8*u^7-w^5*v^2*u^8-w^2*v^5*u
^8+v^7*u^8-2*w^2*v^6*u^7-2*w^6*v^2*u^7-2*w^6*v^3*u^6-2*w^3*v^6*u^6-2*w^4*v^6*u^5-2*
w^6*v^4*u^5-2*w^6*v^5*u^4-2*w^5*v^6*u^4-w^11*v^2*u^2+w^8*v^5*u^2+w^7*v^6*u^2+w^6*v^
7*u^2+w^5*v^8*u^2-w^2*v^11*u^2-w^11*v*u^3+w^8*v^4*u^3+w^7*v^5*u^3+w^5*v^7*u^3+w^4*v
^8*u^3-w*v^11*u^3-w^7*v^4*u^4-w^4*v^7*u^4-v^11*u^4+w^8*u^7+w^7*u^8-w^11*u^4-w^13*v^
2+w^9*v^6+w^6*v^9-w^2*v^13),(v+w)*(v+w+u)*(v^2+v*w+w^2+u^2),-r*u*v*w,4*(v^2+u^2+
2*w^2)*(2*v^2+u^2+w^2),-4*(v+w)*(-v^6+v^5*w-v^4*w^2+u^3*v^3+3*v^3*w^3-2*u^2*v^2*w^
2-v^2*w^4+u^4*v^2-u^3*v^2*w-u^3*v*w^2+v*w^5-v*u^4*w+u^3*w^3-w^6+u^4*w^2),-3*u*v*w^
2-3*u*v^2*w+u*v^3+u*w^3+2*v*w^3-2*u^2*v*w+2*v^3*w+v^4+w^4,-4*u*v*w^3+2*u*v^2*w^2-4
*u*v^3*w-v*w^4+3*u^2*v*w^2+3*u^2*v^2*w+2*u^2*v^3+2*u^2*w^3-4*u^3*v*w+u^3*v^2+u^3*w^
2-u^4*v-u^4*w-v^4*w+v^5+w^5,-u^2*v^3*w^3,-u^2*v^2*w^4-u^2*v^4*w^2,0,
u^4*v^8*w^14+u^4*v^9*w^13+
u^4*v^13*w^9+u^4*v^14*w^8+u^6*v^6*w^14+u^6*v^7*w^13+u^6*v^13*w^7+u^6*v^14*w^6+
u^7*v^6*w^13+u^7*v^13*w^6+u^8*v^4*w^14-u^8*v^9*w^9+u^8*v^14*w^4+v^8*w^18+
u^9*v^4*w^13-u^9*v^8*w^9-u^9*v^9*w^8+u^9*v^13*w^4+v^9*w^17+v^17*w^9+v^18*w^8,
-3*u*v*w^3-3*u*v^3*w+u^2*v^3+u^2*w^3+2*v^2*w^3-2*u^3*v*w+2*v^3*w^2+v^5+w^5,
-r*u^6*v^8*w^9-r*u^6*v^9*w^8,u^5*v^5*w^5+v^5*w^10+v^10*w^5,-r*u^27*v^39*w^41-
r*u^27*v^41*w^39,u^2*v^4*w^12-2*u^2*v^7*w^9-2*u^2*v^9*w^7+u^2*v^12*w^4+
u^3*v^3*w^12-2*u^3*v^6*w^9-2*u^3*v^9*w^6+u^3*v^12*w^3+u^4*v^2*w^12+
3*u^4*v^6*w^8+2*u^4*v^7*w^7+3*u^4*v^8*w^6+u^4*v^12*w^2+v^4*w^14+3*u^5*v^5*w^8+
3*u^5*v^8*w^5-2*u^6*v^3*w^9+3*u^6*v^4*w^8-3*u^6*v^6*w^6+3*u^6*v^8*w^4-
2*u^6*v^9*w^3-2*u^7*v^2*w^9+2*u^7*v^4*w^7+2*u^7*v^7*w^4-2*u^7*v^9*w^2-
2*v^7*w^11-2*v^11*w^7+v^14*w^4,2*u*v^2*w^3+2*u*v^3*w^2+2*u^2*v*w^3+
3*u^2*v^2*w^2+2*u^2*v^3*w-v^2*w^4-v^4*w^2,-r*u^3*v^4*w^4,-2*u*v^2*w^3-
2*u*v^3*w^2-u*v^5-u*w^5-3*v*w^5-2*u^2*v*w^3+8*u^2*v^2*w^2-2*u^2*v^3*w+
4*u^2*v^4+4*u^2*w^4+5*v^2*w^4-2*u^3*v*w^2-2*u^3*v^2*w-2*u^3*v^3-2*u^3*w^3-
6*v^3*w^3+2*u^4*v^2+2*u^4*w^2+5*v^4*w^2-u^5*v-u^5*w-3*v^5*w+v^6+w^6,0,
24*u^2*v^2*w^2-8*u^3*v^3-8*u^3*w^3-16*v^3*w^3+4*v^6+4*w^6,4*r*u^25*v^37*w^40+
4*r*u^25*v^40*w^37-8*r*u^26*v^38*w^38,u^4*v^8*w^19-u^4*v^11*w^16-
u^4*v^12*w^15-u^4*v^15*w^12-u^4*v^16*w^11+u^4*v^19*w^8+u^6*v^6*w^19-
u^6*v^9*w^16+u^6*v^11*w^14+u^6*v^14*w^11-u^6*v^16*w^9+u^6*v^19*w^6+
u^7*v^10*w^14+u^7*v^14*w^10+u^8*v^4*w^19+u^8*v^8*w^15+u^8*v^9*w^14+
u^8*v^11*w^12+u^8*v^12*w^11+u^8*v^14*w^9+u^8*v^15*w^8+u^8*v^19*w^4+v^8*w^23-
u^9*v^6*w^16+u^9*v^8*w^14+u^9*v^14*w^8-u^9*v^16*w^6+u^10*v^7*w^14-
u^10*v^10*w^11-u^10*v^11*w^10+u^10*v^14*w^7-u^11*v^4*w^16+u^11*v^6*w^14+
u^11*v^8*w^12-u^11*v^10*w^10+u^11*v^12*w^8+u^11*v^14*w^6-u^11*v^16*w^4-
v^11*w^20-u^12*v^4*w^15+u^12*v^8*w^11+u^12*v^11*w^8-u^12*v^15*w^4-v^12*w^19-
v^19*w^12-v^20*w^11+v^23*w^8,0,-u^4*v^6*w^6,
-4*u*v^3*w^3+u*v^6+u*w^6+2*v*w^6+9*u^2*v^2*w^3+9*u^2*v^3*w^2-4*u^3*v*w^3+6*u^3*v^2
*w^2-4*u^3*v^3*w-2*u^3*v^4-2*u^3*w^4-6*v^3*w^4-2*u^4*v^3-2*u^4*w^3-6*v^4*w^3+2*v^6*
w+v^7+w^7,-r*u^7*v^9*w^9*(w^2+v^2),-r*u^5*v^7*w^7*(-w^5-2*v^2*w^3-2*v^3*w^2-v^5+3
*w^3*v*u+3*w*v^3*u-w^3*u^2-v^3*u^2+2*w*v*u^3),-r*u^17*v^24*w^24*(w^2+v^2),v^2*w^2
*(-u^6*v^2*w^2-2*u^5*v^2*w^3-2*u^5*v^3*w^2+u^6*v^4+u^6*w^4+2*u^5*w^5+2*u^5*v^5+w^6*
v^2*u^2+w^2*v^6*u^2+w^4*v^2*u^4+w^2*v^4*u^4+4*w*v^5*u^4+v^6*u^4+2*w^4*v^4*u^2+2*w^3
*v^5*u^2+4*w^5*v^2*u^3+4*w^2*v^5*u^3+2*w*v^6*u^3+4*w^5*v*u^4-2*w^3*v^3*u^4+2*w^5*v^
3*u^2+2*w^6*v*u^3+w^8*v^2+2*w^7*v^3+w^6*u^4+w^2*v^8+2*w^3*v^7),0,-r*u^11*v^16*w^
16,-4*r*u^5*v^7*w^7*(-v^3+2*u*w*v-w^3),v^2*w^2*(w^6*v^2*u^2+w^5*v^3*u^2+w^3*v^5*u
^2+w^2*v^6*u^2+w^6*v*u^3+w^5*v^2*u^3+w^2*v^5*u^3+w*v^6*u^3+w^6*u^4+w^5*v*u^4-w^3*v^
3*u^4+w*v^5*u^4+v^6*u^4+w^8*v^2+u^5*w^5-u^5*v^2*w^3-u^5*v^3*w^2+u^5*v^5+w^7*v^3+w^3
*v^7+w^2*v^8),-r*u^25*v^37*w^37*(-w^4-2*v*w^3-2*v^3*w-v^4-w^3*u+3*w^2*v*u+3*w*v^2*
u-v^3*u+2*w*v*u^2),-r*u^26*v^38*w^38*(v+w),
9*u^2*v^2*w^4-4*u^2*v^3*w^3+9*u^2*v^4*w^2+u^2*v^6+u^2*w^6+2*v^2*w^6-
4*u^3*v^2*w^3-4*u^3*v^3*w^2-2*u^3*v^5-2*u^3*w^5-6*v^3*w^5+6*u^4*v^2*w^2-
2*u^5*v^3-2*u^5*w^3-6*v^5*w^3+2*v^6*w^2+v^8+w^8,24*r*u^25*v^37*w^38+
24*r*u^25*v^38*w^37+16*r*u^26*v^37*w^37,r*u^5*v^7*w^11+2*r*u^5*v^8*w^10+
2*r*u^5*v^10*w^8+r*u^5*v^11*w^7+r*u^6*v^7*w^10-3*r*u^6*v^8*w^9-
3*r*u^6*v^9*w^8+r*u^6*v^10*w^7-2*r*u^7*v^8*w^8,-u^21*v^31*w^32-u^21*v^32*w^31,
0,r*u^25*v^37*w^42+2*r*u^25*v^39*w^40+2*r*u^25*v^40*w^39+r*u^25*v^42*w^37-
3*r*u^26*v^38*w^40-3*r*u^26*v^40*w^38+r*u^27*v^37*w^40+r*u^27*v^40*w^37-
2*r*u^28*v^38*w^38,8*r*u^5*v^7*w^11+20*r*u^5*v^9*w^9+8*r*u^5*v^11*w^7+
12*r*u^7*v^7*w^9+12*r*u^7*v^9*w^7+4*r*u^9*v^7*w^7,24*r*u^5*v^7*w^9+
24*r*u^5*v^9*w^7+16*r*u^7*v^7*w^7,-r*u^16*v^23*w^24-r*u^16*v^24*w^23,
8*r*u^25*v^37*w^40+10*r*u^25*v^38*w^39+10*r*u^25*v^39*w^38+8*r*u^25*v^40*w^37+
6*r*u^26*v^37*w^39+6*r*u^26*v^39*w^37+6*r*u^27*v^37*w^38+6*r*u^27*v^38*w^37+
4*r*u^28*v^37*w^37,3*u^2*v^4*w^7+2*u^2*v^5*w^6+2*u^2*v^6*w^5+3*u^2*v^7*w^4+
4*u^3*v^3*w^7+3*u^3*v^4*w^6+3*u^3*v^6*w^4+4*u^3*v^7*w^3+3*u^4*v^2*w^7+
3*u^4*v^3*w^6-3*u^4*v^4*w^5-3*u^4*v^5*w^4+3*u^4*v^6*w^3+3*u^4*v^7*w^2+
2*v^4*w^9+2*u^5*v^2*w^6-3*u^5*v^4*w^4+2*u^5*v^6*w^2+v^5*w^8+v^8*w^5+2*v^9*w^4,
0,-u^22*v^32*w^34-u^22*v^34*w^32,0,8*r*u^5*v^7*w^10+10*r*u^5*v^8*w^9+
10*r*u^5*v^9*w^8+8*r*u^5*v^10*w^7+6*r*u^6*v^7*w^9+6*r*u^6*v^9*w^7+
6*r*u^7*v^7*w^8+6*r*u^7*v^8*w^7+4*r*u^8*v^7*w^7,0,u^10*v^15*w^19+
2*u^10*v^16*w^18+2*u^10*v^18*w^16+u^10*v^19*w^15+u^11*v^15*w^18-
3*u^11*v^16*w^17-3*u^11*v^17*w^16+u^11*v^18*w^15-2*u^12*v^16*w^16,-
u^11*v^16*w^17-u^11*v^17*w^16,6*u^2*v^4*w^6+6*u^2*v^6*w^4+8*u^3*v^3*w^6+
8*u^3*v^6*w^3+6*u^4*v^2*w^6-9*u^4*v^4*w^4+6*u^4*v^6*w^2+3*v^4*w^8+3*v^8*w^4,
r*u^5*v^7*w^14+2*r*u^5*v^8*w^13-6*r*u^5*v^10*w^11-6*r*u^5*v^11*w^10+
2*r*u^5*v^13*w^8+r*u^5*v^14*w^7+r*u^6*v^7*w^13-4*r*u^6*v^10*w^10+
r*u^6*v^13*w^7+9*r*u^7*v^9*w^10+9*r*u^7*v^10*w^9-2*r*u^8*v^7*w^11-
4*r*u^8*v^8*w^10+6*r*u^8*v^9*w^9-4*r*u^8*v^10*w^8-2*r*u^8*v^11*w^7-
2*r*u^9*v^7*w^10-2*r*u^9*v^10*w^7,-u^6*v^9*w^9,u^10*v^15*w^23+
2*u^10*v^16*w^22-3*u^10*v^18*w^20-6*u^10*v^19*w^19-3*u^10*v^20*w^18+
2*u^10*v^22*w^16+u^10*v^23*w^15+u^11*v^15*w^22-2*u^11*v^18*w^19-
2*u^11*v^19*w^18+u^11*v^22*w^15+3*u^12*v^17*w^19+6*u^12*v^18*w^18+
3*u^12*v^19*w^17-u^13*v^15*w^20-2*u^13*v^16*w^19+5*u^13*v^17*w^18+
5*u^13*v^18*w^17-2*u^13*v^19*w^16-u^13*v^20*w^15-2*u^14*v^15*w^19-
2*u^14*v^16*w^18+2*u^14*v^17*w^17-2*u^14*v^18*w^16-2*u^14*v^19*w^15-
u^15*v^15*w^18-u^15*v^18*w^15,6*u^4*v^8*w^12+6*u^4*v^12*w^8+8*u^6*v^6*w^12+
8*u^6*v^12*w^6+6*u^8*v^4*w^12-9*u^8*v^8*w^8+6*u^8*v^12*w^4+3*v^8*w^16+
3*v^16*w^8,8*r*u^15*v^22*w^25+10*r*u^15*v^23*w^24+10*r*u^15*v^24*w^23+
8*r*u^15*v^25*w^22+6*r*u^16*v^22*w^24+6*r*u^16*v^24*w^22+6*r*u^17*v^22*w^23+
6*r*u^17*v^23*w^22+4*r*u^18*v^22*w^22,r*u^5*v^7*w^11+3*r*u^5*v^8*w^10+
4*r*u^5*v^9*w^9+3*r*u^5*v^10*w^8+r*u^5*v^11*w^7+r*u^6*v^7*w^10+
2*r*u^6*v^8*w^9+2*r*u^6*v^9*w^8+r*u^6*v^10*w^7+r*u^7*v^7*w^9+2*r*u^7*v^8*w^8+
r*u^7*v^9*w^7+r*u^8*v^7*w^8+r*u^8*v^8*w^7,-u^12*v^17*w^19-u^12*v^19*w^17,
r*u^5*v^7*w^15+2*r*u^5*v^9*w^13-6*r*u^5*v^10*w^12-6*r*u^5*v^12*w^10+
2*r*u^5*v^13*w^9+r*u^5*v^15*w^7+r*u^7*v^7*w^13+9*r*u^7*v^9*w^11-
4*r*u^7*v^10*w^10+9*r*u^7*v^11*w^9+r*u^7*v^13*w^7-2*r*u^8*v^7*w^12-
4*r*u^8*v^9*w^10-4*r*u^8*v^10*w^9-2*r*u^8*v^12*w^7+6*r*u^9*v^9*w^9-
2*r*u^10*v^7*w^10-2*r*u^10*v^10*w^7,r*u^15*v^22*w^26+2*r*u^15*v^23*w^25+
2*r*u^15*v^25*w^23+r*u^15*v^26*w^22+r*u^16*v^22*w^25-3*r*u^16*v^23*w^24-
3*r*u^16*v^24*w^23+r*u^16*v^25*w^22-2*r*u^17*v^23*w^23,4*u^10*v^15*w^18+
4*u^10*v^18*w^15-8*u^11*v^16*w^16,u^20*v^30*w^35+2*u^20*v^32*w^33+
2*u^20*v^33*w^32+u^20*v^35*w^30-3*u^21*v^31*w^33-3*u^21*v^33*w^31+
u^22*v^30*w^33+u^22*v^33*w^30-2*u^23*v^31*w^31,4*u^20*v^30*w^33+
4*u^20*v^33*w^30-8*u^21*v^31*w^31,r*u^15*v^22*w^27+2*r*u^15*v^24*w^25+
2*r*u^15*v^25*w^24+r*u^15*v^27*w^22-3*r*u^16*v^23*w^25-3*r*u^16*v^25*w^23+
r*u^17*v^22*w^25+r*u^17*v^25*w^22-2*r*u^18*v^23*w^23,-r*u^5*v^9*w^11-
r*u^5*v^11*w^9+2*r*u^6*v^9*w^10+2*r*u^6*v^10*w^9+2*r*u^7*v^8*w^10+
3*r*u^7*v^9*w^9+2*r*u^7*v^10*w^8,u^10*v^15*w^22+2*u^10*v^16*w^21-
6*u^10*v^18*w^19-6*u^10*v^19*w^18+2*u^10*v^21*w^16+u^10*v^22*w^15+
u^11*v^15*w^21-4*u^11*v^18*w^18+u^11*v^21*w^15+9*u^12*v^17*w^18+
9*u^12*v^18*w^17-2*u^13*v^15*w^19-4*u^13*v^16*w^18+6*u^13*v^17*w^17-
4*u^13*v^18*w^16-2*u^13*v^19*w^15-2*u^14*v^15*w^18-2*u^14*v^18*w^15,
4*r*u^5*v^7*w^13-16*r*u^5*v^10*w^10+4*r*u^5*v^13*w^7+24*r*u^7*v^9*w^9-
8*r*u^8*v^7*w^10-8*r*u^8*v^10*w^7,r*u^5*v^7*w^10+5*r*u^5*v^8*w^9+
5*r*u^5*v^9*w^8+r*u^5*v^10*w^7+2*r*u^6*v^7*w^9+6*r*u^6*v^8*w^8+
2*r*u^6*v^9*w^7+r*u^7*v^7*w^8+r*u^7*v^8*w^7,4*u^10*v^15*w^17+8*u^10*v^16*w^16+
4*u^10*v^17*w^15+4*u^11*v^15*w^16+4*u^11*v^16*w^15,0,
24*u^20*v^30*w^32+24*u^20*v^32*w^30+16*u^22*v^30*w^30,4*r*u^5*v^7*w^9+
8*r*u^5*v^8*w^8+4*r*u^5*v^9*w^7+4*r*u^6*v^7*w^8+4*r*u^6*v^8*w^7,
4*u^10*v^15*w^21-16*u^10*v^18*w^18+4*u^10*v^21*w^15+24*u^12*v^17*w^17-
8*u^13*v^15*w^18-8*u^13*v^18*w^15,8*r*u^5*v^7*w^9+20*r*u^5*v^8*w^8+
8*r*u^5*v^9*w^7+12*r*u^6*v^7*w^8+12*r*u^6*v^8*w^7+4*r*u^7*v^7*w^7,
u^10*v^15*w^18+5*u^10*v^16*w^17+5*u^10*v^17*w^16+u^10*v^18*w^15+
2*u^11*v^15*w^17+6*u^11*v^16*w^16+2*u^11*v^17*w^15+u^12*v^15*w^16+
u^12*v^16*w^15,4*r*u^15*v^22*w^25+4*r*u^15*v^25*w^22-8*r*u^16*v^23*w^23,
24*r*u^25*v^37*w^39+24*r*u^25*v^39*w^37+16*r*u^27*v^37*w^37,8*u^10*v^15*w^17+
20*u^10*v^16*w^16+8*u^10*v^17*w^15+12*u^11*v^15*w^16+12*u^11*v^16*w^15+
4*u^12*v^15*w^15,24*r*u^5*v^7*w^8+24*r*u^5*v^8*w^7+16*r*u^6*v^7*w^7,
64*r*u^5*v^7*w^7,8*r*u^15*v^22*w^24+20*r*u^15*v^23*w^23+8*r*u^15*v^24*w^22+
12*r*u^16*v^22*w^23+12*r*u^16*v^23*w^22+4*r*u^17*v^22*w^22,
24*r*u^15*v^22*w^24+24*r*u^15*v^24*w^22+16*r*u^17*v^22*w^22,24*u^10*v^15*w^16+
24*u^10*v^16*w^15+16*u^11*v^15*w^15,24*r*u^15*v^22*w^23+24*r*u^15*v^23*w^22+
16*r*u^16*v^22*w^22,64*r*u^25*v^37*w^37,64*r*u^15*v^22*w^22,64*u^10*v^15*w^15,
64*u^20*v^30*w^30]
  f81(u,v,w,r)=
[81,27*u+27*v+27*w,3*(v+u+w)^2,9*(v+u+w)^2,27*u^2+27*v^2+27*w^2,-12*w*v*u+3*u^
3+3*v^3+3*w^3,(v+u+w)^3,0,9*(v+u+w)*(w^2+v^2+u^2),-u*w*v*(v+u+w),w^2*v^2*u^2*(
u^7*w^3*v^3-u^8*w^4*v-u^8*w*v^4+v^3*u^3*w^7+2*v^4*u^3*w^6+2*v^3*u^4*w^6-u^6*w^7-u^7
*w^6-v^6*w^7-v^7*w^6-u^7*v^6-u^8*w^5-u^8*v^5-u^7*w^5*v-u^7*w*v^5-w^5*v^8+w^11*u^2+w
^11*v^2-w^8*v^5+w^2*v^11-w^8*u^5+w^2*u^11-w^4*u*v^8-w^5*u*v^7+w^11*v*u-w^8*v^4*u-w^
7*v^5*u+w*v^11*u+v^11*u^2-w^8*v*u^4-w*v^8*u^4-w^7*v*u^5-w*v^7*u^5-v^8*u^5-v^7*u^6+w
*v*u^11+v^2*u^11+2*u^6*v^4*w^3+2*u^6*v^3*w^4+u^7*v^2*w^4+2*u^6*v^5*w^2+u^7*v^4*w^2+
u^4*v^7*w^2+2*u^4*v^6*w^3+2*u^5*v^2*w^6+2*u^6*v^2*w^5+2*u^5*v^6*w^2+2*u^2*v^6*w^5+u
^2*v^7*w^4+2*u^3*v^6*w^4+u^3*v^7*w^3+u^4*v^2*w^7+u^2*v^4*w^7+2*u^2*v^5*w^6),(w^2+v
^2+u^2)*(v+u+w)^2,r*u*v*w,9*(w^2+v^2+u^2)^2,12*w^3*v^2*u^2+12*w^2*v^3*u^2+12*w^2
*v^2*u^3-6*v^4*u^3-6*w^4*u^3-6*w^4*v^3-6*u^4*v^3-6*u^4*w^3-6*w^3*v^4+3*u^7+3*v^7+3*
w^7,(v+u+w)*(v^3-4*w*v*u+u^3+w^3),(v+u+w)*(v^4-2*v^3*u-2*w*v^3+4*u^2*v^2+4*w^2*v^
2-2*v*u^3-2*w^3*v+u^4+4*u^2*w^2-2*w^3*u+w^4-2*w*u^3),r^2*u^2*v^2*w^2,-w^2*v^2*u^2
*(w^2+v^2+u^2),-r^2*u*v*w,u^4*v^4*w^4*(w^10*v^4+v^5*w^9+w^5*v^9+w^4*v^10+v^2*u^2*
w^10+v^3*u^2*w^9+w^3*u^2*v^9+w^2*v^10*u^2+v^2*u^3*w^9+w^2*u^3*v^9+w^10*u^4-u^4*v^5*
w^5+v^10*u^4+u^5*w^9-u^5*v^4*w^5-u^5*v^5*w^4+v^9*u^5+w^5*u^9+w^3*u^9*v^2+w^2*u^9*v^
3+v^5*u^9+w^4*u^10+w^2*v^2*u^10+v^4*u^10),(w^2+v^2+u^2)*(v^3-4*w*v*u+u^3+w^3),-r^
2*u^7*v^7*w^7*(v+u+w),0,-r*u^35*v^35*w^35*(w^2+v^2+u^2),w^2*v^2*u^2*(3*u^6*v^2*w
^4+3*u^6*v^3*w^3+3*u^6*v^4*w^2+3*u^2*v^4*w^6+3*u^2*v^6*w^4+3*u^3*v^3*w^6+3*u^3*v^6*
w^3+3*u^4*v^2*w^6+3*u^4*v^6*w^2-2*w^7*u^5-2*v^7*u^5-2*u^7*w^4*v-2*u^7*w*v^4-2*u^7*w
^5-2*u^7*v^5+v^2*w^10+w^2*v^10+u^2*w^10+w^2*u^10+v^10*u^2+v^2*u^10+w^10*v*u+w*v^10*
u-2*w^7*v*u^4+w*v*u^10-2*w*u^4*v^7-2*v^5*w^7-2*v^7*w^5+2*u^5*v^2*w^5+2*u^2*v^5*w^5+
2*u^5*v^5*w^2-2*u*v^7*w^4-2*u*v^4*w^7),
2*w*v*u*(v+u+w)*(u*v+w*v+u*w),u^4*v^4*w^4,(w^2+v^2+u^2)*(v^4-2*v^3*u-2*w*v^3+4*u
^2*v^2+4*w^2*v^2-2*v*u^3-2*w^3*v+u^4+4*u^2*w^2-2*w^3*u+w^4-2*w*u^3),0,36*w^2*v^2*
u^2-12*u^3*v^3-12*u^3*w^3-12*w^3*v^3+3*u^6+3*v^6+3*w^6,3*r*u^33*v^33*w^33*(v^3-4*w
*v*u+u^3+w^3),u^4*v^4*w^4*(-v^12*w^7+u^3*v^6*w^10+u^3*v^10*w^6-v^7*w^12+v^2*u^2*w^
15+u^2*v^7*w^10+u^8*v^7*w^4+u^8*v^4*w^7+u^7*v^4*w^8+u^7*v^8*w^4+u^2*v^10*w^7+u^4*v^
7*w^8+u^4*v^8*w^7+u^6*v^3*w^10+u^6*v^10*w^3+u^7*v^2*w^10+u^7*v^10*w^2+u^10*v^2*w^7+
u^10*v^3*w^6+u^10*v^6*w^3+u^10*v^7*w^2-u^12*w^7-u^12*v^7-u^12*v^2*w^5-u^12*v^5*w^2-
w^12*v^5*u^2-w^5*v^12*u^2+w^2*v^15*u^2+w^11*v^4*u^4+w^10*v^5*u^4+w^5*v^10*u^4+w^4*v
^11*u^4+v^15*u^4-w^12*v^2*u^5+w^10*v^4*u^5+w^4*v^10*u^5-w^2*v^12*u^5-v^12*u^7-v^11*
u^8+w^5*v^4*u^10+w^4*v^5*u^10+w^4*v^4*u^11-v^8*u^11+w^2*v^2*u^15+v^4*u^15+w^15*u^4-
w^12*u^7-w^11*u^8-w^8*u^11+w^4*u^15+w^15*v^4-w^11*v^8-w^8*v^11+w^4*v^15),-r*u^8*v^
8*w^8,r*u^5*v^5*w^5,(v+u+w)*(v^6-4*w^3*v^3-4*u^3*v^3+12*w^2*v^2*u^2-4*u^3*w^3+w^6
+u^6),-r^2*u^8*v^8*w^8*(w^2+v^2+u^2),r^2*u^6*v^6*w^6*(w^2+v^2+u^2)*(v^3-4*w*v*u+u
^3+w^3),-u^22*v^22*w^22*(w^2+v^2+u^2),w^2*v^2*u^2*(v+u+w)*(v^5*u^2+w^2*v^5+2*w*v^
5*u+w^3*v^4+w^2*v^4*u+w*v^4*u^2+v^4*u^3+u^4*v^3+w^4*v^3-2*w^3*v^3*u-2*w*v^3*u^3+u^5
*v^2+u^4*w*v^2+w^4*v^2*u+v^2*w^5-2*w^3*v*u^3+w^4*v*u^2+u^4*w^2*v+2*u^5*w*v+2*w^5*v*
u+u^5*w^2+w^5*u^2+u^4*w^3+w^4*u^3),
r*u^3*v^3*w^3*f*(u+v+w),
r^2*u^14*v^14*w^14,3*r^2*u^6*v^6*w^6*(v^3-4*w*v*u+u^3+w^3),w^2*v^2*u^2*(v^2*w^6+
w^5*v^3+w^3*v^5+w^2*v^6+v*u*w^6+w^5*v^2*u+w^2*v^5*u+w*u*v^6+u^2*w^6+w^5*v*u^2-w^3*v
^3*u^2+w*v^5*u^2+v^6*u^2+w^5*u^3-w^3*v^2*u^3-w^2*v^3*u^3+v^5*u^3+w^3*u^5+w^2*v*u^5+
w*u^5*v^2+v^3*u^5+u^6*w^2+u^6*w*v+u^6*v^2),r*u^33*v^33*w^33*(v+u+w)*(v^3-4*w*v*u+u
^3+w^3),-r*u^34*v^34*w^34*(v+u+w),(v^6-4*w^3*v^3-4*u^3*v^3+12*w^2*v^2*u^2-4*u^3*w
^3+w^6+u^6)*(w^2+v^2+u^2),27*r*u^33*v^33*w^33*(v+u+w),r^2*u^6*v^6*w^6*(v+u+w)*(v^
3-4*w*v*u+u^3+w^3),-r^2*u^27*v^27*w^27*(v+u+w),-u^5*v^5*w^5,r*u^33*v^33*w^33*(w^
2+v^2+u^2)*(v^3-4*w*v*u+u^3+w^3),9*r^2*u^6*v^6*w^6*(w^2+v^2+u^2)^2,27*r^2*u^6*v^6
*w^6*(w^2+v^2+u^2),-u^21*v^21*w^21*(v+u+w),9*r*u^33*v^33*w^33*(v+u+w)*(w^2+v^2+u^
2),w^2*v^2*u^2*(3*v^2*w^5+2*w^4*v^3+2*w^3*v^4+3*w^2*v^5+4*w^5*v*u+3*w^4*v^2*u+3*w^
2*v^4*u+4*w*v^5*u+3*w^5*u^2+3*w^4*v*u^2-2*w^3*v^2*u^2-2*w^2*v^3*u^2+3*w*v^4*u^2+3*v
^5*u^2+2*w^4*u^3-2*w^2*v^2*u^3+2*v^4*u^3+2*u^4*w^3+3*u^4*w^2*v+3*u^4*w*v^2+2*u^4*v^
3+3*u^5*w^2+4*u^5*w*v+3*u^5*v^2),
r*u^10*v^10*w^10*f*(u+v+w),
-r^2*u^28*v^28*w^28*(w^2+v^2+u^2),-3*r*u^3*v^3*w^3,9*r^2*u^6*v^6*w^6*(v+u+w)*(w^
2+v^2+u^2),-3*r^2*u^16*v^16*w^16,r*u^13*v^13*w^13*(v+u+w)*(v^3-4*w*v*u+u^3+w^3),
-r*u^14*v^14*w^14*(v+u+w),2*w^2*v^2*u^2*(3*w^4*v^2+3*w^2*v^4+4*w^4*v*u+4*w*v^4*u+3
*w^4*u^2-3*w^2*v^2*u^2+3*v^4*u^2+3*w^2*u^4+4*u^4*w*v+3*v^2*u^4),r^2*u^6*v^6*w^6*(v
+u+w)*(v^6-4*w^3*v^3-4*u^3*v^3+12*w^2*v^2*u^2-4*u^3*w^3+w^6+u^6),u^8*v^8*w^8,r*u^
13*v^13*w^13*(v+u+w)*(v^7-2*v^4*u^3-2*w^3*v^4+4*w^2*v^3*u^2-2*w^4*v^3-2*u^4*v^3+4*w
^3*v^2*u^2+4*w^2*v^2*u^3-2*w^4*u^3-2*u^4*w^3+u^7+w^7),2*u^4*v^4*w^4*(3*w^8*v^4+3*w
^4*v^8+4*w^8*v^2*u^2+4*w^2*v^8*u^2+3*w^8*u^4-3*u^4*v^4*w^4+3*v^8*u^4+3*u^8*w^4+4*u^
8*v^2*w^2+3*u^8*v^4),9*u^20*v^20*w^20*(v+u+w)*(w^2+v^2+u^2),r^2*u^6*v^6*w^6*(w^2+
v^2+u^2)*(v+u+w)^2,-r*u^15*v^15*w^15*(w^2+v^2+u^2),r^2*u^6*v^6*w^6*(v^6-4*w^3*v^3
-4*u^3*v^3+12*w^2*v^2*u^2-4*u^3*w^3+w^6+u^6)*(w^2+v^2+u^2),u^20*v^20*w^20*(v+u+w)*
(v^3-4*w*v*u+u^3+w^3),3*r*u^13*v^13*w^13*(v^3-4*w*v*u+u^3+w^3),r^2*u^26*v^26*w^26
*(w^2+v^2+u^2)*(v^3-4*w*v*u+u^3+w^3),
3*r^2*u^26*v^26*w^26*(v^3-4*w*v*u+u^3+w^3),u^20*v^20*w^20*(w^2+v^2+u^2)*(v^3-4*w*
v*u+u^3+w^3),2*r^2*u^7*v^7*w^7*(v+u+w)*(u*v+w*v+u*w),r*u^13*v^13*w^13*(v+u+w)*(v^
6-4*w^3*v^3-4*u^3*v^3+12*w^2*v^2*u^2-4*u^3*w^3+w^6+u^6),3*r^2*u^6*v^6*w^6*(v^6-4*w
^3*v^3-4*u^3*v^3+12*w^2*v^2*u^2-4*u^3*w^3+w^6+u^6),r^2*u^6*v^6*w^6*(v+u+w)^3,3*r*
u^13*v^13*w^13*(v+u+w)^2,-3*u^10*v^10*w^10,27*r^2*u^26*v^26*w^26*(w^2+v^2+u^2),3
*r^2*u^6*v^6*w^6*(v+u+w)^2,3*r*u^13*v^13*w^13*(v^6-4*w^3*v^3-4*u^3*v^3+12*w^2*v^2*
u^2-4*u^3*w^3+w^6+u^6),9*r^2*u^6*v^6*w^6*(v+u+w)^2,r*u^13*v^13*w^13*(v+u+w)^3,3*
u^20*v^20*w^20*(v^3-4*w*v*u+u^3+w^3),27*r*u^33*v^33*w^33*(w^2+v^2+u^2),9*r*u^13*v
^13*w^13*(v+u+w)^2,27*r^2*u^6*v^6*w^6*(v+u+w),81*r^2*u^6*v^6*w^6,9*u^20*v^20*w^
20*(v+u+w)^2,27*u^20*v^20*w^20*(w^2+v^2+u^2),27*r*u^13*v^13*w^13*(v+u+w),27*u^20
*v^20*w^20*(v+u+w),81*r*u^33*v^33*w^33,81*u^20*v^20*w^20,81*r*u^13*v^13*w^13,81
*r^2*u^26*v^26*w^26]
  res=Dict{Symbol, Any}(:name => "H(G32)", :identifier => "H(G32)",
    :parameter => para, :size => 155520, :order => 155520, :dim => 4,
    :degrees => [12, 18, 24, 30], :reflclasses => [2],
    :powermap => chevieget(:G32, :PowerMaps),
    :irredinfo => chevieget(:G32, :IrredInfo),
    :text => "origin: J.Michel, 2008/2012")
  merge!(res, chevieget(:G32, :ClassInfo))
  res[:centralizers]=div.(res[:order],res[:classes])
  res[:irreducibles]=toM([f1(u), f1(w), f1(v), f4(v, w), f4(u, v), f4(w, u),
    f4(w, v), f4(u, w), f4(v, u), f5(u, v, w), f5(w, u, v), f5(v, w, u),
    f5(u, w, v), f5(v, u, w), f5(w, v, u), f6(v, w), f6(u, v), f6(w, u),
    f10(u, v, w), f10(w, u, v), f10(v, w, u), f10(u, w, v), f10(v, u, w),
    f10(w, v, u), f15(u, v, w), f15b(u, v, w), f15(w, u, v), f15(v, u, w),
    f15b(w, u, v), f15b(v, u, w), f20a(u, v, w), f20b(u, v, w), f20c(u, v, w),
    f20c(w, u, v), f20c(v, w, u), f20c(u, w, v), f20c(v, u, w), f20c(w, v, u),
    f20d(u, v, w), f20d(w, u, v), f20d(v, w, u), f20d(u, w, v), f20d(v, u, w),
    f20d(w, v, u), f20a(v, u, w), f20a(w, u, v), f20b(w, u, v), f20b(v, u, w),
    f24(u, v, w), f24(w, u, v), f24(v, u, w), f30a(u, v, w), f30b(u, v, w),
    f30b(w, u, v), f30b(v, w, u), f30b(u, w, v), f30b(v, u, w), f30b(w, v, u),
    f30a(w, u, v), f30a(v, u, w), f36(u, v, w, E(3)), f36(w, u, v, E(3)),
    f36(v, u, w, E(3)), f36(u, v, w, E(3, 2)), f36(v, u, w, E(3, 2)),
    f36(w, u, v, E(3, 2)), f40(u, v, w), f40(w, u, v), f40(v, w, u),
    f40(u, w, v), f40(v, u, w), f40(w, v, u), f45(u, v, w, E(3)),
    f45(u, w, v, E(3)), f45(v, w, u, E(3)), f45(u, w, v, E(3, 2)),
    f45(u, v, w, E(3, 2)), f45(v, w, u, E(3, 2)), f60a(u, v, w), f60b(u, v, w),
    f60c(u, v, w), f60c(w, u, v), f60c(v, w, u), f60c(u, w, v), f60c(v, u, w),
    f60c(w, v, u), f60a(v, u, w), f60a(w, u, v), f60b(w, u, v), f60b(v, u, w),
    f64(u, v, w, root(v * w)), f64(u, v, w, -root(v * w)),
    f64(w, u, v, root(u * v)), f64(v, u, w, root(u * w)),
    f64(v, u, w, -root(u * w)), f64(w, u, v, -root(u * v)),
    f80(u, v, w), f80(v, u, w), f80(w, u, v), f81(u, v, w, root(u * v * w, 3)),
    f81(u, v, w, E(3,2)*root(u*v*w,3)),f81(u, v, w, E(3) * root(u * v * w, 3))])
  res
end)

chevieset(:G32, :CharTable, function ()
  res=chevieget(:G32, :HeckeCharTable)([[1, E(3), E(3, 2)]], [])
  res[:identifier]="G32"
  res[:name]="G32"
# uncomment if a,b,c,d are Mvp
# res.irreducibles{[31..102]}{[41,58]}:=[[0,0],[1,1],[0,0],[0,0],[0,0],[0,0],
# [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[E(3),E(3,2)],
# [E(3,2),E(3)],[0,0],[0,0],[0,0],[-1,-1],[-1,-1],[-E(3),-E(3,2)],[-E(3,2),-E(3)],
# [-1,-1],[-E(3,2),-E(3)],[-E(3),-E(3,2)],[-E(3),-E(3,2)],[-E(3,2),-E(3)],[0,0],
# [0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],
# [0,0],[0,0],[0,0],[0,0],[0,0],[1,1],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],
# [0,0],[E(3),E(3,2)],[E(3,2),E(3)],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],
# [0,0],[0,0],[0,0],[0,0],[0,0]];
  res[:galomorphisms] = Group(perm"(2,3)(4,7)(5,8)(6,9)(10,13)(11,14)(12,15)(17,18)(19,22)(20,23)(21,24)(27,28)(29,30)(33,36)(34,37)(35,38)(39,42)(40,43)(41,44)(45,46)(47,48)(50,51)(53,56)(54,57)(55,58)(59,60)(61,64)(62,65)(63,66)(67,70)(68,71)(69,72)(73,76)(74,77)(75,78)(81,84)(82,85)(83,86)(87,88)(89,90)(93,94)(95,96)(98,99)(101,102)")
  res
end)

chevieset(:G32, :SchurModels, Dict{Symbol, Any}(
  :f1_0 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0], 1], [[1, -1, 0], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[3, -2, -1], 1], [[3, -1, -2], 1], [[5, -2, -3], 1], [[5, -3, -2], 1], [[4, -3, -1], 2], [[4, -1, -3], 2], [[2, -1, -1], 2], [[2, -1, -1], 2], [[1, -1, 0], 6], [[1, 0, -1], 6], [[3, -2, -1], 6], [[3, -1, -2], 6], [[2, -1, -1], 6], [[2, -1, -1], 4], [[1, -1, 0], 4], [[1, 0, -1], 4], [[2, -1, -1], 3], [[1, -1, 0], 10], [[1, 0, -1], 10], [[2, -1, -1], 5]]),
  :f4_1 => Dict{Symbol, Any}(:vcyc => [[[4, -1, -3], 1], [[3, -1, -2], 1], [[3, -2, -1], 1], [[2, 1, -3], 1], [[-1, 1, 0], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[5, -1, -4], 2], [[3, 1, -4], 2], [[3, -1, -2], 2], [[2, -1, -1], 2], [[1, 0, -1], 2], [[1, 1, -2], 2], [[1, 0, -1], 6], [[1, -1, 0], 6], [[1, 0, -1], 4], [[2, -1, -1], 3], [[1, -1, 0], 10], [[1, 0, -1], 15]]),
  :f5_4 => Dict{Symbol, Any}(:vcyc => [[[3, 2, -5], 1], [[2, 1, -3], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[3, -1, -2], 2], [[1, 2, -3], 2], [[0, 1, -1], 2], [[2, -1, -1], 2], [[1, 1, -2], 2], [[4, 1, -5], 2], [[1, 0, -1], 2], [[1, 0, -1], 2], [[1, 0, -1], 6], [[1, 0, -1], 6], [[1, -1, 0], 6], [[1, -1, 0], 4], [[1, 1, -2], 3], [[1, 0, -1], 12]]),
  :f6_8 => Dict{Symbol, Any}(:factor => [2, -2, 0], :vcyc => [[[-1, 1, 0], 1], [[1, -1, 0], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[2, 1, -3], 1], [[1, 2, -3], 1], [[2, 1, -3], 2], [[1, 2, -3], 2], [[-1, 2, -1], 2], [[2, -1, -1], 2], [[1, 1, -2], 2], [[1, 1, -2], 2], [[1, 0, -1], 2], [[0, 1, -1], 2], [[1, 1, -2], 6], [[0, 1, -1], 6], [[1, 0, -1], 6], [[-1, 1, 0], 10], [[1, 1, -2], 5]]),
  :f10_2 => Dict{Symbol, Any}(:vcyc => [[[2, 1, -3], 1], [[3, -1, -2], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[-1, 1, 0], 1], [[-1, 0, 1], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[4, -3, -1], 2], [[3, -1, -2], 2], [[1, 1, -2], 2], [[1, -2, 1], 2], [[1, 0, -1], 2], [[1, 0, -1], 2], [[0, 1, -1], 2], [[2, -1, -1], 2], [[2, 1, -3], 6], [[1, 0, -1], 6], [[1, -1, 0], 6], [[1, 0, -1], 4], [[2, -1, -1], 3]]),
  :f15_6 => Dict{Symbol, Any}(:vcyc => [[[3, -2, -1], 1], [[3, -1, -2], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[-1, 1, 0], 1], [[1, -1, 0], 1], [[3, 1, -4], 2], [[3, -4, 1], 2], [[-1, -1, 2], 2], [[1, -2, 1], 2], [[1, -1, 0], 2], [[1, 0, -1], 2], [[2, -1, -1], 2], [[2, -1, -1], 2], [[2, -1, -1], 6], [[1, 0, -1], 6], [[1, -1, 0], 6], [[2, -1, -1], 4]]),
  :f15_8 => Dict{Symbol, Any}(:vcyc => [[[2, -3, 1], 1], [[-3, 2, 1], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[1, -1, 0], 1], [[-1, 1, 0], 1], [[1, -2, 1], 2], [[-2, 1, 1], 2], [[1, 1, -2], 2], [[1, 1, -2], 2], [[1, 0, -1], 2], [[1, 0, -1], 2], [[0, 1, -1], 2], [[0, 1, -1], 2], [[0, 1, -1], 6], [[1, 0, -1], 6], [[1, 1, -2], 4]]),
  :f20_3 => Dict{Symbol, Any}(:vcyc => [[[2, -3, 1], 1], [[1, -1, 0], 1], [[1, -1, 0], 1], [[-1, 0, 1], 1], [[1, 0, -1], 1], [[4, -1, -3], 1], [[3, -1, -2], 1], [[0, 1, -1], 1], [[1, 2, -3], 2], [[-1, 2, -1], 2], [[2, -1, -1], 2], [[1, 1, -2], 2], [[1, 0, -1], 2], [[-1, 0, 1], 2], [[3, -2, -1], 6], [[1, 0, -1], 6], [[1, 0, -1], 4], [[1, 1, -2], 3]]),
  :f20_5 => Dict{Symbol, Any}(:coeff => -1, :vcyc => [[[3, -2, -1], 1], [[-2, 3, -1], 1], [[2, 1, -3], 1], [[1, 2, -3], 1], [[-1, 0, 1], 1], [[-1, 0, 1], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[3, -1, -2], 2], [[-1, 3, -2], 2], [[1, 1, -2], 2], [[1, 1, -2], 2], [[1, 1, -2], 6], [[1, -1, 0], 6], [[1, 0, -1], 6], [[0, 1, -1], 6], [[1, 1, -2], 3]]),
  :f20_7 => Dict{Symbol, Any}(:vcyc => [[[3, 1, -4], 1], [[1, 2, -3], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[-1, 0, 1], 1], [[1, 0, -1], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 2], [[-1, 0, 1], 2], [[3, -4, 1], 2], [[1, 2, -3], 2], [[1, 1, -2], 2], [[-1, 2, -1], 2], [[1, 0, -1], 6], [[1, 0, -1], 6], [[0, 1, -1], 6], [[2, -1, -1], 3]]),
  :f20_12 => Dict{Symbol, Any}(:coeff => 2, :vcyc => [[[0, 1, -1], 1], [[0, -1, 1], 1], [[-1, 1, 0], 1], [[-1, 0, 1], 1], [[-1, 1, 0], 1], [[-1, 0, 1], 1], [[1, -1, 0], 1], [[1, 0, -1], 1], [[1, -3, 2], 2], [[1, 2, -3], 2], [[2, -1, -1], 2], [[-2, 1, 1], 2], [[1, 0, -1], 2], [[1, -1, 0], 2], [[1, 0, -1], 2], [[1, -1, 0], 2], [[0, 1, -1], 6], [[0, -1, 1], 6], [[2, -1, -1], 3]]),
  :f24_6 => Dict{Symbol, Any}(:vcyc => [[[-2, -1, 3], 1], [[-2, 3, -1], 1], [[1, 0, -1], 1], [[1, -1, 0], 1], [[1, 0, -1], 1], [[1, -1, 0], 1], [[0, 1, -1], 1], [[0, -1, 1], 1], [[1, 0, -1], 2], [[1, -1, 0], 2], [[1, 1, -2], 2], [[1, -2, 1], 2], [[1, 0, -1], 6], [[1, -1, 0], 6], [[1, 0, -1], 4], [[1, -1, 0], 4], [[2, -1, -1], 5]]),
  :f30_4 => Dict{Symbol, Any}(:vcyc => [[[5, -3, -2], 1], [[1, 0, -1], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[-1, 1, 0], 2], [[0, 1, -1], 2], [[-1, 0, 1], 2], [[5, -1, -4], 2], [[1, -3, 2], 2], [[1, 0, -1], 2], [[1, -2, 1], 2], [[2, -1, -1], 2], [[1, -1, 0], 6], [[0, 1, -1], 6], [[1, 0, -1], 6], [[1, 0, -1], 4]]),
  :f30_12p => Dict{Symbol, Any}(:vcyc => [[[2, -3, 1], 1], [[2, 1, -3], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[1, -1, 0], 1], [[-1, 0, 1], 1], [[-1, 0, 1], 1], [[1, 0, -1], 1], [[0, 1, -1], 2], [[0, -1, 1], 2], [[-1, 2, -1], 2], [[-1, -1, 2], 2], [[1, 0, -1], 2], [[1, 0, -1], 2], [[1, -1, 0], 2], [[1, -1, 0], 2], [[0, 1, -1], 6], [[0, -1, 1], 6], [[1, -1, 0], 6], [[1, 0, -1], 6]]),
  :f36_5 => Dict{Symbol, Any}(:rootUnity => E(3), :vcyc => [[[0, 0, 0, -1], 1], [[1, -1, 0], 1], [[-1, 0, 1], 1], [[2, -1, -1, 1], 1], [[1, 1, -2, 2], 1], [[-1, 2, -1, -2], 1], [[-2, 1, 1], 2], [[2, 1, -3, -1], 2], [[2, -3, 1, 2], 2], [[2, -1, -1], 6], [[1, 0, -1], 6], [[1, -1, 0], 6], [[0, -1, 1], 6], [[1, -1, 0, 1], 5], [[1, 0, -1, 1], 5]]),
  :f40_8 => Dict{Symbol, Any}(:vcyc => [[[3, 2, -5], 1], [[-1, 1, 0], 1], [[1, -1, 0], 1], [[1, 0, -1], 1], [[-1, 0, 1], 1], [[1, 0, -1], 1], [[-3, 2, 1], 1], [[0, -1, 1], 1], [[1, -1, 0], 2], [[1, 1, -2], 2], [[2, -1, -1], 2], [[1, 0, -1], 2], [[1, -1, 0], 6], [[0, 1, -1], 6], [[1, -1, 0], 4], [[1, 0, -1], 4], [[1, -2, 1], 3]]),
  :f45_6 => Dict{Symbol, Any}(:rootUnity => E(3), :vcyc => [[[0, 0, 0, 1], 1], [[-1, 2, -1, 2], 1], [[-2, 1, 1, 1], 1], [[1, 1, -2, 1], 1], [[0, -1, 1], 1], [[1, 0, -1], 1], [[-3, 2, 1, 2], 2], [[2, -3, 1, 2], 2], [[0, 1, -1, -2], 2], [[1, 0, -1, 1], 2], [[1, 1, -2], 2], [[1, -1, 0], 6], [[1, 0, -1], 6], [[0, 1, -1], 6], [[1, 1, -2], 6], [[0, 1, -1, 1], 4], [[1, 0, -1, 1], 4]]),
  :f60_7 => Dict{Symbol, Any}(:vcyc => [[[1, 2, -3], 1], [[1, -1, 0], 1], [[1, -1, 0], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[-3, 1, 2], 1], [[1, -1, 0], 2], [[4, 1, -5], 2], [[-1, 2, -1], 2], [[-2, 1, 1], 2], [[0, 1, -1], 2], [[0, 1, -1], 2], [[1, -1, 0], 6], [[0, -1, 1], 6], [[1, -1, 0], 4]]),
  :f60_11s => Dict{Symbol, Any}(:vcyc => [[[1, -4, 3], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[0, -1, 1], 1], [[0, -1, 1], 1], [[-4, 1, 3], 1], [[2, -1, -1], 2], [[1, 1, -2], 2], [[1, 1, -2], 2], [[-1, 2, -1], 2], [[-1, 1, 0], 2], [[-1, 1, 0], 2], [[1, 1, -2], 6], [[1, -1, 0], 6]]),
  :f60_12 => Dict{Symbol, Any}(:coeff => 2, :vcyc => [[[1, 2, -3], 1], [[1, -3, 2], 1], [[-1, 0, 1], 1], [[-1, 0, 1], 1], [[-1, 0, 1], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[0, 1, -1], 2], [[0, -1, 1], 2], [[2, -1, -1], 2], [[2, -1, -1], 2], [[2, -1, -1], 6], [[0, -1, 1], 6], [[0, 1, -1], 6], [[1, 0, -1], 4], [[1, -1, 0], 4]]),
  :f64_8 => Dict{Symbol, Any}(:coeff => 2, :root => [1, 1, 0] // 2, :vcyc => [[[1, 0, -2, 1], 1], [[0, -1, 2, -1], 1], [[0, 1, -1], 1], [[-1, 0, 1], 1], [[-1, 1, 0], 1], [[1, -1, 0], 1], [[-1, 3, -2], 1], [[-3, 1, 2], 1], [[-2, 2, -1, 1], 2], [[2, -2, -1, 1], 2], [[1, 1, -2], 3], [[0, 0, -1, 1], 10], [[0, -1, 0, 1], 15]]),
  :f80_9 => Dict{Symbol, Any}(:coeff => 2, :vcyc => [[[1, 2, -3], 1], [[1, -3, 2], 1], [[1, 0, -1], 1], [[1, 0, -1], 1], [[-1, 1, 0], 1], [[-1, 1, 0], 1], [[0, 1, -1], 1], [[0, 1, -1], 1], [[1, -1, 0], 2], [[1, 0, -1], 2], [[-2, 1, 1], 4], [[1, 0, -1], 4], [[1, -1, 0], 4], [[2, -1, -1], 3], [[0, -1, 1], 12]]),
  :f81_10 => Dict{Symbol, Any}(:coeff => 3, :root => [1, 1, 1] // 3, :vcyc => [[[-2, 0, 1, 1], 2], [[0, -2, 1, 1], 2], [[1, 0, -2, 1], 2], [[1, -2, 0, 1], 2], [[-2, 1, 0, 1], 2], [[0, 1, -2, 1], 2], [[1, 1, -2], 2], [[1, -2, 1], 2], [[-2, 1, 1], 2], [[0, 0, -1, 1], 2], [[-1, 0, 0, 1], 2], [[0, -1, 0, 1], 2], [[-1, -1, 0, 2], 4], [[-1, 0, -1, 2], 4], [[0, -1, -1, 2], 4], [[-1, 0, 0, 1], 5], [[0, 0, -1, 1], 5], [[0, -1, 0, 1], 5]])))

chevieset(:G32, :SchurData, [
  Dict{Symbol, Any}(:name => "f1_0", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f1_0", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f1_0", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f4_1", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f4_1", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f4_1", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f4_1", :order => [2, 3, 1]),
  Dict{Symbol, Any}(:name => "f4_1", :order => [3, 1, 2]),
  Dict{Symbol, Any}(:name => "f4_1", :order => [1, 2, 3]),
  Dict{Symbol, Any}(:name => "f5_4", :order => [3, 1, 2]),
  Dict{Symbol, Any}(:name => "f5_4", :order => [2, 3, 1]),
  Dict{Symbol, Any}(:name => "f5_4", :order => [1, 2, 3]),
  Dict{Symbol, Any}(:name => "f5_4", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f5_4", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f5_4", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f6_8", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f6_8", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f6_8", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f10_2", :order => [2, 3, 1]),
  Dict{Symbol, Any}(:name => "f10_2", :order => [1, 2, 3]),
  Dict{Symbol, Any}(:name => "f10_2", :order => [3, 1, 2]),
  Dict{Symbol, Any}(:name => "f10_2", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f10_2", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f10_2", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f15_8", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f15_6", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f15_8", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f15_8", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f15_6", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f15_6", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f20_5", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f20_12", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f20_3", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f20_3", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f20_3", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f20_3", :order => [3, 1, 2]),
  Dict{Symbol, Any}(:name => "f20_3", :order => [1, 2, 3]),
  Dict{Symbol, Any}(:name => "f20_3", :order => [2, 3, 1]),
  Dict{Symbol, Any}(:name => "f20_7", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f20_7", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f20_7", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f20_7", :order => [2, 3, 1]),
  Dict{Symbol, Any}(:name => "f20_7", :order => [3, 1, 2]),
  Dict{Symbol, Any}(:name => "f20_7", :order => [1, 2, 3]),
  Dict{Symbol, Any}(:name => "f20_5", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f20_5", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f20_12", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f20_12", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f24_6", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f24_6", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f24_6", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f30_12p", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f30_4", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f30_4", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f30_4", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f30_4", :order => [3, 1, 2]),
  Dict{Symbol, Any}(:name => "f30_4", :order => [1, 2, 3]),
  Dict{Symbol, Any}(:name => "f30_4", :order => [2, 3, 1]),
  Dict{Symbol, Any}(:name => "f30_12p", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f30_12p", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name=>"f36_5", :order => [1, 3, 2], :rootUnityPower => 2),
  Dict{Symbol,Any}(:name=> "f36_5", :order => [3, 2, 1], :rootUnityPower => 2),
  Dict{Symbol,Any}(:name=> "f36_5", :order => [2, 1, 3], :rootUnityPower => 2),
  Dict{Symbol,Any}(:name=> "f36_5", :order => [1, 3, 2], :rootUnityPower => 1),
  Dict{Symbol,Any}(:name=> "f36_5", :order => [2, 1, 3], :rootUnityPower => 1),
  Dict{Symbol,Any}(:name=> "f36_5", :order => [3, 2, 1], :rootUnityPower => 1),
  Dict{Symbol, Any}(:name => "f40_8", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f40_8", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f40_8", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f40_8", :order => [2, 3, 1]),
  Dict{Symbol, Any}(:name => "f40_8", :order => [3, 1, 2]),
  Dict{Symbol, Any}(:name => "f40_8", :order => [1, 2, 3]),
  Dict{Symbol, Any}(:name => "f45_6",:order=> [2,1, 3], :rootUnityPower => 1),
  Dict{Symbol,Any}(:name=> "f45_6", :order => [1, 3, 2], :rootUnityPower => 1),
  Dict{Symbol,Any}(:name=> "f45_6", :order => [3, 2, 1], :rootUnityPower => 1),
  Dict{Symbol,Any}(:name=> "f45_6", :order => [1, 3, 2], :rootUnityPower => 2),
  Dict{Symbol,Any}(:name=> "f45_6", :order => [2, 1, 3], :rootUnityPower => 2),
  Dict{Symbol,Any}(:name=> "f45_6", :order => [3, 2, 1], :rootUnityPower => 2),
  Dict{Symbol, Any}(:name => "f60_11s", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f60_12", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f60_7", :order => [1, 2, 3]),
  Dict{Symbol, Any}(:name => "f60_7", :order => [3, 1, 2]),
  Dict{Symbol, Any}(:name => "f60_7", :order => [2, 3, 1]),
  Dict{Symbol, Any}(:name => "f60_7", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f60_7", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f60_7", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f60_11s", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f60_11s", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f60_12", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f60_12", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f64_8", :order => [3, 2, 1], :rootPower => -1),
  Dict{Symbol, Any}(:name => "f64_8", :order => [3, 2, 1], :rootPower => 1),
  Dict{Symbol, Any}(:name => "f64_8", :order => [2, 1, 3], :rootPower => -1),
  Dict{Symbol, Any}(:name => "f64_8", :order => [1, 3, 2], :rootPower => -1),
  Dict{Symbol, Any}(:name => "f64_8", :order => [1, 3, 2], :rootPower => 1),
  Dict{Symbol, Any}(:name => "f64_8", :order => [2, 1, 3], :rootPower => 1),
  Dict{Symbol, Any}(:name => "f80_9", :order => [1, 3, 2]),
  Dict{Symbol, Any}(:name => "f80_9", :order => [2, 1, 3]),
  Dict{Symbol, Any}(:name => "f80_9", :order => [3, 2, 1]),
  Dict{Symbol, Any}(:name => "f81_10", :order => [1, 2, 3], :rootPower => 1),
  Dict{Symbol, Any}(:name =>"f81_10",:order=>[1,2, 3], :rootPower => E(3, 2)),
  Dict{Symbol,Any}(:name=>"f81_10", :order => [1, 2, 3], :rootPower => E(3))])

chevieset(:G32, :sparseFakeDegrees, [[1, 0], [1, 80], [1, 40], [1, 61, 1, 67, 1, 73, 1, 79], [1, 21, 1, 27, 1, 33, 1, 39], [1, 11, 1, 17, 1, 23, 1, 29], [1, 41, 1, 47, 1, 53, 1, 59], [1, 51, 1, 57, 1, 63, 1, 69], [1, 1, 1, 7, 1, 13, 1, 19], [1, 36, 1, 42, 1, 48, 1, 54, 1, 60], [1, 44, 1, 50, 1, 56, 1, 62, 1, 68], [1, 4, 1, 10, 1, 16, 1, 22, 1, 28], [1, 12, 1, 18, 1, 24, 1, 30, 1, 36], [1, 52, 1, 58, 1, 64, 1, 70, 1, 76], [1, 20, 1, 26, 1, 32, 1, 38, 1, 44], [1, 48, 1, 54, 2, 60, 1, 66, 1, 72], [1, 8, 1, 14, 2, 20, 1, 26, 1, 32], [1, 28, 1, 34, 2, 40, 1, 46, 1, 52], [1, 30, 1, 36, 2, 42, 2, 48, 2, 54, 1, 60, 1, 66], [1, 2, 1, 8, 2, 14, 2, 20, 2, 26, 1, 32, 1, 38], [1, 34, 1, 40, 2, 46, 2, 52, 2, 58, 1, 64, 1, 70], [1, 42, 1, 48, 2, 54, 2, 60, 2, 66, 1, 72, 1, 78], [1, 10, 1, 16, 2, 22, 2, 28, 2, 34, 1, 40, 1, 46], [1, 14, 1, 20, 2, 26, 2, 32, 2, 38, 1, 44, 1, 50], [1, 24, 1, 30, 2, 36, 2, 42, 3, 48, 2, 54, 2, 60, 1, 66, 1, 72], [1, 6, 2, 12, 3, 18, 3, 24, 3, 30, 2, 36, 1, 42], [1, 8, 1, 14, 2, 20, 2, 26, 3, 32, 2, 38, 2, 44, 1, 50, 1, 56], [1, 16, 1, 22, 2, 28, 2, 34, 3, 40, 2, 46, 2, 52, 1, 58, 1, 64], [1, 38, 2, 44, 3, 50, 3, 56, 3, 62, 2, 68, 1, 74], [1, 22, 2, 28, 3, 34, 3, 40, 3, 46, 2, 52, 1, 58], [1, 33, 2, 39, 3, 45, 4, 51, 4, 57, 3, 63, 2, 69, 1, 75], [1, 12, 1, 18, 3, 24, 3, 30, 4, 36, 3, 42, 3, 48, 1, 54, 1, 60], [1, 13, 2, 19, 3, 25, 4, 31, 4, 37, 3, 43, 2, 49, 1, 55], [1, 9, 2, 15, 3, 21, 4, 27, 4, 33, 3, 39, 2, 45, 1, 51], [1, 35, 2, 41, 3, 47, 4, 53, 4, 59, 3, 65, 2, 71, 1, 77], [1, 29, 2, 35, 3, 41, 4, 47, 4, 53, 3, 59, 2, 65, 1, 71], [1, 3, 2, 9, 3, 15, 4, 21, 4, 27, 3, 33, 2, 39, 1, 45], [1, 25, 2, 31, 3, 37, 4, 43, 4, 49, 3, 55, 2, 61, 1, 67], [1, 31, 2, 37, 3, 43, 4, 49, 4, 55, 3, 61, 2, 67, 1, 73], [1, 9, 2, 15, 3, 21, 4, 27, 4, 33, 3, 39, 2, 45, 1, 51], [1, 17, 2, 23, 3, 29, 4, 35, 4, 41, 3, 47, 2, 53, 1, 59], [1, 29, 2, 35, 3, 41, 4, 47, 4, 53, 3, 59, 2, 65, 1, 71], [1, 21, 2, 27, 3, 33, 4, 39, 4, 45, 3, 51, 2, 57, 1, 63], [1, 7, 2, 13, 3, 19, 4, 25, 4, 31, 3, 37, 2, 43, 1, 49], [1, 19, 2, 25, 3, 31, 4, 37, 4, 43, 3, 49, 2, 55, 1, 61], [1, 5, 2, 11, 3, 17, 4, 23, 4, 29, 3, 35, 2, 41, 1, 47], [1, 20, 1, 26, 3, 32, 3, 38, 4, 44, 3, 50, 3, 56, 1, 62, 1, 68], [1, 16, 1, 22, 3, 28, 3, 34, 4, 40, 3, 46, 3, 52, 1, 58, 1, 64], [1, 6, 2, 12, 3, 18, 4, 24, 4, 30, 4, 36, 3, 42, 2, 48, 1, 54], [1, 26, 2, 32, 3, 38, 4, 44, 4, 50, 4, 56, 3, 62, 2, 68, 1, 74], [1, 16, 2, 22, 3, 28, 4, 34, 4, 40, 4, 46, 3, 52, 2, 58, 1, 64], [1, 12, 2, 18, 4, 24, 5, 30, 6, 36, 5, 42, 4, 48, 2, 54, 1, 60], [1, 12, 2, 18, 4, 24, 5, 30, 6, 36, 5, 42, 4, 48, 2, 54, 1, 60], [1, 8, 2, 14, 4, 20, 5, 26, 6, 32, 5, 38, 4, 44, 2, 50, 1, 56], [1, 28, 2, 34, 4, 40, 5, 46, 6, 52, 5, 58, 4, 64, 2, 70, 1, 76], [1, 24, 2, 30, 4, 36, 5, 42, 6, 48, 5, 54, 4, 60, 2, 66, 1, 72], [1, 4, 2, 10, 4, 16, 5, 22, 6, 28, 5, 34, 4, 40, 2, 46, 1, 52], [1, 20, 2, 26, 4, 32, 5, 38, 6, 44, 5, 50, 4, 56, 2, 62, 1, 68], [1, 20, 2, 26, 4, 32, 5, 38, 6, 44, 5, 50, 4, 56, 2, 62, 1, 68], [1, 16, 2, 22, 4, 28, 5, 34, 6, 40, 5, 46, 4, 52, 2, 58, 1, 64], [1, 7, 3, 13, 5, 19, 7, 25, 7, 31, 6, 37, 4, 43, 2, 49, 1, 55], [1, 27, 3, 33, 5, 39, 7, 45, 7, 51, 6, 57, 4, 63, 2, 69, 1, 75], [1, 17, 3, 23, 5, 29, 7, 35, 7, 41, 6, 47, 4, 53, 2, 59, 1, 65], [1, 5, 2, 11, 4, 17, 6, 23, 7, 29, 7, 35, 5, 41, 3, 47, 1, 53], [1, 15, 2, 21, 4, 27, 6, 33, 7, 39, 7, 45, 5, 51, 3, 57, 1, 63], [1, 25, 2, 31, 4, 37, 6, 43, 7, 49, 7, 55, 5, 61, 3, 67, 1, 73], [1, 24, 3, 30, 5, 36, 7, 42, 8, 48, 7, 54, 5, 60, 3, 66, 1, 72], [1, 14, 3, 20, 5, 26, 7, 32, 8, 38, 7, 44, 5, 50, 3, 56, 1, 62], [1, 10, 3, 16, 5, 22, 7, 28, 8, 34, 7, 40, 5, 46, 3, 52, 1, 58], [1, 18, 3, 24, 5, 30, 7, 36, 8, 42, 7, 48, 5, 54, 3, 60, 1, 66], [1, 22, 3, 28, 5, 34, 7, 40, 8, 46, 7, 52, 5, 58, 3, 64, 1, 70], [1, 8, 3, 14, 5, 20, 7, 26, 8, 32, 7, 38, 5, 44, 3, 50, 1, 56], [1, 6, 2, 12, 5, 18, 7, 24, 9, 30, 8, 36, 7, 42, 4, 48, 2, 54], [1, 14, 2, 20, 5, 26, 7, 32, 9, 38, 8, 44, 7, 50, 4, 56, 2, 62], [1, 22, 2, 28, 5, 34, 7, 40, 9, 46, 8, 52, 7, 58, 4, 64, 2, 70], [2, 18, 4, 24, 7, 30, 8, 36, 9, 42, 7, 48, 5, 54, 2, 60, 1, 66], [2, 10, 4, 16, 7, 22, 8, 28, 9, 34, 7, 40, 5, 46, 2, 52, 1, 58], [2, 26, 4, 32, 7, 38, 8, 44, 9, 50, 7, 56, 5, 62, 2, 68, 1, 74], [1, 15, 3, 21, 6, 27, 9, 33, 11, 39, 11, 45, 9, 51, 6, 57, 3, 63, 1, 69], [2, 12, 4, 18, 8, 24, 10, 30, 12, 36, 10, 42, 8, 48, 4, 54, 2, 60], [1, 7, 3, 13, 6, 19, 9, 25, 11, 31, 11, 37, 9, 43, 6, 49, 3, 55, 1, 61], [1, 15, 3, 21, 6, 27, 9, 33, 11, 39, 11, 45, 9, 51, 6, 57, 3, 63, 1, 69], [1, 17, 3, 23, 6, 29, 9, 35, 11, 41, 11, 47, 9, 53, 6, 59, 3, 65, 1, 71], [1, 11, 3, 17, 6, 23, 9, 29, 11, 35, 11, 41, 9, 47, 6, 53, 3, 59, 1, 65], [1, 9, 3, 15, 6, 21, 9, 27, 11, 33, 11, 39, 9, 45, 6, 51, 3, 57, 1, 63], [1, 19, 3, 25, 6, 31, 9, 37, 11, 43, 11, 49, 9, 55, 6, 61, 3, 67, 1, 73], [1, 13, 3, 19, 6, 25, 9, 31, 11, 37, 11, 43, 9, 49, 6, 55, 3, 61, 1, 67], [1, 11, 3, 17, 6, 23, 9, 29, 11, 35, 11, 41, 9, 47, 6, 53, 3, 59, 1, 65], [2, 20, 4, 26, 8, 32, 10, 38, 12, 44, 10, 50, 8, 56, 4, 62, 2, 68], [2, 16, 4, 22, 8, 28, 10, 34, 12, 40, 10, 46, 8, 52, 4, 58, 2, 64], [1, 18, 3, 24, 6, 30, 10, 36, 12, 42, 12, 48, 10, 54, 6, 60, 3, 66, 1, 72], [2, 21, 5, 27, 8, 33, 11, 39, 12, 45, 11, 51, 8, 57, 5, 63, 2, 69], [1, 8, 3, 14, 6, 20, 10, 26, 12, 32, 12, 38, 10, 44, 6, 50, 3, 56, 1, 62], [2, 16, 5, 22, 8, 28, 11, 34, 12, 40, 11, 46, 8, 52, 5, 58, 2, 64], [1, 13, 3, 19, 6, 25, 10, 31, 12, 37, 12, 43, 10, 49, 6, 55, 3, 61, 1, 67], [2, 11, 5, 17, 8, 23, 11, 29, 12, 35, 11, 41, 8, 47, 5, 53, 2, 59], [1, 9, 4, 15, 8, 21, 12, 27, 15, 33, 15, 39, 12, 45, 8, 51, 4, 57, 1, 63], [1, 13, 4, 19, 8, 25, 12, 31, 15, 37, 15, 43, 12, 49, 8, 55, 4, 61, 1, 67], [1, 17, 4, 23, 8, 29, 12, 35, 15, 41, 15, 47, 12, 53, 8, 59, 4, 65, 1, 71], [1, 12, 4, 18, 7, 24, 12, 30, 14, 36, 15, 42, 12, 48, 9, 54, 5, 60, 2, 66], [2, 14, 5, 20, 9, 26, 12, 32, 15, 38, 14, 44, 12, 50, 7, 56, 4, 62, 1, 68], [1, 10, 2, 16, 6, 22, 10, 28, 14, 34, 15, 40, 14, 46, 10, 52, 6, 58, 2, 64, 1, 70]])
chevieset(:G32, :HeckeRepresentation, function (para, rt, i)
  u,v,w=para[1]
  f1=u->[[u;;],[u;;],[u;;],[u;;]]
  f4(w,v)=WGraph2Representation([[[1],[2],[3],[4]],[[1,2,w,-v],[2,3,w,-v],
                                                    [3,4,w,-v]]],[w,v])
  f5(u,w,v)=u^0*v^0*w^0*WGraph2Representation([[[1,3],[1,4],[2],[2,4],[3]],
    [[1,2,u,-w],[1,3,u,-w],[1,5,u,0],[2,4,u,-w],[3,4,0,-w],[4,5,-w,u]]],[u,w])
  f6(v,w)=map(x->exterior_power(x,2)//w,f4(v,w))
  f10(u,w,v)=WGraph2Representation([[[[2],[]],[[],[1,2]],[[1],[]],[[],[2,3]],
    [[3],[]],[[],[1,3]],[[],[2,4]],[[],[1,4]],[[],[3,4]],[[4],[]]],
    [[1,2,-1,u*v+w^2],[1,3,w,w],[1,4,1,-u*v-w^2],[1,5,w,w],[1,6,v,0],
     [2,3,-u*v-w^2,1],[2,6,-v*w,1],[4,5,u*v+w^2,-1],[4,6,v*w,-1],[4,7,-v*w,1],
     [5,7,v,0],[5,9,-1,u*v+w^2],[5,10,-w,-w],[6,8,v,-w],[7,8,-v,w],
     [7,9,1,-v*w],[9,10,u*v+w^2,-1]]],[u,w,v])
  f15a(v,u,w)=WGraph2Representation([[[[2,3],[]],[[3],[1,2]],[[1,3],[]],
    [[2],[1,3,4]],[[1],[2,3,4]],[[1,2,4],[]],[[2],[3,4]],[[3],[1,2,4]],
    [[1,3],[4]],[[2,4],[1]],[[1,4],[2,3]],[[],[1,2,3,4]],[[2,4],[]],
    [[4],[1,2,3]],[[1,3,4],[]]],[[1,2,-v,v^-1*w^2+u],[1,3,w,w],
    [1,7,v,-(v^-1)*w^2-u],[1,13,w,w],[2,3,-(v^-1)*w^2-u,v],[2,4,v,[2,-w,4,-u]],
    [2,8,0,-u],[2,10,w,[2,0,4,w]],[2,12,w,-w],[2,14,0,w],
    [3,4,0,[2,v^-1*w^2+u,4,0]],[3,5,v,-(v^-1)*w^2-u],[3,6,w,w],
    [3,9,0,-(v^-1)*w^2-u],[3,11,0,[2,0,4,v^-1*w^2+u]],[3,15,0,w],[4,5,-w,v],
    [4,7,u,0],[4,10,u,-v],[4,12,w-u*v*w^-1,0],[5,6,v^-1*w^2+u,-v],[5,7,w,0],
    [5,11,0,-w],[5,12,w,0],[6,10,v,0],[6,13,w,0],[7,8,-v,[1,u,3,w]],
    [7,9,w,[1,w,3,0]],[7,12,-w,w],[7,13,v^-1*w^2+u,-v],[8,9,-u,v],
    [8,12,w-u*v*w^-1,0],[8,13,[1,0,3,v^-1*w^2+u],0],[8,14,w,-v],
    [9,10,[1,0,3,w],[2,w,4,0]],[9,11,v,[2,-u,4,-w]],[9,12,w,-w],[9,15,0,-v],
    [10,11,-v,[1,w,3,u]],[10,12,-w,w],[10,13,v^-1*w^2+u,0],
    [11,12,w-u*v*w^-1,0],[11,13,[1,v^-1*w^2+u,3,0],0],[11,14,w,0],[12,14,0,-w],
    [13,14,-v,v^-1*w^2+u],[13,15,w,w],[14,15,-(v^-1)*w^2-u,v]]],[v,w,u])
  f15b(v,w,u)=WGraph2Representation([[[[2],[]],[[],[1,2]],[[1],[]],[[2],[]],
    [[],[2,3]],[[3],[1]],[[3],[]],[[1],[3]],[[],[3,4]],[[1],[4]],[[4],[1]],
    [[2],[4]],[[4],[2]],[[3],[]],[[4],[]]],[[1,2,-1,u*v+w^2],[1,3,w,w],
    [1,5,-1,u*v+v*w],[1,6,0,[1,0,3,v*w-v^2]],[1,7,1,v*w],[1,8,1,0],
    [2,3,-u*v-w^2,1],[2,4,u,0],[2,6,0,v],[2,8,-w,[1,0,3,u]],[3,8,0,u*v-u*w],
    [4,5,v-w,w],[4,6,u,[1,0,3,-v]],[4,7,-v+w,w],[4,8,-v,[1,u,3,0]],[4,12,0,-w],
    [5,6,-u,[1,w,3,0]],[5,7,-w-u*v*w^-1,w],[5,8,0,u],[5,12,u,[2,0,4,-w]],
    [5,13,0,w],[5,14,-u*v*w^-1,0],[6,7,v-w,0],[6,11,-v,u],[6,14,v,0],
    [7,9,-v,u+w],[7,12,u,0],[7,13,0,[2,0,4,v-w]],[7,15,v,w],[8,10,u,-w],
    [9,12,0,v],[9,13,u,[2,-w,4,0]],[9,14,w,v-w],[9,15,-w-u*v*w^-1,w],
    [10,12,u,-v],[11,13,u,-w],[12,14,[2,v,4,0],-u],[13,14,[2,0,4,v],-u],
    [13,15,-v+w,0],[14,15,-v+w,w]]],[v,w,u])
  rep=[[f1,u],[f1,w],[f1,v],[f4,v,w],[f4,u,v],[f4,w,u],[f4,w,v],[f4,u,w],
       [f4,v,u],[f5,u,w,v],[f5,w,v,u],[f5,v,u,w],[f5,u,v,w],[f5,v,w,u],
       [f5,w,u,v],[f6,v,w],[f6,u,v],[f6,w,u],[f10,u,w,v],[f10,w,v,u],
       [f10,v,u,w],[f10,u,v,w],[f10,v,w,u],[f10,w,u,v],[f15a,v,u,w],
       [f15b,v,w,u],[f15a,v,w,u],[f15a,u,v,w],[f15b,u,v,w],[f15b,w,u,v]]
  if i<=length(rep) rep[i][1](rep[i][2:end]...) end
end)

const G32cachedreps=Dict{Int,Any}()

chevieset(:G32, :Representation, function(i)
  r=chevieget(:G32,:HeckeRepresentation)(fill([1,E(3),E(3,2)],4),[],i)
  if !isnothing(r) return r end
  function f(i)
    get!(G32cachedreps,i)do
      InfoChevie("#I calling rep(",i,")\n")
      chevieget(:G32, :Representation)(i)
    end
  end
  if i==31 r=map(kron, f(4), f(15))
  elseif i==32 r=map(x->schur_functor(x, [2, 2]), f(5))
  elseif i==33 r=E(3)* f(34)
  elseif i==34 r=map(x->symmetric_power(x,3), f(4))
  elseif i==35 r=E(3,2)*f(34)
  elseif i==36 r=conj(f(33))
  elseif i==37 r=E(3)* f(36)
  elseif i==38 r=E(3,2)*f(36)
  elseif i==39 r=map(x->schur_functor(x, [2, 2, 1]),f(6))
  elseif i==40 r=E(3,2)*f(39)
  elseif i==41 r=E(3)* f(39)
  elseif i==42 r=conj(f(39))
  elseif i==43 r=E(3)* f(42)
  elseif i==44 r=E(3,2)*f(42)
  elseif i==45 r=E(3)*f(31)
  elseif i==46 r=E(3,2)*f(31)
  elseif i==47 r=E(3,2)*f(32)
  elseif i==48 r=E(3)*f(32)
  elseif i==49 r=map(x->schur_functor(x, [2, 1, 1, 1]),f(10))
  elseif i==50 r=E(3,2)*f(49)
  elseif i==52
  r=expandrep(4,30,[(-1,[183,260,269,275,414,530,604,635,659,678,715,755,
 861, 868, 885, 888, 894, 1014, 1046, 1108, 1125, 1235, 1300, 1335, 1406,
 1410, 1412, 1418, 1437, 1464, 1526, 1692, 1827, 1886, 1888, 1892, 1898, 1938,
 1979, 2004, 2017, 2023, 2035, 2204, 2206, 2295, 2338, 2397, 2496, 2579, 2602,
 2604, 2617, 2623, 2635, 2675, 2712, 2819, 2908, 2925, 2934, 3015, 3054, 3086,
 3092, 3098, 3117, 3174, 3232, 3291, 3344, 3358, 3395, 3411, 3419, 3422, 3475,
 3478, 3531, 3539, 3541, 3564, 3577, 3583, 3595, 3598]), (1, [17, 38, 52, 59,
 62, 121, 150, 156, 171, 182, 208, 238, 242, 251, 299, 324, 337, 343, 363,
 413, 419, 422, 430, 444, 457, 463, 475, 485, 515, 528, 540, 542, 599, 609,
 615, 623, 654, 686, 688, 692, 698, 717, 727, 733, 735, 746, 782, 806, 808,
 812, 818, 837, 848, 871, 874, 891, 955, 958, 966, 992, 1009, 1011, 1019,
 1022, 1044, 1057, 1063, 1075, 1078, 1090, 1123, 1148, 1157, 1166, 1172, 1178,
 1214, 1286, 1307, 1309, 1336, 1355, 1405, 1468, 1485, 1487, 1497, 1499, 1502,
 1506, 1579, 1585, 1588, 1605, 1608, 1622, 1654, 1695, 1702, 1713, 1742, 1767,
 1772, 1778, 1797, 1828, 1845, 1859, 1864, 1957, 1974, 2000, 2006, 2008, 2012,
 2015, 2018, 2082, 2088, 2102, 2109, 2111, 2126, 2128, 2132, 2138, 2175, 2222,
 2227, 2246, 2248, 2252, 2258, 2265, 2277, 2315, 2320, 2328, 2345, 2391, 2428,
 2445, 2448, 2459, 2462, 2473, 2479, 2574, 2576, 2655, 2668, 2685, 2699, 2702,
 2714, 2724, 2729, 2737, 2743, 2757, 2801, 2835, 2846, 2848, 2915, 2956, 2981,
 2995, 3035, 3051, 3099, 3102, 3108, 3115, 3118, 3159, 3171, 3179, 3182, 3201,
 3204, 3217, 3223, 3226, 3235, 3238, 3288, 3323, 3326, 3333, 3350, 3414, 3446,
 3451, 3473, 3476, 3528, 3534, 3535, 3566, 3572, 3578, 3594, 3600])])
  elseif i==51 r=E(3)*f(49)
  elseif i==53 r=map(kron, f(10), f(16))
  elseif i==54 r=E(3,2)*f(53)
  elseif i==55 r=E(3)*f(53)
  elseif i==56 r=conj(f(53))
  elseif i==57 r=E(3)*f(56)
  elseif i==58 r=E(3,2)*f(56)
  elseif i==59 r=E(3,2)*f(52)
  elseif i==60 r=E(3)*f(52)
  elseif i==61 r=map(x->schur_functor(x, [3, 1, 1]), f(7))
  elseif i==62 r=E(3,2)*f(61)
  elseif i==63 r=E(3)*f(61)
  elseif i==64 r=conj(f(61))
  elseif i==65 r=E(3)*f(64)
  elseif i==66 r=E(3,2)*f(64)
  elseif i==67 r=map(x->schur_functor(x, [2, 1]), f(13))
  elseif i==68 r=E(3,2)*f(67)
  elseif i==69 r=E(3)*f(67)
  elseif i==70 r=conj(f(67))
  elseif i==71 r=E(3)*f(70)
  elseif i==72 r=E(3,2)*f(70)
  elseif i==73 r=map(x->exterior_power(x, 2),f(22))
  elseif i==74 r=E(3,2)*f(73)
  elseif i==75 r=E(3)*f(73)
  elseif i==76 r=conj(f(73))
  elseif i==77 r=E(3)*f(76)
  elseif i==78 r=E(3,2)*f(76)
  elseif i==79 r=map(x->schur_functor(x, [3, 2]), f(5))
  elseif i==80
  r=expandrep(4,60,[(-3,[11607,11707,11731,12805,12905,12929,13628,13652]),(-2,
 [39, 3154, 4118, 5789, 5793, 6498, 6995, 8826, 8850, 9140, 12105, 13476,
 13508, 13524, 13528, 13698, 13940]), (-1, [4, 5, 11, 12, 15, 19, 20, 24, 33,
 40, 41, 52, 75, 96, 107, 108, 131, 133, 159, 175, 180, 191, 196, 200, 223,
 235, 274, 401, 497, 687, 768, 1183, 1206, 1209, 1219, 1232, 1242, 1295, 1311,
 1336, 1423, 1460, 1465, 1468, 1478, 1489, 1503, 1514, 1534, 1545, 1548, 1572,
 1618, 1622, 1644, 1682, 1695, 1699, 1719, 1855, 1879, 1915, 1928, 1994, 2109,
 2209, 2227, 2429, 2533, 2656, 2706, 2725, 2774, 2786, 2809, 2811, 2816, 2838,
 2904, 2910, 2914, 2973, 2983, 3014, 3066, 3121, 3126, 3129, 3137, 3141, 3150,
 3157, 3169, 3174, 3186, 3190, 3202, 3206, 3213, 3225, 3238, 3250, 3258, 3270,
 3282, 3297, 3306, 3313, 3317, 3322, 3330, 3338, 3342, 3486, 3609, 3620, 3639,
 3661, 3663, 3692, 3698, 3701, 3821, 3823, 3898, 3906, 3926, 3941, 3946, 3954,
 3974, 3988, 4026, 4090, 4094, 4098, 4154, 4186, 4210, 4232, 4238, 4254, 4270,
 4302, 4314, 4356, 4425, 4588, 4602, 4618, 4626, 4666, 4668, 4674, 4682, 4692,
 4694, 4714, 4717, 4732, 4738, 4758, 4909, 4930, 4956, 4991, 5056, 5088, 5153,
 5211, 5216, 5307, 5311, 5322, 5323, 5331, 5342, 5382, 5383, 5387, 5415, 5424,
 5509, 5532, 5779, 5803, 5804, 5813, 5819, 5821, 5825, 5841, 5857, 5864, 5875,
 5877, 5881, 5893, 5895, 5909, 5933, 5945, 5959, 5969, 5973, 5977, 5981, 5993,
 6062, 6079, 6417, 6432, 6494, 6516, 6522, 6556, 6606, 6612, 6617, 6675, 6678,
 6704, 6733, 6807, 6892, 6907, 6931, 6965, 6967, 6980, 6991, 6993, 7015, 7027,
 7031, 7041, 7043, 7047, 7068, 7079, 7082, 7089, 7091, 7099, 7109, 7111, 7123,
 7130, 7147, 7160, 7161, 7163, 7171, 7179, 7181, 7183, 7217, 7222, 7234, 7250,
 7266, 7282, 7286, 7306, 7322, 7325, 7354, 7357, 7378, 7386, 7390, 7394, 7410,
 7414, 7460, 7480, 7526, 7632, 7640, 7676, 7686, 7689, 7697, 7722, 7766, 7773,
 7805, 7806, 7817, 7818, 7866, 7890, 7904, 7961, 8016, 8288, 8370, 8418, 8435,
 8475, 8504, 8531, 8623, 8646, 8670, 8671, 8674, 8676, 8680, 8686, 8694, 8706,
 8708, 8710, 8716, 8722, 8724, 8726, 8748, 8758, 8762, 8772, 8778, 8796, 8802,
 8822, 8832, 8854, 8858, 8864, 8878, 8997, 9098, 9120, 9132, 9139, 9153, 9160,
 9193, 9247, 9248, 9249, 9279, 9320, 9341, 9342, 9356, 9370, 9376, 9378, 9380,
 9408, 9454, 9486, 9488, 9518, 9577, 9603, 9765, 9847, 9875, 9883, 9890, 9975,
 10414, 10583, 10756, 10808, 10825, 10830, 10836, 10868, 10872, 10876, 10884,
 10888, 10920, 10932, 10940, 10952, 10964, 10984, 10988, 10992, 10999, 11004,
 11012, 11020, 11024, 11155, 11444, 11454, 11473, 11495, 11522, 11530, 11542,
 11555, 11558, 11571, 11587, 11591, 11594, 11599, 11603, 11659, 11682, 11686,
 11688, 11702, 11710, 11714, 11715, 11735, 11739, 11772, 11778, 11821, 11886,
 11958, 11959, 11967, 12012, 12019, 12025, 12049, 12070, 12076, 12081, 12096,
 12127, 12129, 12153, 12160, 12184, 12199, 12220, 12250, 12314, 12315, 12334,
 12398, 12422, 12461, 12462, 12498, 12538, 12568, 12574, 12606, 12614, 12618,
 12649, 12730, 12738, 12753, 12769, 12785, 12789, 12797, 12801, 12846, 12857,
 12878, 12913, 12933, 12937, 12972, 12999, 13114, 13132, 13158, 13265, 13432,
 13434, 13448, 13469, 13472, 13478, 13488, 13496, 13512, 13556, 13560, 13564,
 13572, 13580, 13592, 13604, 13610, 13644, 13648, 13656, 13660, 13668, 13694,
 13806, 13825, 13878, 13907, 13931, 13936, 13937, 13939, 13961, 13977, 14033,
 14047, 14048, 14053, 14079, 14117, 14120, 14170, 14177, 14265, 14330, 14357,
 14391]), (1, [1, 7, 8, 9, 17, 25, 31, 32, 35, 43, 49, 55, 56, 59, 68, 71, 72,
 84, 88, 105, 115, 119, 120, 123, 132, 135, 140, 152, 163, 164, 165, 182, 188,
 193, 204, 212, 215, 220, 224, 271, 316, 616, 642, 805, 918, 931, 971, 981,
 983, 998, 1004, 1011, 1031, 1043, 1047, 1067, 1139, 1147, 1155, 1167, 1171,
 1179, 1204, 1210, 1212, 1223, 1224, 1235, 1240, 1250, 1251, 1267, 1271, 1275,
 1276, 1279, 1283, 1306, 1307, 1364, 1368, 1374, 1384, 1392, 1394, 1395, 1396,
 1407, 1415, 1419, 1464, 1466, 1477, 1480, 1490, 1504, 1513, 1516, 1520, 1528,
 1533, 1546, 1617, 1621, 1624, 1628, 1652, 1656, 1681, 1687, 1711, 1715, 1735,
 1736, 1739, 1747, 1751, 1763, 1795, 1799, 1803, 1819, 1843, 1883, 1991, 2180,
 2202, 2401, 2409, 2418, 2421, 2437, 2440, 2473, 2519, 2561, 2565, 2581, 2589,
 2593, 2650, 2653, 2655, 2685, 2687, 2728, 2755, 2813, 2827, 2828, 2852, 2882,
 2890, 2898, 2902, 2918, 2954, 2974, 3046, 3058, 3062, 3070, 3074, 3122, 3125,
 3130, 3138, 3142, 3149, 3158, 3170, 3173, 3185, 3189, 3201, 3205, 3214, 3226,
 3237, 3244, 3249, 3255, 3257, 3269, 3281, 3298, 3305, 3314, 3318, 3321, 3329,
 3337, 3341, 3420, 3428, 3456, 3457, 3496, 3508, 3595, 3611, 3617, 3619, 3621,
 3623, 3627, 3644, 3651, 3664, 3665, 3667, 3671, 3683, 3687, 3704, 3779, 3787,
 3795, 3797, 3807, 3811, 3966, 4059, 4086, 4110, 4114, 4122, 4134, 4138, 4150,
 4194, 4198, 4202, 4214, 4219, 4242, 4293, 4294, 4326, 4331, 4568, 4570, 4576,
 4584, 4598, 4600, 4608, 4611, 4622, 4634, 4638, 4652, 4656, 4658, 4672, 4686,
 4688, 4700, 4704, 4710, 4712, 4718, 4740, 4742, 4744, 4778, 4782, 4794, 5098,
 5127, 5128, 5155, 5212, 5227, 5251, 5283, 5287, 5298, 5315, 5347, 5363, 5370,
 5371, 5399, 5411, 5431, 5443, 5471, 5483, 5507, 5511, 5557, 5710, 5743, 5761,
 5769, 5771, 5781, 5795, 5799, 5800, 5801, 5811, 5823, 5835, 5843, 5852, 5859,
 5860, 5862, 5879, 5885, 5911, 5925, 5935, 5943, 5951, 5953, 5955, 5957, 5971,
 5975, 5979, 5983, 5995, 6092, 6221, 6259, 6426, 6486, 6492, 6504, 6510, 6518,
 6532, 6534, 6542, 6546, 6554, 6562, 6566, 6576, 6578, 6584, 6590, 6592, 6598,
 6602, 6608, 6620, 6624, 6630, 6642, 6660, 6662, 6666, 6670, 6676, 6690, 6694,
 6698, 6714, 6735, 6736, 6768, 6786, 6836, 6895, 6908, 6963, 6969, 6971, 6974,
 6978, 6979, 6981, 6983, 6985, 6999, 7004, 7009, 7011, 7032, 7036, 7044, 7055,
 7061, 7065, 7067, 7080, 7096, 7100, 7108, 7110, 7112, 7125, 7134, 7139, 7153,
 7155, 7159, 7176, 7178, 7184, 7192, 7194, 7200, 7218, 7221, 7232, 7233, 7249,
 7265, 7281, 7285, 7305, 7321, 7326, 7331, 7353, 7358, 7377, 7385, 7389, 7393,
 7409, 7413, 7448, 7472, 7476, 7488, 7496, 7500, 7512, 7524, 7556, 7560, 7563,
 7564, 7576, 7580, 7593, 7604, 7624, 7656, 7660, 7680, 7713, 7717, 7718, 7745,
 7753, 7754, 7761, 7785, 7786, 7807, 7809, 7810, 7833, 7854, 7869, 7870, 7901,
 7902, 7914, 8026, 8071, 8195, 8241, 8411, 8423, 8438, 8451, 8462, 8495, 8502,
 8503, 8511, 8527, 8529, 8539, 8542, 8543, 8579, 8595, 8643, 8647, 8652, 8658,
 8660, 8675, 8678, 8679, 8707, 8715, 8723, 8729, 8736, 8768, 8771, 8780, 8787,
 8803, 8823, 8831, 8838, 8843, 8863, 8867, 8871, 8874, 8935, 9129, 9141, 9143,
 9152, 9155, 9164, 9168, 9169, 9171, 9176, 9180, 9187, 9192, 9203, 9204, 9207,
 9213, 9221, 9227, 9229, 9236, 9240, 9243, 9244, 9245, 9257, 9260, 9261, 9268,
 9275, 9276, 9297, 9299, 9304, 9307, 9311, 9313, 9315, 9331, 9335, 9336, 9340,
 9344, 9352, 9360, 9390, 9394, 9396, 9400, 9426, 9428, 9436, 9442, 9446, 9455,
 9478, 9480, 9514, 9524, 9532, 9544, 9546, 9552, 9570, 9574, 9584, 9592, 9708,
 9770, 9843, 9845, 9851, 9859, 9867, 9891, 9947, 10007, 10020, 10035, 10090,
 10095, 10253, 10268, 10407, 10492, 10505, 10582, 10633, 11000, 11174, 11209,
 11216, 11550, 11553, 11559, 11615, 11623, 11631, 11654, 11679, 11711, 11743,
 11766, 11771, 11794, 11826, 11828, 11834, 11835, 11842, 11846, 11855, 11878,
 11896, 11908, 11910, 11919, 11922, 11942, 11943, 11946, 11950, 11960, 11970,
 11974, 11978, 11982, 11983, 12005, 12007, 12035, 12067, 12075, 12083, 12087,
 12093, 12109, 12117, 12119, 12125, 12137, 12149, 12151, 12156, 12161, 12163,
 12181, 12183, 12187, 12191, 12200, 12211, 12215, 12219, 12223, 12249, 12261,
 12289, 12309, 12321, 12325, 12345, 12417, 12425, 12433, 12438, 12445, 12446,
 12449, 12457, 12468, 12514, 12518, 12554, 12562, 12565, 12586, 12593, 12610,
 12634, 12651, 12665, 12670, 12689, 12702, 12750, 12754, 12757, 12778, 12803,
 12806, 12813, 12821, 12829, 12834, 12838, 12840, 12842, 12854, 12858, 12877,
 12882, 12909, 12930, 12934, 12941, 12968, 12970, 12976, 12996, 13008, 13028,
 13034, 13037, 13044, 13054, 13092, 13108, 13112, 13116, 13118, 13142, 13152,
 13164, 13178, 13184, 13359, 13441, 13445, 13446, 13452, 13454, 13458, 13460,
 13473, 13474, 13477, 13480, 13486, 13505, 13506, 13510, 13513, 13521, 13522,
 13526, 13536, 13566, 13569, 13570, 13578, 13585, 13586, 13590, 13600, 13601,
 13612, 13621, 13626, 13629, 13641, 13642, 13650, 13658, 13661, 13665, 13666,
 13669, 13679, 13686, 13710, 13734, 13738, 13750, 13754, 13762, 13794, 13798,
 13802, 13812, 13814, 13818, 13862, 13894, 13898, 13902, 13910, 13918, 13928,
 13929, 13951, 13952, 13953, 13955, 13957, 13969, 13976, 13979, 13980, 13981,
 13992, 13993, 13996, 14001, 14004, 14007, 14017, 14035, 14036, 14037, 14039,
 14040, 14043, 14044, 14055, 14056, 14059, 14060, 14069, 14074, 14083, 14093,
 14101, 14104, 14109, 14113, 14129, 14131, 14133, 14135, 14136, 14137, 14140,
 14141, 14144, 14152, 14153, 14160, 14166, 14174, 14194, 14201, 14206, 14226,
 14229, 14232, 14233, 14241, 14242, 14277, 14290, 14293, 14297, 14305, 14306,
 14309, 14310, 14314, 14350, 14362, 14373, 14381, 14382, 14389, 14397]), (2,
 [36, 67, 139, 1287, 1387, 1411, 1767, 1867, 1891, 3153, 3707, 3819, 4146,
 4218, 5319, 5355, 5463, 5503, 5777, 6514, 6702, 6968, 6996, 7028, 7048, 7124,
 7144, 7148, 7172, 7180, 7508, 7528, 7652, 9128, 9156, 9208, 9256, 9284, 9332,
 12786, 12906, 13714, 13746, 13766, 13842, 13890, 13956, 13987, 13988, 14008,
 14084, 14107, 14132, 14165, 14193, 14225, 14245, 14321, 14341, 14345, 14369,
 14377]), (3, [87, 187, 211, 4166, 4266, 4290, 7628, 9188, 9308, 13866,
 14108])])
  elseif i==81 r=map(kron, f(4), f(25))
  elseif i==82 r=E(3,2)*f(81)
  elseif i==83 r=E(3)*f(81)
  elseif i==84 r=conj(f(81))
  elseif i==85 r=E(3)*f(84)
  elseif i==86 r=E(3,2)*f(84)
  elseif i==87 r=E(3)*f(79)
  elseif i==88 r=E(3,2)*f(79)
  elseif i==89 r=E(3,2)*f(80)
  elseif i==90 r=E(3)*f(80)
  elseif i==91
    r=expandrep(4,64,[(-4,[8306,8374,9585,9653,9841,9909]),(-3,[8378,9657,9913,
 13940, 14008, 14194, 14262]), (-2, [2345, 4323, 5045, 5081, 7906, 8254, 8310,
 8330, 8362, 8373, 8410, 8419, 8438, 9186, 9314, 9533, 9557, 9579, 9589, 9609,
 9641, 9689, 9717, 9789, 9845, 9865, 9897, 9945, 9973, 10724, 11489, 12373,
 12887, 12919, 13611, 13964, 14012, 14072, 14218, 14266, 14326, 15585, 16229,
 16241, 16309, 16313, 16373]), (-1, [10, 16, 99, 524, 533, 550, 672, 740, 778,
 784, 793, 811, 926, 994, 1102, 1301, 1543, 1563, 1567, 1579, 1599, 1607,
 1639, 1651, 1723, 1783, 1878, 2044, 2083, 2143, 2309, 2325, 2329, 2344, 2373,
 2377, 2409, 2449, 2464, 2471, 2517, 2532, 2565, 2585, 2589, 2601, 2602, 2621,
 2629, 2661, 2666, 2673, 2745, 2805, 2819, 2877, 2936, 3085, 3092, 3124, 3127,
 3390, 3418, 3425, 3426, 3438, 3442, 3446, 3455, 3466, 3486, 3498, 3510, 3514,
 3574, 3586, 3629, 3643, 3673, 3681, 3685, 3701, 3714, 3749, 3762, 3797, 3809,
 3810, 3821, 3822, 3829, 3938, 3944, 3965, 4103, 4107, 4120, 4128, 4134, 4135,
 4140, 4143, 4155, 4161, 4171, 4184, 4210, 4214, 4234, 4254, 4255, 4266, 4282,
 4310, 4311, 4316, 4369, 4401, 4510, 4617, 4676, 4681, 4716, 4765, 4792, 4808,
 4833, 4869, 4873, 4893, 4903, 4925, 4929, 4942, 4973, 4977, 4979, 4983, 5003,
 5020, 5023, 5025, 5035, 5037, 5051, 5061, 5079, 5085, 5093, 5280, 5500, 5542,
 5585, 5671, 5697, 5731, 5747, 5751, 5771, 5803, 5811, 5815, 5819, 6021, 6064,
 6173, 6242, 6248, 6269, 6392, 6502, 6633, 6646, 6668, 6671, 6695, 6721, 6761,
 6763, 6835, 6837, 6853, 6910, 6927, 6976, 7102, 7176, 7196, 7206, 7212, 7216,
 7240, 7258, 7265, 7266, 7278, 7281, 7282, 7285, 7286, 7305, 7306, 7338, 7349,
 7350, 7353, 7354, 7357, 7413, 7431, 7451, 7467, 7471, 7495, 7525, 7612, 7715,
 7763, 7767, 7774, 7783, 7787, 7795, 7799, 7803, 7821, 7847, 7863, 7871, 7899,
 7903, 7927, 7930, 7955, 8172, 8198, 8201, 8203, 8214, 8222, 8231, 8239, 8245,
 8249, 8253, 8262, 8267, 8278, 8282, 8289, 8290, 8294, 8302, 8305, 8321, 8329,
 8335, 8345, 8351, 8353, 8361, 8377, 8381, 8382, 8385, 8386, 8393, 8407, 8409,
 8414, 8422, 8433, 8493, 8507, 8537, 8545, 8565, 8569, 8613, 8652, 8661, 8673,
 8685, 8693, 8736, 8930, 8941, 9035, 9052, 9054, 9060, 9072, 9080, 9088, 9101,
 9103, 9132, 9200, 9210, 9226, 9259, 9306, 9326, 9334, 9342, 9363, 9374, 9378,
 9386, 9398, 9418, 9434, 9477, 9493, 9501, 9505, 9515, 9539, 9541, 9561, 9569,
 9573, 9581, 9607, 9619, 9661, 9665, 9671, 9683, 9686, 9693, 9701, 9707, 9723,
 9733, 9749, 9757, 9778, 9797, 9813, 9817, 9825, 9829, 9837, 9882, 9884, 9887,
 9917, 9921, 9943, 9949, 9955, 9956, 9957, 9963, 10020, 10122, 10142, 10177,
 10248, 10268, 10276, 10288, 10312, 10324, 10332, 10364, 10404, 10408, 10449,
 10460, 10464, 10473, 10501, 10517, 10521, 10537, 10541, 10565, 10569, 10592,
 10663, 10709, 10721, 10733, 10748, 10835, 10859, 10949, 11209, 11226, 11232,
 11266, 11273, 11279, 11301, 11302, 11307, 11309, 11337, 11367, 11371, 11405,
 11421, 11442, 11444, 11477, 11487, 11490, 11525, 11545, 11546, 11561, 11562,
 11581, 11589, 11620, 11626, 11640, 11770, 12096, 12222, 12237, 12283, 12298,
 12302, 12334, 12346, 12353, 12362, 12365, 12382, 12389, 12391, 12393, 12397,
 12401, 12405, 12409, 12410, 12421, 12433, 12450, 12453, 12461, 12462, 12469,
 12505, 12509, 12514, 12521, 12527, 12533, 12537, 12538, 12552, 12572, 12595,
 12608, 12611, 12616, 12623, 12631, 12648, 12660, 12663, 12679, 12687, 12732,
 12741, 12756, 12780, 12792, 12805, 12825, 12831, 12841, 12851, 12860, 12867,
 12869, 12879, 12893, 12899, 12903, 12905, 12911, 12915, 12927, 12928, 12932,
 12933, 12935, 12939, 12952, 12971, 12983, 12987, 12991, 12996, 12997, 13003,
 13004, 13007, 13012, 13019, 13025, 13033, 13044, 13047, 13049, 13052, 13146,
 13154, 13166, 13174, 13182, 13184, 13203, 13226, 13241, 13294, 13456, 13478,
 13521, 13573, 13577, 13592, 13597, 13601, 13607, 13616, 13628, 13633, 13644,
 13647, 13649, 13655, 13657, 13660, 13661, 13665, 13671, 13675, 13677, 13690,
 13696, 13700, 13703, 13711, 13712, 13715, 13720, 13727, 13729, 13734, 13749,
 13764, 13765, 13772, 13782, 13783, 13785, 13793, 13796, 13797, 13808, 13833,
 13856, 13877, 13888, 13912, 13921, 13924, 13928, 13931, 13936, 13942, 13944,
 13985, 13996, 14016, 14041, 14044, 14091, 14110, 14137, 14142, 14163, 14166,
 14171, 14178, 14179, 14182, 14190, 14198, 14205, 14209, 14229, 14243, 14250,
 14270, 14273, 14281, 14289, 14298, 14307, 14321, 14329, 14341, 14351, 14361,
 14377, 14405, 14419, 14424, 14441, 14443, 14474, 14499, 14506, 14522, 14533,
 14563, 14594, 14597, 14598, 14601, 14607, 14617, 14635, 14637, 14638, 14649,
 14662, 14665, 14699, 14770, 14772, 14805, 14817, 14818, 14845, 14846, 14947,
 14967, 14975, 15087, 15146, 15155, 15210, 15213, 15262, 15278, 15318, 15367,
 15369, 15373, 15383, 15384, 15387, 15391, 15403, 15405, 15407, 15408, 15417,
 15420, 15426, 15431, 15433, 15435, 15436, 15441, 15452, 15453, 15466, 15492,
 15498, 15501, 15521, 15542, 15556, 15558, 15566, 15575, 15576, 15587, 15588,
 15600, 15609, 15728, 15865, 15915, 15994, 16017, 16123, 16142, 16145, 16157,
 16167, 16168, 16193, 16213, 16233, 16237, 16243, 16245, 16247, 16265, 16267,
 16287, 16297, 16299, 16315, 16325, 16333, 16361]), (1, [5, 63, 273, 284, 287,
 290, 548, 596, 600, 603, 616, 620, 628, 632, 680, 696, 704, 732, 736, 760,
 772, 776, 796, 802, 832, 840, 850, 854, 870, 874, 882, 884, 886, 908, 934,
 950, 952, 956, 958, 986, 990, 1014, 1016, 1025, 1076, 1079, 1289, 1338, 1347,
 1356, 1585, 1608, 1618, 1635, 1655, 1845, 1855, 2105, 2132, 2138, 2306, 2312,
 2313, 2332, 2340, 2352, 2353, 2357, 2368, 2369, 2376, 2388, 2392, 2393, 2408,
 2413, 2424, 2428, 2429, 2441, 2453, 2465, 2473, 2492, 2493, 2496, 2505, 2509,
 2513, 2521, 2560, 2566, 2570, 2606, 2622, 2646, 2650, 2657, 2658, 2670, 2671,
 2674, 2676, 2677, 2678, 2682, 2722, 2726, 2734, 2782, 2806, 2814, 2910, 3079,
 3099, 3136, 3143, 3187, 3188, 3212, 3226, 3256, 3259, 3260, 3307, 3319, 3320,
 3362, 3370, 3389, 3410, 3434, 3462, 3470, 3474, 3476, 3550, 3578, 3590, 3594,
 3614, 3625, 3646, 3650, 3689, 3694, 3698, 3716, 3717, 3719, 3729, 3737, 3746,
 3758, 3782, 3785, 3806, 3814, 3825, 3833, 3847, 4102, 4106, 4115, 4122, 4127,
 4130, 4131, 4147, 4154, 4163, 4178, 4179, 4185, 4190, 4195, 4199, 4203, 4207,
 4211, 4218, 4219, 4222, 4223, 4226, 4231, 4246, 4251, 4258, 4262, 4263, 4267,
 4283, 4287, 4298, 4299, 4303, 4308, 4314, 4318, 4319, 4332, 4338, 4343, 4347,
 4350, 4360, 4413, 4455, 4465, 4489, 4533, 4537, 4597, 4641, 4656, 4689, 4693,
 4700, 4709, 4713, 4721, 4725, 4738, 4751, 4773, 4789, 4797, 4825, 4829, 4836,
 4848, 4853, 4865, 4871, 4875, 4882, 4891, 4899, 4911, 4919, 4923, 4947, 4959,
 4987, 4991, 4993, 4995, 5015, 5027, 5031, 5041, 5067, 5083, 5087, 5089, 5101,
 5107, 5119, 5249, 5282, 5299, 5467, 5547, 5638, 5659, 5667, 5715, 5727, 5739,
 5755, 5796, 5799, 5883, 5923, 6058, 6151, 6191, 6206, 6583, 6592, 6667, 6683,
 6687, 6691, 6701, 6703, 6727, 6743, 6745, 6747, 6751, 6759, 6767, 6779, 6823,
 6831, 6843, 6879, 6881, 6887, 6893, 6907, 6911, 7012, 7049, 7194, 7209, 7210,
 7268, 7274, 7280, 7288, 7308, 7334, 7352, 7355, 7417, 7418, 7523, 7535, 7543,
 7563, 7598, 7607, 7691, 7742, 7766, 7778, 7782, 7790, 7818, 7839, 7846, 7850,
 7870, 7902, 7907, 7908, 7981, 8146, 8206, 8211, 8219, 8227, 8235, 8243, 8255,
 8263, 8269, 8275, 8277, 8285, 8286, 8293, 8298, 8299, 8303, 8311, 8314, 8315,
 8319, 8323, 8325, 8331, 8333, 8347, 8359, 8363, 8383, 8388, 8395, 8399, 8415,
 8417, 8418, 8425, 8429, 8435, 8441, 8442, 8443, 8478, 8489, 8553, 8574, 8581,
 8589, 8593, 8597, 8649, 8657, 8689, 8697, 8731, 8968, 8988, 9004, 9022, 9032,
 9046, 9058, 9062, 9068, 9070, 9081, 9098, 9126, 9130, 9150, 9160, 9162, 9182,
 9222, 9242, 9250, 9258, 9286, 9298, 9310, 9315, 9318, 9322, 9335, 9355, 9399,
 9414, 9423, 9456, 9461, 9483, 9485, 9495, 9503, 9519, 9527, 9531, 9535, 9547,
 9577, 9583, 9587, 9591, 9599, 9603, 9611, 9635, 9643, 9655, 9659, 9667, 9681,
 9691, 9697, 9699, 9705, 9711, 9716, 9719, 9721, 9741, 9751, 9759, 9763, 9783,
 9787, 9791, 9808, 9811, 9815, 9816, 9819, 9821, 9827, 9831, 9832, 9833, 9839,
 9844, 9847, 9848, 9849, 9855, 9859, 9867, 9879, 9891, 9896, 9899, 9912, 9915,
 9919, 9920, 9923, 9931, 9948, 9951, 9952, 9953, 9971, 9975, 9976, 9977, 9990,
 10010, 10015, 10018, 10030, 10047, 10054, 10066, 10071, 10074, 10087, 10095,
 10099, 10106, 10146, 10150, 10159, 10167, 10202, 10203, 10206, 10231, 10261,
 10266, 10269, 10281, 10325, 10380, 10400, 10457, 10467, 10505, 10526, 10535,
 10549, 10560, 10561, 10584, 10596, 10600, 10605, 10608, 10613, 10621, 10633,
 10636, 10645, 10657, 10664, 10665, 10668, 10685, 10688, 10697, 10701, 10705,
 10713, 10720, 10737, 10745, 10759, 10763, 10798, 10799, 10815, 10867, 10927,
 10935, 10971, 10972, 10975, 10983, 11007, 11239, 11270, 11274, 11281, 11289,
 11290, 11294, 11297, 11298, 11305, 11313, 11325, 11326, 11333, 11345, 11346,
 11354, 11355, 11363, 11366, 11369, 11373, 11374, 11381, 11385, 11389, 11393,
 11401, 11417, 11423, 11426, 11429, 11430, 11433, 11434, 11450, 11453, 11465,
 11469, 11485, 11486, 11491, 11494, 11496, 11505, 11510, 11513, 11528, 11548,
 11552, 11558, 11564, 11584, 11591, 11592, 11606, 11610, 11617, 11624, 11630,
 11636, 11637, 11645, 11658, 11690, 11706, 11708, 11710, 11738, 11757, 11766,
 11768, 11824, 11965, 11998, 12023, 12142, 12290, 12293, 12297, 12299, 12309,
 12313, 12333, 12341, 12345, 12348, 12350, 12357, 12358, 12361, 12374, 12377,
 12385, 12386, 12387, 12390, 12417, 12425, 12437, 12449, 12451, 12466, 12471,
 12478, 12479, 12481, 12491, 12507, 12529, 12551, 12555, 12556, 12571, 12590,
 12598, 12600, 12603, 12607, 12644, 12659, 12675, 12683, 12708, 12713, 12727,
 12731, 12764, 12787, 12791, 12799, 12807, 12809, 12811, 12827, 12847, 12853,
 12857, 12859, 12861, 12875, 12889, 12909, 12925, 12929, 12937, 12961, 12965,
 12985, 12989, 12993, 13001, 13015, 13016, 13021, 13027, 13034, 13045, 13050,
 13055, 13062, 13082, 13098, 13126, 13162, 13254, 13379, 13397, 13446, 13511,
 13569, 13575, 13595, 13603, 13609, 13615, 13623, 13627, 13631, 13636, 13651,
 13673, 13676, 13679, 13683, 13687, 13691, 13694, 13695, 13697, 13699, 13702,
 13707, 13708, 13710, 13718, 13719, 13723, 13735, 13739, 13745, 13752, 13755,
 13759, 13763, 13768, 13769, 13770, 13771, 13776, 13778, 13791, 13802, 13811,
 13815, 13818, 13823, 13829, 13849, 13872, 13885, 13893, 13925, 13937, 13948,
 14009, 14033, 14052, 14057, 14069, 14076, 14083, 14123, 14126, 14143, 14167,
 14176, 14183, 14187, 14195, 14202, 14255, 14293, 14306, 14327, 14330, 14339,
 14343, 14382, 14407, 14422, 14423, 14425, 14433, 14439, 14445, 14447, 14453,
 14455, 14458, 14461, 14475, 14502, 14505, 14507, 14510, 14511, 14554, 14555,
 14558, 14559, 14567, 14573, 14586, 14591, 14606, 14621, 14622, 14641, 14655,
 14657, 14669, 14674, 14679, 14683, 14689, 14691, 14693, 14694, 14698, 14701,
 14702, 14703, 14705, 14711, 14717, 14725, 14729, 14731, 14751, 14754, 14761,
 14763, 14773, 14777, 14779, 14781, 14793, 14797, 14809, 14810, 14811, 14837,
 14839, 14855, 14875, 14891, 14911, 14919, 14965, 14990, 15056, 15114, 15138,
 15158, 15160, 15162, 15186, 15194, 15214, 15218, 15222, 15230, 15234, 15242,
 15254, 15266, 15274, 15290, 15294, 15298, 15306, 15322, 15346, 15350, 15361,
 15382, 15406, 15418, 15421, 15427, 15428, 15429, 15434, 15445, 15450, 15457,
 15459, 15461, 15468, 15471, 15479, 15486, 15487, 15490, 15496, 15502, 15510,
 15511, 15531, 15537, 15543, 15544, 15549, 15554, 15560, 15562, 15563, 15565,
 15568, 15571, 15572, 15586, 15595, 15596, 15598, 15611, 15612, 15718, 15731,
 15971, 15987, 15991, 16011, 16012, 16055, 16059, 16063, 16119, 16130, 16134,
 16135, 16137, 16139, 16149, 16154, 16155, 16163, 16175, 16181, 16185, 16190,
 16198, 16201, 16211, 16217, 16223, 16242, 16251, 16257, 16266, 16269, 16277,
 16289, 16291, 16295, 16310, 16314, 16321, 16329, 16347, 16351, 16355, 16374,
 16379, 16383]), (2, [2420, 2421, 2472, 2485, 2488, 2524, 2528, 2552, 2742,
 2778, 3766, 3802, 4183, 4215, 4279, 4315, 4346, 5115, 6663, 6719, 6771, 6839,
 6875, 6903, 7798, 7866, 7898, 7926, 8223, 8279, 8295, 8307, 8375, 8379, 8411,
 8439, 9078, 9146, 9178, 9206, 9563, 9571, 9843, 9947, 10593, 10616, 10677,
 10684, 10716, 10744, 11293, 11349, 11365, 11377, 11378, 11445, 11446, 11449,
 11481, 11482, 11509, 11618, 11634, 11638, 11702, 12406, 12426, 12458, 12513,
 12534, 12897, 12913, 12917, 12969, 13017, 13579, 13659, 13731, 13787, 14399,
 14523, 14583, 14677, 14707, 14709, 14775, 15202, 15286, 15477, 15497, 15529,
 15605, 16173, 16353]), (3, [2401, 7794, 7862, 9074, 9142, 9911, 10612, 10680,
 12402, 12470, 12474, 12981, 13667, 13751, 14451, 14519, 15473, 15541,
 15545])])
  elseif i==92
  r=expandrep(4,64,Tuple{Cyc{Int64},Vector{Int64}}[(-2,[4902,12039,12279,14599,
 15400, 15615, 15909]), (-1, [2, 22, 1058, 1285, 1293, 1553, 1561, 1823, 1869,
 1901, 1949, 1957, 1985, 2013, 2054, 2089, 2440, 2617, 2669, 2976, 2997, 3504,
 3633, 3682, 4320, 4381, 4449, 4457, 4465, 4517, 4537, 4619, 4621, 4626, 4642,
 4649, 4710, 4713, 4729, 4737, 4753, 4786, 4791, 4794, 4801, 4826, 4827, 4833,
 4906, 4959, 4974, 5018, 5030, 5042, 5046, 5050, 5058, 5062, 5074, 5082, 5217,
 5225, 5257, 5353, 5446, 5462, 5633, 5637, 5646, 5665, 5671, 5674, 5679, 5682,
 5689, 5699, 5706, 5762, 5771, 5877, 5885, 5921, 5925, 5984, 6065, 6133, 6136,
 6154, 6243, 6250, 6618, 6657, 6677, 7298, 7573, 7592, 7598, 7858, 7940, 7944,
 7952, 7960, 7964, 7984, 7988, 8000, 8012, 8032, 8036, 8040, 8061, 8100, 8164,
 8192, 8393, 8563, 8584, 8619, 8963, 8967, 8982, 8987, 9011, 9035, 9037, 9054,
 9055, 9058, 9059, 9106, 9194, 9215, 9255, 9258, 9362, 9476, 9487, 9492, 9495,
 9513, 9533, 9550, 9555, 9575, 9577, 9582, 9590, 9613, 9654, 9658, 9673, 9741,
 9750, 9769, 9777, 9790, 9791, 9801, 9830, 9857, 9914, 9930, 9946, 9959,
 10007, 10144, 10456, 10475, 10497, 10503, 10513, 10528, 10531, 10535, 10546,
 10570, 10586, 10590, 10594, 10619, 10635, 10675, 10719, 10730, 10743, 10750,
 10784, 10813, 10836, 10875, 10923, 10940, 10981, 11060, 11084, 11100, 11104,
 11108, 11244, 11264, 11281, 11385, 11397, 11417, 11421, 11441, 11445, 11457,
 11473, 11485, 11557, 11890, 12035, 12047, 12052, 12068, 12072, 12135, 12159,
 12163, 12216, 12244, 12263, 12287, 12336, 12428, 12482, 13002, 13025, 13072,
 13100, 13164, 13188, 13204, 13252, 13284, 13313, 13317, 13337, 13345, 13369,
 13395, 13557, 13560, 13784, 13826, 13846, 13886, 13918, 13926, 13953, 14078,
 14304, 14338, 14342, 14350, 14358, 14362, 14382, 14383, 14386, 14398, 14410,
 14430, 14434, 14438, 14475, 14498, 14562, 14590, 14595, 14607, 14615, 14619,
 14624, 14639, 14643, 14655, 14667, 14687, 14691, 14695, 14700, 14752, 14755,
 14808, 14819, 14839, 14847, 15064, 15083, 15111, 15124, 15219, 15228, 15240,
 15243, 15260, 15264, 15275, 15284, 15288, 15293, 15300, 15316, 15328, 15343,
 15351, 15363, 15399, 15404, 15451, 15472, 15516, 15519, 15528, 15531, 15540,
 15544, 15548, 15556, 15559, 15560, 15572, 15575, 15580, 15601, 15637, 15710,
 15753, 15862, 15913, 15981, 15994, 16025, 16037, 16049, 16053, 16057, 16065,
 16069, 16081, 16089, 16268, 16330]), (1, [5, 265, 274, 513, 622, 794, 873,
 1049, 1282, 1586, 1793, 1817, 1841, 1846, 1849, 1865, 1885, 1912, 2115, 2349,
 2706, 3086, 3139, 3217, 3255, 3410, 3617, 3631, 3880, 4405, 4437, 4438, 4473,
 4477, 4525, 4529, 4533, 4573, 4593, 4603, 4609, 4641, 4655, 4663, 4665, 4682,
 4695, 4697, 4699, 4706, 4707, 4714, 4717, 4738, 4747, 4759, 4783, 4793, 4805,
 4821, 4825, 4843, 4858, 4861, 4878, 4890, 4910, 4914, 4922, 4938, 4953, 4954,
 4966, 5013, 5032, 5038, 5090, 5110, 5118, 5133, 5150, 5281, 5301, 5634, 5642,
 5654, 5666, 5673, 5690, 5693, 5710, 5737, 5742, 5750, 5818, 5833, 5834, 5850,
 5901, 5909, 5969, 5989, 6134, 6304, 6360, 6368, 6593, 6626, 6714, 6961, 7051,
 7239, 7519, 7833, 7851, 7948, 7972, 7976, 8048, 8052, 8092, 8116, 8120, 8124,
 8132, 8136, 8148, 8156, 8378, 8463, 8471, 8488, 8495, 8511, 8531, 8551, 8605,
 8675, 8691, 8769, 8885, 8978, 8979, 8998, 9003, 9083, 9095, 9107, 9115, 9119,
 9122, 9139, 9155, 9171, 9183, 9325, 9473, 9477, 9484, 9486, 9505, 9507, 9511,
 9512, 9514, 9522, 9526, 9529, 9540, 9546, 9558, 9562, 9570, 9580, 9604, 9606,
 9610, 9622, 9632, 9646, 9651, 9656, 9662, 9668, 9678, 9706, 9717, 9719, 9725,
 9729, 9737, 9749, 9761, 9785, 9795, 9805, 9837, 9845, 9858, 9911, 9913, 9922,
 9923, 9929, 9945, 9974, 10032, 10046, 10205, 10215, 10286, 10378, 10505,
 10514, 10527, 10533, 10558, 10561, 10574, 10579, 10601, 10606, 10614, 10625,
 10653, 10677, 10683, 10689, 10690, 10698, 10722, 10760, 10788, 10792, 10817,
 10876, 10892, 10930, 10932, 10933, 10945, 10976, 11000, 11028, 11072, 11088,
 11120, 11128, 11204, 11212, 11236, 11265, 11269, 11285, 11321, 11325, 11337,
 11353, 11357, 11361, 11514, 11517, 11744, 12056, 12075, 12076, 12096, 12128,
 12132, 12140, 12175, 12180, 12199, 12227, 12236, 12452, 12472, 12485, 12645,
 12658, 13017, 13054, 13060, 13092, 13116, 13135, 13148, 13168, 13175, 13244,
 13256, 13272, 13276, 13312, 13393, 13413, 13529, 13726, 13732, 13890, 13938,
 13954, 13958, 13978, 13982, 14006, 14018, 14034, 14148, 14213, 14346, 14370,
 14374, 14376, 14384, 14404, 14446, 14450, 14490, 14499, 14500, 14514, 14518,
 14519, 14522, 14530, 14534, 14546, 14554, 14603, 14612, 14623, 14631, 14675,
 14716, 14747, 14759, 14772, 14775, 14776, 14787, 14791, 14803, 14811, 14832,
 14894, 15011, 15108, 15112, 15119, 15128, 15135, 15147, 15164, 15168, 15180,
 15187, 15196, 15200, 15204, 15307, 15331, 15347, 15360, 15376, 15388, 15403,
 15407, 15408, 15412, 15420, 15431, 15436, 15439, 15452, 15464, 15471, 15479,
 15503, 15555, 15566, 15588, 15608, 15616, 15712, 15741, 15809, 15885, 15897,
 15917, 15921, 15929, 15945, 15961, 15973, 15987, 16097, 16117, 16125, 16168,
 16196, 16312, 16344, 16345]), (2, [1881, 2025, 4357, 4597, 4866, 4870, 4886,
 4962, 12235, 14628, 14756, 15364, 15368, 15384, 15460, 15563, 15873, 15877,
 15893, 15969]), (-2E(3), [4605, 12151, 14600, 14840]), (-2E(3)-E(3,2), [1857,
 1889, 4385, 4958, 9142, 12095, 12143, 12219, 14632, 14703, 15167, 15423,
 15456, 15587, 15965]), (-2E(3)+E(3,2), [15523]), (-E(3), [444, 555, 803,
 1391, 1476, 1837, 1941, 2005, 3710, 3804, 3851, 4074, 4157, 4353, 4389, 4441,
 4509, 4521, 4527, 4549, 4565, 4623, 4651, 4659, 4668, 4675, 4845, 4851, 4926,
 5026, 5106, 5125, 5153, 5245, 5299, 5365, 5635, 5639, 5643, 5655, 5667, 5691,
 5711, 5743, 5751, 5859, 5870, 5897, 5965, 6005, 6113, 6156, 6180, 6256, 6271,
 6324, 6332, 6344, 6364, 8459, 8555, 8575, 8611, 8975, 8994, 9043, 9086, 9192,
 9279, 9420, 9515, 9527, 9559, 9563, 9588, 9611, 9623, 9630, 9644, 9647, 9671,
 9681, 9686, 9694, 9705, 9714, 9727, 9772, 9862, 9886, 9918, 9938, 9950, 9962,
 9965, 9975, 10530, 10559, 10575, 10607, 10609, 10618, 10622, 10658, 10663,
 10665, 10670, 10674, 10691, 10699, 10723, 10734, 10804, 10844, 10848, 10856,
 10924, 10988, 10997, 11008, 11044, 11132, 11136, 11172, 11184, 11188, 11248,
 11329, 11477, 11956, 12013, 12111, 12231, 12251, 12292, 12296, 12324, 12348,
 12536, 12544, 12956, 13296, 13321, 13519, 13706, 13967, 14339, 14343, 14352,
 14371, 14380, 14388, 14395, 14468, 14583, 14591, 14596, 14608, 14696, 14707,
 14711, 14720, 14723, 14724, 14779, 14824, 14848, 15012, 15172, 15183, 15215,
 15263, 15271, 15299, 15320, 15327, 15375, 15424, 15524, 15604, 15641, 15699,
 15861, 15933, 16033, 16113, 16260, 16284, 16324, 16376]), (2+root(-3),
 [4513]), (-E(3)-2E(3,2), [2045, 4615, 4674, 8096, 9478, 14494, 14751,
 15797]), (-root(-3), [4830, 4930, 5078, 6049, 9707, 10615, 13493, 15223,
 15267, 15428, 15576, 15937, 16085]), (E(3), [59, 111, 196, 291, 819, 956,
 968, 1140, 1801, 1913, 1917, 1921, 1969, 1973, 1979, 2009, 2180, 2623, 2764,
 3381, 3415, 3904, 4393, 4397, 4421, 4429, 4461, 4469, 4493, 4545, 4687, 4719,
 4723, 4727, 4734, 4735, 4741, 4765, 4769, 4795, 4797, 4803, 4813, 4829, 4846,
 4872, 4880, 4882, 4898, 4978, 4982, 4986, 4994, 4998, 5002, 5111, 5161, 5169,
 5261, 5461, 5551, 5644, 5675, 5683, 5740, 5766, 5790, 5822, 5838, 5841, 5846,
 5854, 5865, 5867, 5929, 5941, 5973, 5977, 6025, 6037, 6061, 6085, 6141, 6152,
 6160, 6172, 6192, 6196, 6212, 6220, 6244, 6269, 6276, 6280, 6308, 6372, 6492,
 6503, 6699, 6760, 6803, 7038, 7140, 7409, 7420, 7716, 8144, 8180, 8311, 8316,
 8483, 8507, 8539, 8599, 8635, 8647, 8683, 8703, 8742, 8844, 8984, 9002, 9019,
 9022, 9027, 9051, 9066, 9098, 9102, 9162, 9175, 9472, 9483, 9488, 9496, 9510,
 9520, 9536, 9551, 9556, 9576, 9586, 9591, 9598, 9634, 9666, 9699, 9700, 9710,
 9716, 9831, 9861, 9867, 9885, 9890, 9917, 9933, 9935, 9941, 9947, 9949, 9966,
 10049, 10118, 10165, 10509, 10517, 10541, 10547, 10557, 10577, 10587, 10591,
 10597, 10599, 10667, 10710, 10721, 10731, 10737, 10751, 10816, 10832, 10853,
 10864, 10870, 10889, 10920, 10948, 10956, 10957, 10969, 10980, 11063, 11181,
 11224, 11272, 11389, 11511, 11588, 11704, 12059, 12079, 12080, 12083, 12107,
 12123, 12127, 12160, 12167, 12171, 12223, 12239, 12243, 12332, 12352, 12396,
 12478, 12483, 12492, 12624, 12664, 12743, 12786, 12951, 13192, 13216, 13220,
 13248, 13264, 13280, 13357, 13365, 13397, 13401, 13409, 13461, 13485, 13509,
 13522, 13524, 13565, 13783, 13900, 14029, 14038, 14062, 14117, 14340, 14348,
 14360, 14372, 14379, 14396, 14399, 14416, 14443, 14448, 14456, 14524, 14539,
 14540, 14541, 14542, 14556, 14578, 14636, 14647, 14679, 14683, 14736, 14743,
 14760, 14767, 14799, 14822, 14835, 15084, 15107, 15131, 15155, 15163, 15179,
 15199, 15232, 15371, 15380, 15396, 15427, 15443, 15476, 15480, 15484, 15492,
 15496, 15499, 15500, 15571, 15579, 15591, 15612, 15625, 15697, 15717, 15833,
 15889, 15892, 15905, 15985, 15989, 15993, 16001, 16005, 16009, 16121, 16152,
 16192, 16219, 16232, 16279, 16316, 16332, 16348]), (root(-3), [1825, 1829,
 4413, 4577, 6121, 8152, 9635, 10872, 12099, 12131, 13449, 13545, 14550,
 14656, 14704, 14780, 14807, 15171, 15203]), (E(3)+2E(3,2), [1853, 5022, 9482,
 9690, 12071, 14660, 14692, 15139, 15143, 15395, 15520, 16029]), (2E(3),
 [4553, 12267, 14796, 15195, 15339, 15595]), (2E(3)+E(3,2), [1909, 1953,
 10562, 11076, 15359]), (-2E(3,2), [14712]), (-E(3,2), [192, 1797, 1905, 1929,
 1961, 2029, 2037, 2411, 2878, 3885, 3977, 4365, 4611, 4635, 4643, 4667, 4811,
 4835, 4847, 4855, 5075, 5098, 5114, 5677, 5769, 5937, 5985, 6352, 6388, 6896,
 8033, 8451, 8467, 8727, 8995, 8999, 9111, 9498, 9518, 9583, 9599, 9600, 9602,
 9633, 9636, 9653, 9655, 9667, 9698, 9718, 9766, 9767, 9794, 9843, 9910, 9931,
 9942, 9967, 10563, 10621, 10657, 10682, 10711, 10789, 10865, 10884, 10916,
 10953, 10989, 11130, 11178, 11196, 11807, 12063, 12139, 12191, 12226, 12247,
 13257, 13353, 13361, 13862, 14576, 14659, 14672, 14792, 14812, 15151, 15255,
 15319, 15391, 15459, 15467, 15473, 15475, 15527, 15547, 15596, 15653, 15681,
 15777, 16105, 16292, 16368]), (E(3,2), [752, 1043, 1563, 1780, 1805, 1821,
 1833, 1873, 1993, 2017, 2033, 2466, 2819, 2839, 3280, 3976, 4103, 4162, 4361,
 4417, 4424, 4433, 4489, 4561, 4569, 4581, 4645, 4653, 4673, 4691, 4767, 4775,
 4823, 4831, 4894, 5121, 5141, 5145, 5244, 5292, 5373, 5464, 5670, 5678, 5698,
 5793, 5794, 5795, 5813, 5997, 6013, 6019, 6069, 6081, 6184, 6384, 7946, 8035,
 8487, 8515, 8579, 8607, 8631, 8643, 8662, 8766, 8962, 8966, 8983, 9018, 9023,
 9087, 9123, 9206, 9214, 9494, 9508, 9517, 9523, 9532, 9554, 9564, 9571, 9609,
 9624, 9638, 9660, 9672, 9708, 9728, 9731, 9765, 9773, 9793, 9866, 9889, 9927,
 9951, 9971, 9983, 10022, 10401, 10502, 10529, 10534, 10550, 10553, 10585,
 10626, 10627, 10634, 10645, 10659, 10681, 10693, 10729, 10742, 10749, 10753,
 10820, 10949, 10968, 10973, 10993, 11005, 11016, 11048, 11064, 11140, 11148,
 11256, 11301, 11535, 11702, 12051, 12155, 12196, 12211, 12215, 12217, 12229,
 12271, 12500, 12524, 13096, 13104, 13124, 13242, 13254, 13309, 13389, 13408,
 13421, 13429, 13437, 13473, 13505, 13537, 13781, 14046, 14141, 14247, 14302,
 14472, 14496, 14528, 14544, 14547, 14552, 14560, 14571, 14620, 14640, 14644,
 14668, 14684, 14688, 14728, 14732, 14757, 14784, 14800, 14804, 15081, 15115,
 15144, 15227, 15231, 15235, 15283, 15287, 15297, 15323, 15330, 15392, 15415,
 15447, 15483, 15487, 15535, 15539, 15543, 15583, 15603, 15617, 15621, 15649,
 15669, 15673, 15701, 15705, 15713, 15765, 15789, 15813, 15849, 15869, 15901,
 15927, 16264, 16288, 16320, 16340, 16352, 16364]), (2E(3,2), [4585, 12067,
 12195, 14828, 15367, 15607])])
  elseif i==93 r=E(3,2)*f(91)
  elseif i==94 r=E(3)*f(91)
  elseif i==95 r=E(3)*f(92)
  elseif i==96 r=E(3,2)*f(92)
  elseif i==97
  r=expandrep(4,80,Tuple{Cyc{Int64},Vector{Int64}}[(-2,[10837,10862,19931]),(-1,
 [15, 31, 34, 80, 117, 123, 182, 216, 234, 277, 310, 424, 428, 445, 507, 524,
 530, 551, 560, 579, 749, 765, 897, 909, 926, 1009, 1176, 1279, 1280, 1346,
 1654, 1842, 1969, 2040, 2121, 2124, 2130, 2136, 2147, 2188, 2209, 2264, 2377,
 2499, 2500, 2511, 2512, 2522, 2609, 2671, 2776, 2855, 2868, 2989, 3100, 3141,
 3215, 3234, 3303, 3307, 3376, 3437, 3446, 3452, 3477, 3510, 3640, 3777, 3797,
 4271, 4394, 4423, 4468, 4511, 4562, 4569, 4584, 4591, 4654, 4670, 4703, 4711,
 4730, 4739, 4740, 4751, 4788, 4831, 4885, 4911, 4928, 4950, 4979, 5016, 5032,
 5034, 5071, 5078, 5108, 5115, 5321, 5379, 5400, 5409, 5525, 5547, 5568, 5619,
 5651, 5672, 5681, 5695, 5718, 5755, 5759, 5781, 5791, 5805, 5806, 5853, 5871,
 5976, 5982, 5994, 6017, 6068, 6111, 6203, 6225, 6296, 6333, 6357, 6511, 6631,
 6997, 7142, 7317, 7656, 7738, 7746, 7782, 7797, 7900, 7914, 7958, 7995, 7999,
 8058, 8066, 8098, 8117, 8171, 8234, 8402, 8424, 8551, 8580, 8591, 8600, 8621,
 8687, 8975, 8994, 9077, 9080, 9092, 9150, 9228, 9240, 9249, 9371, 9387, 9720,
 9742, 9758, 9901, 9935, 9954, 10011, 10027, 10356, 10360, 10454, 10508,
 10529, 10663, 10677, 10680, 10736, 10794, 10797, 10806, 10812, 10870, 10958,
 10962, 10969, 11000, 11042, 11102, 11114, 11147, 11223, 11440, 11473, 11478,
 11493, 11515, 11519, 11551, 11609, 11611, 11624, 11694, 11710, 11743, 11770,
 11780, 11791, 11859, 11866, 11904, 11949, 11956, 11960, 11987, 12017, 12036,
 12044, 12050, 12108, 12120, 12129, 12245, 12288, 12339, 12344, 12361, 12385,
 12407, 12420, 12431, 12440, 12448, 12654, 12670, 12737, 12748, 12749, 12766,
 12891, 13048, 13205, 13227, 13248, 13277, 13299, 13352, 13375, 13398, 13408,
 13435, 13439, 13560, 13661, 13662, 13674, 13742, 13748, 13839, 13922, 13950,
 13980, 14019, 14027, 14493, 14577, 14640, 14661, 14678, 14715, 14719, 14751,
 14795, 14831, 14936, 14942, 14954, 14980, 14991, 15028, 15335, 15561, 15630,
 15640, 15649, 15765, 15787, 15808, 15859, 15912, 15935, 15958, 15969, 15995,
 15999, 16091, 16173, 16249, 16502, 16524, 16530, 16743, 16816, 16886, 16892,
 17207, 18133, 18785, 18807, 18984, 18988, 19084, 19090, 19111, 19160, 19285,
 19328, 19379, 19382, 19432, 19440, 19478, 19515, 19519, 19712, 19740, 20025,
 20033, 20065, 20066, 20087, 20135, 20203, 20209, 20262, 20263, 20336, 20376,
 20397, 20406, 20412, 20470, 20479, 21014, 21114, 21437, 22026, 22509, 22520,
 22542, 22577, 22674, 22680, 22689, 23022, 23203, 23765, 23784, 23808, 23859,
 23920, 23958, 23995, 24287, 24318, 24775, 24917, 25237, 25250, 25537]), (1,
 [10, 109, 125, 142, 231, 274, 280, 328, 335, 354, 381, 386, 411, 423, 427,
 437, 496, 557, 566, 572, 630, 671, 682, 733, 740, 830, 890, 912, 941, 975,
 994, 1087, 1134, 1210, 1261, 1299, 1306, 1344, 1373, 1396, 1401, 1457, 1478,
 1540, 1552, 1720, 1819, 1902, 1982, 2005, 2027, 2031, 2048, 2070, 2099, 2132,
 2152, 2175, 2178, 2197, 2198, 2228, 2235, 2239, 2261, 2285, 2306, 2497, 2575,
 2594, 2722, 2734, 2810, 2821, 2827, 2849, 2861, 2911, 2929, 2983, 3056, 3107,
 3126, 3132, 3144, 3206, 3304, 3308, 3397, 3404, 3410, 3421, 3424, 3431, 3459,
 3460, 3471, 3495, 3508, 3605, 3648, 3699, 3780, 3791, 3798, 3835, 3839, 3889,
 4056, 4214, 4385, 4387, 4400, 4407, 4424, 4440, 4449, 4523, 4538, 4582, 4583,
 4589, 4656, 4717, 4726, 4732, 4734, 4769, 4790, 4799, 4819, 4826, 4828, 4864,
 4909, 4920, 4977, 5010, 5068, 5080, 5089, 5156, 5231, 5340, 5342, 5354, 5355,
 5378, 5428, 5489, 5644, 5650, 5656, 5686, 5757, 5869, 5907, 5956, 6015, 6019,
 6040, 6042, 6049, 6077, 6079, 6189, 6254, 6270, 6311, 6330, 6354, 6381, 6491,
 6546, 6654, 6689, 6805, 6848, 6894, 6899, 6911, 6970, 6980, 6991, 6998, 7035,
 7040, 7129, 7214, 7230, 7263, 7271, 7290, 7299, 7300, 7311, 7347, 7360, 7383,
 7638, 7653, 7675, 7747, 7769, 7771, 7815, 7854, 7870, 7903, 7905, 7927, 7930,
 7960, 7976, 8135, 8280, 8363, 8378, 8421, 8423, 8496, 8554, 8557, 8566, 8572,
 8597, 8630, 8639, 8801, 9045, 9071, 9085, 9088, 9110, 9139, 9192, 9194, 9238,
 9255, 9268, 9275, 9279, 9322, 9388, 9484, 9490, 9552, 9574, 9597, 9685, 9723,
 9728, 9779, 9782, 9832, 9885, 9896, 10028, 10124, 10130, 10191, 10214, 10237,
 10325, 10351, 10368, 10390, 10419, 10471, 10499, 10518, 10535, 10548, 10555,
 10645, 10664, 10688, 10739, 10791, 10829, 10838, 10840, 10846, 10848, 10875,
 10965, 11008, 11059, 11158, 11160, 11165, 11195, 11197, 11199, 11457, 11463,
 11469, 11486, 11496, 11563, 11569, 11622, 11623, 11629, 11667, 11696, 11716,
 11757, 11766, 11772, 11830, 11839, 11858, 11871, 11925, 11943, 11947, 11951,
 11968, 11990, 12016, 12019, 12056, 12072, 12074, 12092, 12111, 12118, 12148,
 12155, 12183, 12215, 12242, 12280, 12304, 12380, 12382, 12394, 12418, 12433,
 12436, 12453, 12462, 12480, 12503, 12529, 12583, 12656, 12696, 12726, 12732,
 12753, 12773, 12962, 13059, 13067, 13143, 13169, 13240, 13324, 13330, 13336,
 13393, 13413, 13422, 13440, 13525, 13568, 13619, 13634, 13695, 13700, 13709,
 13711, 13718, 13720, 13726, 13734, 13755, 13759, 13851, 13854, 13936, 13945,
 13953, 13985, 13987, 14006, 14007, 14055, 14192, 14269, 14449, 14503, 14576,
 14616, 14646, 14652, 14663, 14717, 14829, 14867, 14897, 14916, 14934, 14975,
 15000, 15009, 15039, 15204, 15230, 15471, 15548, 15573, 15582, 15594, 15620,
 15631, 15637, 15668, 15729, 15791, 15800, 15884, 15890, 15896, 15902, 15948,
 15957, 16174, 16190, 16227, 16250, 16259, 16264, 16301, 16381, 16399, 16423,
 16427, 16462, 16469, 16572, 16802, 16814, 16830, 16890, 16901, 16907, 16911,
 16941, 17173, 17174, 17458, 17497, 17555, 17575, 17821, 17824, 17905, 18414,
 18430, 18471, 18490, 18609, 18659, 18776, 18824, 18983, 18987, 19056, 19112,
 19114, 19117, 19126, 19132, 19158, 19190, 19195, 19249, 19303, 19376, 19416,
 19446, 19452, 19463, 19517, 19745, 19766, 19767, 19919, 20002, 20099, 20107,
 20242, 20249, 20264, 20334, 20350, 20383, 20410, 20891, 21017, 21075, 21095,
 21388, 21399, 21712, 21783, 22033, 22036, 22053, 22254, 22270, 22330, 22381,
 22431, 22485, 22511, 22528, 22579, 22582, 22616, 22632, 22634, 22657, 22660,
 22669, 22671, 22678, 22686, 22708, 22715, 22989, 23006, 23008, 23214, 23230,
 23254, 23290, 23302, 23341, 23729, 23746, 23783, 23797, 23856, 23896, 23917,
 23926, 23932, 23943, 23981, 23990, 24320, 24733, 24740, 24830, 24856, 24899,
 24900, 24911, 25220, 25231, 25238, 25275, 25599]), (2, [3096, 5397]),
 (2-root(-3), [10819]), (-2E(3)-E(3,2), [856, 1150, 2140, 2750, 10820, 10831,
 13699, 16899]), (-E(3), [4, 5, 79, 135, 177, 259, 433, 609, 689, 748, 757,
 760, 844, 850, 942, 960, 1052, 1064, 1191, 1240, 1526, 1621, 1645, 1736,
 1857, 1877, 2205, 2342, 2509, 2526, 2719, 2840, 2920, 3081, 3106, 3242, 3494,
 3779, 3802, 3840, 3890, 3950, 4361, 4539, 4605, 4617, 4821, 4863, 4916, 4931,
 5006, 5081, 5117, 5186, 5317, 5509, 5682, 5777, 6080, 6159, 6222, 6257, 6339,
 6360, 6363, 6399, 6459, 6482, 6655, 6736, 6939, 6979, 7022, 7320, 7342, 7453,
 7762, 7784, 7906, 8082, 8104, 8411, 8427, 8445, 8457, 8552, 8749, 9095, 9245,
 9329, 9397, 9400, 9496, 9548, 9722, 9933, 9969, 10045, 10136, 10239, 10490,
 10525, 10559, 10668, 10764, 10770, 10842, 10854, 10877, 10879, 11017, 11152,
 11212, 11383, 11488, 11517, 11645, 11901, 11931, 11989, 12125, 12135, 12181,
 12205, 12226, 12298, 12325, 12756, 12765, 12782, 12800, 12939, 13141, 13165,
 13186, 13285, 13396, 13491, 13722, 13728, 13757, 13986, 14257, 14583, 14712,
 14907, 14960, 15368, 15426, 15580, 15701, 15746, 15849, 15877, 15886, 15901,
 15914, 15988, 16049, 16201, 16204, 16210, 16216, 16231, 16280, 16324, 16328,
 16486, 16799, 16844, 16850, 16934, 17180, 17498, 17889, 18135, 18145, 18147,
 18167, 18520, 18600, 18761, 19042, 19147, 19442, 19733, 19746, 19889, 19943,
 19963, 20092, 20104, 20202, 20265, 20391, 20415, 20419, 20420, 20454, 20460,
 20709, 20739, 20740, 20751, 20786, 21061, 21282, 21294, 21310, 21387, 21662,
 21717, 22038, 22075, 22079, 22360, 22491, 22576, 22585, 22646, 22682, 22688,
 22695, 23320, 23329, 23345, 23407, 23590, 23656, 23695, 23714, 23922, 24302,
 24303, 24431, 24554, 24597, 24612, 24628, 24689, 24748, 24844, 24850, 25219,
 25593, 25600]), (2+root(-3), [899, 9539]), (-E(3)-2E(3,2), [2154, 10179,
 10750, 12437]), (-root(-3), [1219, 2170, 2819, 2971, 4386, 6062, 9210, 9557,
 12090, 14695, 20056]), (E(3), [3, 66, 91, 176, 222, 237, 246, 327, 431, 455,
 580, 591, 592, 614, 628, 649, 725, 747, 758, 768, 775, 819, 872, 895, 928,
 939, 959, 974, 1063, 1079, 1085, 1136, 1192, 1194, 1197, 1206, 1212, 1237,
 1262, 1270, 1300, 1575, 1622, 1685, 1728, 1779, 1860, 1871, 1878, 1882, 1888,
 1915, 1919, 1941, 1947, 1983, 2036, 2126, 2145, 2167, 2201, 2237, 2270, 2329,
 2463, 2490, 2560, 2571, 2593, 2620, 2663, 2685, 2736, 2737, 2777, 2792, 2794,
 2806, 2812, 2835, 2837, 2879, 2917, 3039, 3042, 3057, 3116, 3135, 3138, 3139,
 3147, 3157, 3174, 3199, 3241, 3251, 3422, 3541, 3568, 3586, 3690, 3742, 4099,
 4196, 4199, 4213, 4418, 4437, 4522, 4536, 4537, 4563, 4696, 4774, 4780, 4891,
 5085, 5095, 5185, 5314, 5346, 5510, 5602, 5614, 5630, 5659, 5690, 5700, 5707,
 5711, 5821, 5826, 5836, 5851, 5934, 5950, 6020, 6029, 6031, 6046, 6162, 6171,
 6256, 6262, 6302, 6312, 6314, 6326, 6449, 6481, 6616, 6621, 6672, 6708, 6774,
 6806, 6934, 6962, 7098, 7128, 7130, 7274, 7286, 7723, 7729, 7773, 7777, 7783,
 7856, 7896, 7917, 7926, 7932, 7944, 7990, 8043, 8237, 8310, 8319, 8362, 8426,
 8524, 8530, 8614, 8620, 8671, 8690, 8856, 8868, 8911, 8961, 8981, 9007, 9023,
 9026, 9074, 9075, 9166, 9182, 9241, 9277, 9365, 9408, 9454, 9459, 9512, 9558,
 9595, 9604, 9621, 9693, 9724, 9777, 10094, 10170, 10261, 10287, 10303, 10317,
 10322, 10370, 10446, 10462, 10486, 10521, 10575, 10581, 10594, 10605, 10626,
 10651, 10667, 10687, 10694, 10782, 10817, 10901, 10946, 11054, 11070, 11181,
 11293, 11320, 11341, 11377, 11450, 11502, 11520, 11562, 11581, 11602, 11625,
 11779, 11814, 11820, 11861, 11903, 11991, 11992, 12046, 12095, 12121, 12134,
 12157, 12297, 12313, 12373, 12386, 12432, 12442, 12456, 12477, 12640, 12642,
 12723, 12735, 12740, 12747, 12751, 12768, 12774, 13191, 13282, 13288, 13318,
 13380, 13387, 13391, 13392, 13402, 13461, 13485, 13506, 13531, 13612, 13637,
 13664, 13883, 13935, 14485, 14528, 14543, 14559, 14562, 14574, 14579, 14581,
 14590, 14650, 14655, 14660, 14667, 14671, 14694, 14728, 14781, 14786, 14811,
 15015, 15135, 15385, 15547, 15555, 15585, 15587, 15600, 15607, 15874, 15880,
 15930, 15939, 15960, 15965, 16107, 16203, 16212, 16220, 16232, 16234, 16255,
 16258, 16277, 16278, 16315, 16319, 16507, 16527, 16528, 16560, 16614, 16731,
 16747, 16842, 16857, 16872, 16915, 16935, 17187, 17651, 17711, 17877, 18140,
 18474, 18486, 18737, 18793, 18815, 18818, 18837, 18879, 19119, 19174, 19197,
 19362, 19374, 19390, 19419, 19450, 19455, 19460, 19467, 19471, 19494, 20091,
 20285, 20297, 20757, 20849, 20903, 20976, 21016, 21046, 21052, 21366, 21405,
 21699, 21856, 22056, 22118, 22312, 22404, 22421, 22445, 22479, 22684, 22702,
 22720, 23038, 23151, 23272, 23274, 23317, 23348, 23638, 23675, 23679, 23715,
 23762, 23899, 23912, 23935, 23940, 23951, 23974, 23977, 23978, 24600, 24609,
 24655, 24674, 24747, 24766, 24949]), (root(-3), [918, 955, 2146, 2542, 5050,
 5699, 8637, 9470, 10110, 12739, 13379, 14659, 19459, 23939]), (E(3)+2E(3,2),
 [2200, 8494, 8510, 8570, 13717]), (2E(3)+E(3,2), [4380, 8579, 12419]), (-E(3,
2), [185, 295, 351, 362, 468, 536, 554, 597, 796, 802, 900, 907, 911, 922,
 1051, 1067, 1095, 1217, 1558, 1595, 1599, 1850, 1859, 1920, 2011, 2133, 2166,
 2169, 2322, 2360, 2462, 2517, 2651, 2667, 2695, 2797, 2870, 3284, 3311, 3390,
 4071, 4229, 4529, 4546, 4597, 4797, 4974, 4990, 5004, 5164, 5392, 5703, 5741,
 5768, 5845, 5888, 5939, 6048, 6056, 6146, 6265, 6375, 6537, 6597, 7039, 7805,
 7817, 7864, 7881, 8125, 8137, 8244, 8253, 8369, 8386, 8422, 8437, 8536, 8731,
 9231, 9384, 9511, 9530, 9540, 9551, 9560, 9565, 9673, 9967, 10024, 10151,
 10180, 10200, 10306, 10474, 10511, 10541, 10734, 11111, 11221, 11245, 11365,
 11374, 11390, 11419, 11586, 11637, 11649, 11775, 11809, 11837, 11887, 12027,
 12045, 12080, 12086, 12762, 12781, 12797, 12909, 13370, 13421, 13514, 13614,
 13630, 13729, 13791, 13976, 14298, 14375, 14619, 14696, 15217, 15586, 15632,
 15731, 15952, 16162, 16267, 16594, 16687, 16807, 17186, 17332, 17814, 18165,
 19135, 19157, 19199, 19501, 19949, 20017, 20060, 20095, 20098, 20114, 20117,
 20134, 20159, 20251, 20295, 20796, 21009, 21669, 22242, 22347, 22523, 23202,
 23307, 23453, 23722, 23842, 23914, 23947, 24671, 24918, 24955, 25584]), (E(3,
2), [42, 162, 267, 272, 429, 467, 510, 516, 600, 661, 685, 706, 731, 805, 862,
 916, 917, 936, 1068, 1164, 1170, 1220, 1231, 1254, 1277, 1327, 1576, 1814,
 2094, 2110, 2151, 2179, 2184, 2298, 2325, 2368, 2419, 2518, 2555, 2559, 2664,
 2668, 2764, 2770, 2791, 2798, 2820, 2831, 2854, 2877, 3035, 3093, 3175, 3260,
 3317, 3377, 3394, 3455, 3489, 3511, 3519, 3770, 3822, 3931, 4373, 4419, 4420,
 4431, 4615, 4847, 5046, 5344, 5384, 5494, 5531, 5680, 5880, 5947, 6000, 6032,
 6037, 6084, 6217, 6234, 6352, 6397, 6451, 6468, 6659, 6977, 7037, 7297, 7357,
 7447, 7722, 7935, 7938, 7957, 7974, 7980, 7997, 8042, 8300, 8392, 8409, 8455,
 8519, 8534, 8543, 8871, 8979, 8986, 9002, 9024, 9134, 9137, 9232, 9282, 9295,
 9301, 9314, 9346, 9383, 9413, 9420, 9456, 9502, 9514, 9517, 9526, 9532, 9590,
 9785, 9868, 9895, 10023, 10055, 10096, 10154, 10157, 10166, 10172, 10197,
 10230, 10259, 10266, 10304, 10377, 10417, 10512, 10517, 10520, 10592, 10602,
 10609, 10776, 10832, 10880, 10909, 11148, 11157, 11171, 11254, 11269, 11442,
 11482, 11495, 11631, 11655, 11657, 11792, 11828, 11848, 12014, 12030, 12253,
 12334, 12350, 12387, 12391, 12417, 12424, 12429, 12438, 12446, 12475, 12525,
 12571, 12602, 12645, 12831, 13016, 13211, 13377, 13389, 13406, 13489, 13543,
 13551, 13616, 13656, 13686, 13692, 13712, 13869, 13937, 13973, 14034, 14454,
 14469, 14491, 14617, 14642, 14675, 14992, 15771, 15904, 16213, 16226, 16317,
 16467, 16516, 16689, 16856, 16957, 17786, 17794, 18100, 18146, 18557, 18651,
 18855, 19054, 19130, 19136, 19139, 19181, 19254, 19269, 19291, 19871, 20016,
 20041, 20086, 20207, 20226, 20277, 20477, 20959, 20962, 21055, 21059, 21067,
 21077, 21094, 21421, 21705, 21853, 22397, 22650, 22701, 23023, 23357, 23456,
 23749, 23771, 23817, 23960, 24257, 24749, 24765, 24936, 25582]), (2E(3,2),
 [19070])])
  elseif i==98 r=E(3)*f(97)
  elseif i==99 r=E(3,2)*f(97)
  elseif i==100
    r=expandrep(4,81,[(-1,[5,15,214,329,351,987,997,1311,1325,1678,1969,1971,
 2295, 2297, 2955, 3129, 4334, 4563, 4594, 4747, 4752, 4785, 4899, 5073, 5298,
 5566, 5871, 6045, 6171, 6279, 6408, 6730, 6831, 6995, 7155, 7339, 7344, 7377,
 7939, 8222, 8463, 8614, 8637, 8870, 9111, 9186, 9285, 9420, 9423, 9441, 9527,
 9587, 9715, 10127, 10362, 11040, 11061, 11147, 11335, 11641, 11703, 11877,
 12003, 12042, 12111, 12240, 12458, 12483, 12989, 13058, 13122, 13135, 13229,
 13633, 13695, 13759, 13778, 13786, 13863, 13885, 14475, 14619, 14645, 14793,
 14891, 14960, 14987, 15103, 15374, 15418, 15567, 15675, 15804, 15814, 16142,
 16580, 16723, 17038, 17211, 17385, 17579, 17645, 17713, 17816, 18070, 18290,
 18629, 19285, 19335, 19878, 20629, 21031, 21322, 21634, 21650, 21974, 22251,
 22618, 23069, 23315, 23514, 23548, 23947, 24271, 24305, 24343, 24350, 24509,
 24602, 24742, 24930, 25498, 25778, 25899, 26142]), (1, [16, 38, 325, 352,
 406, 650, 683, 692, 701, 975, 992, 1058, 1300, 1315, 1386, 1629, 1635, 1679,
 1688, 1931, 1951, 1957, 1976, 2098, 2276, 2285, 2299, 2426, 2598, 2617, 2643,
 2668, 2693, 2762, 2878, 2884, 2909, 2914, 2926, 2991, 3004, 3021, 3068, 3102,
 3136, 3254, 3288, 3559, 3561, 3576, 3582, 3655, 3875, 3877, 3893, 3899, 3997,
 4068, 4190, 4233, 4239, 4315, 4531, 4536, 4551, 4558, 4569, 4607, 4652, 4875,
 4897, 4975, 4988, 5010, 5078, 5199, 5225, 5398, 5435, 5492, 5513, 5523, 5531,
 5557, 5578, 5756, 5810, 5858, 5912, 6013, 6018, 6052, 6146, 6153, 6186, 6192,
 6315, 6341, 6469, 6514, 6636, 6659, 6669, 6846, 6896, 6959, 6997, 7168, 7174,
 7223, 7325, 7457, 7499, 7546, 7620, 7653, 7754, 7805, 7828, 7938, 7981, 8089,
 8127, 8157, 8162, 8211, 8284, 8403, 8424, 8451, 8485, 8607, 8610, 8620, 8644,
 8738, 8747, 8753, 8775, 8803, 8817, 8890, 9036, 9050, 9072, 9087, 9138, 9145,
 9192, 9219, 9224, 9258, 9286, 9292, 9380, 9456, 9473, 9623, 9702, 9735, 9801,
 9870, 9944, 9967, 10059, 10129, 10176, 10267, 10354, 10383, 10432, 10457,
 10503, 10582, 10671, 10697, 10707, 10785, 10894, 10928, 10994, 10999, 11045,
 11088, 11113, 11154, 11178, 11247, 11322, 11345, 11355, 11407, 11490, 11580,
 11594, 11642, 11679, 11727, 11850, 11884, 11978, 12015, 12179, 12205, 12300,
 12386, 12472, 12573, 12714, 12720, 12803, 12901, 13264, 13309, 13363, 13450,
 13454, 13460, 13539, 13557, 13772, 13961, 14028, 14031, 14094, 14106, 14213,
 14281, 14356, 14426, 14511, 14541, 14577, 14693, 14706, 14768, 14795, 15008,
 15021, 15034, 15171, 15255, 15334, 15349, 15492, 15515, 15551, 15579, 15677,
 15752, 15815, 15901, 15903, 15984, 16005, 16046, 16079, 16162, 16168, 16193,
 16198, 16205, 16227, 16333, 16458, 16476, 16502, 16515, 16553, 16636, 16661,
 16686, 16754, 16795, 16853, 16875, 16989, 17058, 17128, 17150, 17171, 17199,
 17279, 17317, 17324, 17358, 17392, 17511, 17598, 17619, 17748, 17835, 17973,
 18048, 18059, 18130, 18159, 18268, 18301, 18358, 18379, 18483, 18497, 18612,
 18630, 18682, 18711, 18758, 18807, 18817, 18911, 18943, 18957, 18962, 19036,
 19047, 19066, 19099, 19131, 19141, 19243, 19286, 19348, 19371, 19426, 19455,
 19469, 19576, 19579, 19602, 19613, 19722, 19747, 19779, 19789, 19904, 19934,
 19941, 19978, 20010, 20019, 20072, 20103, 20113, 20231, 20236, 20258, 20374,
 20380, 20405, 20410, 20417, 20427, 20522, 20535, 20664, 20665, 20714, 20741,
 20870, 20993, 21032, 21038, 21087, 21254, 21281, 21328, 21339, 21411, 21576,
 21582, 21609, 21659, 21735, 21737, 21870, 21920, 21937, 21978, 21991, 22057,
 22059, 22202, 22219, 22265, 22287, 22316, 22326, 22347, 22381, 22383, 22526,
 22551, 22593, 22611, 22628, 22634, 22707, 22709, 22842, 22884, 22887, 22921,
 22978, 22995, 23029, 23155, 23174, 23212, 23242, 23249, 23259, 23357, 23367,
 23490, 23534, 23541, 23584, 23617, 23619, 23677, 23822, 23886, 23911, 23945,
 23952, 24005, 24138, 24218, 24236, 24273, 24275, 24472, 24639, 24648, 24669,
 24755, 24943, 24973, 24975, 25118, 25159, 25164, 25197, 25234, 25240, 25299,
 25328, 25471, 25577, 25621, 25766, 25882, 25888, 25905, 25947, 25985, 26231,
 26236])])
  elseif i==101 r=E(3,2)*f(100)
  elseif i==102 r=E(3)*f(100)
  end
  G32cachedreps[i]=r
  r
end)

chevieset(:G32, :Invariants, [function(a,b,c,d)
  220*a^3*b^3*c^6-220*a^3*b^3*d^6-220*a^3*c^3*d^6-220*b^3*c^3*d^6+
  220*a^3*b^6*c^3-220*a^3*b^6*d^3+220*a^3*c^6*d^3-220*b^3*c^6*d^3+
  220*a^6*b^3*c^3+220*a^6*b^3*d^3-220*a^6*c^3*d^3+220*b^6*c^3*d^3+22*a^6*b^6+
  22*a^6*c^6+22*a^6*d^6+22*b^6*c^6+22*b^6*d^6+22*c^6*d^6+a^12+b^12+c^12+d^12
end,

function(a,b,c,d)
  -170*a^3*b^3*c^12+170*a^3*b^3*d^12+170*a^3*c^3*d^12+170*b^3*c^3*d^12-
  1870*a^3*b^6*c^9+1870*a^3*b^6*d^9-1870*a^3*c^6*d^9+1870*b^3*c^6*d^9-
  1870*a^3*b^9*c^6+1870*a^3*b^9*d^6+1870*a^3*c^9*d^6+1870*b^3*c^9*d^6-
  170*a^3*b^12*c^3+170*a^3*b^12*d^3-170*a^3*c^12*d^3+170*b^3*c^12*d^3-
  1870*a^6*b^3*c^9-1870*a^6*b^3*d^9+1870*a^6*c^3*d^9-1870*b^6*c^3*d^9-
  7854*a^6*b^6*c^6-7854*a^6*b^6*d^6-7854*a^6*c^6*d^6-7854*b^6*c^6*d^6-
  1870*a^6*b^9*c^3-1870*a^6*b^9*d^3+1870*a^6*c^9*d^3-1870*b^6*c^9*d^3-
  17*a^6*b^12-17*a^6*c^12-17*a^6*d^12-17*b^6*c^12-17*b^6*d^12-17*c^6*d^12-
  1870*a^9*b^3*c^6+1870*a^9*b^3*d^6+1870*a^9*c^3*d^6+1870*b^9*c^3*d^6-
  1870*a^9*b^6*c^3+1870*a^9*b^6*d^3-1870*a^9*c^6*d^3+1870*b^9*c^6*d^3-
  170*a^12*b^3*c^3-170*a^12*b^3*d^3+170*a^12*c^3*d^3-170*b^12*c^3*d^3-
  17*a^12*b^6-17*a^12*c^6-17*a^12*d^6-17*b^12*c^6-17*b^12*d^6-17*c^12*d^6+a^18+
  b^18+c^18+d^18
end,

function(a,b,c,d)
  -230*a^3*b^3*c^6*d^12+230*a^3*b^3*c^12*d^6-230*a^3*b^6*c^3*d^12+
  230*a^3*b^6*c^12*d^3+46*a^3*b^6*c^15-46*a^3*b^6*d^15+46*a^3*c^6*d^15-
  46*b^3*c^6*d^15+230*a^3*b^9*c^12-230*a^3*b^9*d^12-230*a^3*c^9*d^12-
  230*b^3*c^9*d^12+230*a^3*b^12*c^3*d^6-230*a^3*b^12*c^6*d^3+230*a^3*b^12*c^9-
  230*a^3*b^12*d^9+230*a^3*c^12*d^9-230*b^3*c^12*d^9+46*a^3*b^15*c^6-
  46*a^3*b^15*d^6-46*a^3*c^15*d^6-46*b^3*c^15*d^6-230*a^6*b^3*c^3*d^12-
  230*a^6*b^3*c^12*d^3+46*a^6*b^3*c^15+46*a^6*b^3*d^15-46*a^6*c^3*d^15+
  46*b^6*c^3*d^15+1518*a^6*b^6*c^6*d^6+943*a^6*b^6*c^12+943*a^6*b^6*d^12+
  943*a^6*c^6*d^12+943*b^6*c^6*d^12+2530*a^6*b^9*c^9+2530*a^6*b^9*d^9-
  2530*a^6*c^9*d^9+2530*b^6*c^9*d^9+230*a^6*b^12*c^3*d^3+943*a^6*b^12*c^6+
  943*a^6*b^12*d^6+943*a^6*c^12*d^6+943*b^6*c^12*d^6+46*a^6*b^15*c^3+
  46*a^6*b^15*d^3-46*a^6*c^15*d^3+46*b^6*c^15*d^3+230*a^9*b^3*c^12-
  230*a^9*b^3*d^12-230*a^9*c^3*d^12-230*b^9*c^3*d^12+2530*a^9*b^6*c^9-
  2530*a^9*b^6*d^9+2530*a^9*c^6*d^9-2530*b^9*c^6*d^9+2530*a^9*b^9*c^6-
  2530*a^9*b^9*d^6-2530*a^9*c^9*d^6-2530*b^9*c^9*d^6+230*a^9*b^12*c^3-
  230*a^9*b^12*d^3+230*a^9*c^12*d^3-230*b^9*c^12*d^3+230*a^12*b^3*c^3*d^6+
  230*a^12*b^3*c^6*d^3+230*a^12*b^3*c^9+230*a^12*b^3*d^9-230*a^12*c^3*d^9+
  230*b^12*c^3*d^9-230*a^12*b^6*c^3*d^3+943*a^12*b^6*c^6+943*a^12*b^6*d^6+
  943*a^12*c^6*d^6+943*b^12*c^6*d^6+230*a^12*b^9*c^3+230*a^12*b^9*d^3-
  230*a^12*c^9*d^3+230*b^12*c^9*d^3+(23/22)*a^12*b^12+(23/22)*a^12*c^12+
  (23/22)*a^12*d^12+(23/22)*b^12*c^12+(23/22)*b^12*d^12+(23/22)*c^12*d^12+
  46*a^15*b^3*c^6-46*a^15*b^3*d^6-46*a^15*c^3*d^6-46*b^15*c^3*d^6+
  46*a^15*b^6*c^3-46*a^15*b^6*d^3+46*a^15*c^6*d^3-46*b^15*c^6*d^3+(1/44)*a^24+
  (1/44)*b^24+(1/44)*c^24+(1/44)*d^24
end,

function(a,b,c,d)
  -8700*a^3*b^3*c^6*d^18+8700*a^3*b^3*c^18*d^6-8700*a^3*b^6*c^3*d^18+
  73950*a^3*b^6*c^9*d^12-73950*a^3*b^6*c^12*d^9+8700*a^3*b^6*c^18*d^3-
  870*a^3*b^6*c^21+870*a^3*b^6*d^21-870*a^3*c^6*d^21+870*b^3*c^6*d^21+
  73950*a^3*b^9*c^6*d^12-73950*a^3*b^9*c^12*d^6-11600*a^3*b^9*c^18+
  11600*a^3*b^9*d^18+11600*a^3*c^9*d^18+11600*b^3*c^9*d^18+
  73950*a^3*b^12*c^6*d^9-73950*a^3*b^12*c^9*d^6-44370*a^3*b^12*c^15+
  44370*a^3*b^12*d^15-44370*a^3*c^12*d^15+44370*b^3*c^12*d^15-
  44370*a^3*b^15*c^12+44370*a^3*b^15*d^12+44370*a^3*c^15*d^12+
  44370*b^3*c^15*d^12+8700*a^3*b^18*c^3*d^6-8700*a^3*b^18*c^6*d^3-
  11600*a^3*b^18*c^9+11600*a^3*b^18*d^9-11600*a^3*c^18*d^9+11600*b^3*c^18*d^9-
  870*a^3*b^21*c^6+870*a^3*b^21*d^6+870*a^3*c^21*d^6+870*b^3*c^21*d^6-
  8700*a^6*b^3*c^3*d^18+73950*a^6*b^3*c^9*d^12+73950*a^6*b^3*c^12*d^9-
  8700*a^6*b^3*c^18*d^3-870*a^6*b^3*c^21-870*a^6*b^3*d^21+870*a^6*c^3*d^21-
  870*b^6*c^3*d^21+266220*a^6*b^6*c^6*d^12+266220*a^6*b^6*c^12*d^6-
  49590*a^6*b^6*c^18-49590*a^6*b^6*d^18-49590*a^6*c^6*d^18-49590*b^6*c^6*d^18+
  73950*a^6*b^9*c^3*d^12+73950*a^6*b^9*c^12*d^3-488070*a^6*b^9*c^15-
  488070*a^6*b^9*d^15+488070*a^6*c^9*d^15-488070*b^6*c^9*d^15-
  73950*a^6*b^12*c^3*d^9+266220*a^6*b^12*c^6*d^6-73950*a^6*b^12*c^9*d^3-
  1005720*a^6*b^12*c^12-1005720*a^6*b^12*d^12-1005720*a^6*c^12*d^12-
  1005720*b^6*c^12*d^12-488070*a^6*b^15*c^9-488070*a^6*b^15*d^9+
  488070*a^6*c^15*d^9-488070*b^6*c^15*d^9+8700*a^6*b^18*c^3*d^3-
  49590*a^6*b^18*c^6-49590*a^6*b^18*d^6-49590*a^6*c^18*d^6-49590*b^6*c^18*d^6-
  870*a^6*b^21*c^3-870*a^6*b^21*d^3+870*a^6*c^21*d^3-870*b^6*c^21*d^3+
  73950*a^9*b^3*c^6*d^12-73950*a^9*b^3*c^12*d^6-11600*a^9*b^3*c^18+
  11600*a^9*b^3*d^18+11600*a^9*c^3*d^18+11600*b^9*c^3*d^18+
  73950*a^9*b^6*c^3*d^12-73950*a^9*b^6*c^12*d^3-488070*a^9*b^6*c^15+
  488070*a^9*b^6*d^15-488070*a^9*c^6*d^15+488070*b^9*c^6*d^15-
  2637550*a^9*b^9*c^12+2637550*a^9*b^9*d^12+2637550*a^9*c^9*d^12+
  2637550*b^9*c^9*d^12-73950*a^9*b^12*c^3*d^6+73950*a^9*b^12*c^6*d^3-
  2637550*a^9*b^12*c^9+2637550*a^9*b^12*d^9-2637550*a^9*c^12*d^9+
  2637550*b^9*c^12*d^9-488070*a^9*b^15*c^6+488070*a^9*b^15*d^6+
  488070*a^9*c^15*d^6+488070*b^9*c^15*d^6-11600*a^9*b^18*c^3+11600*a^9*b^18*d^3-
  11600*a^9*c^18*d^3+11600*b^9*c^18*d^3-73950*a^12*b^3*c^6*d^9-
  73950*a^12*b^3*c^9*d^6-44370*a^12*b^3*c^15-44370*a^12*b^3*d^15+
  44370*a^12*c^3*d^15-44370*b^12*c^3*d^15+73950*a^12*b^6*c^3*d^9+
  266220*a^12*b^6*c^6*d^6+73950*a^12*b^6*c^9*d^3-1005720*a^12*b^6*c^12-
  1005720*a^12*b^6*d^12-1005720*a^12*c^6*d^12-1005720*b^12*c^6*d^12-
  73950*a^12*b^9*c^3*d^6-73950*a^12*b^9*c^6*d^3-2637550*a^12*b^9*c^9-
  2637550*a^12*b^9*d^9+2637550*a^12*c^9*d^9-2637550*b^12*c^9*d^9-
  1005720*a^12*b^12*c^6-1005720*a^12*b^12*d^6-1005720*a^12*c^12*d^6-
  1005720*b^12*c^12*d^6-44370*a^12*b^15*c^3-44370*a^12*b^15*d^3+
  44370*a^12*c^15*d^3-44370*b^12*c^15*d^3-145*a^12*b^18-145*a^12*c^18-
  145*a^12*d^18-145*b^12*c^18-145*b^12*d^18-145*c^12*d^18-44370*a^15*b^3*c^12+
  44370*a^15*b^3*d^12+44370*a^15*c^3*d^12+44370*b^15*c^3*d^12-
  488070*a^15*b^6*c^9+488070*a^15*b^6*d^9-488070*a^15*c^6*d^9+
  488070*b^15*c^6*d^9-488070*a^15*b^9*c^6+488070*a^15*b^9*d^6+
  488070*a^15*c^9*d^6+488070*b^15*c^9*d^6-44370*a^15*b^12*c^3+
  44370*a^15*b^12*d^3-44370*a^15*c^12*d^3+44370*b^15*c^12*d^3+
  8700*a^18*b^3*c^3*d^6+8700*a^18*b^3*c^6*d^3-11600*a^18*b^3*c^9-
  11600*a^18*b^3*d^9+11600*a^18*c^3*d^9-11600*b^18*c^3*d^9-
  8700*a^18*b^6*c^3*d^3-49590*a^18*b^6*c^6-49590*a^18*b^6*d^6-
  49590*a^18*c^6*d^6-49590*b^18*c^6*d^6-11600*a^18*b^9*c^3-11600*a^18*b^9*d^3+
  11600*a^18*c^9*d^3-11600*b^18*c^9*d^3-145*a^18*b^12-145*a^18*c^12-
  145*a^18*d^12-145*b^18*c^12-145*b^18*d^12-145*c^18*d^12-870*a^21*b^3*c^6+
  870*a^21*b^3*d^6+870*a^21*c^3*d^6+870*b^21*c^3*d^6-870*a^21*b^6*c^3+
  870*a^21*b^6*d^3-870*a^21*c^6*d^3+870*b^21*c^6*d^3+a^30+b^30+c^30+d^30
end]);

# the discriminant as a polynomial in the invariants
chevieset(:G32,:Discriminant,function()
  function(a,b,c,d)
        6388800*a*b*d^3+2662000000*a*c^2*d^2+45919500000*a*b^2*c^3-
53240000000*b*c^3*d-95832000*a*b^3*c*d+(1401543/20)*a*b^6+59895000*b^2*c*d^2-
3690500000*a^2*b*c^2*d-5513970*a^2*b^2*d^2-544500000000*a^2*c^4+
(71628975/2)*a^2*b^4*c-21175000*a^3*c*d^2+1332966250*a^3*b^2*c^2+
2108788*a^3*b^3*d-2662000*d^4+26642000*a^4*b*c*d+22460625*b^4*c^2+
10139250000*a^4*c^3+(-26003571/80)*a^4*b^4+10648000000000*c^5-71874*b^5*d+
64570*a^5*d^2-9759475*a^5*b^2*c-62764*a^6*b*d-81614375*a^6*c^2+
(761263/40)*a^7*b^2+(5723475/22)*a^8*c+(-2706867/9680)*a^10
  end
end)

let J=E(3), J2=E(3,2)
CHEVIE[:families][:X40]=Dict{Symbol,Any}(:fourierMat=>toM([
[-1,-1,1,1,5J2,5J,5J2,5J,5J2,5J,5,5,5,-1,-5J,5J2,-5J,5J2,5J,-5J2,5,5,-5J2,-5J,5J,5J2,5J,5J2,-5J,5J2,5J,-5J2,5J,-5J2,1,5,-6,-6,-6,-6],
[-1,-1,1,1,5J,5J2,5J,5J2,5J,5J2,5,5,5,-1,-5J2,5J,-5J2,5J,5J2,-5J,5,5,-5J,-5J2,5J2,5J,5J2,5J,-5J2,5J,5J2,-5J,5J2,-5J,1,5,-6,-6,-6,-6],
[1,1,-1,-1,-5J2,-5J,-5J2,-5J,5J2,5J,5,5,5,1,5J,-5J2,5J,-5J2,5J,-5J2,5,5,-5J2,-5J,5J,5J2,-5J,-5J2,-5J,5J2,5J,-5J2,-5J,5J2,-1,5,6,6,6,6],
[1,1,-1,-1,-5J,-5J2,-5J,-5J2,5J,5J2,5,5,5,1,5J2,-5J,5J2,-5J,5J2,-5J,5,5,-5J,-5J2,5J2,5J,-5J2,-5J,-5J2,5J,5J2,-5J,-5J2,5J,-1,5,6,6,6,6],
[5J2,5J,-5J2,-5J,5,5,5,5,5,5,5J,5J2,5,5,-5J,5J2,-5J,5J2,5J,-5J2,5J,5J2,-5,-5,5J2,5J,5J2,5J,-5J,5J2,5J2,-5J,5J2,-5J,-5,5,0,0,0,0],
[5J,5J2,-5J,-5J2,5,5,5,5,5,5,5J2,5J,5,5,-5J2,5J,-5J2,5J,5J2,-5J,5J2,5J,-5,-5,5J,5J2,5J,5J2,-5J2,5J,5J,-5J2,5J,-5J2,-5,5,0,0,0,0],
[5J2,5J,-5J2,-5J,5,5,5,5,-5,-5,-5J,-5J2,-5,5,-5J,5J2,-5J,5J2,-5J,5J2,-5J,-5J2,5,5,-5J2,-5J,5J2,5J,5J,-5J2,-5J2,5J,5J2,-5J,-5,-5,0,0,0,0],
[5J,5J2,-5J,-5J2,5,5,5,5,-5,-5,-5J2,-5J,-5,5,-5J2,5J,-5J2,5J,-5J2,5J,-5J2,-5J,5,5,-5J,-5J2,5J,5J2,5J2,-5J,-5J,5J2,5J,-5J2,-5,-5,0,0,0,0],
[5J2,5J,5J2,5J,5,5,-5,-5,5,5,5J,5J2,5,5,-5J,5J2,5J,-5J2,5J,-5J2,-5J,-5J2,5,5,5J2,5J,5J2,5J,5J,-5J2,-5J2,5J,-5J2,5J,5,-5,0,0,0,0],
[5J,5J2,5J,5J2,5,5,-5,-5,5,5,5J2,5J,5,5,-5J2,5J,5J2,-5J,5J2,-5J,-5J2,-5J,5,5,5J,5J2,5J,5J2,5J2,-5J,-5J,5J2,-5J,5J2,5,-5,0,0,0,0],
[5,5,5,5,5J,5J2,-5J,-5J2,5J,5J2,5,5,5,5,-5J2,5J,5J2,-5J,5J2,-5J,-5,-5,5J,5J2,5J2,5J,5J2,5J,5J2,-5J,-5J2,5J,-5J2,5J,5,-5,0,0,0,0],
[5,5,5,5,5J2,5J,-5J2,-5J,5J2,5J,5,5,5,5,-5J,5J2,5J,-5J2,5J,-5J2,-5,-5,5J2,5J,5J,5J2,5J,5J2,5J,-5J2,-5J,5J2,-5J,5J2,5,-5,0,0,0,0],
[5,5,5,5,5,5,-5,-5,5,5,5,5,5,5,-5,5,5,-5,5,-5,-5,-5,5,5,5,5,5,5,5,-5,-5,5,-5,5,5,-5,0,0,0,0],
[-1,-1,1,1,5,5,5,5,5,5,5,5,5,-1,-5,5,-5,5,5,-5,5,5,-5,-5,5,5,5,5,-5,5,5,-5,5,-5,1,5,-6,-6,-6,-6],
[-5J,-5J2,5J,5J2,-5J,-5J2,-5J,-5J2,-5J,-5J2,-5J2,-5J,-5,-5,5J,-5J2,5J,-5J2,-5J,5J2,-5J2,-5J,5J,5J2,-5,-5,-5,-5,5J,-5J2,-5,5,-5,5,5,-5,0,0,0,0],
[5J2,5J,-5J2,-5J,5J2,5J,5J2,5J,5J2,5J,5J,5J2,5,5,-5J2,5J,-5J2,5J,5J2,-5J,5J,5J2,-5J2,-5J,5,5,5,5,-5J2,5J,5,-5,5,-5,-5,5,0,0,0,0],
[-5J,-5J2,5J,5J2,-5J,-5J2,-5J,-5J2,5J,5J2,5J2,5J,5,-5,5J,-5J2,5J,-5J2,5J,-5J2,5J2,5J,-5J,-5J2,5,5,-5,-5,-5J,5J2,5,-5,-5,5,5,5,0,0,0,0],
[5J2,5J,-5J2,-5J,5J2,5J,5J2,5J,-5J2,-5J,-5J,-5J2,-5,5,-5J2,5J,-5J2,5J,-5J2,5J,-5J,-5J2,5J2,5J,-5,-5,5,5,5J2,-5J,-5,5,5,-5,-5,-5,0,0,0,0],
[5J,5J2,5J,5J2,5J,5J2,-5J,-5J2,5J,5J2,5J2,5J,5,5,-5J,5J2,5J,-5J2,5J,-5J2,-5J2,-5J,5J,5J2,5,5,5,5,5J,-5J2,-5,5,-5,5,5,-5,0,0,0,0],
[-5J2,-5J,-5J2,-5J,-5J2,-5J,5J2,5J,-5J2,-5J,-5J,-5J2,-5,-5,5J2,-5J,-5J2,5J,-5J2,5J,5J,5J2,-5J2,-5J,-5,-5,-5,-5,-5J2,5J,5,-5,5,-5,-5,5,0,0,0,0],
[5,5,5,5,5J,5J2,-5J,-5J2,-5J,-5J2,-5,-5,-5,5,-5J2,5J,5J2,-5J,-5J2,5J,5,5,-5J,-5J2,-5J2,-5J,5J2,5J,-5J2,5J,5J2,-5J,-5J2,5J,5,5,0,0,0,0],
[5,5,5,5,5J2,5J,-5J2,-5J,-5J2,-5J,-5,-5,-5,5,-5J,5J2,5J,-5J2,-5J,5J2,5,5,-5J2,-5J,-5J,-5J2,5J,5J2,-5J,5J2,5J,-5J2,-5J,5J2,5,5,0,0,0,0],
[-5J2,-5J,-5J2,-5J,-5,-5,5,5,5,5,5J,5J2,5,-5,5J,-5J2,-5J,5J2,5J,-5J2,-5J,-5J2,5,5,5J2,5J,-5J2,-5J,5J,-5J2,-5J2,5J,5J2,-5J,-5,-5,0,0,0,0],
[-5J,-5J2,-5J,-5J2,-5,-5,5,5,5,5,5J2,5J,5,-5,5J2,-5J,-5J2,5J,5J2,-5J,-5J2,-5J,5,5,5J,5J2,-5J,-5J2,5J2,-5J,-5J,5J2,5J,-5J2,-5,-5,0,0,0,0],
[5J,5J2,5J,5J2,5J2,5J,-5J2,-5J,5J2,5J,5J2,5J,5,5,-5,5,5,-5,5,-5,-5J2,-5J,5J2,5J,5J2,5J,5J2,5J,5,-5,-5J2,5J,-5J2,5J,5,-5,0,0,0,0],
[5J2,5J,5J2,5J,5J,5J2,-5J,-5J2,5J,5J2,5J,5J2,5,5,-5,5,5,-5,5,-5,-5J,-5J2,5J,5J2,5J,5J2,5J,5J2,5,-5,-5J,5J2,-5J,5J2,5,-5,0,0,0,0],
[5J,5J2,-5J,-5J2,5J2,5J,5J2,5J,5J2,5J,5J2,5J,5,5,-5,5,-5,5,5,-5,5J2,5J,-5J2,-5J,5J2,5J,5J2,5J,-5,5,5J2,-5J,5J2,-5J,-5,5,0,0,0,0],
[5J2,5J,-5J2,-5J,5J,5J2,5J,5J2,5J,5J2,5J,5J2,5,5,-5,5,-5,5,5,-5,5J,5J2,-5J,-5J2,5J,5J2,5J,5J2,-5,5,5J,-5J2,5J,-5J2,-5,5,0,0,0,0],
[-5J,-5J2,-5J,-5J2,-5J,-5J2,5J,5J2,5J,5J2,5J2,5J,5,-5,5J,-5J2,-5J,5J2,5J,-5J2,-5J2,-5J,5J,5J2,5,5,-5,-5,5J,-5J2,-5,5,5,-5,-5,-5,0,0,0,0],
[5J2,5J,5J2,5J,5J2,5J,-5J2,-5J,-5J2,-5J,-5J,-5J2,-5,5,-5J2,5J,5J2,-5J,-5J2,5J,5J,5J2,-5J2,-5J,-5,-5,5,5,-5J2,5J,5,-5,-5,5,5,5,0,0,0,0],
[5J,5J2,5J,5J2,5J2,5J,-5J2,-5J,-5J2,-5J,-5J2,-5J,-5,5,-5,5,5,-5,-5,5,5J2,5J,-5J2,-5J,-5J2,-5J,5J2,5J,-5,5,5J2,-5J,-5J2,5J,5,5,0,0,0,0],
[-5J2,-5J,-5J2,-5J,-5J,-5J2,5J,5J2,5J,5J2,5J,5J2,5,-5,5,-5,-5,5,5,-5,-5J,-5J2,5J,5J2,5J,5J2,-5J,-5J2,5,-5,-5J,5J2,5J,-5J2,-5,-5,0,0,0,0],
[5J,5J2,-5J,-5J2,5J2,5J,5J2,5J,-5J2,-5J,-5J2,-5J,-5,5,-5,5,-5,5,-5,5,-5J2,-5J,5J2,5J,-5J2,-5J,5J2,5J,5,-5,-5J2,5J,5J2,-5J,-5,-5,0,0,0,0],
[-5J2,-5J,5J2,5J,-5J,-5J2,-5J,-5J2,5J,5J2,5J,5J2,5,-5,5,-5,5,-5,5,-5,5J,5J2,-5J,-5J2,5J,5J2,-5J,-5J2,-5,5,5J,-5J2,-5J,5J2,5,5,0,0,0,0],
[1,1,-1,-1,-5,-5,-5,-5,5,5,5,5,5,1,5,-5,5,-5,5,-5,5,5,-5,-5,5,5,-5,-5,-5,5,5,-5,-5,5,-1,5,6,6,6,6],
[5,5,5,5,5,5,-5,-5,-5,-5,-5,-5,-5,5,-5,5,5,-5,-5,5,5,5,-5,-5,-5,-5,5,5,-5,5,5,-5,-5,5,5,5,0,0,0,0],
[-6,-6,6,6,0,0,0,0,0,0,0,0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,9-3*root(5),-6-6*root(5),-6+6*root(5),9+3*root(5)],
[-6,-6,6,6,0,0,0,0,0,0,0,0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,-6-6*root(5),9+3*root(5),9-3*root(5),-6+6*root(5)],
[-6,-6,6,6,0,0,0,0,0,0,0,0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,-6+6*root(5),9-3*root(5),9+3*root(5),-6-6*root(5)],
[-6,-6,6,6,0,0,0,0,0,0,0,0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,9+3*root(5),-6+6*root(5),-6-6*root(5),9-3*root(5)]])//30,
:eigenvalues=>[1,1,1,1,1,1,1,1,1,1,1,1,1,1,J2,J2,J2,J2,J2,J2,-1,-1,-1,-1,
               J,J,J,J,-J2,-J2,-J,-J,J,J,1,-1,E(5),E(5,2),E(5,3),E(5,4)],
:explanation=>"mysteryG32",:name=>"?40",:special=>3,:cospecial=>4,:ennola=>14)
end

chevieset(:G32, :UnipotentCharacters,Dict{Symbol, Any}(
  :harishChandra => [
  Dict(:relativeType=>TypeIrred(;series=:ST,indices=1:4,rank=4,ST=32),
    :levi=>Int[], :parameterExponents => [1, 1, 1, 1], :charNumbers => 1:102,
    :eigenvalue => 1, :cuspidalName => ""),
  Dict(:relativeType=>TypeIrred(;series=:ST,indices=2:4,rank=3,ST=26),
    :levi=>[1],:parameterExponents=>[3,1,1],:charNumbers => [103, 171, 240, 241,
       121, 120, 242, 117, 234, 105, 233, 104, 108, 238, 199, 126, 162, 109,
       235, 173, 200, 127, 163, 110, 236, 172, 130, 203, 161, 226, 119, 175,
       131, 204, 160, 225, 118, 174, 152, 153, 177, 179, 178, 176, 201, 128,
       202, 129], :eigenvalue => E(3,2),
     :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0, 1]])),
  Dict(:relativeType=>TypeIrred(;series=:ST,indices=[4,3],rank=2,ST=5),
    :levi=>1:2,:parameterExponents=>[1,[0,4,4]],:charNumbers=>[239,113,114,246,
    135,132,245,133,134,136,230,229,124,208,206,123,205,207,182,181,180],
    :eigenvalue => -1, :cuspidalName => "G_4"),
  Dict(:relativeType=>TypeIrred(;series=:ST,indices=[2,4],rank=2,p=6,q=1),
    :levi=>[1,3],:parameterExponents=>[[3,3,2,0,0,2],3],:charNumbers=>[188,122,
    137, 184, 190, 140, 187, 139, 189, 183, 138, 227, 212, 209, 164, 244, 237,
    210, 243, 211, 228, 107, 106, 111, 185, 186, 112], :eigenvalue => E(3),
    :cuspidalName=>ImprimitiveCuspidalName([[],[0,1],[0,1]])*"\\otimes "*
    ImprimitiveCuspidalName([[],[0,1],[0,1]])),
  Dict(:relativeType=>TypeIrred(;series=:ST,indices=[4],rank=1,p=6,q=1),
    :levi => 1:3, :parameterExponents => [[6, 4, 1, 0, 1, 4]],
    :charNumbers => [116, 143, 217, 232, 218, 144], :eigenvalue => E(3),
    :cuspidalName => "G_{25}[\\zeta_3]"),
  Dict(:relativeType=>TypeIrred(;series=:ST,indices=[4],rank=1,p=6,q=1),
    :levi => 1:3, :parameterExponents => [[6, 1, 4, 0, 4, 1]],
    :charNumbers => [115, 216, 145, 231, 146, 215], :eigenvalue => -E(3),
    :cuspidalName => "G_{25}[-\\zeta_3]"),
  Dict(:relativeType=>TypeIrred(;series=:ST,indices=[3],rank=1,p=6,q=1),
    :levi => [1, 2, 4], :parameterExponents => [[9, 8, 5, 0, 5, 8]],
    :charNumbers => [125, 142, 213, 247, 214, 141], :eigenvalue =>-E(3,2),
    :cuspidalName=>"G_4\\otimes "*ImprimitiveCuspidalName([[],[0,1],[0,1]])),
  mkcuspidal("G_{32}",147,1),
  mkcuspidal("G_{32}",148,1;no=2),
  mkcuspidal("G_{32}",219,1;no=3),
  mkcuspidal("G_{32}",149,-1),
  mkcuspidal("G_{32}",191,-1;no=2),
  mkcuspidal("G_{32}",192,-1;no=3),
  mkcuspidal("G_{32}",220,-1;no=4),
  mkcuspidal("G_{32}",151,E(4)),
  mkcuspidal("G_{32}",154,E(4);no=2,qeig=1//2),
  mkcuspidal("G_{32}",155,E(4);no=3,qeig=1//2),
  mkcuspidal("G_{32}",150,-E(4)),
  mkcuspidal("G_{32}",156,-E(4);no=2,qeig=1//2),
  mkcuspidal("G_{32}",157,-E(4);no=3,qeig=1//2),
  mkcuspidal("G_{32}",193,E(3,2)),
  mkcuspidal("G_{32}",194,E(3,2);no=2),
  mkcuspidal("G_{32}",197,-E(3)),
  mkcuspidal("G_{32}",198,-E(3);no=2),
  mkcuspidal("G_{32}",195,-E(3,2)),
  mkcuspidal("G_{32}",196,-E(3,2);no=2),
  mkcuspidal("G_{32}",221,E(5)),
  mkcuspidal("G_{32}",222,E(5,2)),
  mkcuspidal("G_{32}",223,E(5,3)),
  mkcuspidal("G_{32}",224,E(5,4)),
  mkcuspidal("G_{32}",165,E(9,5);qeig=2//3),
  mkcuspidal("G_{32}",170,E(9,5);no=2,qeig=1//3),
  mkcuspidal("G_{32}",166,E(9,2);qeig=1//3),
  mkcuspidal("G_{32}",168,E(9,2);no=2,qeig=2//3),
  mkcuspidal("G_{32}",167,E(9,8);qeig=2//3),
  mkcuspidal("G_{32}",169,E(9,8);no=2,qeig=1//3),
  mkcuspidal("G_{32}",158,E(12,11);qeig=1//2),
  mkcuspidal("G_{32}",159,E(12,5);qeig=1//2)],
# note (Jean):
# the characters [[52,53],[34,40],[36,42],[58,59],[84,88],[79,82]]
# have the same fakedegree. The repartition in families below is the only one
# such that the DeligneLusztigCharacterTable is integral.
  :families => [
  Family(:C1, [1]),
  Family(Family(:X)(3), [9, 6, 103], signs=[1, 1, -1],ennola=3),
  Family(Family(:QZ)(3,[Perm(),[E(3)]]),[20,23,26,106, 104, 15, 105, 12, 107],
    signs=[1, 1, 1, 1, -1, 1, 1, 1, 1],ennola=8),
  Family(Family(:X)(3), [37, 34, 108], signs=[1, 1, -1],ennola=-1),
  Family(Family(:X)(6), [57,64,49,61,54,111,113,109,115,17,116,110,18,114,112],
    signs=[1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1],ennola=5),
  Family(Family(:X)(3)*Family(:X5),
    [46,72,123,119,41,44,69,124,118,45,120,117,125,122,121],
    signs=[1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, -1],ennola=-10),
  Family(Family(:G4)(), [73, 76, 147, 133, 132, 149, 80, 13, 10, 32, 43, 40, 97,
    148, 52, 150, 136, 151, 126, 139, 27, 130, 138, 84, 128, 135, 144, 141, 74,
    145, 143, 142, 77, 146, 129, 134, 137, 81, 127, 140, 28, 131],
    signs=[1,1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,1,1,1,-1,1,1,1,-1,1,-1,
           -1,1, -1, 1, -1, -1, -1, -1, 1, 1, -1, 1, 1, 1], ennola=9),
  Family(Family(:X)(3)*Family(:TQZ)(2,-1,[1,-1]),
    [93, 96, 156, 154, 94, 95, 157, 155, 153, 152, 159, 158],
    signs=[1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1], cospecial=6, ennola=7),
  Family(Family(:X)(3)*Family(:X)(3),[85,87,161, 88, 82, 160, 163, 162, 164],
         signs=[1, 1, -1, 1, 1, -1, -1, -1, 1],cospecial=5,ennola=-6),
  Family(Family(:TQZ)(3,E(3,2),[1,E(3,2)]),
    [102,100,101,167,168,165,170,166,169],ennola=7),
  Family(Family(:X5)*Family(:QZ)(3),[53, 21, 59, 90, 185, 177, 47, 187, 193, 79,
    33, 36, 98, 184, 179, 99, 183, 178, 180, 182, 181, 192, 198, 196, 191, 197,
    195, 171, 172, 173, 174, 68, 189, 175, 71, 190, 56, 60, 24, 48, 188, 194,
    89, 186, 176], signs=[-1,-1,1,-1,1,-1,-1,1,-1,-1,1,1,-1,1,-1,-1,1,1,1,1,1,
     -1,1,-1,-1,1,-1,1,1,1,1,1,-1,1,-1,1,-1,1,-1,-1,1,1,-1,1,1],ennola=41),
  Family(:X40,[8,5,65,62,86,83,66,63,51,50,67,70,91,92,199,200,201,202,203,204,
               205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,
               221,222,223,224], 
     signs=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,1,1]),
  Family(Family(:X)(6),[58,75,25,78,55,227,229,225,231,30,232,226,29,230,228],
    signs=[1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1],ennola=-15),
  Family(Family(:X)(3)*Family(:X)(3),[38, 42, 234, 39, 35, 233, 236, 235, 237],
    signs=[1, 1, -1, 1, 1, -1, -1, -1, 1],cospecial=5,ennola=3),
  Family(:X5,[19,31,239,238,22],signs=[1, 1, -1, -1, 1],ennola=-5),
  Family(conj(Family(:X)(6)),[14,7,16,4,11,240,246,244,247,2,242,243,3,245,241],
  signs=[1,1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,1],special=13,cospecial=10,ennola=15)],
  :a => [0, 40, 40, 40, 15, 1, 40, 15, 1, 6, 40, 2, 6, 40, 2, 40, 4, 4, 30, 2, 12, 30, 2, 12, 20, 2, 6, 6, 20, 20, 30, 6, 12, 3, 25, 12, 3, 25, 25, 6, 5, 25, 6, 5, 5, 5, 12, 12, 4, 15, 15, 6, 12, 4, 20, 12, 4, 20, 12, 12, 4, 15, 15, 4, 15, 15, 15, 12, 5, 15, 12, 5, 6, 6, 20, 6, 6, 20, 12, 6, 6, 9, 15, 6, 9, 15, 9, 9, 12, 12, 15, 15, 8, 8, 8, 8, 6, 12, 12, 10, 10, 10, 1, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 25, 25, 25, 25, 25, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40],
  :A => [0, 80, 80, 80, 75, 29, 80, 75, 29, 66, 80, 46, 66, 80, 46, 80, 56, 56, 78, 46, 72, 78, 46, 72, 76, 46, 66, 66, 76, 76, 78, 66, 72, 51, 77, 72, 51, 77, 77, 66, 61, 77, 66, 61, 61, 61, 72, 72, 56, 75, 75, 66, 72, 56, 76, 72, 56, 76, 72, 72, 56, 75, 75, 56, 75, 75, 75, 72, 61, 75, 72, 61, 66, 66, 76, 66, 66, 76, 72, 66, 66, 69, 75, 66, 69, 75, 69, 69, 72, 72, 75, 75, 67, 67, 67, 67, 66, 72, 72, 70, 70, 70, 29, 46, 46, 46, 46, 51, 56, 56, 56, 56, 56, 56, 56, 56, 61, 61, 61, 61, 61, 61, 61, 61, 61, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 80, 80, 80, 80, 80, 80, 80, 80]))
