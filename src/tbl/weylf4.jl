#  tbl/weylf4.g              CHEVIE library          Meinolf Geck, Jean Michel
#  Copyright (C) 1994 - 2012  The CHEVIE Team
#
#  This file contains the irreducible representations of the Hecke algebra
#  H of F_4 (in terms of W-graphs). They have been determined by H. Naruse 
#  in the equal parameter case (private communication, January 1998), 
#  and by M. Geck in  the 2-parameter case (August 1997).

chevieset(:F4, :CartanMat,function(cartantype=1)
  [2 -1 0 0;-1 2 -cartantype 0;0 -2//cartantype 2 -1;0 0 -1 2]
end)

chevieset(:F4,:simpleroots,
 [0 1 -1 0;
  0 0 1 -1;
  0 0 0 1;
  1//2 -1//2 -1//2 -1//2])

chevieset(:F4,:HyperplaneRepresentatives, [1, 3])

chevieset(:F4,:ParabolicRepresentatives, function(s)
  t=[[Int[]],[[1],[3]],[[1,2],[1,3],[2,3],[3,4]],
     [[1,2,3],[1,2,4],[1,3,4],[2,3,4]],[1:4]]
  t[s+1]
end)

chevieset(:F4,:ReflectionDegrees, [2, 6, 8, 12])

chevieset(:F4,:NrConjugacyClasses, 25)

chevieset(:F4,:ClassInfo, function ()
# representatives are "very good" see Geck-Michel
  res=Dict{Symbol,Any}(:classtext=>map(x->Replace(x,[0],1:4),
    [[],[0,0,0,0,0,0],[2,3,2,3],[2,1],[0,2,3,2,3,4,3],[0,0,0],[4,3],
     [1,2,1,3,2,3,0],[0,0,0,0],[0,0],[0],[1],[2,3,2,3,4,3,2,3,4],[1,4,3],
     [4,3,2],[2,3,2,1,3],[3],[1,2,1,3,2,1,3,2,3],[2,1,4],[3,2,1],[2,4,3,2,3],
     [1,3],[3,2],[0,0,0,2,3],[0,2,3]]),
  :classnames=>["A_0","4A_1","2A_1","A_2","D_4","D_4(a_1)","\\tilde A_2",
    "C_3+A_1","A_2+\\tilde A_2","F_4(a_1)","F_4","A_1","3A_1",
    "\\tilde A_2+A_1","C_3","A_3","\\tilde A_1","2A_1+\\tilde A_1",
    "A_2+\\tilde A_1","B_3","B_2+A_1","A_1+\\tilde A_1","B_2",
    "A_3+\\tilde A_1","B_4"],
  :classes=>[1,1,18,32,32,12,32,32,16,16,96,12,12,96,96,72,12,12,96,96,72,72,36,36,144],
  :orders => [1,2,2,3,6,4,3,6,3,6,12,2,2,6,6,4,2,2,6,6,4,2,4,4,8])
  res[:classparams]=res[:classnames]
  res[:powermaps]=chevieget(:F4,:PowerMaps)
  res
end)

chevieset(:F4, :CharInfo, function ()
  res=Dict{Symbol,Any}(:charparams=>[[1,0],[1,12,2],[1,12,1],[1,24],[2,4,2],
    [2,16,1],[2,4,1],[2,16,2],[4,8],[9,2],[9,6,2],[9,6,1],[9,10],[6,6,1],
    [6,6,2],[12,4],[4,1],[4,7,2],[4,7,1],[4,13],[8,3,2],[8,9,1],[8,3,1],
    [8,9,2],[16,5]],
  :kondo=>["1_1","1_2","1_3","1_4","2_1","2_2","2_3","2_4","4_1","9_1","9_2",
           "9_3","9_4","6_1","6_2","12","4_2","4_3","4_4","4_5","8_1","8_2",
           "8_3","8_4","16"],
# names used in Spaltenstein's [Generalized Springer correspondance for
# exceptional groups]
  :spaltenstein=>["1_1","1_2","1_3","1_4","2_1","2_2","2_3","2_4","4","9_1",
                  "9_2","9_3","9_4","6_1","6_2","12","4_1","4_2","4_3","4_4",
                  "8_1","8_2","8_3","8_4","16"],
  :extRefl=>[1,17,15,20,4],
  :a=>[0,4,4,24,1,13,1,13,4,2,4,4,10,4,4,4,1,4,4,13,3,9,3,9,4],
  :A=>[0,20,20,24,11,23,11,23,20,14,20,20,22,20,20,20,11,20,20,23,15,21,15,21,20])
  res[:lusztig]=["1_1","1_3","1_2","1_4","2_3","2_4","2_1","2_2","4_1","9_1",
    "9_3","9_2","9_4","6_1","6_2","12","4_2","4_4","4_3","4_5","8_3","8_4",
    "8_1","8_2","16"]
  res[:b]=map(x->x[2],res[:charparams])
  res[:charnames]=exceptioCharName.(res[:charparams])
  res
end)

chevieset(:F4, :cyclestructure,
[[[], []],
 [[2 => 12], [2 => 12]],
 [[2 => 10], [2 => 10]],
 [[3 => 8], [3 => 6]],
 [[6 => 4], [2 => 3, 6 => 3]],
 [[4 => 6], [4 => 6]],
 [[3 => 6], [3 => 8]],
 [[2 => 3, 6 => 3], [6 => 4]],
 [[3 => 8], [3 => 8]],
 [[6 => 4], [6 => 4]],
 [[12 => 2], [12 => 2]],
 [[2 => 9], [2 => 6]],
 [[2 => 11], [2 => 12]],
 [[2 => 3, 3 => 2, 6 => 2], [3 => 4, 6 => 2]],
 [[2 => 2, 6 => 3], [6 => 4]],
 [[2 => 2, 4 => 5], [2 => 1, 4 => 5]],
 [[2 => 6], [2 => 9]],
 [[2 => 12], [2 => 11]],
 [[3 => 4, 6 => 2], [2 => 3, 3 => 2, 6 => 2]],
 [[6 => 4], [2 => 2, 6 => 3]],
 [[2 => 1, 4 => 5], [2 => 2, 4 => 5]],
 [[2 => 11], [2 => 11]],
 [[4 => 5], [4 => 5]],
 [[2 => 2, 4 => 5], [2 => 2, 4 => 5]],
 [[8 => 3], [8 => 3]]])

chevieset(:F4,:generators,[
  perm"(1,25)(2,5)(6,8)(9,11)(10,12)(13,15)(16,18)(23,24)(26,29)(30,32)(33,35)(34,36)(37,39)(40,42)(47,48)",
  perm"(1,5)(2,26)(3,6)(7,10)(11,14)(15,17)(18,20)(22,23)(25,29)(27,30)(31,34)(35,38)(39,41)(42,44)(46,47)",
  perm"(2,9)(3,27)(4,7)(5,11)(10,13)(12,15)(17,19)(20,22)(26,33)(28,31)(29,35)(34,37)(36,39)(41,43)(44,46)",
  perm"(3,7)(4,28)(6,10)(8,12)(9,16)(11,18)(14,20)(19,21)(27,31)(30,34)(32,36)(33,40)(35,42)(38,44)(43,45)"])

chevieset(:F4,:orbits,[ [ 1, 25, 5, 29, 2, 11, 26, 35,
  9, 14, 18, 33, 38, 42, 16, 20, 40, 44, 22, 46, 23, 47, 24, 48 ],
  [ 3, 6, 27, 7, 8, 10, 30, 31, 4, 12, 13, 32, 34, 28, 15, 36, 37, 17, 39,
  19, 41, 21, 43, 45 ] ] )

chevieset(:F4, :PowerMaps, [nothing, 
  [1,1,1,4,4,2,7,7,9,9,10,1,1,7,7,3,1,1,4,4,3,1,3,3,6],
  [1,2,3,1,2,6,1,2,1,2,6,12,13,12,13,16,17,18,17,18,21,22,23,24,25],
  nothing,1:25,nothing,1:25,nothing,nothing,nothing,1:25])

chevieset(:F4,:sparseFakeDegrees,
[[1,0],[1,12],[1,12],[1,24],[1,4,1,8],[1,16,1,20],[1,4,1,8],[1,16,1,20],[1,8,
2,12,1,16],[1,2,1,4,2,6,1,8,2,10,1,12,1,14],[1,6,1,8,2,10,1,12,2,14,1,16,1,
18],[1,6,1,8,2,10,1,12,2,14,1,16,1,18],[1,10,1,12,2,14,1,16,2,18,1,20,1,22],
[1,6,1,8,2,12,1,16,1,18],[1,6,1,8,2,12,1,16,1,18],[1,4,2,8,2,10,2,12,2,14,2,
16,1,20],[1,1,1,5,1,7,1,11],[1,7,1,11,1,13,1,17],[1,7,1,11,1,13,1,17],[1,13,1,
17,1,19,1,23],[1,3,1,5,1,7,2,9,1,11,1,13,1,15],[1,9,1,11,1,13,2,15,1,17,1,19,
1,21],[1,3,1,5,1,7,2,9,1,11,1,13,1,15],[1,9,1,11,1,13,2,15,1,17,1,19,1,21],[1,
5,2,7,2,9,3,11,3,13,2,15,2,17,1,19]])

chevieset(:F4, :ClassParameter, function (w,)
  x=prod(chevieget(:F4,:generators)[w],init=Perm())
  chevieget(:F4,:classparams)[findfirst(
  ==([tally(cycletype(RestrictedPerm(x,chevieget(:F4,:orbits)[1]))),
      tally(cycletype(RestrictedPerm(x,chevieget(:F4,:orbits))[2]))]),
  chevieget(:F4,:cyclestructure))]
end)

chevieset(:F4, :HeckeCharTable, function (param, rootpara)
  u=improve_type(-param[1][1]//param[1][2])
  uinv=improve_type(-param[1][2]//param[1][1])
  v=improve_type(-param[3][1]//param[3][2])
  vinv=improve_type(-param[3][2]//param[3][1])
  tbl=Dict{Symbol, Any}(:identifier=>"H(F4)",
    :text=>"origin: Meinolf Geck, April 1992",
    :parameter => [u, u, v, v], :size => 1152)
  merge!(tbl,chevieget(:F4, :ClassInfo)())
  merge!(tbl,chevieget(:F4, :CharInfo)())
  tbl[:centralizers]=div.(tbl[:size],tbl[:classes])
  dual(f)=map((a,w)->a*(-u)^count(j->j in [1,2],w)*(-v)^count(j->j in [3,4],w),
                                  f(uinv,vinv),tbl[:classtext])
  f4(u,v)=[1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1]
  f2(u,v)=[1,u^12,u^2,u^2,u^4,u^6,1,u^6,u^8,u^4,u^2,u,u^3,
   u,u,u^3,-1,-u^6,-u^2,-u^2,-u^2,-u,-u,-u^7,-u^3]
  f6(u,v)=[2,2*v^6,v^2+1,2,2*v^3,2*v^3,-v,-v^2,-v^4,-v^2,-v,
    -2,-2*v^3,v,v,-1-v^2,v-1,-1+v^3,v-1,v-1,0,1-v,1-v,v^3-v^4,0]
  f8(u,v)=[2,2*u^6,u^2+1,-u,-u^2,2*u^3,2,2*u^3,-u^4,-u^2,-u,
    -1+u,u^3-1,-1+u,-1+u,0,-2,-2*u^3,u,u,-u^2-1,-u+1,-u+1,-u^4+u^3,0]
  f11(u,v)=[9,9*v^4*u^8,v^2*u^2+1-4*u*v+3*u^2,-3*u+3*u^2,0,
   -3*v^2*u^4,3-3*v,0,0,0,0,6*u-3,-3*v^2*u^2+2*v^3*u^3+3*u*v^2+u^3,
   2*u-2*u*v-1+v,-u*v+u,u^3-2*u^2*v,-6+3*v,3*u^4*v-3*v^2*u^4-u^6-2*u^3,
   u^2*v-2*u^2-u*v+2*u,u-u^2,-u^2+2*u*v,-4*u+2*u*v+2-v,-3*u+u*v+1,
   -v^3*u^5+v^2*u^5-v^2*u^4,u^2*v]
  f13(u,v)=[9,9*v^4*u^4,3-4*u*v+u^2+v^2,-3*u+3,0,-3*v^2*u^2,
    3-3*v,0,0,0,0,-6+3*u,-1+3*u*v^2-3*v^2*u^2-2*v^3,-u*v+u-2+2*v,v-1,-1+2*u*v,
    -6+3*v,-1+3*u^2*v-2*u^3-3*v^2*u^2,-u*v+2*u+v-2,-1+u,-1+2*u*v,4-2*v+u*v-2*u,
    3-v-u,v^3*u^2-v^2*u^2+v^2*u^3,-u*v]
  f18(u,v)=[4,-4*v^3*u^9,2*u^2-2*u*v,2*u^2-u,u^3*v-2*v^2*u^3,
    0,-v+2,-2*u^4*v+u^5*v,-2*v^2*u^6,2*u^3*v,0,3*u-1,u^3-3*v^2*u^2,-u*v+u-1,u,
    u^3-u^2*v,-3+v,-u^6+3*u^4*v,u^2*v-u^2+u,-u^2,-u^2+u*v,u*v-2*u+1,-2*u,
    2*v^2*u^5,0]
  f20(u,v)=[4,-4*v^3*u^3,2-2*u*v,2-u,-2*u*v^2+u*v,0,-v+2,
    u*v-2*u^2*v,-2*v^2*u^2,2*u*v,0,-3+u,3*u*v^2-1,v-1+u,-1,-1+u*v,-3+v,
    -1+3*u^2*v,v-1+u,-1,-1+u*v,2-v-u,2,-2*v^2*u^2,0]
  f22(u,v)=[8,-8*v^6*u^3,2*v^2-4*u*v+2,4-2*u,-v^4*u-u*v^2,0,
   -3*v+1+v^2,2*v^2*u^2-u*v^2,2*v^4*u^2,-2*u*v^2,0,-6+2*u,
   -2*v^3+3*u*v^2+3*v^4*u,-u*v-1-v^2+2*v,v,2*u*v-1-v^2,4*v-4,
   v^3-3*v^2*u^2+3*u^2*v-1,-u*v+u-2+2*v,v-1,-u*v^2+u*v,u*v-u-3*v+3,2-2*v,0,0]
  f24(u,v)=[8,-8*v^3*u^6,2*u^2-4*u*v+2,-3*u+1+u^2,
   -u^2*v+2*v^2*u^2,0,-2*v+4,-u^4*v-u^2*v,2*v^2*u^4,-2*u^2*v,0,-4+4*u,
   u^3-3*v^2*u^2+3*u*v^2-1,-u*v+2*u+v-2,-1+u,u*v-u^2*v,-6+2*v,
   -2*u^3+3*u^2*v+3*u^4*v,-u^2-u*v+2*u-1,u,-u^2+2*u*v-1,-3*u+u*v-v+3,
   -2*u+2,0,0]
 tbl[:irreducibles]=[dual(f4),f2(u,v),dual(f2),f4(u,v),dual(f6),
                     f6(u,v),dual(f8),f8(u,v),
  [4,4*u^6*v^6,v^2+v^2*u^2+u^2+1,-2u,-2*v^3*u^2,4*v^3*u^3,-2v,-2*v^2*u^3,
   v^4*u^4,v^2*u^2,u*v,2u-2,-2*v^3+2*v^3*u^3,v-u*v,v-u*v,0,2v-2,
   2*v^3*u^3-2*u^3,-u*v+u,-u*v+u,0,u*v-v+1-u,u*v-v+1-u,
   -v^4*u^3+v^4*u^4-v^3*u^4+v^3*u^3,0],
  dual(f13),f11(u,v),dual(f11),f13(u,v),
  [6,6*u^6*v^6,u^2-4*u*v+v^2,1-2u+u^2,v^2*u^2+v^4*u^2-2*v^3*u^2,
   2*v^3*u^3,1+v^2-2v,v^2*u^2-2*v^2*u^3+v^2*u^4,3*v^4*u^4,3*v^2*u^2,
   -u*v,-3+3u,-3*v^2*u^2+3*v^4*u,u*v^2-u*v+v-1,0,u*v-u^2*v,-3+3v,
   -3*v^2*u^2+3*u^4*v,u^2*v-u*v+u-1,0,-u*v^2+u*v,-u+2*u*v-v+2,
   -v-u,-v^4*u^3-v^3*u^4,0],
  [6,6*u^6*v^6,-4*u*v+v^2*u^2+1,1-2u+u^2,v^2*u^2+v^4*u^2-2*v^3*u^2,
   2*v^3*u^3,1+v^2-2v,v^2*u^2-2*v^2*u^3+v^2*u^4,3*v^4*u^4,3*v^2*u^2,
   -u*v,-3+3u,3*u*v^2-3*v^4*u^2,-v^2+v-u*v+u,0,u*v-u^2*v,-3+3v,
   -3*v^2*u^4+3*u^2*v,-u^2-u*v+u+v,0,-u*v^2+u*v,-2u+u*v-2v+1,
   u*v+1,v^4*u^4+v^3*u^3,0],
  [12,12*u^6*v^6,1+v^2*u^2-8*u*v+u^2+v^2,2*u^2-4u+2,
   2*v^3*u^2-v^4*u^2-v^2*u^2,4*v^3*u^3,2-4v+2*v^2,
   2*v^2*u^3-v^2*u^4-v^2*u^2,-3*v^4*u^4,-3*v^2*u^2,u*v,-6+6u,
   -3*v^2*u^2+3*u*v^2-3*v^4*u^2+3*v^4*u,-2*u*v+u+u*v^2-v^2+2v-1,
   0,2*u*v-2*u^2*v,-6+6v,-3*v^2*u^2+3*u^2*v-3*v^2*u^4+3*u^4*v,
   u^2*v-u^2-2*u*v+2u+v-1,0,-2*u*v^2+2*u*v,3-3u-3v+3*u*v,
   u*v-v+1-u,-v^4*u^3+v^4*u^4-v^3*u^4+v^3*u^3,0],
  dual(f20),f18(u,v),dual(f18),f20(u,v),dual(f22),f22(u,v),dual(f24),f24(u,v),
  [16,-16*u^6*v^6,2+2*v^2*u^2-8*u*v+2*v^2+2*u^2,-6u+2*u^2+2,v
   ^4*u^2+v^2*u^2,0,2*v^2-6v+2,v^2*u^4+v^2*u^2,-2*v^4*u^4,2*v^2*u^2,0,
   -8+8u,v^2*(u-1)*(2*u^2*v-3u-3*u*v^2+2*u*v+2v),
   u*v^2-3*u*v-v^2+3v-1+u,v-u*v,2*u*v-2*u^2*v,-8+8v,
   -u^2*(v-1)*(-2*u*v^2+3*u^2*v+3v-2*u*v-2u),(u^2-3u+1)*(v-1),
   -u*v+u,-2*u*v*(v-1),4*(v-1)*(u-1),2*(v-1)*(u-1),0,0]]*u^0*v^0
  AdjustHeckeCharTable(tbl,param)
end)

chevieset(:F4, :PoincarePolynomial, function (param)
  chevieget(:F4, :SchurElement)([1, 0], param)
end)

chevieset(:F4, :SchurModels,
Dict(
:f1_0=>Dict(
 :vcyc=>[[[0,0,1,-1],1],[[0,0,1,-1],6],[[1,-1,0,0],1],[[1,-1,0,0],6],
  [[1,-1,2,-2],1],[[1,-1,1,-1],6],[[2,-2,1,-1],1],[[1,-1,1,-1],4],
  [[1,-1,1,-1],2],[[1,-1,1,-1],2]]),
:f2_4s=>Dict(:coeff=>-1,:factor=>[0,0,-1,1],
 :vcyc=>[[[0,0,1,-1],6],[[1,-1,0,0],3],[[1,-1,0,0],6],[[1,-1,0,0],1],
  [[1,-1,0,0],1],[[2,-2,1,-1],1],[[1,-1,1,-1],2],[[1,-1,-1,1],2],
  [[2,-2,-1,1],1]]),
:f4_8=>Dict(:coeff=>2,
 :vcyc=>[[[0,0,1,-1],6],[[-1,1,0,0],6],[[1,-1,-1,1],2],[[1,-1,-1,1],2],
  [[-1,1,-1,1],2],[[1,-1,1,-1],2]]),
:f9_2=>Dict(
 :vcyc=>[[[0,0,1,-1],1],[[1,-1,0,0],1],[[1,-1,-2,2],1],[[1,-1,1,-1],4],
  [[-2,2,1,-1],1],[[1,-1,1,-1],2],[[1,-1,1,-1],2]]),
:f6_6s=>Dict(:coeff=>3,
 :vcyc=>[[[0,0,-1,1],1],[[0,0,-1,1],1],[[-1,1,0,0],1],[[-1,1,0,0],1],
  [[1,-1,1,-1],6],[[1,-1,-1,1],2],[[-1,1,1,-1],2]]),
:f12_4=>Dict(:coeff=>6,
 :vcyc=>[[[0,0,1,-1],3],[[-1,1,0,0],3],[[1,-1,-1,1],2],[[1,-1,-1,1],2],
  [[1,-1,1,-1],2],[[-1,1,-1,1],2]]),
:f4_1=>Dict(
 :vcyc=>[[[0,0,1,-1],1],[[0,0,1,-1],6],[[-1,1,0,0],1],[[1,-1,0,0],6],
  [[1,-1,-1,1],2],[[1,-1,1,-1],6],[[1,-1,1,-1],2],[[1,-1,1,-1],2]]),
:f8_3s=>Dict(:coeff=>-1,:factor=>[0,0,-1,1],
 :vcyc=>[[[0,0,1,-1],6],[[1,-1,0,0],6],[[1,-1,0,0],1],[[-1,1,0,0],1],
  [[1,-1,0,0],3],[[1,-1,-2,2],1],[[1,-1,2,-2],1]]),
:f16_5=>Dict(:coeff=>2,:factor=>[-1,1,-1,1],
 :vcyc=>[[[0,0,1,-1],6],[[-1,1,0,0],6],[[1,-1,-1,1],4],[[1,-1,1,-1],4]])))

chevieset(:F4, :SchurData, [
  Dict(:name=>"f1_0",:order=>[1,2,3,4]), Dict(:name=>"f1_0",:order=>[1,2,4,3]),
  Dict(:name=>"f1_0",:order=>[2,1,3,4]), Dict(:name=>"f1_0",:order=>[2,1,4,3]),
  Dict(:name=>"f2_4s",:order=>[1,2,3,4]),Dict(:name=>"f2_4s",:order=>[2,1,3,4]),
  Dict(:name=>"f2_4s",:order=>[3,4,1,2]),Dict(:name=>"f2_4s",:order=>[4,3,1,2]),
  Dict(:name=>"f4_8",:order=>[1,2,3,4]),
  Dict(:name=>"f9_2",:order=>[1,2,3,4]), Dict(:name=>"f9_2",:order=>[1,2,4,3]),
  Dict(:name=>"f9_2",:order=>[2,1,3,4]), Dict(:name=>"f9_2",:order=>[2,1,4,3]),
  Dict(:name=>"f6_6s",:order=>[1,2,4,3]),Dict(:name=>"f6_6s",:order=>[1,2,3,4]),
  Dict(:name=>"f12_4",:order=>[1,2,3,4]),
  Dict(:name=>"f4_1",:order=>[1,2,3,4]), Dict(:name=>"f4_1",:order=>[1,2,4,3]),
  Dict(:name=>"f4_1",:order=>[2,1,3,4]), Dict(:name=>"f4_1",:order=>[2,1,4,3]),
  Dict(:name=>"f8_3s",:order=>[1,2,3,4]),Dict(:name=>"f8_3s",:order=>[2,1,3,4]),
  Dict(:name=>"f8_3s",:order=>[3,4,1,2]),Dict(:name=>"f8_3s",:order=>[4,3,1,2]),
  Dict(:name=>"f16_5",:order=>[1,2,3,4])]); 

# They are F-equivariant for 2F4 for F-invariant representations.
chevieset(:F4, :WGraphs, 
[[[[]],[]],[[[3,4]],[]],2,1,[[[3],[4]],[[1,[[1,2]]]]],5,
[[[1],[2]],[[1,[[1,2]]]]],7,[[[1,3],[1,4],[2,3],[2,4]],[[1,[[1,2,3],[2,4],[3,
4]]]]],[[[1],[1,3],[1,4],[2],1,[2,4],[3],1,[4]],[[1,[[1,2,5],[2,3,4,8],[3,6],
[4,6,7],[5,8],[6,8,9],[7,9]]]]],[[[1,3],[1,3,4],[1,4],[2,3],[2,4],1,[3],[3,4],
1],[[[2,1],[[5,8]]],[-2,[[2,9]]],[1,[[1,3,4],[2,3,6,8],[3,5],[4,5],[6,7],[7,8,
9]]],[2,[[4,7]]]]],11,10,[[[1,2,4],[1,3],[1,3,4],[2],[2,4],[3]],
[[1,[[1,2,5],[2,3,4,6],[3,5],[4,5],[5,6]]]]],[[[1,2],[1,3],[1,4],[2,3],[2,4],
[3,4]],[[[2,1],[[1,2],[5,6]]],[1,[[2,3,4],[3,5],[4,5]]]]],
[[[1,2],[1,2,4],[1,3],1,[1,3,4],[1,4],[2],[2,3],[2,4],1,[3],[3,4]],
[[[1,2],[[1,4]]],[[2,1],[[9,12]]],[1,[[1,7],[2,3],[3,7],[4,6,8],[5,10],[6,9],
[8,9],[10,11],[11,12]]],[2,[[2,10],[3,5,11],[7,8,10],[8,11]]],[3,[[1,2],[2,6],
[5,6,12]]]]],[[[1],[2],[3],[4]],[[[-1,-2],[[2,3]]],[-1,[[1,2],[3,4]]]]],[[[1,
3,4],[2,4],[3],[3,4]],[[-1,[[3,4]]],[1,[[1,2,4],[2,3]]]]],18,17,
[[[1,3],[1,4],[2],[2,4],[3],1,[3,4],[4]],[[1,[[1,2,3,5],[2,4],[3,4,6],[4,5,7],
[6,7,8]]]]],21,[[[1],[1,2],[1,3],[1,4],[2],1,[2,4],[3]],[[1,[[1,6],[2,3,6],[3,4,
5,8],[4,7],[5,7],[6,8],[7,8]]]]],23,[[[1,2],[1,2,
4],[1,3],2,[1,3,4],[1,4],1,[2],[2,3],1,[2,4],2,[3],[3,4]],[[[1,2],[[13,16]]],
[1,[[1,2,4,5,9],[2,3,7,8,14],[3,9,15],[4,7,10],[5,8,11],[6,14,16],[7,12],[8,
13],[9,10,11],[10,12],[11,13,15],[14,15],[15,16]]],[2,[[3,6],[6,8],[9,14]]]]]])
 
chevieset(:F4, :WGraph, function (i)
  gr=chevieget(:F4, :WGraphs)
  if gr[i] isa Integer DualWGraph(4, gr[gr[i]])
  else gr[i]
  end
end)

chevieset(:F4, :HeckeRepresentation, function (param, rootpara, i)
  u=-param[1][1]//param[1][2]
  v=-param[3][1]//param[3][2]
  if ismissing(rootpara[1]) u=root(u)
  else u=-rootpara[1]//param[1][2]
  end
  if ismissing(rootpara[3]) v=root(v)
  else v=-rootpara[3]//param[3][2]
  end
  if u==v
    return -param[1][2]*WGraphToRepresentation(4,chevieget(:F4,:WGraph)(i),v)
  else
    r=[
[[u^2;;], [u^2;;], [v^2;;], [v^2;;]],
[[u^2;;], [u^2;;], [-1;;], [-1;;]],
[[-1;;], [-1;;], [v^2;;], [v^2;;]],
[[-1;;], [-1;;], [-1;;], [-1;;]],
[[u^2 0;0 u^2], [u^2 0;0 u^2],
 [-1 0;v v^2], [v^2 v;0 -1]],
[[-1 0;0 -1], [-1 0;0 -1],
 [-1 0;v v^2], [v^2 v;0 -1]],
[[-1 0;u u^2], [u^2 u;0 -1],
 [v^2 0;0 v^2], [v^2 0;0 v^2]],
[[-1 0;u u^2], [u^2 u;0 -1],
 [-1 0;0 -1], [-1 0;0 -1]],
[[-1 0 0 0;u u^2 0 0;0 0 -1 0;0 0 u u^2],
 [u^2 u 0 0;0 -1 0 0;0 0 u^2 u;0 0 0 -1],
 [-1 0 0 0;0 -1 0 0;v 0 v^2 0;0 v 0 v^2],
 [v^2 0 v 0;0 v^2 0 v;0 0 -1 0;0 0 0 -1]],
[[u^2 0 u 0 0 0 0 0 0; 0 u^2 0 0 u 0 0 0 0;
  0 0 -1 0 0 0 0 0 0;0 0 u u^2 0 0 0 0 0;
  0 0 0 0 -1 0 0 0 0;0 0 0 0 u u^2 0 0 0;
  0 0 u 0 0 0 u^2 0 0;0 0 0 0 0 0 0 u^2 u;
  0 0 0 0 0 0 0 0 -1],
 [u^2 0 0 0 0 0 0 0 0;0 u^2 0 0 0 0 0 0 0;
  0 0 u^2 u 0 0 0 0 0;0 0 0 -1 0 0 0 0 0;
  0 0 0 0 u^2 u 0 0 0;0 0 0 0 0 -1 0 0 0;
  0 0 0 0 0 0 u^2 u 0;0 0 0 0 0 0 0 -1 0;
  0 0 0 0 0 0 0 u u^2],
 [-1 0 0 0 0 0 0 0 0;v v^2 0 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0;
  1//u^2*v^2+u^2 0 1//u*v^2+u v^2 0 0 0 0 0;
  0 0 v 0 v^2 0 0 0 0;0 0 0 0 0 v^2 v 0 0;
  0 0 0 0 0 0 -1 0 0;0 0 0 0 0 0 1//u*v^2+u v^2 0;
  0 0 1//u*v^2+u 0 0 0 0 0 v^2],
 [v^2 v 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0 0;
  0 0 v^2 0 v 0 0 0 0;0 0 0 v^2 0 v 0 0 0;
  0 0 0 0 -1 0 0 0 0;0 0 0 0 0 -1 0 0 0;
  0 0 0 0 0 v v^2 0 0;0 0 0 0 0 (-u-1//u)*v 0 v^2 0;
  0 0 0 0 (-u-1//u)*v 0 0 0 v^2]],
[[u^2 u 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0 0;
  0 u u^2 0 0 0 0 0 0;0 0 0 u^2 0 0 0 0 0;
  0 u 0 0 u^2 0 0 0 0;0 0 0 0 0 u^2 0 u 0;
  0 0 0 0 0 0 u^2 0 u;0 0 0 0 0 0 0 -1 0;
  0 0 0 0 0 0 0 0 -1 ],
 [u^2 0 0 0 0 0 0 0 0;0 u^2 u 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0;0 0 0 u^2 0 u 0 0 0;
  0 0 0 0 u^2 0 u 0 0;0 0 0 0 0 -1 0 0 0;
  0 0 0 0 0 0 -1 0 0;0 0 0 0 0 u 0 u^2 0;
  0 0 0 0 0 0 u 0 u^2],
 [-1 0 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0 0;
  1//u^2*v^2+u^2 1//u*v^2+u v^2 v 0 0 0 0 0 ;
  0 0 0 -1 0 0 0 0 0;0 0 0 0 -1 0 0 0 0;
  0 0 0 0 0 -1 0 0 0;0 0 0 0 1//u*v^2+u v v^2 0 0;
  0 0 0 0 0 0 0 -1 0;0 1//u*v^2+u 0 0 0 0 0 v v^2],
 [-1 0 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0;
  (u^2+1//u^2)*v (u+1//u)*v v v^2 v 0 0 0 0;
  0 0 0 0 -1 0 0 0 0;0 0 0 0 0 v^2 v 0 0;
  0 0 0 0 0 0 -1 0 0;0 0 0 0 0 0 0 v^2 v;
  0 0  0 0 0 0 0 0 -1]],
[[u^2 0 u 0 0 0 0 0 0;0 u^2 0 0 u 0 0 0 0;
  0 0 -1 0 0 0 0 0 0;0 0 0 -1 0 0 0 0 0;
  0 0  0 0 -1 0 0 0 0;0 0 0 0 0 -1 0 0 0;
  0 0 0 0 0 0 -1 0 0;0 0 0 u 0 0 u u^2 u;
  0 0 0 0 0 0 0 0 -1],
 [-1 0 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0 0;
  u 0 u^2 u 0 0 0 0 0;0 0 0 -1 0 0 0 0 0;
  0 u 0 0 u^2 u 0 0 0;0 0 0 0 0 -1 0 0 0;
  0 0 0 0 0 0 u^2 u 0;0 0 0 0 0 0 0 -1 0;
  0 0 0 0 0 0 0 0 -1],
 [-1 0 0 0 0 0 0 0 0;v v^2 0 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0;0 0 1//u*v^2+u v^2 0 0 0 0 0;
  0 0 v 0 v^2 0 0 0 0;0 0 0 0 0 v^2 v 0 0;
  0 0 0 0 0 0 -1 0 0;1//u*v^2+u 0 0 0 0 0 1//u*v^2+u v^2 0;
  0 0 0 0 0 0 -1//u^2*v^2-u^2 0 v^2],
 [v^2 v 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0 0;
  0 0 v^2 0 v 0 0 0 0;0 0 0 v^2 0 v 0 0 0;
  0 0 0 0 -1 0 0 0 0;0 0 0 0 0 -1 0 0 0;
  0 0 0 0 0 v v^2 0 0;0 0 0 0 0 (-u-1//u)*v 0 v^2 0;
  0 0 0 0 0 (u^2+1//u^2)*v 0 0 v^2]],
[[u^2 u 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0;0 0 0 -1 0 0 0 0 0;
  0 0 0 u u^2 0 0 u 0;0 0 0 0 0 -1 0 0 0;
  0 0 u 0 0 u u^2 0 u;0 0 0 0 0 0 0 -1 0;
  0 0 0 0 0 0 0 0 -1],
 [-1 0 0 0 0 0 0 0 0;u u^2 u 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0;0 0 0 u^2 u 0 0 0 0;
  0 0 0 0 -1 0 0 0 0;0 0 0 0 0 u^2 u 0 0;
  0 0 0 0 0 0 -1 0 0;0 0 0 0 0 0 0 -1 0;
  0 0 0 0 0 0 0 0 -1],
 [-1 0 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0 0;
  0 1//u*v^2+u v^2 v 0 0 0 0 0;0 0 0 -1 0 0 0 0 0;
  0 0 0 0 -1 0 0 0 0;0 0 0 0 0 -1 0 0 0;
  1//u*v^2+u 0 0 0 v 1//u*v^2+u v^2 0 0;
  0 0 0 0 0 0 0 -1 0;0 0 0 0 0 -1//u^2*v^2-u^2 0 v v^2],
 [-1 0 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0;0 (u+1//u)*v v v^2 0 v 0 0 0;
  (u+1//u)*v 0 0 0 v^2 0 v 0 0;0 0 0 0 0 -1 0 0 0;
  0 0 0 0 0 0 -1 0 0;0 0 0 0 0 0 0 v^2 v;
  0 0 0 0 0 0 0 0 -1]],
[[-1 0 0 0 0 0;u u^2 0 u 0 0;0 0 u^2 0 u 0;
  0 0 0 -1 0 0;0 0 0 0 -1 0;0 0 0 0 u u^2],
 [u^2 u 0 0 0 0; 0 -1 0 0 0 0;0 0 u^2 0 0 0;
  0 0 0 -1 0 0;0 0 0 0 u^2 u;0 0 0 0 0 -1],
 [-1 0 0 0 0 0;1//u*v^2+u v^2 v 0 0 0;0 0 -1 0 0 0;
  -1//u^2*v^2-u^2 0 0 v^2 v 0;0 0 0 0 -1 0;
  0 0 1//u^2*v^2+u^2 0 1//u*v^2+u v^2],
 [-1 0 0 0 0 0;0 -1 0 0 0 0;(u+1//u)*v v v^2 0 0 0;
  0 0 0 -1 0 0;(-u^2-1-1//u^2)*v 0 0 v v^2 0;
  0 (-u^2-1-1//u^2)*v 0 (-u-1//u)*v 0 v^2]],
[[u^2 0 0 0 0 0;0 u^2 u 0 0 0;0 0 -1 0 0 0;
  0 0 0 u^2 u 0;0 0 0 0 -1 0;0 0 0 0 0 -1],
 [u^2 0 0 -u 0 0;0 -1 0 0 0 0;0 u u^2 0 0 u;
  0 0 0 -1 0 0;0 0 0 u u^2 0;0 0 0 0 0 -1],
 [-1 0 0 0 0 0;0 -1 0 0 0 0;0 0 -1 0 0 0;
  -1//u*v^2-u v 0 v^2 0 0;0 0 v 0 v^2 0;
  0 0 1//u*v^2+u 0 0 v^2],
 [-1 0 0 0 0 0;0 v^2 0 v 0 0;0 0 v^2 0 v 0;
  0 0 0 -1 0 0;0 0 0 0 -1 0;0 0 0 0 0 v^2]],
[[u^2 0 0 u 0 0 0 0 0 0 0 0;
  0 u^2 0 0 u 0 0 0 0 0 0 0;
  0 0 u^2 0 0 0 0 u 0 0 0 0;
  0 0 0 -1 0 0 0 0 0 0 0 0;
  0 0 0 0 -1 0 0 0 0 0 0 0;
  0 0 0 u 0 u^2 0 0 0 u 0 0;
  0 0 0 0 0 0 -1 0 0 0 0 0;
  0 0 0 0 0 0 0 -1 0 0 0 0;
  0 0 0 0 0 0 0 0 u^2 0 u 0;
  0 0 0 0 0 0 0 0 0 -1 0 0;
  0 0 0 0 0 0 0 0 0 0 -1 0;
  0 0 0 0 0 0 3*u 0 0 0 u u^2],
 [u^2 0 u 0 0 0 0 0 0 0 0 0;
  0 -1 0 0 0 0 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0 0 0 0;
  0 0 0 u^2 0 u 0 0 0 0 0 0;
  0 u 0 0 u^2 0 u 0 0 0 0 0;
  0 0 0 0 0 -1 0 0 0 0 0 0;
  0 0 0 0 0 0 -1 0 0 0 0 0;
  0 0 u 0 0 0 0 u^2 0 u 0 0;
  0 3*u 0 0 0 0 0 0 u^2 0 0 0;
  0 0 0 0 0 0 0 0 0 -1 0 0;
  0 0 0 0 0 0 0 0 0 0 u^2 u;
  0 0 0 0 0 0 0 0 0 0 0 -1],
 [-1 0 0 0 0 0 0 0 0 0 0 0;
  0 -1 0 0 0 0 0 0 0 0 0 0;
  1//u*v^2+u v v^2 0 0 0 0 0 0 0 0 0;
  0 0 0 -1 0 0 0 0 0 0 0 0;
  0 0 0 0 -1 0 0 0 0 0 0 0;
  0 0 0 1//u*v^2+u 0 v^2 0 0 v 0 0 0;
  0 0 0 0 1//u*v^2+u 0 v^2 0 0 0 0 0;
  0 0 0 1//u*v^2+u v 0 0 v^2 0 0 0 0;
  0 0 0 0 0 0 0 0 -1 0 0 0;
  0 0 0 -1//u^2*v^2-u^2 0 0 0 0 0 v^2 v 0;
  0 0 0 0 0 0 0 0 0 0 -1 0;
  0 3//u*v^2+3*u 0 0 0 0 0 0 1//u^2*v^2+u^2 0 1//u*v^2+u v^2],
 [-1 0 0 0 0 0 0 0 0 0 0 0;
  0 v^2 v 0 0 0 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0 0 0 0;
  0 0 0 -1 0 0 0 0 0 0 0 0;
  0 0 0 0 v^2 0 0 v 0 0 0 0;
  0 0 0 0 0 -1 0 0 0 0 0 0;
  0 0 0 0 0 0 v^2 0 0 v 0 0;
  0 0 0 0 0 0 0 -1 0 0 0 0;
  3*v 0 0 (u+1//u)*v 0 v 0 0 v^2 0 0 0;
  0 0 0 0 0 0 0 0 0 -1 0 0;
  0 0 0 (-u^2+2-1//u^2)*v 0 0 0 0 0 v v^2 0;
  0 0 0 0 0 (-u^2+2-1//u^2)*v 0 0 0 (-u-1//u)*v 0 v^2]],
[[u^2 0 0 0;0 u^2 0 0;0 0 u^2 u;0 0 0 -1],
 [u^2 0 u 0;0 u^2 0 0;0 0 -1 0;0 0 u u^2],
 [-1 0 0 0;v v^2 0 0;1//u*v^2+u 0 v^2 0;0 0 0 v^2],
 [v^2 v 0 0;0 -1 0 0;0 0 v^2 0;0 0 0 v^2]],
[[u^2 u 0 0;0 -1 0 0;0 u u^2 0;0 0 0 u^2],
 [u^2 0 0 0;0 u^2 u 0;0 0 -1 0;0 0 0 u^2],
 [-1 0 0 0;0 -1 0 0;1//u^2*v^2+u^2 1//u*v^2+u v^2 v;0 0 0 -1],
 [-1 0 0 0;0 -1 0 0;0 0 -1 0;(u^2+1+1//u^2)*v (u+1//u)*v v v^2]],
[[-1 0 0 0;0 -1 0 0;0 u u^2 u;0 0 0 -1],
 [-1 0 0 0;0 u^2 u 0;0 0 -1 0;0 0 0 -1],
 [v^2 v 0 0;0 -1 0 0;0 1//u*v^2+u v^2 0;0 -1//u^2*v^2-u^2 0 v^2],
 [-1 0 0 0;v v^2 0 0;(-u-1//u)*v 0 v^2 0;(u^2+1+1//u^2)*v 0 0 v^2]],
[[u^2 0 u 0;0 -1 0 0;0 0 -1 0;0 0 0 -1],
 [-1 0 0 0;0 -1 0 0;u 0 u^2 u;0 0 0 -1],
 [-1 0 0 0;0 -1 0 0;0 0 -1 0;0 v 1//u*v^2+u v^2],
 [-1 0 0 0;0 v^2 0 v;0 0 -1 0;0 0 0 -1]],
[[u^2 0 0 0 0 0 0 0;0 u^2 0 u 0 0 0 0;
  0 0 u^2 0 u 0 0 0;0 0 0 -1 0 0 0 0;
  0 0 0 0 -1 0 0 0;0 0 0 0 u u^2 0 0;
  0 0 0 0 0 0 u^2 0;0 0 0 0 0 0 0 u^2],
 [u^2 u 0 0 0 0 0 0;0 -1 0 0 0 0 0 0;
  0 0 u^2 0 0 0 0 0;0 u 0 u^2 0 0 0 0;
  0 0 0 0 u^2 u 0 0;0 0 0 0 0 -1 0 0;
  0 0 0 0 0 0 u^2 0;0 0 0 0 0 0 0 u^2],
 [-1 0 0 0 0 0 0 0;1//u*v^2+u v^2 v 0 0 0 0 0;
  0 0 -1 0 0 0 0 0;0 0 0 v^2 v 0 0 0;
  0 0 0 0 -1 0 0 0;0 0 1//u^2*v^2+u^2 0 1//u*v^2+u v^2 v 0;
  0 0 0 0 0 0 -1 0;(u^3+1//u^3)*v 0 0 0 0 0 v v^2],
 [-1 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0;
  (u+1//u)*v v v^2 0 0 0 0 0;0 0 0 -1 0 0 0 0;
  0 0 0 v v^2 0 0 0;0 v 0 0 0 v^2 0 0;
  0 0 0 0 0 0 v^2 v;0 0 0 0 0 0 0 -1]],
[[-1 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0;0 0 u u^2 0 u 0 0;
  0 0 0 0 u^2 0 u 0;0 0 0 0 0 -1 0 0;
  0 0 0 0 0 0 -1 0;0 0 0 0 0 0 0 -1],
 [-1 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0;
  0 0 u^2 u 0 0 0 0;0 0 0 -1 0 0 0 0;
  0 0 0 0 -1 0 0 0;0 0 0 0 0 -1 0 0;
  0 0 0 0 u 0 u^2 u;0 0 0 0 0 0 0 -1],
 [-1 0 0 0 0 0 0 0;v v^2 v 0 0 0 0 0;
  0 0 -1 0 0 0 0 0;0 0 1//u*v^2+u v^2 v 0 0 0;
  0 0 0 0 -1 0 0 0;0 0 -1//u^2*v^2-u^2 0 0 v^2 v 0;
  0 0 0 0 0 0 -1 0;(-u^3-1//u^3)*v 0 0 0 0 0 1//u*v^2+u v^2],
 [v^2 v 0 0 0 0 0 0;0 -1 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0;0 0 0 -1 0 0 0 0;
  0 0 0 v v^2 0 0 0;0 0 0 0 0 -1 0 0;
  0 0 v 0 0 v v^2 0;0 0 0 0 0 (-u-1//u)*v 0 v^2]],
[[u^2 0 u 0 0 0 0 0;0 u^2 0 0 u 0 0 0;
  0 0 -1 0 0 0 0 0;0 0 0 u^2 0 0 u 0;
  0 0 0 0 -1 0 0 0;0 0 0 0 u u^2 0 u;
  0 0 0 0 0 0 -1 0;0 0 0 0 0 0 0 -1],
 [-1 0 0 0 0 0 0 0;0 u^2 0 u 0 0 0 0;
  u 0 u^2 0 0 0 0 0;0 0 0 -1 0 0 0 0;
  0 0 0 0 u^2 u 0 0;0 0 0 0 0 -1 0 0;
  0 0 0 u 0 0 u^2 u;0 0 0 0 0 0 0 -1],
 [v^2 v 0 0 0 0 0 0;0 -1 0 0 0 0 0 0;
  0 0 v^2 0 v 0 0 0;0 1//u*v^2+u 0 v^2 0 0 0 0;
  0 0 0 0 -1 0 0 0;0 0 0 0 1//u*v^2+u v^2 0 0;
  0 0 0 0 1//u*v^2+u 0 v^2 0;0 0 0 0 -1//u^2*v^2-u^2 0 0 v^2],
 [-1 0 0 0 0 0 0 0;v v^2 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0;(-u-1//u)*v 0 0 v^2 0 0 0 0;
  0 0 v 0 v^2 0 0 0;v 0 0 0 0 v^2 0 0;
  0 0 (-u-1//u)*v 0 0 0 v^2 0;0 0 0 0 0 0 0 v^2]],
[[u^2 0 u 0 0 0 0 0;0 u^2 0 0 u 0 0 0;
  0 0 -1 0 0 0 0 0;0 0 u u^2 0 0 u 0;
  0 0 0 0 -1 0 0 0;0 0 0 0 0 u^2 0 u;
  0 0 0 0 0 0 -1 0;0 0 0 0 0 0 0 -1],
 [u^2 u 0 0 0 0 0 0;0 -1 0 0 0 0 0 0;
  0 0 u^2 u 0 0 0 0;0 0 0 -1 0 0 0 0;
  0 u 0 0 u^2 0 u 0;0 0 0 0 0 -1 0 0;
  0 0 0 0 0 0 -1 0;0 0 0 0 0 u 0 u^2],
 [-1 0 0 0 0 0 0 0;0 -1 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0;
  1//u^2*v^2+u^2 1//u*v^2+u 1//u*v^2+u v^2 0 v 0 0;
  0 0 0 0 -1 0 0 0;0 0 0 0 0 -1 0 0;
  0 0 0 0 1//u*v^2+u 0 v^2 v;0 0 0 0 0 0 0 -1],
 [-1 0 0 0 0 0 0 0;0 -1 0 0 0 0  0 0;
  0 0 -1 0 0 0 0 0;0 0 0 -1 0 0 0 0;
  0 0 0 0 -1 0 0 0;0 (u+1//u)*v 0 v 0 v^2 0 0;
  0 0 0 0 0 0 -1 0;0 0 v 0 (u+1//u)*v 0 v v^2]],
[[u^2 0 u 0 0 0 0 0 0 0 0 0 0 0 0 0;
  0 u^2 0 0 u 0 0 0 0 0 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0;
  0 0 0 u^2 0 0 u 0 0 0 0 0 0 0 0 0;
  0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0;
  0 0 0 0 0 u^2 0 0 0 u 0 0 0 0 0 0;
  0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0;
  0 0 0 0 0 0 u u^2 0 0 0 u 0 0 0 0;
  0 0 0 0 0 0 0 0 u^2 0 0 0 u 0 0 0;
  0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 0;
  0 0 0 0 0 0 0 0 0 0 u^2 0 0 0 u 0;
  0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0;
  0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0;
  0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0;
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0;
  0 0 0 0 0 0 0 0 0 0 0 0 0 u u u^2],
 [-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
  0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
  u 0 u^2 0 0 0 0 0 0 0 0 0 0 0 0 0;
  0 0 0 u^2 0 u 0 0 0 0 0 0 0 0 0 0;
  0 u 0 0 u^2 0 0 0 0 0 0 0 0 0 0 0;
  0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0;
  0 0 0 0 0 0 u^2 u 0 0 0 0 0 0 0 0;
  0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0;
  0 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0;
  0 0 0 0 0 u 0 0 0 u^2 0 u 0 0 0 0;
  0 0 0 0 0 0 0 0 u 0 u^2 0 0 0 0 0;
  0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0;
  0 0 0 0 0 0 0 0 u 0 0 0 u^2 u 0 0;
  0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0;
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 u^2 u;
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1],
 [-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
  v v^2 0 2*v 0 0 0 0 0 0 0 0 0 0 0 0;
  0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0;
  0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0;
  0 0 v 0 v^2 0 2*v 0 0 0 0 0 0 0 0 0;
  0 0 0 1//u*v^2+u 0 v^2 0 0 v 0 0 0 0 0 0 0;
  0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0;
  0 0 0 0 0 0 1//u*v^2+u v^2 0 0 v 0 0 0 0 0;
  0 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0;
  0 0 0 0 0 0 1//u*v^2+u 0 0 v^2 0 0 v 0 0 0;
  0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0;
  0 0 0 0 0 0 -1//u^2*v^2-u^2 0 0 0 0 v^2 0 0 v 0;
  0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0;
  0 0 -v 0 0 0 0 0 0 0 0 0 1//u*v^2+u v^2 0 0;
  0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0;
  -v 0 0 0 0 0 0 0 1//u*v^2+u 0 1//u^2*v^2+u^2 0 0 0 1//u*v^2+u v^2],
 [v^2 v 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
  0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
  0 0 v^2 0 v 0 0 0 0 0 0 0 0 0 0 0;
  0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0;
  0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0;
  0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0;
  0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0;
  0 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0;
  0 0 0 0 0 v 0 0 v^2 0 0 0 0 0 0 0;
  0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 0;
  0 0 0 v 0 0 (u+1//u)*v v 0 0 v^2 0 0 0 0 0;
  0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0;
  0 0 0 0 0 0 0 0 0 v 0 0 v^2 0 0 0;
  0 0 0 0 0 0 0 0 0 0 0 v 0 v^2 0 0;
  0 0 0 0 0 0 (-u^2-1//u^2)*v 0 0 0 0 v 0 0 v^2 0;
  0 0 0 0 0 0 0 (-u^2-1//u^2)*v 0 0 0 (-u-1//u)*v 0 0 0 v^2]]];
    r[i].*map(x->-x[2],param)*u^0*v^0
  end
end)

CHEVIE[:families][:S4]=Family(Dict{Symbol, Any}(
  :group=>Group(perm"(1,4)", perm"(2,4)", perm"(3,4)"),
  :lusztig=>true,
  :charLabels => ["(1,1)", "(1,\\lambda^{\\wedge3})", "(1,\\sigma)",
     "(1,\\lambda^{\\wedge2})", "(1,\\lambda)", "(g_2,1)",
     "(g_2,\\varepsilon')", "(g_2,\\varepsilon'')", "(g_2,\\varepsilon)",
     "(g'_2,1)", "(g'_2,\\varepsilon)", "(g'_2,\\varepsilon')",
     "(g'_2,\\varepsilon'')", "(g'_2,r)", "(g_3,1)", "(g_3,\\zeta_3)",
     "(g_3,\\zeta_3^2)", "(g_4,1)", "(g_4,-1)", "(g_4,i)", "(g_4,-i)"],
  :size=>21, 
  :eigenvalues=>[1,1,1,1,1,1,-1,1,-1,1,1,1,1,-1,1,E(3),E(3,2),1,-1,E(4),-E(4)],
  :name => "D(S_4)", :explanation => "Lusztig'sDrinfeldDouble(S_4)",
  :mellin=>cat(
    [1 1 2 3 3;1 -1 0 -1 1;1 1 2 -1 -1;1 1 -1 0 0;1 -1 0 1 -1],
    [1 1 1 1;1 1 -1 -1;1 -1 1 -1;1 -1 -1 1],
    [1 1 1 1 2;1 -1 -1 1 0;1 1 1 1 -2;1 -1 1 -1 0;1 1 -1 -1 0],
    [1 1 1;1 E(3) E(3,2);1 E(3,2) E(3)],
    [1 1 1 1;1 -1 E(4) -E(4);1 1 -1 -1;1 -1 -E(4) E(4)],dims=(1,2)),
  :mellinLabels => ["(1,1)", "(1,g_2)", "(1,g'_2)", "(1,g_3)", "(1,g_4)", "(g_2,1)", "(g_2,g_2)", "(g_2,g'_2)", "(g_2,2c)", "(g'_2,1)", "(g'_2,g_2)", "(g'_2,g'_2)", "(g'_2,2c)", "(g'_2,g_4)", "(g_3,1)", "(g_3,g_3)", "(g_3,g_3^2)", "(g_4,1)", "(g_4,g_4)", "(g_4,g_2)", "(g_4,g_4^{-1})"], 
  :fourierMat=>[
   1 1 2 3 3 6 6 6 6 3 3 3 3 6 8 8 8 6 6 6 6; 
   1 1 2 3 3 -6 -6 -6 -6 3 3 3 3 6 8 8 8 -6 -6 -6 -6;
   2 2 4 6 6 0 0 0 0 6 6 6 6 12 -8 -8 -8 0 0 0 0;
   3 3 6 9 9 -6 -6 -6 -6 -3 -3 -3 -3 -6 0 0 0 6 6 6 6;
   3 3 6 9 9 6 6 6 6 -3 -3 -3 -3 -6 0 0 0 -6 -6 -6 -6;
   6 -6 0 -6 6 12 0 0 -12 6 -6 -6 6 0 0 0 0 0 0 0 0; 
   6 -6 0 -6 6 0 12 -12 0 -6 6 6 -6 0 0 0 0 0 0 0 0; 
   6 -6 0 -6 6 0 -12 12 0 -6 6 6 -6 0 0 0 0 0 0 0 0; 
   6 -6 0 -6 6 -12 0 0 12 6 -6 -6 6 0 0 0 0 0 0 0 0; 
   3 3 6 -3 -3 6 -6 -6 6 9 -3 9 -3 -6 0 0 0 6 6 -6 -6; 
   3 3 6 -3 -3 -6 6 6 -6 -3 9 -3 9 -6 0 0 0 6 6 -6 -6; 
   3 3 6 -3 -3 -6 6 6 -6 9 -3 9 -3 -6 0 0 0 -6 -6 6 6; 
   3 3 6 -3 -3 6 -6 -6 6 -3 9 -3 9 -6 0 0 0 -6 -6 6 6; 
   6 6 12 -6 -6 0 0 0 0 -6 -6 -6 -6 12 0 0 0 0 0 0 0; 
   8 8 -8 0 0 0 0 0 0 0 0 0 0 0 16 -8 -8 0 0 0 0; 
   8 8 -8 0 0 0 0 0 0 0 0 0 0 0 -8 16 -8 0 0 0 0; 
   8 8 -8 0 0 0 0 0 0 0 0 0 0 0 -8 -8 16 0 0 0 0; 
   6 -6 0 6 -6 0 0 0 0 6 6 -6 -6 0 0 0 0 12 -12 0 0; 
   6 -6 0 6 -6 0 0 0 0 6 6 -6 -6 0 0 0 0 -12 12 0 0; 
   6 -6 0 6 -6 0 0 0 0 -6 -6 6 6 0 0 0 0 0 0 12 -12; 
   6 -6 0 6 -6 0 0 0 0 -6 -6 6 6 0 0 0 0 0 0 -12 12]//24,
  :perm => perm"(16,17)(20,21)",
  :x => [Perm(), Perm(), Perm(), Perm(), Perm(), perm"(1,2)", perm"(1,2)",
         perm"(1,2)", perm"(1,2)", perm"(1,2)(3,4)", perm"(1,2)(3,4)",
         perm"(1,2)(3,4)", perm"(1,2)(3,4)", perm"(1,2)(3,4)", perm"(1,2,3)",
         perm"(1,2,3)", perm"(1,2,3)", perm"(1,2,3,4)", perm"(1,2,3,4)",
         perm"(1,2,3,4)", perm"(1,2,3,4)"],
  :y => [Perm(), perm"(1,2)", perm"(1,2)(3,4)", perm"(1,2,3)",
         perm"(1,2,3,4)", Perm(), perm"(3,4)", perm"(1,2)", perm"(1,2)(3,4)",
         Perm(), perm"(3,4)", perm"(1,2)(3,4)", perm"(1,3)(2,4)",
         perm"(1,3,2,4)", Perm(), perm"(1,2,3)", perm"(1,3,2)", Perm(),
         perm"(1,2,3,4)", perm"(1,3)(2,4)", perm"(1,4,3,2)"],
  :special=>1))

chevieset(:F4, :UnipotentCharacters,Dict{Symbol,Any}(
  :harishChandra=>[
    Dict(:relativeType=>TypeIrred(;series=:F,indices=1:4,rank=4),
      :levi=>Int[], :eigenvalue=>1, :parameterExponents=>[ 1, 1, 1, 1 ],
      :cuspidalName=>"", :charNumbers=>1:25),
   Dict(:relativeType=>TypeIrred(;series=:B,cartanType=2,indices=[4,1],rank=2),
      :levi=>2:3, :eigenvalue=>-1, :parameterExponents=>[ 3, 3 ],
      :cuspidalName=>"B_2", :charNumbers=>[ 29, 27, 26, 30, 28 ]),
   mkcuspidal("F_4",31,-1),
   mkcuspidal("F_4",32,-E(4)),
   mkcuspidal("F_4",33,E(4)),
   mkcuspidal("F_4",34,E(3)),
   mkcuspidal("F_4",35,E(3,2)),
   mkcuspidal("F_4",36,1),
   mkcuspidal("F_4",37,1;no=2)],
  :families=>[
    Family(:C1,[1 ]),
    Family(:C1,[4 ]),
    Family(:C1,[10 ]),
    Family(:C1,[13 ]),
    Family(:C1,[21 ],ennola=-1),
    Family(:C1,[22 ],ennola=-1),
    Family(:C1,[23 ],ennola=-1),
    Family(:C1,[24 ],ennola=-1),
    Family(:C2,[17, 7, 5, 30 ],ennola=-4),
    Family(:C2,[20, 8, 6, 26 ],ennola=-4),
    Family(:S4,[16,37,15,2,11,25,28,18,31,12,36,3,9,27,14,34,35,19,29,33,32],
     ennola=2)],
  :a=>[0,4,4,24,1,13,1,13,4,2,4,4,10,4,4,4,1,4,4,13,3,9,3,9,4,13,4,4,4,1,4,4,
      4,4,4,4,4],
  :A=>[0,20,20,24,11,23,11,23,20,14,20,20,22,20,20,20,11,20,20,23,15,21,15,21,
      20,23,20,20,20,11,20,20,20,20,20,20,20]))

chevieset(:F4, :Invariants, [
(x,y,z,t)->-t*z-2*x*y-2*y*z+t^2+2*x^2+2*y^2+z^2,

(x,y,z,t)->16*t*x*y*z^3-12*t*x*y^2*z^2-8*t*x*y^3*z-
4*t*y*z^4-8*x*y*z^4+12*t*x^2*y*z^2+12*t*x^2*y^2*z-16*t*x^2*z^3+8*t*y^2*z^3+
32*x*y^2*z^3-8*t*x^3*y*z-8*t*y^3*z^2-64*x*y^3*z^2+4*t*x^4*z+4*t*y^4*z+
64*x*y^4*z-24*x*y^5-24*t^2*x*y*z^2+12*t^2*x*y^2*z+8*t^2*x*y^3-4*t^2*y*z^3-
32*x^2*y*z^3-12*t^2*x^2*y*z-12*t^2*x^2*y^2+24*t^2*x^2*z^2+60*x^2*y^2*z^2+
8*t^2*x^3*y+8*t^2*y^3*z-56*x^2*y^3*z-4*t^2*x^4-4*t^2*y^4+3*t^2*z^4+24*x^2*y^4+
8*x^2*z^4+4*y^2*z^4+16*t^3*x*y*z+16*t^3*y*z^2+8*x^3*y*z^2-16*t^3*x^2*z-
16*t^3*y^2*z-16*x^3*y^2*z-6*t^3*z^3-8*x^3*y^3-16*y^3*z^3-8*t^4*x*y-8*t^4*y*z+
8*x^4*y*z+8*t^4*x^2+8*t^4*y^2+3*t^4*z^2+24*x^4*y^2-4*x^4*z^2+28*y^4*z^2-
24*x^5*y-24*y^5*z+8*x^6+8*y^6,

(x,y,z,t)->-24*t*x*y*z^5+180*t*x*y^2*z^4-416*t*x*y^3*z^3+
360*t*x*y^4*z^2-96*t*x*y^5*z+4*t*y*z^6+8*x*y*z^6-180*t*x^2*y*z^4+
408*t*x^2*y^2*z^3-288*t*x^2*y^3*z^2+24*t*x^2*y^4*z+24*t*x^2*z^5-12*t*y^2*z^5-
48*x*y^2*z^5+16*t*x^3*y*z^3-144*t*x^3*y^2*z^2+112*t*x^3*y^3*z-16*t*y^3*z^4+
88*x*y^3*z^4+72*t*x^4*y*z^2+24*t*x^4*y^2*z-8*t*x^4*z^3+88*t*y^4*z^3-
32*x*y^4*z^3-96*t*x^5*y*z-96*t*y^5*z^2-48*x*y^5*z^2+32*t*x^6*z+32*t*y^6*z+
32*x*y^6*z+6*t^2*x*y*z^4-144*t^2*x*y^2*z^3+408*t^2*x*y^3*z^2-360*t^2*x*y^4*z+
96*t^2*x*y^5+6*t^2*y*z^5+48*x^2*y*z^5+144*t^2*x^2*y*z^3-396*t^2*x^2*y^2*z^2+
288*t^2*x^2*y^3*z-24*t^2*x^2*y^4-6*t^2*x^2*z^4+6*t^2*y^2*z^4-84*x^2*y^2*z^4-
24*t^2*x^3*y*z^2+144*t^2*x^3*y^2*z-112*t^2*x^3*y^3+8*t^2*y^3*z^3+
16*x^2*y^3*z^3-72*t^2*x^4*y*z-24*t^2*x^4*y^2+12*t^2*x^4*z^2-84*t^2*y^4*z^2+
24*x^2*y^4*z^2+96*t^2*x^5*y+96*t^2*y^5*z+48*x^2*y^5*z-32*t^2*x^6-32*t^2*y^6-
3*t^2*z^6-48*x^2*y^6-8*x^2*z^6-4*y^2*z^6+28*t^3*x*y*z^3-72*t^3*x*y^2*z^2+
16*t^3*x*y^3*z-28*t^3*y*z^4-8*x^3*y*z^4+72*t^3*x^2*y*z^2-24*t^3*x^2*y^2*z-
28*t^3*x^2*z^3+20*t^3*y^2*z^3+32*x^3*y^2*z^3+16*t^3*x^3*y*z+16*t^3*y^3*z^2+
80*x^3*y^3*z^2-8*t^3*x^4*z-8*t^3*y^4*z-224*x^3*y^4*z+9*t^3*z^5+144*x^3*y^5+
24*y^3*z^5+6*t^4*x*y*z^2+36*t^4*x*y^2*z-8*t^4*x*y^3+34*t^4*y*z^3-16*x^4*y*z^3-
36*t^4*x^2*y*z+12*t^4*x^2*y^2-6*t^4*x^2*z^2-30*t^4*y^2*z^2-120*x^4*y^2*z^2-
8*t^4*x^3*y-8*t^4*y^3*z+272*x^4*y^3*z+4*t^4*x^4+4*t^4*y^4-12*t^4*z^4-
192*x^4*y^4+4*x^4*z^4-52*y^4*z^4-24*t^5*x*y*z-24*t^5*y*z^2+96*x^5*y*z^2+
24*t^5*x^2*z+24*t^5*y^2*z-192*x^5*y^2*z+9*t^5*z^3+144*x^5*y^3+48*y^5*z^3+
8*t^6*x*y+8*t^6*y*z+64*x^6*y*z-8*t^6*x^2-8*t^6*y^2-3*t^6*z^2-48*x^6*y^2-
32*x^6*z^2-16*y^6*z^2,

(x,y,z,t)-> 200*t*x*y*z^9+4812*t*x*y^2*z^8-46976*t*x*y^3*z^7+
172024*t*x*y^4*z^6-338160*t*x*y^5*z^5+383248*t*x*y^6*z^4-235264*t*x*y^7*z^3+
60096*t*x*y^8*z^2-20*t*y*z^10-40*x*y*z^10-4812*t*x^2*y*z^8+
75984*t*x^2*y^2*z^7-369808*t*x^2*y^3*z^6+891240*t*x^2*y^4*z^5-
1178544*t*x^2*y^5*z^4+815104*t*x^2*y^6*z^3-225024*t*x^2*y^7*z^2-
3840*t*x^2*y^8*z-200*t*x^2*z^9+100*t*y^2*z^9+400*x*y^2*z^9-58016*t*x^3*y*z^7+
395568*t*x^3*y^2*z^6-1063008*t*x^3*y^3*z^5+1483824*t*x^3*y^4*z^4-
1110112*t*x^3*y^5*z^3+336544*t*x^3*y^6*z^2+15360*t*x^3*y^7*z+160*t*y^3*z^8-
1480*x*y^3*z^8-197784*t*x^4*y*z^6+423624*t*x^4*y^2*z^5-474992*t*x^4*y^3*z^4+
486112*t*x^4*y^4*z^3-237408*t*x^4*y^5*z^2-30720*t*x^4*y^6*z+29008*t*x^4*z^7-
2160*t*y^4*z^7+2240*x*y^4*z^7+129456*t*x^5*y*z^5-320304*t*x^5*y^2*z^4-
71200*t*x^5*y^3*z^3+229728*t*x^5*y^4*z^2+38400*t*x^5*y^5*z+6080*t*y^5*z^6-
160*x*y^5*z^6+106768*t*x^6*y*z^4+280288*t*x^6*y^2*z^3-321184*t*x^6*y^3*z^2-
30720*t*x^6*y^4*z-43152*t*x^6*z^5-8000*t*y^6*z^5-3520*x*y^6*z^5-
219904*t*x^7*y*z^3+209664*t*x^7*y^2*z^2+15360*t*x^7*y^3*z+5120*t*y^7*z^4+
3840*x*y^7*z^4-52416*t*x^8*y*z^2-3840*t*x^8*y^2*z+54976*t*x^8*z^3-
1280*t*y^8*z^3-1280*x*y^8*z^3-210*t^2*x*y*z^8-24768*t^2*x*y^2*z^7+
179696*t^2*x*y^3*z^6-530472*t^2*x*y^4*z^5+839160*t^2*x*y^5*z^4-
748576*t^2*x*y^6*z^3+345216*t^2*x*y^7*z^2-60096*t^2*x*y^8*z-50*t^2*y*z^9-
400*x^2*y*z^9+24768*t^2*x^2*y*z^7-218172*t^2*x^2*y^2*z^6+
745512*t^2*x^2*y^3*z^5-1404624*t^2*x^2*y^4*z^4+1592304*t^2*x^2*y^5*z^3-
972528*t^2*x^2*y^6*z^2+225024*t^2*x^2*y^7*z+3840*t^2*x^2*y^8+210*t^2*x^2*z^8-
3666*t^2*y^2*z^8-5772*x^2*y^2*z^8+76952*t^2*x^3*y*z^6-430080*t^2*x^3*y^2*z^5+
1027368*t^2*x^3*y^3*z^4-1491200*t^2*x^3*y^4*z^3+1197552*t^2*x^3*y^5*z^2-
336544*t^2*x^3*y^6*z-15360*t^2*x^3*y^7+28688*t^2*y^3*z^7+55776*x^2*y^3*z^7+
215040*t^2*x^4*y*z^5-254784*t^2*x^4*y^2*z^4+254960*t^2*x^4*y^3*z^3-
538560*t^2*x^4*y^4*z^2+237408*t^2*x^4*y^5*z+30720*t^2*x^4*y^6-
38476*t^2*x^4*z^6-93692*t^2*y^4*z^6-194744*x^2*y^4*z^6-310680*t^2*x^5*y*z^4+
588768*t^2*x^5*y^2*z^3+158640*t^2*x^5*y^3*z^2-229728*t^2*x^5*y^4*z-
38400*t^2*x^5*y^5+168600*t^2*y^5*z^5+360720*x^2*y^5*z^5-196256*t^2*x^6*y*z^3-
437712*t^2*x^6*y^2*z^2+321184*t^2*x^6*y^3*z+30720*t^2*x^6*y^4+
103560*t^2*x^6*z^4-178504*t^2*y^6*z^4-383728*x^2*y^6*z^4+329856*t^2*x^7*y*z^2-
209664*t^2*x^7*y^2*z-15360*t^2*x^7*y^3+104832*t^2*y^7*z^3+222464*x^2*y^7*z^3+
52416*t^2*x^8*y*z+3840*t^2*x^8*y^2-82464*t^2*x^8*z^2-26208*t^2*y^8*z^2-
54336*x^2*y^8*z^2+15*t^2*z^10+40*x^2*z^10+20*y^2*z^10-360*t^3*x*y*z^7+
45388*t^3*x*y^2*z^6-261608*t^3*x*y^3*z^5+668712*t^3*x*y^4*z^4-
958848*t^3*x*y^5*z^3+730656*t^3*x*y^6*z^2-219904*t^3*x*y^7*z+4036*t^3*y*z^8+
14504*x^3*y*z^8-45388*t^3*x^2*y*z^6+275508*t^3*x^2*y^2*z^5-
648800*t^3*x^2*y^3*z^4+915768*t^3*x^2*y^4*z^3-827520*t^3*x^2*y^5*z^2+
314848*t^3*x^2*y^6*z+360*t^3*x^2*z^7-15224*t^3*y^2*z^7-116032*x^3*y^2*z^7-
27800*t^3*x^3*y*z^5-39824*t^3*x^3*y^2*z^4+221360*t^3*x^3*y^3*z^3+
14752*t^3*x^3*y^4*z^2-174880*t^3*x^3*y^5*z-6392*t^3*y^3*z^6+
375424*x^3*y^3*z^6+19912*t^3*x^4*y*z^4-448680*t^3*x^4*y^2*z^3+
440064*t^3*x^4*y^3*z^2+104896*t^3*x^4*y^4*z+13900*t^3*x^4*z^5+
130092*t^3*y^4*z^5-628096*x^3*y^4*z^5+405600*t^3*x^5*y*z^3-
536928*t^3*x^5*y^2*z^2-174880*t^3*x^5*y^3*z-306208*t^3*y^5*z^4+
517008*x^3*y^5*z^4+178976*t^3*x^6*y*z^2+314848*t^3*x^6*y^2*z-
135200*t^3*x^6*z^3+358624*t^3*y^6*z^3-46656*x^3*y^6*z^3-219904*t^3*x^7*y*z-
219904*t^3*y^7*z^2-227584*x^3*y^7*z^2+54976*t^3*x^8*z+54976*t^3*y^8*z+
111232*x^3*y^8*z-75*t^3*z^9-200*y^3*z^9+1320*t^4*x*y*z^6-43956*t^4*x*y^2*z^5+
135728*t^4*x*y^3*z^4-213896*t^4*x*y^4*z^3+371544*t^4*x*y^5*z^2-
365328*t^4*x*y^6*z+109952*t^4*x*y^7-4636*t^4*y*z^7+58016*x^4*y*z^7+
43956*t^4*x^2*y*z^5-137340*t^4*x^2*y^2*z^4+67880*t^4*x^2*y^3*z^3-
180384*t^4*x^2*y^4*z^2+413760*t^4*x^2*y^5*z-157424*t^4*x^2*y^6-
1320*t^4*x^2*z^6+49128*t^4*y^2*z^6-151752*x^4*y^2*z^6+3224*t^4*x^3*y*z^4+
292032*t^4*x^3*y^2*z^3-485880*t^4*x^3*y^3*z^2-7376*t^4*x^3*y^4*z+
87440*t^4*x^3*y^5-110560*t^4*y^3*z^5+98288*x^4*y^3*z^5-146016*t^4*x^4*y*z^3+
501840*t^4*x^4*y^2*z^2-220032*t^4*x^4*y^3*z-52448*t^4*x^4*y^4-
1612*t^4*x^4*z^4+81732*t^4*y^4*z^4+320928*x^4*y^4*z^4-310680*t^4*x^5*y*z^2+
268464*t^4*x^5*y^2*z+87440*t^4*x^5*y^3+45224*t^4*y^5*z^3-856000*x^4*y^5*z^3-
89488*t^4*x^6*y*z-157424*t^4*x^6*y^2+103560*t^4*x^6*z^2-143352*t^4*y^6*z^2+
733248*x^4*y^6*z^2+109952*t^4*x^7*y+109952*t^4*y^7*z-111232*x^4*y^7*z-
27488*t^4*x^8-27488*t^4*y^8-1176*t^4*z^8-83424*x^4*y^8-7252*x^4*z^8+
820*y^4*z^8-1860*t^5*x*y*z^5+46716*t^5*x*y^2*z^4-46520*t^5*x*y^3*z^3-
144552*t^5*x*y^4*z^2+129456*t^5*x*y^5*z-16760*t^5*y*z^6-43152*x^5*y*z^6-
46716*t^5*x^2*y*z^4+60420*t^5*x^2*y^2*z^3+307824*t^5*x^2*y^3*z^2-
333000*t^5*x^2*y^4*z+1860*t^5*x^2*z^5-9612*t^5*y^2*z^5+258912*x^5*y^2*z^5-
27800*t^5*x^3*y*z^3-326544*t^5*x^3*y^2*z^2+450240*t^5*x^3*y^3*z+
95896*t^5*y^3*z^4-618352*x^5*y^3*z^4+163272*t^5*x^4*y*z^2-
333000*t^5*x^4*y^2*z+13900*t^5*x^4*z^3-155828*t^5*y^4*z^3+747328*x^5*y^4*z^3+
129456*t^5*x^5*y*z+129456*t^5*y^5*z^2-124032*x^5*y^5*z^2-43152*t^5*x^6*z-
43152*t^5*y^6*z-556160*x^5*y^6*z+5154*t^5*z^7+333696*x^5*y^7-1760*y^5*z^7+
1320*t^6*x*y*z^4-50908*t^6*x*y^2*z^3+83192*t^6*x*y^3*z^2+48184*t^6*x*y^4*z-
43152*t^6*x*y^5+38636*t^6*y*z^5-86304*x^6*y*z^5+50908*t^6*x^2*y*z^3-
121668*t^6*x^2*y^2*z^2-102608*t^6*x^2*y^3*z+111000*t^6*x^2*y^4-
1320*t^6*x^2*z^4-63688*t^6*y^2*z^4+77840*x^6*y^2*z^4+76952*t^6*x^3*y*z^2+
108848*t^6*x^3*y^2*z-150080*t^6*x^3*y^3+35720*t^6*y^3*z^3+264000*x^6*y^3*z^3-
54424*t^6*x^4*y*z+111000*t^6*x^4*y^2-38476*t^6*x^4*z^2+18100*t^6*y^4*z^2-
990848*x^6*y^4*z^2-43152*t^6*x^5*y-43152*t^6*y^5*z+1223552*x^6*y^5*z+
14384*t^6*x^6+14384*t^6*y^6-7836*t^6*z^6-500544*x^6*y^6+14384*x^6*z^6+
2080*y^6*z^6-360*t^7*x*y*z^3+30288*t^7*x*y^2*z^2-58016*t^7*x*y^3*z-
28088*t^7*y*z^4+109952*x^7*y*z^4-30288*t^7*x^2*y*z^2+87024*t^7*x^2*y^2*z+
360*t^7*x^2*z^3+57096*t^7*y^2*z^3-439808*x^7*y^2*z^3-58016*t^7*x^3*y*z-
58016*t^7*y^3*z^2+884736*x^7*y^3*z^2+29008*t^7*x^4*z+29008*t^7*y^4*z-
889856*x^7*y^4*z+5154*t^7*z^5+333696*x^7*y^5-1280*y^7*z^5-210*t^8*x*y*z^2-
7572*t^8*x*y^2*z+14504*t^8*x*y^3+6722*t^8*y*z^3+109952*x^8*y*z^3+
7572*t^8*x^2*y*z-21756*t^8*x^2*y^2+210*t^8*x^2*z^2-13974*t^8*y^2*z^2-
221184*x^8*y^2*z^2+14504*t^8*x^3*y+14504*t^8*y^3*z+222464*x^8*y^3*z-
7252*t^8*x^4-7252*t^8*y^4-1176*t^8*z^4-83424*x^8*y^4-27488*x^8*z^4+
320*y^8*z^4+200*t^9*x*y*z+200*t^9*y*z^2-200*t^9*x^2*z-200*t^9*y^2*z-
75*t^9*z^3-40*t^10*x*y-40*t^10*y*z+40*t^10*x^2+40*t^10*y^2+15*t^10*z^2])

chevieset(:F4, :Discriminant,function()
        function(x1,x2,x3,x4)
364500*x1*x2^3*x3^2*x4+54158625*x1*x2^5*x3^2-189324*x1^2*x3*x4^3-
84457998*x1^2*x2^2*x3*x4^2+702196650*x1^2*x2^2*x3^4+192564*x2^2*x4^3-
4814100*x2^2*x3^3*x4+4733100*x1^2*x3^4*x4-12556317582*x1^2*x2^4*x3*x4-
622114976971*x1^2*x2^6*x3-186084*x1^3*x2*x4^3+5016600*x1^3*x2*x3^3*x4-
16200*x3^3*x4^2-82928718*x1^3*x2^3*x4^2+692591400*x1^3*x2^3*x3^3-
12316379112*x1^3*x2^5*x4-609597781711*x1^3*x2^7+324*x4^4+42908589*x2^4*x4^2+
41452209*x1^4*x3^2*x4^2+12337192062*x1^4*x2^2*x3^2*x4-357875325*x2^4*x3^3+
917712897954*x1^4*x2^4*x3^2-345333825*x1^4*x3^5+81618138*x1^5*x2*x3*x4^2-
731778525*x1^5*x2*x3^4+24268541184*x1^5*x2^3*x3*x4+1803617805378*x1^5*x2^5*x3+
202500*x3^6+4248528834*x2^6*x4+38588049*x1^6*x2^2*x4^2-
600612059326*x1^6*x2^2*x3^3-3240*x1^6*x4^3-4030577814*x1^6*x3^3*x4+
11676178602*x1^6*x2^4*x4+872143520439*x1^6*x2^6-11922426972*x1^7*x2*x3^2*x4-
1773880309848*x1^7*x2^3*x3^2+157714619689*x2^8+1383480*x1^8*x3*x4^2-
11304558162*x1^8*x2^2*x3*x4+146854662829*x1^8*x3^4-1710859325763*x1^8*x2^4*x3+
1432080*x1^9*x2*x4^2+580036214806*x1^9*x2*x3^3-3397335204*x1^9*x2^3*x4-
535990067941*x1^9*x2^5-196915320*x1^10*x3^2*x4+827101062789*x1^10*x2^2*x3^2-
407665440*x1^11*x2*x3*x4+499325143276*x1^11*x2^3*x3-210993120*x1^12*x2^2*x4+
9342537960*x1^12*x3^3+105367602964*x1^12*x2^4+29012190480*x1^13*x2*x3^2+
30031354080*x1^14*x2^2*x3+10362106560*x1^15*x2^3
end end)

chevieset(:F4, :UnipotentClasses, function(p,type_)
  if p==0 p=1 end
  Z(n)=crg(n,1,1)
  class(n)=uc[:classes][findfirst(x->x[:name]==n,uc[:classes])]
  uc=Dict{Symbol, Any}(:orderPicture=>join([
# picture courtesy of Hyohe Miyachi
"     F₄",
"      |",
"    F₄(a₁)",
"      |",
"    F₄(a₂)",
"    /     \\",
"   B₃      C₃",
"    \\     /",
"    F₄(a₃)",
"      |",
"    C₃(a₁)",
"   /      \\",
"Ã₂+A₁     B₂",
"  |   \\    |",
"  |      A₂+Ã₁",
"  |        |",
"  Ã₂       A₂",
"   \\      /",
"    A₁+Ã₁",
"      |",
"      Ã₁",
"      |",
"      A₁",
"      |",
"      1"],"\n"),
                                                              
  :classes=>[
  Dict(:name=>"1",:succ=>["A1"],:dynkin=>[0,0,0,0],:balacarter=>[],
       :red=>coxgroup(:F,4),:rep=>[]),
  Dict(:name=>"A_1",:succ=>["~A1"],:dynkin=>[1,0,0,0],:balacarter=>[1],
       :red=>coxgroup(:C,3),:rep=>[1]),
  Dict(:name=>"\\tilde A_1",:succ=>["A1+~A1"],:dynkin=>[0,0,0,1],
       :Au=>Z(gcd(2,p - 1)),:balacarter=>[3],:red=>coxgroup(:A,3),
     :AuAction=>ExtendedReflectionGroup(coxgroup(:A,3),perm"(1,3)"),:rep=>[3]),
  Dict(:name=>"A_1{+}\\tilde A_1",:succ=>["A2","~A2"],:dynkin=>[0,1,0,0],
       :balacarter=>[1,3],:red=>coxgroup(:A,1)*coxgroup(:A,1),:rep=>[1,3]),
  Dict(:name=>"\\tilde A_2",:succ=>["~A2+A1"],:dynkin=>[0,0,0,2],
     :Au=>Z(gcd(2,p)),:balacarter=>[3,4],:red=>coxgroup(:G,2),:rep=>[3,4]),
  Dict(:name=>"A_2",:succ=>["A2+~A1"],:dynkin=>[2,0,0,0],
       :Au=>Z(2),:balacarter=>[1,2],:red=>coxgroup(:A,2),
    :AuAction=>ExtendedReflectionGroup(coxgroup(:A,2),perm"(1,2)"),:rep=>[1,2]),
  Dict(:name=>"A_2{+}\\tilde A_1",:succ=>["~A2+A1","B2"],:dynkin=>[0,0,1,0],
       :balacarter=>[1,2,4],:red=>Z(2),:rep=>[1,2,4]),
  Dict(:name=>"\\tilde A_2{+}A_1",:succ=>["C3(a1)"],:dynkin=>[0,1,0,1],
       :balacarter=>[1,3,4],:red=>Z(2),:rep=>[1,3,4]),
  Dict(:name=>"B_2",:succ=>["C3(a1)"],:dynkin=>[2,0,0,1],
       :Au=>Z(gcd(p - 1,2)),:balacarter=>[2,3],:red=>coxgroup(:A,1)*coxgroup(:A,1),
       :AuAction=>ExtendedReflectionGroup(coxgroup(:A,1)*coxgroup(:A,1),perm"(1,2)"),
       :rep=>[2,3]),
  Dict(:name=>"C_3(a_1)",:shoji=>"A_1{+}B_2",:succ=>["F4(a3)"],
       :dynkin=>[1,0,1,0],:Au=>Z(gcd(p-1,2)),:balacarter=>[2,-3,4],
       :red=>Z(2),:rep=>[2,4,9]),
  Dict(:name=>"F_4(a_3)",:shoji=>"A_3{+}\\tilde A_1",:succ=>["C3","B3"],
       :dynkin=>[0,2,0,0],:Au=>coxgroup(:A,4-gcd(p,2)),
       :balacarter=>[-1,2,-3,-4],:rep=>[2,5,9,18]),
  Dict(:name=>"C_3",:succ=>["F4(a2)"],:dynkin=>[1,0,1,2],
       :Au=>Z(gcd(p,2)),:balacarter=>[2,3,4],:red=>Z(2),:rep=>[2,3,4]),
  Dict(:name=>"B_3",:succ=>["F4(a2)"],:dynkin=>[2,2,0,0],
       :Au=>Z(gcd(p,2)),:balacarter=>[1,2,3],:red=>Z(2),:rep=>[1,2,3]),
  Dict(:name=>"F_4(a_2)",:shoji=>"C_3{+}A_1",:succ=>["F4(a1)"],
       :dynkin=>[0,2,0,2],:Au=>coxgroup(:B,gcd(p,2)),
       :balacarter=>[-1,2,-3,4],:rep=>[5,9,4,7]),
  Dict(:name=>"F_4(a_1)",:shoji=>"B_4",:succ=>["F4"],:dynkin=>[2,2,0,2],
       :Au=>Z(2),:balacarter=>[1,2,-3,4],:rep=>[1,2,6,7]),
  Dict(:name=>"F_4",:succ=>[],:dynkin=>[2,2,2,2],
       :Au=>Z(gcd(12,p^2)),:balacarter=>[1,2,3,4],:rep=>[1,2,3,4])],
  :springerSeries=>[Dict{Symbol, Any}(:relgroup =>coxgroup(:F,4), :levi=>[],
  :Z =>[],:locsys=>[[16,1],[6,1],[11,2],[1,1],[14,1],[3,1],[15,1],[2,1],[9,1],
      [14,2],[9,2],[11,4],[4,1],[8,1],[11,3],[11,5],[15,2],[7,1],[10,1],[3,2],
      [13,1],[5,1],[12,1],[6,2],[10,2]]),
     Dict{Symbol,Any}(:relgroup=>Z(1),:levi=>[1,2,3,4],:Z=>[],:locsys=>[[11,1]], :hc=>9)])
  if p==2
    append!(uc[:classes],[
      Dict{Symbol,Any}(:name=>"(\\tilde A_1)_2",:succ=>["~A1"],
                       :red=>coxgroup(:B,3),:dimBu=>16,:rep=>[3,9]), 
      Dict{Symbol,Any}(:name=>"(B_2)_2",:succ=>["B2","C3(a1)2"],
                       :red=>coxgroup(:B,2),:dimBu=>8,:Au=>Z(2),:rep=>[2,3,11]),
      Dict{Symbol,Any}(:name=>"(\\tilde A_2{+}A_1)_2",
            :succ=>["~A2+A1","C3(a1)2"],:red=>Z(2),:dimBu=>7,:rep=>[1,3,4,16]),
      Dict{Symbol,Any}(:name=>"C_3(a_1)_2",:succ=>["C3(a1)"],
                       :red=>Z(2),:dimBu=>6,:rep=>[2,4,9,20])])
    push!(class("1")[:succ],"(~A1)2")
    push!(class("A_1{+}\\tilde A_1")[:succ], "(B2)2")
    class("\\tilde A_2")[:succ] = ["(~A2+A1)2"]
    c=class("\\tilde A_2{+}A_1");c[:red]=Z(1);c[:dimBu]=6;delete!(c,:dynkin)
    c=class("B_2");c[:red]=Z(2);c[:dimBu]=6;delete!(c,:dynkin);
      delete!(c,:AuAction)
    c=class("C_3(a_1)");c[:red]=Z(1);c[:dimBu]=5;delete!(c,:dynkin)
    c=class("\\tilde A_2");c[:red]=coxgroup(:A,2);c[:dimBu]=9;delete!(c,:dynkin)
       c[:AuAction]=ExtendedReflectionGroup(coxgroup(:A,2), perm"(1,2)")
    c=class("\\tilde A_1");c[:red]=coxgroup(:B, 2);c[:dimBu]=13
      delete!(c,:dynkin);delete!(c,:AuAction)
    uc[:springerSeries][1]=Dict{Symbol, Any}(:relgroup=>coxgroup(:F,4),
      :levi=>[],:Z=>[],:locsys=>[[16,1],[6,1],[5,1],[1,1],[14,1],[17,1],
        [14,5],[2,1],[18,2],[14,4],[9,1],[20,1],[4,1],[8,1],[11,2],[11,3],
        [15,2],[7,1],[19,1],[3,1],[13,2],[5,2],[12,2],[6,2],[10,1]])
    push!(uc[:springerSeries],Dict{Symbol, Any}(:relgroup=>coxgroup(:B,2),
     :levi=>2:3,:Z=>[],:locsys=>[[12,1],[14,2],[18,1],[16,3],[13,1]],:hc=>2))
    append!(uc[:springerSeries],[
      Dict(:relgroup=>Z(1),:levi=>1:4,:Z=>[],:locsys=>[[16,2]],:hc=>5),
      Dict(:relgroup=>Z(1),:levi=>1:4,:Z=>[],:locsys=>[[16,4]],:hc=>4),
      Dict(:relgroup=>Z(1),:levi=>1:4,:Z=>[],:locsys=>[[15,1]],:hc=>3),
      Dict(:relgroup=>Z(1),:levi=>1:4,:Z=>[],:locsys=>[[14,3]],:hc=>8)])
  elseif p==3
    append!(uc[:springerSeries], [
      Dict(:relgroup=>Z(1),:levi=>1:4,:Z=>[],:locsys=>[[16,2]],:hc=>6), 
      Dict(:relgroup=>Z(1),:levi=>1:4,:Z=>[],:locsys=>[[16,3]],:hc=>7)])
  end
  uc[:orderClasses]=map(c->map(n->findfirst(c->Ucl.nameclass(c)==n,
                  uc[:classes]),c[:succ]),uc[:classes])
  for c in uc[:classes]
    delete!(c,:succ)
    if !haskey(c,:red) c[:red] = Z(1) end
    if !haskey(c,:Au) c[:Au] = Z(1) end
    if !haskey(c,:AuAction)
      c[:AuAction]=ExtendedReflectionGroup(c[:red],
        map(x->Matrix(1I,rank(c[:red]),rank(c[:red])),1:semisimplerank(c[:Au])))
    end
  end
  uc
end)

chevieset(:F4, :KLeftCellRepresentatives, [
  Dict(:character=>[1],:duflo=>[1,2,3,4],:reps=>""),
  Dict(:character=>[4],:duflo=>[25,26,27,28],:reps=>""),
  Dict(:character=>[10],:duflo=>[2,1,13,45],:reps=>""),
  Dict(:character=>[13],:duflo=>[1,29,31,4],:reps=>""),
  Dict(:character=>[17,5],:duflo=>[1,2,7,28],:reps=>[[18,40,10,3]]),
  Dict(:character=>[17,7],:duflo=>[5,26,6,4],:reps=>[[5,9,4,34]]),
  Dict(:character=>[20,6],:duflo=>[35,26,6,37],:reps=>[[11,25,30,31]]),
  Dict(:character=>[20,8],:duflo=>[14,26,27,36],:reps=>[[26,35,8,36]]),
  Dict(:character=>[21],:duflo=>[1,2,3,43],:reps=>""),
  Dict(:character=>[22],:duflo=>[20,26,39,8],:reps=>""),
  Dict(:character=>[23],:duflo=>[1,23,45,4],:reps=>""),
  Dict(:character=>[24],:duflo=>[2,1,32,28],:reps=>""),
  Dict(:character=>[25,18,16,14,11],:duflo=>[16,14,43,15],
       :reps=>[[1,16,31,41],[1,16,45,17],[2,1,36,4],[2,44,4,8],[14,18,39,34],
               [14,18,45,10],[14,35,15,45],[14,47,10,15],[16,14,30,39],
               [18,2,41,8],[18,48,8,10],[38,40,10,15],[42,38,8,10]]),
  Dict(:character=>[25,18,16,15,11,11,2],:duflo=>[22,2,30,28],
       :reps=>[[1,9,27,41],[1,9,43,17],[1,23,43,28],[1,35,19,45],[2,18,28,43],
               [2,18,45,19],[9,20,34,39],[9,20,45,15],[11,2,41,12],
               [11,48,12,6],[20,11,43,6],[20,42,15,43],[20,47,6,15],
               [33,42,15,10],[35,44,12,6],[44,33,6,15]]),
  Dict(:character=>[25,19,16,14,12],:duflo=>[20,47,13,8],
       :reps=>[[1,42,4,3],[11,16,37,36],[11,16,45,12],[11,33,13,45],
               [11,48,12,13],[16,1,39,3],[16,46,3,12],[20,11,32,37],
            [20,11,43,13],[22,48,8,4],[29,40,4,19],[35,44,12,13],[40,35,3,12]]),
  Dict(:character=>[25,19,16,15,12,12,3],:duflo=>[25,33,3,17],
       :reps=>[[9,18,39,34],[9,18,45,10],[9,35,15,45],[9,47,10,15],
               [11,20,36,30],[18,46,3,10],[20,9,30,39],[20,9,43,15],
               [20,26,6,43],[20,48,15,6],[22,47,6,4],[23,48,12,3],
               [25,47,19,4],[26,42,4,19],[33,44,10,15],[42,33,3,10]]),
  Dict(:character=>[25,25,16,15,12,11,9],:duflo=>[14,26,27,13],
       :reps=>[[1,23,41,27],[5,16,34,39],[5,16,45,15],[5,48,15,10],
               [11,20,41,31],[11,20,45,7],[11,46,7,17],[14,16,34,27],
               [16,11,27,41],[16,11,43,17],[20,48,8,7],[22,5,41,10],
               [22,35,8,41],[22,47,10,8],[26,35,8,13],[26,46,19,4],
               [29,46,15,10],[35,40,7,17],[44,35,8,7]])])
