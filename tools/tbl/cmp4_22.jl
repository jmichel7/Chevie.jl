chevieset(:G4_22, :BraidRelations, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [[[1, 2, 1], [2, 1, 2]]], Symbol("5") => [[[1, 2, 1, 2], [2, 1, 2, 1]]], Symbol("6") => [[[1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]], Symbol("7") => [[[1, 2, 3], [2, 3, 1]], [[1, 2, 3], [3, 1, 2]]], Symbol("8") => [[[1, 2, 1], [2, 1, 2]]], Symbol("9") => [[[1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]], Symbol("10") => [[[1, 2, 1, 2], [2, 1, 2, 1]]], Symbol("11") => [[[1, 2, 3], [2, 3, 1]], [[1, 2, 3], [3, 1, 2]]], Symbol("12") => [[[1, 2, 3, 1], [2, 3, 1, 2]], [[1, 2, 3, 1], [3, 1, 2, 3]]], Symbol("13") => [[[3, 1, 2, 3], [2, 3, 1, 2]], [[1, 2, 3, 1, 2], [3, 1, 2, 3, 1]]], Symbol("14") => [[[1, 2, 1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1, 2, 1]]], Symbol("15") => [[[3, 1, 2], [1, 2, 3]], [[2, 3, 1, 2, 1], [3, 1, 2, 1, 2]]], Symbol("16") => [[[1, 2, 1], [2, 1, 2]]], Symbol("17") => [[[1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]], Symbol("18") => [[[1, 2, 1, 2], [2, 1, 2, 1]]], Symbol("19") => [[[1, 2, 3], [2, 3, 1]], [[1, 2, 3], [3, 1, 2]]], Symbol("20") => [[[1, 2, 1, 2, 1], [2, 1, 2, 1, 2]]], Symbol("21") => [[[1, 2, 1, 2, 1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]]], Symbol("22") => [[[1, 2, 3, 1, 2], [2, 3, 1, 2, 3]], [[1, 2, 3, 1, 2], [3, 1, 2, 3, 1]]])
        return d[Symbol(ST)]
    end)
chevieset(:G4_22, :ReflectionName, function (arg...,)
        local ST, n, option
        option = arg[2]
        ST = arg[1]
        if haskey(option, :TeX)
            n = SPrint("G_{", ST, "}")
        else
            n = SPrint("G", ST)
        end
        if length(arg) == 3
            n *= SPrint("(", Format(arg[3], option), ")")
        end
        return n
    end)
chevieset(:G4_22, :SemisimpleRank, 2)
chevieset(:G4_22, :Size, function (ST,)
        local s
        s = 24 * [1, 3, 2, 6, 4, 8, 12, 24, 2, 4, 6, 12, 25, 50, 75, 150, 15, 30, 10]
        return s[ST - 3]
    end)
chevieset(:G4_22, :NrConjugacyClasses, function (ST,)
        local l
        l = [7, 21, 14, 42, 16, 32, 48, 96, 8, 16, 24, 48, 45, 90, 135, 270, 27, 54, 18]
        return l[ST - 3]
    end)
chevieset(:G4_22, :paramclasses, function (ST,)
        local p
        if ST in 4:7
            p = [[1, 12], [2, 6], [3, 12], [4, 12]]
        elseif ST in 8:15
            p = [[1, 24], [2, 12], [3, 24], [4, 24], [5, 12]]
        elseif ST in 16:22
            p = [[1, 60], [2, 30], [3, 60], [4, 60], [5, 60]]
        end
        return Concatenation(map((i->begin
                            map((j->begin
                                        [i[1], j]
                                    end), 0:i[2] - 1)
                        end), p))
    end)
chevieset(:G4_22, :CartanMat, function (ST,)
        return (chevieget(:G4_22, :GeneratingCoRoots))(ST) * TransposedMat((chevieget(:G4_22, :GeneratingRoots))(ST))
    end)
chevieset(:G4_22, :EigenvaluesGeneratingReflections, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [3, 3], Symbol("5") => [3, 3], Symbol("6") => [2, 3], Symbol("7") => [2, 3, 3], Symbol("8") => [4, 4], Symbol("9") => [2, 4], Symbol("10") => [3, 4], Symbol("11") => [2, 3, 4], Symbol("12") => [2, 2, 2], Symbol("13") => [2, 2, 2], Symbol("14") => [2, 3], Symbol("15") => [2, 3, 2], Symbol("16") => [5, 5], Symbol("17") => [2, 5], Symbol("18") => [3, 5], Symbol("19") => [2, 3, 5], Symbol("20") => [3, 3], Symbol("21") => [2, 3], Symbol("22") => [2, 2, 2])
        return map((x->begin
                        1 // x
                    end), d[Symbol(ST)])
    end)
chevieset(:G4_22, :ReflectionCoDegrees, function (ST,)
        local l
        l = [2, 6, 8, 12, 4, 16, 12, 24, 10, 16, 18, 24, 10, 40, 30, 60, 18, 48, 28]
        return [0, l[ST - 3]]
    end)
chevieset(:G4_22, :ReflectionDegrees, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [4, 6], Symbol("5") => [6, 12], Symbol("6") => [4, 12], Symbol("7") => [12, 12], Symbol("8") => [8, 12], Symbol("9") => [8, 24], Symbol("10") => [12, 24], Symbol("11") => [24, 24], Symbol("12") => [6, 8], Symbol("13") => [8, 12], Symbol("14") => [6, 24], Symbol("15") => [12, 24], Symbol("16") => [20, 30], Symbol("17") => [20, 60], Symbol("18") => [30, 60], Symbol("19") => [60, 60], Symbol("20") => [12, 30], Symbol("21") => [12, 60], Symbol("22") => [12, 20])
        return d[Symbol(ST)]
    end)
chevieset(:G4_22, :PowerMaps, function (ST,)
        local l, res, i
        l = ((chevieget(:G4_22, :ClassInfo))(ST))[:indexclasses]
        if ST in 4:7
            res = [nothing, [1, 3, 5, 7, 9, 11, 1, 3, 5, 7, 9, 11, 1, 3, 5, 7, 9, 11, 39, 41, 31, 33, 35, 37, 39, 41, 31, 33, 35, 37, 27, 29, 19, 21, 23, 25, 27, 29, 19, 21, 23, 25], [1, 4, 7, 10, 1, 4, 7, 10, 1, 4, 7, 10, 13, 16, 13, 16, 13, 16, 1, 4, 7, 10, 1, 4, 7, 10, 1, 4, 7, 10, 1, 4, 7, 10, 1, 4, 7, 10, 1, 4, 7, 10], nothing, [1, 6, 11, 4, 9, 2, 7, 12, 5, 10, 3, 8, 13, 18, 17, 16, 15, 14, 39, 32, 37, 42, 35, 40, 33, 38, 31, 36, 41, 34, 27, 20, 25, 30, 23, 28, 21, 26, 19, 24, 29, 22], nothing, [1, 8, 3, 10, 5, 12, 7, 2, 9, 4, 11, 6, 13, 14, 15, 16, 17, 18, 19, 26, 21, 28, 23, 30, 25, 20, 27, 22, 29, 24, 31, 38, 33, 40, 35, 42, 37, 32, 39, 34, 41, 36], nothing, nothing, nothing, [1, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 13, 18, 17, 16, 15, 14, 39, 38, 37, 36, 35, 34, 33, 32, 31, 42, 41, 40, 27, 26, 25, 24, 23, 22, 21, 20, 19, 30, 29, 28]]
        elseif ST in 8:15
            res = [nothing, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 53, 55, 57, 59, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 37, 39, 41, 43, 45, 47, 49, 51, 85, 87, 89, 91, 93, 95, 85, 87, 89, 91, 93, 95, 85, 87, 89, 91, 93, 95, 85, 87, 89, 91, 93, 95, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23], [1, 4, 7, 10, 13, 16, 19, 22, 1, 4, 7, 10, 13, 16, 19, 22, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 25, 28, 31, 34, 25, 28, 31, 34, 1, 4, 7, 10, 13, 16, 19, 22, 1, 4, 7, 10, 13, 16, 19, 22, 1, 4, 7, 10, 13, 16, 19, 22, 79, 82, 61, 64, 67, 70, 73, 76, 79, 82, 61, 64, 67, 70, 73, 76, 79, 82, 61, 64, 67, 70, 73, 76, 85, 88, 91, 94, 85, 88, 91, 94, 85, 88, 91, 94], nothing, [1, 6, 11, 16, 21, 2, 7, 12, 17, 22, 3, 8, 13, 18, 23, 4, 9, 14, 19, 24, 5, 10, 15, 20, 25, 30, 35, 28, 33, 26, 31, 36, 29, 34, 27, 32, 53, 58, 39, 44, 49, 54, 59, 40, 45, 50, 55, 60, 41, 46, 51, 56, 37, 42, 47, 52, 57, 38, 43, 48, 61, 66, 71, 76, 81, 62, 67, 72, 77, 82, 63, 68, 73, 78, 83, 64, 69, 74, 79, 84, 65, 70, 75, 80, 85, 90, 95, 88, 93, 86, 91, 96, 89, 94, 87, 92], nothing, [1, 8, 15, 22, 5, 12, 19, 2, 9, 16, 23, 6, 13, 20, 3, 10, 17, 24, 7, 14, 21, 4, 11, 18, 25, 32, 27, 34, 29, 36, 31, 26, 33, 28, 35, 30, 37, 44, 51, 58, 41, 48, 55, 38, 45, 52, 59, 42, 49, 56, 39, 46, 53, 60, 43, 50, 57, 40, 47, 54, 79, 62, 69, 76, 83, 66, 73, 80, 63, 70, 77, 84, 67, 74, 81, 64, 71, 78, 61, 68, 75, 82, 65, 72, 85, 92, 87, 94, 89, 96, 91, 86, 93, 88, 95, 90], nothing, nothing, nothing, [1, 12, 23, 10, 21, 8, 19, 6, 17, 4, 15, 2, 13, 24, 11, 22, 9, 20, 7, 18, 5, 16, 3, 14, 25, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 53, 40, 51, 38, 49, 60, 47, 58, 45, 56, 43, 54, 41, 52, 39, 50, 37, 48, 59, 46, 57, 44, 55, 42, 79, 66, 77, 64, 75, 62, 73, 84, 71, 82, 69, 80, 67, 78, 65, 76, 63, 74, 61, 72, 83, 70, 81, 68, 85, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86], nothing, [1, 14, 3, 16, 5, 18, 7, 20, 9, 22, 11, 24, 13, 2, 15, 4, 17, 6, 19, 8, 21, 10, 23, 12, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 39, 52, 41, 54, 43, 56, 45, 58, 47, 60, 49, 38, 51, 40, 53, 42, 55, 44, 57, 46, 59, 48, 61, 74, 63, 76, 65, 78, 67, 80, 69, 82, 71, 84, 73, 62, 75, 64, 77, 66, 79, 68, 81, 70, 83, 72, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], nothing, nothing, nothing, [1, 18, 11, 4, 21, 14, 7, 24, 17, 10, 3, 20, 13, 6, 23, 16, 9, 2, 19, 12, 5, 22, 15, 8, 25, 30, 35, 28, 33, 26, 31, 36, 29, 34, 27, 32, 53, 46, 39, 56, 49, 42, 59, 52, 45, 38, 55, 48, 41, 58, 51, 44, 37, 54, 47, 40, 57, 50, 43, 60, 61, 78, 71, 64, 81, 74, 67, 84, 77, 70, 63, 80, 73, 66, 83, 76, 69, 62, 79, 72, 65, 82, 75, 68, 85, 90, 95, 88, 93, 86, 91, 96, 89, 94, 87, 92], nothing, [1, 20, 15, 10, 5, 24, 19, 14, 9, 4, 23, 18, 13, 8, 3, 22, 17, 12, 7, 2, 21, 16, 11, 6, 25, 32, 27, 34, 29, 36, 31, 26, 33, 28, 35, 30, 37, 56, 51, 46, 41, 60, 55, 50, 45, 40, 59, 54, 49, 44, 39, 58, 53, 48, 43, 38, 57, 52, 47, 42, 79, 74, 69, 64, 83, 78, 73, 68, 63, 82, 77, 72, 67, 62, 81, 76, 71, 66, 61, 80, 75, 70, 65, 84, 85, 92, 87, 94, 89, 96, 91, 86, 93, 88, 95, 90], nothing, nothing, nothing, [1, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 25, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 60, 59, 58, 57, 56, 55, 54, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 84, 83, 82, 81, 80, 85, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86]]
        elseif ST in 16:22
            res = [nothing, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 199, 201, 203, 205, 207, 209, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197], [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 247, 250, 253, 256, 259, 262, 265, 268, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 247, 250, 253, 256, 259, 262, 265, 268, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 247, 250, 253, 256, 259, 262, 265, 268, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208], nothing, [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 61, 66, 71, 76, 81, 86, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 91, 96, 101, 106, 111, 116, 121, 126, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56], nothing, [1, 8, 15, 22, 29, 36, 43, 50, 57, 4, 11, 18, 25, 32, 39, 46, 53, 60, 7, 14, 21, 28, 35, 42, 49, 56, 3, 10, 17, 24, 31, 38, 45, 52, 59, 6, 13, 20, 27, 34, 41, 48, 55, 2, 9, 16, 23, 30, 37, 44, 51, 58, 5, 12, 19, 26, 33, 40, 47, 54, 61, 68, 75, 82, 89, 66, 73, 80, 87, 64, 71, 78, 85, 62, 69, 76, 83, 90, 67, 74, 81, 88, 65, 72, 79, 86, 63, 70, 77, 84, 91, 98, 105, 112, 119, 126, 133, 140, 147, 94, 101, 108, 115, 122, 129, 136, 143, 150, 97, 104, 111, 118, 125, 132, 139, 146, 93, 100, 107, 114, 121, 128, 135, 142, 149, 96, 103, 110, 117, 124, 131, 138, 145, 92, 99, 106, 113, 120, 127, 134, 141, 148, 95, 102, 109, 116, 123, 130, 137, 144, 211, 218, 225, 232, 239, 246, 253, 260, 267, 214, 221, 228, 235, 242, 249, 256, 263, 270, 217, 224, 231, 238, 245, 252, 259, 266, 213, 220, 227, 234, 241, 248, 255, 262, 269, 216, 223, 230, 237, 244, 251, 258, 265, 212, 219, 226, 233, 240, 247, 254, 261, 268, 215, 222, 229, 236, 243, 250, 257, 264, 199, 206, 153, 160, 167, 174, 181, 188, 195, 202, 209, 156, 163, 170, 177, 184, 191, 198, 205, 152, 159, 166, 173, 180, 187, 194, 201, 208, 155, 162, 169, 176, 183, 190, 197, 204, 151, 158, 165, 172, 179, 186, 193, 200, 207, 154, 161, 168, 175, 182, 189, 196, 203, 210, 157, 164, 171, 178, 185, 192], nothing, nothing, nothing, [1, 12, 23, 34, 45, 56, 7, 18, 29, 40, 51, 2, 13, 24, 35, 46, 57, 8, 19, 30, 41, 52, 3, 14, 25, 36, 47, 58, 9, 20, 31, 42, 53, 4, 15, 26, 37, 48, 59, 10, 21, 32, 43, 54, 5, 16, 27, 38, 49, 60, 11, 22, 33, 44, 55, 6, 17, 28, 39, 50, 61, 72, 83, 64, 75, 86, 67, 78, 89, 70, 81, 62, 73, 84, 65, 76, 87, 68, 79, 90, 71, 82, 63, 74, 85, 66, 77, 88, 69, 80, 131, 142, 93, 104, 115, 126, 137, 148, 99, 110, 121, 132, 143, 94, 105, 116, 127, 138, 149, 100, 111, 122, 133, 144, 95, 106, 117, 128, 139, 150, 101, 112, 123, 134, 145, 96, 107, 118, 129, 140, 91, 102, 113, 124, 135, 146, 97, 108, 119, 130, 141, 92, 103, 114, 125, 136, 147, 98, 109, 120, 151, 162, 173, 184, 195, 206, 157, 168, 179, 190, 201, 152, 163, 174, 185, 196, 207, 158, 169, 180, 191, 202, 153, 164, 175, 186, 197, 208, 159, 170, 181, 192, 203, 154, 165, 176, 187, 198, 209, 160, 171, 182, 193, 204, 155, 166, 177, 188, 199, 210, 161, 172, 183, 194, 205, 156, 167, 178, 189, 200, 211, 222, 233, 244, 255, 266, 217, 228, 239, 250, 261, 212, 223, 234, 245, 256, 267, 218, 229, 240, 251, 262, 213, 224, 235, 246, 257, 268, 219, 230, 241, 252, 263, 214, 225, 236, 247, 258, 269, 220, 231, 242, 253, 264, 215, 226, 237, 248, 259, 270, 221, 232, 243, 254, 265, 216, 227, 238, 249, 260], nothing, [1, 14, 27, 40, 53, 6, 19, 32, 45, 58, 11, 24, 37, 50, 3, 16, 29, 42, 55, 8, 21, 34, 47, 60, 13, 26, 39, 52, 5, 18, 31, 44, 57, 10, 23, 36, 49, 2, 15, 28, 41, 54, 7, 20, 33, 46, 59, 12, 25, 38, 51, 4, 17, 30, 43, 56, 9, 22, 35, 48, 61, 74, 87, 70, 83, 66, 79, 62, 75, 88, 71, 84, 67, 80, 63, 76, 89, 72, 85, 68, 81, 64, 77, 90, 73, 86, 69, 82, 65, 78, 91, 104, 117, 130, 143, 96, 109, 122, 135, 148, 101, 114, 127, 140, 93, 106, 119, 132, 145, 98, 111, 124, 137, 150, 103, 116, 129, 142, 95, 108, 121, 134, 147, 100, 113, 126, 139, 92, 105, 118, 131, 144, 97, 110, 123, 136, 149, 102, 115, 128, 141, 94, 107, 120, 133, 146, 99, 112, 125, 138, 247, 260, 213, 226, 239, 252, 265, 218, 231, 244, 257, 270, 223, 236, 249, 262, 215, 228, 241, 254, 267, 220, 233, 246, 259, 212, 225, 238, 251, 264, 217, 230, 243, 256, 269, 222, 235, 248, 261, 214, 227, 240, 253, 266, 219, 232, 245, 258, 211, 224, 237, 250, 263, 216, 229, 242, 255, 268, 221, 234, 151, 164, 177, 190, 203, 156, 169, 182, 195, 208, 161, 174, 187, 200, 153, 166, 179, 192, 205, 158, 171, 184, 197, 210, 163, 176, 189, 202, 155, 168, 181, 194, 207, 160, 173, 186, 199, 152, 165, 178, 191, 204, 157, 170, 183, 196, 209, 162, 175, 188, 201, 154, 167, 180, 193, 206, 159, 172, 185, 198], nothing, nothing, nothing, [1, 18, 35, 52, 9, 26, 43, 60, 17, 34, 51, 8, 25, 42, 59, 16, 33, 50, 7, 24, 41, 58, 15, 32, 49, 6, 23, 40, 57, 14, 31, 48, 5, 22, 39, 56, 13, 30, 47, 4, 21, 38, 55, 12, 29, 46, 3, 20, 37, 54, 11, 28, 45, 2, 19, 36, 53, 10, 27, 44, 61, 78, 65, 82, 69, 86, 73, 90, 77, 64, 81, 68, 85, 72, 89, 76, 63, 80, 67, 84, 71, 88, 75, 62, 79, 66, 83, 70, 87, 74, 131, 148, 105, 122, 139, 96, 113, 130, 147, 104, 121, 138, 95, 112, 129, 146, 103, 120, 137, 94, 111, 128, 145, 102, 119, 136, 93, 110, 127, 144, 101, 118, 135, 92, 109, 126, 143, 100, 117, 134, 91, 108, 125, 142, 99, 116, 133, 150, 107, 124, 141, 98, 115, 132, 149, 106, 123, 140, 97, 114, 211, 228, 245, 262, 219, 236, 253, 270, 227, 244, 261, 218, 235, 252, 269, 226, 243, 260, 217, 234, 251, 268, 225, 242, 259, 216, 233, 250, 267, 224, 241, 258, 215, 232, 249, 266, 223, 240, 257, 214, 231, 248, 265, 222, 239, 256, 213, 230, 247, 264, 221, 238, 255, 212, 229, 246, 263, 220, 237, 254, 199, 156, 173, 190, 207, 164, 181, 198, 155, 172, 189, 206, 163, 180, 197, 154, 171, 188, 205, 162, 179, 196, 153, 170, 187, 204, 161, 178, 195, 152, 169, 186, 203, 160, 177, 194, 151, 168, 185, 202, 159, 176, 193, 210, 167, 184, 201, 158, 175, 192, 209, 166, 183, 200, 157, 174, 191, 208, 165, 182], nothing, [1, 20, 39, 58, 17, 36, 55, 14, 33, 52, 11, 30, 49, 8, 27, 46, 5, 24, 43, 2, 21, 40, 59, 18, 37, 56, 15, 34, 53, 12, 31, 50, 9, 28, 47, 6, 25, 44, 3, 22, 41, 60, 19, 38, 57, 16, 35, 54, 13, 32, 51, 10, 29, 48, 7, 26, 45, 4, 23, 42, 61, 80, 69, 88, 77, 66, 85, 74, 63, 82, 71, 90, 79, 68, 87, 76, 65, 84, 73, 62, 81, 70, 89, 78, 67, 86, 75, 64, 83, 72, 91, 110, 129, 148, 107, 126, 145, 104, 123, 142, 101, 120, 139, 98, 117, 136, 95, 114, 133, 92, 111, 130, 149, 108, 127, 146, 105, 124, 143, 102, 121, 140, 99, 118, 137, 96, 115, 134, 93, 112, 131, 150, 109, 128, 147, 106, 125, 144, 103, 122, 141, 100, 119, 138, 97, 116, 135, 94, 113, 132, 199, 158, 177, 196, 155, 174, 193, 152, 171, 190, 209, 168, 187, 206, 165, 184, 203, 162, 181, 200, 159, 178, 197, 156, 175, 194, 153, 172, 191, 210, 169, 188, 207, 166, 185, 204, 163, 182, 201, 160, 179, 198, 157, 176, 195, 154, 173, 192, 151, 170, 189, 208, 167, 186, 205, 164, 183, 202, 161, 180, 247, 266, 225, 244, 263, 222, 241, 260, 219, 238, 257, 216, 235, 254, 213, 232, 251, 270, 229, 248, 267, 226, 245, 264, 223, 242, 261, 220, 239, 258, 217, 236, 255, 214, 233, 252, 211, 230, 249, 268, 227, 246, 265, 224, 243, 262, 221, 240, 259, 218, 237, 256, 215, 234, 253, 212, 231, 250, 269, 228], nothing, nothing, nothing, [1, 24, 47, 10, 33, 56, 19, 42, 5, 28, 51, 14, 37, 60, 23, 46, 9, 32, 55, 18, 41, 4, 27, 50, 13, 36, 59, 22, 45, 8, 31, 54, 17, 40, 3, 26, 49, 12, 35, 58, 21, 44, 7, 30, 53, 16, 39, 2, 25, 48, 11, 34, 57, 20, 43, 6, 29, 52, 15, 38, 61, 84, 77, 70, 63, 86, 79, 72, 65, 88, 81, 74, 67, 90, 83, 76, 69, 62, 85, 78, 71, 64, 87, 80, 73, 66, 89, 82, 75, 68, 131, 94, 117, 140, 103, 126, 149, 112, 135, 98, 121, 144, 107, 130, 93, 116, 139, 102, 125, 148, 111, 134, 97, 120, 143, 106, 129, 92, 115, 138, 101, 124, 147, 110, 133, 96, 119, 142, 105, 128, 91, 114, 137, 100, 123, 146, 109, 132, 95, 118, 141, 104, 127, 150, 113, 136, 99, 122, 145, 108, 247, 270, 233, 256, 219, 242, 265, 228, 251, 214, 237, 260, 223, 246, 269, 232, 255, 218, 241, 264, 227, 250, 213, 236, 259, 222, 245, 268, 231, 254, 217, 240, 263, 226, 249, 212, 235, 258, 221, 244, 267, 230, 253, 216, 239, 262, 225, 248, 211, 234, 257, 220, 243, 266, 229, 252, 215, 238, 261, 224, 151, 174, 197, 160, 183, 206, 169, 192, 155, 178, 201, 164, 187, 210, 173, 196, 159, 182, 205, 168, 191, 154, 177, 200, 163, 186, 209, 172, 195, 158, 181, 204, 167, 190, 153, 176, 199, 162, 185, 208, 171, 194, 157, 180, 203, 166, 189, 152, 175, 198, 161, 184, 207, 170, 193, 156, 179, 202, 165, 188], nothing, nothing, nothing, nothing, nothing, [1, 30, 59, 28, 57, 26, 55, 24, 53, 22, 51, 20, 49, 18, 47, 16, 45, 14, 43, 12, 41, 10, 39, 8, 37, 6, 35, 4, 33, 2, 31, 60, 29, 58, 27, 56, 25, 54, 23, 52, 21, 50, 19, 48, 17, 46, 15, 44, 13, 42, 11, 40, 9, 38, 7, 36, 5, 34, 3, 32, 61, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 131, 100, 129, 98, 127, 96, 125, 94, 123, 92, 121, 150, 119, 148, 117, 146, 115, 144, 113, 142, 111, 140, 109, 138, 107, 136, 105, 134, 103, 132, 101, 130, 99, 128, 97, 126, 95, 124, 93, 122, 91, 120, 149, 118, 147, 116, 145, 114, 143, 112, 141, 110, 139, 108, 137, 106, 135, 104, 133, 102, 199, 168, 197, 166, 195, 164, 193, 162, 191, 160, 189, 158, 187, 156, 185, 154, 183, 152, 181, 210, 179, 208, 177, 206, 175, 204, 173, 202, 171, 200, 169, 198, 167, 196, 165, 194, 163, 192, 161, 190, 159, 188, 157, 186, 155, 184, 153, 182, 151, 180, 209, 178, 207, 176, 205, 174, 203, 172, 201, 170, 247, 216, 245, 214, 243, 212, 241, 270, 239, 268, 237, 266, 235, 264, 233, 262, 231, 260, 229, 258, 227, 256, 225, 254, 223, 252, 221, 250, 219, 248, 217, 246, 215, 244, 213, 242, 211, 240, 269, 238, 267, 236, 265, 234, 263, 232, 261, 230, 259, 228, 257, 226, 255, 224, 253, 222, 251, 220, 249, 218], nothing, [1, 32, 3, 34, 5, 36, 7, 38, 9, 40, 11, 42, 13, 44, 15, 46, 17, 48, 19, 50, 21, 52, 23, 54, 25, 56, 27, 58, 29, 60, 31, 2, 33, 4, 35, 6, 37, 8, 39, 10, 41, 12, 43, 14, 45, 16, 47, 18, 49, 20, 51, 22, 53, 24, 55, 26, 57, 28, 59, 30, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 122, 93, 124, 95, 126, 97, 128, 99, 130, 101, 132, 103, 134, 105, 136, 107, 138, 109, 140, 111, 142, 113, 144, 115, 146, 117, 148, 119, 150, 121, 92, 123, 94, 125, 96, 127, 98, 129, 100, 131, 102, 133, 104, 135, 106, 137, 108, 139, 110, 141, 112, 143, 114, 145, 116, 147, 118, 149, 120, 151, 182, 153, 184, 155, 186, 157, 188, 159, 190, 161, 192, 163, 194, 165, 196, 167, 198, 169, 200, 171, 202, 173, 204, 175, 206, 177, 208, 179, 210, 181, 152, 183, 154, 185, 156, 187, 158, 189, 160, 191, 162, 193, 164, 195, 166, 197, 168, 199, 170, 201, 172, 203, 174, 205, 176, 207, 178, 209, 180, 211, 242, 213, 244, 215, 246, 217, 248, 219, 250, 221, 252, 223, 254, 225, 256, 227, 258, 229, 260, 231, 262, 233, 264, 235, 266, 237, 268, 239, 270, 241, 212, 243, 214, 245, 216, 247, 218, 249, 220, 251, 222, 253, 224, 255, 226, 257, 228, 259, 230, 261, 232, 263, 234, 265, 236, 267, 238, 269, 240], nothing, nothing, nothing, nothing, nothing, [1, 38, 15, 52, 29, 6, 43, 20, 57, 34, 11, 48, 25, 2, 39, 16, 53, 30, 7, 44, 21, 58, 35, 12, 49, 26, 3, 40, 17, 54, 31, 8, 45, 22, 59, 36, 13, 50, 27, 4, 41, 18, 55, 32, 9, 46, 23, 60, 37, 14, 51, 28, 5, 42, 19, 56, 33, 10, 47, 24, 61, 68, 75, 82, 89, 66, 73, 80, 87, 64, 71, 78, 85, 62, 69, 76, 83, 90, 67, 74, 81, 88, 65, 72, 79, 86, 63, 70, 77, 84, 91, 128, 105, 142, 119, 96, 133, 110, 147, 124, 101, 138, 115, 92, 129, 106, 143, 120, 97, 134, 111, 148, 125, 102, 139, 116, 93, 130, 107, 144, 121, 98, 135, 112, 149, 126, 103, 140, 117, 94, 131, 108, 145, 122, 99, 136, 113, 150, 127, 104, 141, 118, 95, 132, 109, 146, 123, 100, 137, 114, 211, 248, 225, 262, 239, 216, 253, 230, 267, 244, 221, 258, 235, 212, 249, 226, 263, 240, 217, 254, 231, 268, 245, 222, 259, 236, 213, 250, 227, 264, 241, 218, 255, 232, 269, 246, 223, 260, 237, 214, 251, 228, 265, 242, 219, 256, 233, 270, 247, 224, 261, 238, 215, 252, 229, 266, 243, 220, 257, 234, 199, 176, 153, 190, 167, 204, 181, 158, 195, 172, 209, 186, 163, 200, 177, 154, 191, 168, 205, 182, 159, 196, 173, 210, 187, 164, 201, 178, 155, 192, 169, 206, 183, 160, 197, 174, 151, 188, 165, 202, 179, 156, 193, 170, 207, 184, 161, 198, 175, 152, 189, 166, 203, 180, 157, 194, 171, 208, 185, 162], nothing, nothing, nothing, [1, 42, 23, 4, 45, 26, 7, 48, 29, 10, 51, 32, 13, 54, 35, 16, 57, 38, 19, 60, 41, 22, 3, 44, 25, 6, 47, 28, 9, 50, 31, 12, 53, 34, 15, 56, 37, 18, 59, 40, 21, 2, 43, 24, 5, 46, 27, 8, 49, 30, 11, 52, 33, 14, 55, 36, 17, 58, 39, 20, 61, 72, 83, 64, 75, 86, 67, 78, 89, 70, 81, 62, 73, 84, 65, 76, 87, 68, 79, 90, 71, 82, 63, 74, 85, 66, 77, 88, 69, 80, 131, 112, 93, 134, 115, 96, 137, 118, 99, 140, 121, 102, 143, 124, 105, 146, 127, 108, 149, 130, 111, 92, 133, 114, 95, 136, 117, 98, 139, 120, 101, 142, 123, 104, 145, 126, 107, 148, 129, 110, 91, 132, 113, 94, 135, 116, 97, 138, 119, 100, 141, 122, 103, 144, 125, 106, 147, 128, 109, 150, 151, 192, 173, 154, 195, 176, 157, 198, 179, 160, 201, 182, 163, 204, 185, 166, 207, 188, 169, 210, 191, 172, 153, 194, 175, 156, 197, 178, 159, 200, 181, 162, 203, 184, 165, 206, 187, 168, 209, 190, 171, 152, 193, 174, 155, 196, 177, 158, 199, 180, 161, 202, 183, 164, 205, 186, 167, 208, 189, 170, 211, 252, 233, 214, 255, 236, 217, 258, 239, 220, 261, 242, 223, 264, 245, 226, 267, 248, 229, 270, 251, 232, 213, 254, 235, 216, 257, 238, 219, 260, 241, 222, 263, 244, 225, 266, 247, 228, 269, 250, 231, 212, 253, 234, 215, 256, 237, 218, 259, 240, 221, 262, 243, 224, 265, 246, 227, 268, 249, 230], nothing, [1, 44, 27, 10, 53, 36, 19, 2, 45, 28, 11, 54, 37, 20, 3, 46, 29, 12, 55, 38, 21, 4, 47, 30, 13, 56, 39, 22, 5, 48, 31, 14, 57, 40, 23, 6, 49, 32, 15, 58, 41, 24, 7, 50, 33, 16, 59, 42, 25, 8, 51, 34, 17, 60, 43, 26, 9, 52, 35, 18, 61, 74, 87, 70, 83, 66, 79, 62, 75, 88, 71, 84, 67, 80, 63, 76, 89, 72, 85, 68, 81, 64, 77, 90, 73, 86, 69, 82, 65, 78, 91, 134, 117, 100, 143, 126, 109, 92, 135, 118, 101, 144, 127, 110, 93, 136, 119, 102, 145, 128, 111, 94, 137, 120, 103, 146, 129, 112, 95, 138, 121, 104, 147, 130, 113, 96, 139, 122, 105, 148, 131, 114, 97, 140, 123, 106, 149, 132, 115, 98, 141, 124, 107, 150, 133, 116, 99, 142, 125, 108, 247, 230, 213, 256, 239, 222, 265, 248, 231, 214, 257, 240, 223, 266, 249, 232, 215, 258, 241, 224, 267, 250, 233, 216, 259, 242, 225, 268, 251, 234, 217, 260, 243, 226, 269, 252, 235, 218, 261, 244, 227, 270, 253, 236, 219, 262, 245, 228, 211, 254, 237, 220, 263, 246, 229, 212, 255, 238, 221, 264, 151, 194, 177, 160, 203, 186, 169, 152, 195, 178, 161, 204, 187, 170, 153, 196, 179, 162, 205, 188, 171, 154, 197, 180, 163, 206, 189, 172, 155, 198, 181, 164, 207, 190, 173, 156, 199, 182, 165, 208, 191, 174, 157, 200, 183, 166, 209, 192, 175, 158, 201, 184, 167, 210, 193, 176, 159, 202, 185, 168], nothing, nothing, nothing, [1, 48, 35, 22, 9, 56, 43, 30, 17, 4, 51, 38, 25, 12, 59, 46, 33, 20, 7, 54, 41, 28, 15, 2, 49, 36, 23, 10, 57, 44, 31, 18, 5, 52, 39, 26, 13, 60, 47, 34, 21, 8, 55, 42, 29, 16, 3, 50, 37, 24, 11, 58, 45, 32, 19, 6, 53, 40, 27, 14, 61, 78, 65, 82, 69, 86, 73, 90, 77, 64, 81, 68, 85, 72, 89, 76, 63, 80, 67, 84, 71, 88, 75, 62, 79, 66, 83, 70, 87, 74, 131, 118, 105, 92, 139, 126, 113, 100, 147, 134, 121, 108, 95, 142, 129, 116, 103, 150, 137, 124, 111, 98, 145, 132, 119, 106, 93, 140, 127, 114, 101, 148, 135, 122, 109, 96, 143, 130, 117, 104, 91, 138, 125, 112, 99, 146, 133, 120, 107, 94, 141, 128, 115, 102, 149, 136, 123, 110, 97, 144, 211, 258, 245, 232, 219, 266, 253, 240, 227, 214, 261, 248, 235, 222, 269, 256, 243, 230, 217, 264, 251, 238, 225, 212, 259, 246, 233, 220, 267, 254, 241, 228, 215, 262, 249, 236, 223, 270, 257, 244, 231, 218, 265, 252, 239, 226, 213, 260, 247, 234, 221, 268, 255, 242, 229, 216, 263, 250, 237, 224, 199, 186, 173, 160, 207, 194, 181, 168, 155, 202, 189, 176, 163, 210, 197, 184, 171, 158, 205, 192, 179, 166, 153, 200, 187, 174, 161, 208, 195, 182, 169, 156, 203, 190, 177, 164, 151, 198, 185, 172, 159, 206, 193, 180, 167, 154, 201, 188, 175, 162, 209, 196, 183, 170, 157, 204, 191, 178, 165, 152], nothing, nothing, nothing, nothing, nothing, [1, 54, 47, 40, 33, 26, 19, 12, 5, 58, 51, 44, 37, 30, 23, 16, 9, 2, 55, 48, 41, 34, 27, 20, 13, 6, 59, 52, 45, 38, 31, 24, 17, 10, 3, 56, 49, 42, 35, 28, 21, 14, 7, 60, 53, 46, 39, 32, 25, 18, 11, 4, 57, 50, 43, 36, 29, 22, 15, 8, 61, 84, 77, 70, 63, 86, 79, 72, 65, 88, 81, 74, 67, 90, 83, 76, 69, 62, 85, 78, 71, 64, 87, 80, 73, 66, 89, 82, 75, 68, 131, 124, 117, 110, 103, 96, 149, 142, 135, 128, 121, 114, 107, 100, 93, 146, 139, 132, 125, 118, 111, 104, 97, 150, 143, 136, 129, 122, 115, 108, 101, 94, 147, 140, 133, 126, 119, 112, 105, 98, 91, 144, 137, 130, 123, 116, 109, 102, 95, 148, 141, 134, 127, 120, 113, 106, 99, 92, 145, 138, 247, 240, 233, 226, 219, 212, 265, 258, 251, 244, 237, 230, 223, 216, 269, 262, 255, 248, 241, 234, 227, 220, 213, 266, 259, 252, 245, 238, 231, 224, 217, 270, 263, 256, 249, 242, 235, 228, 221, 214, 267, 260, 253, 246, 239, 232, 225, 218, 211, 264, 257, 250, 243, 236, 229, 222, 215, 268, 261, 254, 151, 204, 197, 190, 183, 176, 169, 162, 155, 208, 201, 194, 187, 180, 173, 166, 159, 152, 205, 198, 191, 184, 177, 170, 163, 156, 209, 202, 195, 188, 181, 174, 167, 160, 153, 206, 199, 192, 185, 178, 171, 164, 157, 210, 203, 196, 189, 182, 175, 168, 161, 154, 207, 200, 193, 186, 179, 172, 165, 158], nothing, nothing, nothing, nothing, nothing, [1, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 61, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248]]
        end
        for i = 1:length(res)
            if res[i] !== nothing
                res[i] = map((x->begin
                                Position(l, x)
                            end), (res[i])[l])
                if res[i] == 1:length(l) || res[i] in Sublist(res, 1:i - 1)
                    Unbind(res[i])
                end
            end
        end
        return res
    end)
chevieset(:G4_22, :ClassInfo, function (ST,)
        local res, p, g, z, f, h, digits
        p = (chevieget(:G4_22, :paramclasses))(ST)
        res = Dict{Symbol, Any}()
        g(a, b) = begin
                return filter((i->begin
                                mod((p[i])[2], a) == b[(p[i])[1]]
                            end), 1:length(p))
            end
        f(class, z) = begin
                local r, i
                r = [[], [1], [2], [3], [3, 3]]
                r = r[class[1]]
                for i = 1:class[2]
                    r = Append(r, z)
                end
                return r
            end
        h(z, l) = begin
                return map((x->begin
                                ApplyFunc(Replace, Concatenation([f(x, z)], l))
                            end), p[res[:indexclasses]])
            end
        if ST == 4
            res[:indexclasses] = g(6, [0, 3, 2, 0])
            res[:classtext] = h([3, 1], [[2], [], [1, 3, 1], [2], [3], [1]])
            z = "121212"
        elseif ST == 5
            res[:indexclasses] = g(2, [0, 1, 0, 0])
            res[:classtext] = h([2, 3], [[1], [], [2], [1], [3], [2]])
            z = "1212"
        elseif ST == 6
            res[:indexclasses] = g(3, [0, 0, 2, 0])
            res[:classtext] = h([3, 1], [[2], [], [3], [2]])
            z = "212121"
        elseif ST == 7
            res[:indexclasses] = g(1, [0, 0, 0, 0])
            res[:classtext] = h([1, 2, 3], [])
            z = "123"
        elseif ST == 8
            res[:indexclasses] = g(6, [0, 3, 2, 0, 0])
            res[:classtext] = h([3, 1], [[2], [], [1, 3, 1], [2], [3], [1]])
            z = "121212"
        elseif ST == 9
            res[:indexclasses] = g(3, [0, 0, 2, 0, 0])
            res[:classtext] = h([3, 1], [[2], [], [3], [2]])
            z = "212121"
        elseif ST == 10
            res[:indexclasses] = g(2, [0, 1, 0, 0, 0])
            res[:classtext] = h([2, 3], [[1], [], [2], [1], [3], [2]])
            z = "1212"
        elseif ST == 11
            res[:indexclasses] = g(1, [0, 0, 0, 0, 0])
            res[:classtext] = h([1, 2, 3], [])
            z = "123"
        elseif ST == 12
            res[:indexclasses] = g(12, [0, 0, 8, 3, 6])
            res[:classtext] = h([1, 2], [[3], [], [2, 1, 2, 1, 2], [2, 3]])
            z = "123123123123"
        elseif ST == 13
            res[:indexclasses] = g(6, [0, 0, 2, 3, 0])
            res[:classtext] = map((x->begin
                            Replace(x, [0], [1, 2, 3, 1, 2, 3, 1, 2, 3])
                        end), [[], [0], [0, 0], [0, 0, 0], [2], [2, 0], [3, 1, 2], [3, 1, 2, 0], [3, 1, 2, 0, 0], [3, 1, 2, 0, 0, 0], [2, 3, 1, 2, 1], [2, 3, 1, 2, 1, 0], [2, 3, 1, 2, 1, 0, 0], [2, 3, 1, 2, 1, 0, 0, 0], [1], [1, 0]])
            z = "123123123"
        elseif ST == 14
            res[:indexclasses] = g(4, [0, 0, 0, 3, 2])
            res[:classtext] = h([1, 2], [[3], []])
            z = "12121212"
        elseif ST == 15
            res[:indexclasses] = g(2, [0, 0, 0, 1, 0])
            res[:classtext] = h([1, 2, 3], [[3, 3], [4], [3, 1, 2, 3], [4, 1, 2], [4], [3]])
            z = "12312"
        elseif ST == 16
            res[:indexclasses] = g(6, [0, 3, 2, 0, 0])
            res[:classtext] = h([3, 1], [[2], [], [1, 3, 1], [2], [3], [1]])
            z = "121212"
        elseif ST == 17
            res[:indexclasses] = g(3, [0, 0, 2, 0, 0])
            res[:classtext] = h([3, 1], [[2], [], [3], [2]])
            z = "212121"
        elseif ST == 18
            res[:indexclasses] = g(2, [0, 1, 0, 0, 0])
            res[:classtext] = h([2, 3], [[1], [], [2], [1], [3], [2]])
            z = "1212"
        elseif ST == 19
            res[:indexclasses] = g(1, [0, 0, 0, 0, 0])
            res[:classtext] = h([1, 2, 3], [])
            z = "123"
        elseif ST == 20
            res[:indexclasses] = g(10, [0, 5, 0, 4, 8])
            res[:classtext] = h([1, 2], [[3], [], [1, 1], [], [1, 2, 1], [3], [2], [1], [3], [2]])
            z = "2121212121"
        elseif ST == 21
            res[:indexclasses] = g(5, [0, 0, 0, 4, 3])
            res[:classtext] = h([1, 2], [[3], []])
            z = "1212121212"
        elseif ST == 22
            res[:indexclasses] = g(15, [0, 0, 5, 9, 3])
            res[:classtext] = h([1, 2], [[3], [], [2, 1, 2, 1, 2], [2, 3]])
            z = "123123123123123"
        end
        digits = "123"
        res[:classnames] = map(function (x,)
                    local res
                    if length(x) == 0
                        return "."
                    end
                    return string(Replace(digits[x], z, "z"))
                end, res[:classtext])
        if ST in 4:7
            z = [1, 6, 4, 4]
            res[:classes] = map((x->begin
                            z[x[1]]
                        end), p[res[:indexclasses]])
            z = [1, 12, 6, 4, 3, 12, 2, 12, 3, 4, 6, 12, 2, 12, 6, 4, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12, 3, 12, 6, 12]
        elseif ST in 8:15
            z = [1, 12, 8, 6, 6]
            res[:classes] = map((x->begin
                            z[x[1]]
                        end), p[res[:indexclasses]])
            z = [1, 24, 12, 8, 6, 24, 4, 24, 3, 8, 12, 24, 2, 24, 12, 8, 3, 24, 4, 24, 6, 8, 12, 24, 2, 24, 12, 8, 6, 24, 4, 24, 6, 8, 12, 24, 3, 24, 12, 24, 6, 24, 12, 24, 3, 24, 12, 24, 6, 24, 12, 24, 3, 24, 12, 24, 6, 24, 12, 24, 4, 24, 12, 8, 12, 24, 4, 24, 12, 8, 12, 24, 4, 24, 12, 8, 12, 24, 4, 24, 12, 8, 12, 24, 2, 24, 12, 8, 6, 24, 4, 24, 6, 8, 12, 24]
        elseif ST in 16:22
            z = [1, 30, 20, 12, 12]
            res[:classes] = map((x->begin
                            z[x[1]]
                        end), p[res[:indexclasses]])
            z = [1, 60, 30, 20, 15, 12, 10, 60, 15, 20, 6, 60, 5, 60, 30, 4, 15, 60, 10, 60, 3, 20, 30, 60, 5, 12, 30, 20, 15, 60, 2, 60, 15, 20, 30, 12, 5, 60, 30, 20, 3, 60, 10, 60, 15, 4, 30, 60, 5, 60, 6, 20, 15, 60, 10, 12, 15, 20, 30, 60, 2, 60, 30, 20, 30, 12, 10, 60, 30, 20, 6, 60, 10, 60, 30, 4, 30, 60, 10, 60, 6, 20, 30, 60, 10, 12, 30, 20, 30, 60, 3, 60, 30, 60, 15, 12, 30, 60, 15, 60, 6, 60, 15, 60, 30, 12, 15, 60, 30, 60, 3, 60, 30, 60, 15, 12, 30, 60, 15, 60, 6, 60, 15, 60, 30, 12, 15, 60, 30, 60, 3, 60, 30, 60, 15, 12, 30, 60, 15, 60, 6, 60, 15, 60, 30, 12, 15, 60, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60, 5, 60, 30, 20, 15, 60, 10, 60, 15, 20, 30, 60]
        end
        res[:orders] = z[res[:indexclasses]]
        res[:classparams] = res[:classnames]
        return res
    end)
chevieset(:G4_22, :ParabolicRepresentatives, function (ST, s)
        local l
        if s == 0
            return [[]]
        elseif s == 1
            return filter((x->begin
                            length(x) == 1
                        end), ((chevieget(:G4_22, :ClassInfo))(ST))[:classtext])
        else
            return [1:length((chevieget(:G4_22, :GeneratingRoots))(ST))]
        end
    end)
chevieset(:G4_22, :CharInfo, function (ST,)
        local res
        res = Dict{Symbol, Any}()
        if ST == 4
            res[:charparams] = [[1, 0], [1, 4], [1, 8], [2, 5], [2, 3], [2, 1], [3, 2]]
            res[:extRefl] = [1, 6, 2]
            res[:indexchars] = Concatenation(1:3, 34:37)
            res[:a] = [0, 4, 4, 4, 1, 1, 2]
            res[:A] = [0, 8, 8, 8, 5, 5, 6]
        elseif ST == 5
            res[:charparams] = [[1, 0], [1, 4, 1], [1, 8, 1], [1, 4, 2], [1, 8, 2], [1, 12, 1], [1, 8, 3], [1, 12, 2], [1, 16], [2, 9], [2, 7, 1], [2, 5, 1], [2, 7, 2], [2, 5, 2], [2, 3, 1], [2, 5, 3], [2, 3, 2], [2, 1], [3, 4], [3, 2], [3, 6]]
            res[:extRefl] = [1, 18, 5]
            res[:indexchars] = Concatenation(10:27, [37, 39, 41])
            res[:hgal] = perm"(19,21,20)"
            res[:a] = [0, 1, 1, 1, 8, 8, 1, 8, 8, 8, 4, 4, 4, 1, 1, 4, 1, 1, 8 // 3, 8 // 3, 8 // 3]
            res[:A] = [0, 11, 11, 11, 16, 16, 11, 16, 16, 16, 14, 14, 14, 11, 11, 14, 11, 11, 40 // 3, 40 // 3, 40 // 3]
        elseif ST == 6
            res[:charparams] = [[1, 0], [1, 4], [1, 8], [1, 6], [1, 10], [1, 14], [2, 5, 2], [2, 3, 2], [2, 3, 1], [2, 7], [2, 1], [2, 5, 1], [3, 2], [3, 4]]
            res[:extRefl] = [1, 11, 5]
            res[:indexchars] = Concatenation(1:3, 10:12, [19, 35, 33, 28, 24, 26, 37, 38])
            res[:hgal] = perm"(7,10)"
            res[:a] = [0, 1, 1, 1, 10, 10, 5, 1, 1, 5, 1, 1, 1, 4]
            res[:A] = [0, 11, 11, 11, 14, 14, 13, 11, 11, 13, 11, 11, 11, 12]
        elseif ST == 7
            res[:charparams] = [[1, 0], [1, 4, 1], [1, 8, 1], [1, 4, 2], [1, 8, 2], [1, 12, 1], [1, 8, 3], [1, 12, 2], [1, 16], [1, 6], [1, 10, 1], [1, 14, 1], [1, 10, 2], [1, 14, 2], [1, 18, 1], [1, 14, 3], [1, 18, 2], [1, 22], [2, 9, 1], [2, 7, 1], [2, 11, 1], [2, 7, 2], [2, 11, 2], [2, 9, 2], [2, 11, 3], [2, 9, 3], [2, 7, 3], [2, 15], [2, 13, 1], [2, 5, 1], [2, 13, 2], [2, 5, 2], [2, 3, 1], [2, 5, 3], [2, 3, 2], [2, 1], [3, 10], [3, 4], [3, 2], [3, 8], [3, 6], [3, 12]]
            res[:extRefl] = [1, 36, 14]
            res[:indexchars] = 1:42
            res[:hgal] = perm"(19,28)(23,32)(24,33)(26,35)(27,36)(37,39,41)"
            res[:a] = [0, 1, 1, 1, 4, 4, 1, 4, 4, 1, 4, 4, 4, 14, 14, 4, 14, 14, 9, 4, 4, 4, 3 // 2, 3 // 2, 4, 3 // 2, 3 // 2, 9, 4, 4, 4, 3 // 2, 3 // 2, 4, 3 // 2, 3 // 2, 7 // 3, 4, 7 // 3, 4, 7 // 3, 4]
            res[:A] = [0, 11, 11, 11, 20, 20, 11, 20, 20, 11, 20, 20, 20, 22, 22, 20, 22, 22, 21, 20, 20, 20, 33 // 2, 33 // 2, 20, 33 // 2, 33 // 2, 21, 20, 20, 20, 33 // 2, 33 // 2, 20, 33 // 2, 33 // 2, 53 // 3, 20, 53 // 3, 20, 53 // 3, 20]
        elseif ST == 8
            res[:charparams] = [[1, 0], [1, 6], [1, 12], [1, 18], [2, 1], [2, 4], [2, 7, 1], [2, 7, 2], [2, 10], [2, 13], [3, 8], [3, 6], [3, 4], [3, 2], [4, 5], [4, 3]]
            res[:extRefl] = [1, 5, 2]
            res[:indexchars] = Concatenation(21:30, 81:84, [89, 86])
            res[:hgal] = perm"(15,16)"
            res[:a] = [0, 6, 6, 6, 1, 1, 1, 6, 6, 6, 6, 2, 2, 2, 3, 3]
            res[:A] = [0, 18, 18, 18, 11, 11, 11, 18, 18, 18, 18, 14, 14, 14, 15, 15]
        elseif ST == 9
            res[:charparams] = [[1, 0], [1, 6], [1, 12, 1], [1, 18, 1], [1, 12, 2], [1, 18, 2], [1, 24], [1, 30], [2, 5], [2, 4], [2, 7, 1], [2, 7, 2], [2, 10], [2, 13], [2, 1], [2, 14], [2, 17], [2, 11, 1], [2, 11, 2], [2, 8], [3, 8, 1], [3, 6, 1], [3, 4], [3, 2], [3, 12], [3, 10], [3, 8, 2], [3, 6, 2], [4, 9], [4, 7], [4, 3], [4, 5]]
            res[:extRefl] = [1, 15, 6]
            res[:indexchars] = Concatenation(1:4, 21:26, 57:59, [54, 55, 35, 36, 39, 40, 44], 77:85, [88, 93, 95])
            res[:hgal] = perm"(12,19)(13,16)(14,17)(29,31,32,30)"
            res[:a] = [0, 1, 1, 1, 1, 18, 18, 18, 1, 1, 1, 15 // 2, 15 // 2, 15 // 2, 1, 15 // 2, 15 // 2, 1, 15 // 2, 1, 5, 1, 1, 1, 11, 5, 5, 5, 15 // 4, 15 // 4, 15 // 4, 15 // 4]
            res[:A] = [0, 23, 23, 23, 23, 30, 30, 30, 23, 23, 23, 57 // 2, 57 // 2, 57 // 2, 23, 57 // 2, 57 // 2, 23, 57 // 2, 23, 27, 23, 23, 23, 29, 27, 27, 27, 105 // 4, 105 // 4, 105 // 4, 105 // 4]
        elseif ST == 10
            res[:charparams] = [[1, 0], [1, 6], [1, 12], [1, 18], [1, 8], [1, 14], [1, 20], [1, 26], [1, 16], [1, 22], [1, 28], [1, 34], [2, 9], [2, 12], [2, 15, 1], [2, 15, 2], [2, 18], [2, 21], [2, 5], [2, 8], [2, 11, 1], [2, 11, 2], [2, 14], [2, 17], [2, 1], [2, 4], [2, 7, 1], [2, 7, 2], [2, 10], [2, 13], [3, 8, 2], [3, 14], [3, 8, 1], [3, 2], [3, 16], [3, 10, 2], [3, 4], [3, 10, 1], [3, 12, 2], [3, 6, 2], [3, 12, 1], [3, 6, 1], [4, 9], [4, 11], [4, 7], [4, 3], [4, 5], [4, 13]]
            res[:extRefl] = [1, 25, 6]
            res[:indexchars] = Concatenation(13:42, 65:72, 77:79, 84:90)
            res[:hgal] = perm"(31,35,39)(32,40,36)(33,41,37)(34,42,38)(43,46)"
            res[:a] = [0, 1, 1, 1, 1, 14, 14, 14, 1, 14, 14, 14, 5, 5, 5, 14, 14, 14, 1, 1, 1, 5, 5, 5, 1, 1, 1, 5, 5, 5, 8, 3, 3, 3, 8, 3, 3, 3, 8, 3, 3, 3, 5 // 2, 5, 5, 5 // 2, 5, 5]
            res[:A] = [0, 23, 23, 23, 23, 34, 34, 34, 23, 34, 34, 34, 31, 31, 31, 34, 34, 34, 23, 23, 23, 31, 31, 31, 23, 23, 23, 31, 31, 31, 32, 29, 29, 29, 32, 29, 29, 29, 32, 29, 29, 29, 55 // 2, 31, 31, 55 // 2, 31, 31]
        elseif ST == 11
            res[:charparams] = [[1, 0], [1, 6], [1, 12, 1], [1, 18, 1], [1, 8], [1, 14], [1, 20, 1], [1, 26, 1], [1, 16], [1, 22], [1, 28, 1], [1, 34, 1], [1, 12, 2], [1, 18, 2], [1, 24], [1, 30], [1, 20, 2], [1, 26, 2], [1, 32], [1, 38], [1, 28, 2], [1, 34, 2], [1, 40], [1, 46], [2, 9], [2, 12], [2, 27, 1], [2, 27, 2], [2, 18], [2, 33], [2, 5], [2, 20], [2, 11, 1], [2, 11, 2], [2, 14], [2, 29], [2, 1], [2, 4], [2, 7, 1], [2, 7, 2], [2, 22], [2, 25], [2, 21, 1], [2, 24], [2, 15, 1], [2, 15, 2], [2, 30], [2, 21, 2], [2, 17, 1], [2, 8], [2, 23, 1], [2, 23, 2], [2, 26], [2, 17, 2], [2, 13, 1], [2, 16], [2, 19, 1], [2, 19, 2], [2, 10], [2, 13, 2], [3, 8, 1], [3, 14, 1], [3, 20, 1], [3, 2], [3, 20, 2], [3, 26], [3, 8, 2], [3, 14, 2], [3, 16, 1], [3, 22, 1], [3, 4], [3, 10, 1], [3, 28], [3, 10, 2], [3, 16, 2], [3, 22, 2], [3, 24, 1], [3, 6, 2], [3, 12, 1], [3, 18, 1], [3, 12, 2], [3, 18, 2], [3, 24, 2], [3, 6, 1], [4, 21], [4, 23], [4, 19], [4, 3], [4, 5], [4, 25], [4, 9], [4, 11], [4, 7], [4, 15], [4, 17], [4, 13]]
            res[:extRefl] = [1, 37, 18]
            res[:indexchars] = 1:96
            res[:hgal] = perm"(28,46)(29,47)(30,48)(31,49)(32,50)(33,51)(37,55)(38,56)(39,57)(62,70,78)(63,71,79)(64,72,80)(65,81,73)(85,88,91,94)"
            res[:a] = [0, 1, 1, 1, 1, 5, 5, 5, 1, 5, 5, 5, 1, 5, 5, 5, 5, 26, 26, 26, 5, 26, 26, 26, 5, 5, 5, 15, 15, 15, 3 // 2, 3 // 2, 3 // 2, 5, 5, 5, 3 // 2, 3 // 2, 3 // 2, 5, 5, 5, 5, 5, 5, 15, 15, 15, 3 // 2, 3 // 2, 3 // 2, 5, 5, 5, 3 // 2, 3 // 2, 3 // 2, 5, 5, 5, 5, 7 // 3, 7 // 3, 7 // 3, 12, 5, 5, 5, 5, 7 // 3, 7 // 3, 7 // 3, 12, 5, 5, 5, 5, 7 // 3, 7 // 3, 7 // 3, 12, 5, 5, 5, 13 // 4, 5, 5, 13 // 4, 5, 5, 13 // 4, 5, 5, 13 // 4, 5, 5]
            res[:A] = [0, 23, 23, 23, 23, 43, 43, 43, 23, 43, 43, 43, 23, 43, 43, 43, 43, 46, 46, 46, 43, 46, 46, 46, 43, 43, 43, 45, 45, 45, 69 // 2, 69 // 2, 69 // 2, 43, 43, 43, 69 // 2, 69 // 2, 69 // 2, 43, 43, 43, 43, 43, 43, 45, 45, 45, 69 // 2, 69 // 2, 69 // 2, 43, 43, 43, 69 // 2, 69 // 2, 69 // 2, 43, 43, 43, 43, 113 // 3, 113 // 3, 113 // 3, 44, 43, 43, 43, 43, 113 // 3, 113 // 3, 113 // 3, 44, 43, 43, 43, 43, 113 // 3, 113 // 3, 113 // 3, 44, 43, 43, 43, 155 // 4, 43, 43, 155 // 4, 43, 43, 155 // 4, 43, 43, 155 // 4, 43, 43]
        elseif ST == 12
            res[:charparams] = [[1, 0], [1, 12], [2, 1], [2, 4], [2, 5], [3, 2], [3, 6], [4, 3]]
            res[:extRefl] = [1, 3, 2]
            res[:indexchars] = [1, 13, 25, 26, 30, 61, 65, 85]
            res[:hgal] = perm"(3,5)"
            res[:a] = [0, 12, 2, 2, 2, 1, 5, 2]
            res[:A] = [0, 12, 10, 10, 10, 7, 11, 10]
        elseif ST == 13
            res[:charparams] = [[1, 0], [1, 6], [1, 12], [1, 18], [2, 7, 1], [2, 4], [2, 1], [2, 5], [2, 10], [2, 7, 2], [3, 4], [3, 2], [3, 8], [3, 6], [4, 3], [4, 5]]
            res[:extRefl] = [1, 7, 4]
            res[:indexchars] = [1, 2, 13, 14, 37, 26, 27, 28, 29, 30, 61, 62, 65, 66, 85, 86]
            res[:hgal] = perm"( 5, 8,10, 7)(15,16)"
            res[:a] = [0, 1, 7, 18, 5 // 2, 1, 5 // 2, 5 // 2, 7, 5 // 2, 2, 1, 7, 4, 5 // 2, 5 // 2]
            res[:A] = [0, 11, 17, 18, 31 // 2, 11, 31 // 2, 31 // 2, 17, 31 // 2, 14, 11, 17, 16, 31 // 2, 31 // 2]
        elseif ST == 14
            res[:charparams] = [[1, 0], [1, 8], [1, 16], [1, 12], [1, 20], [1, 28], [2, 15], [2, 12], [2, 9], [2, 11], [2, 8], [2, 5], [2, 7], [2, 4], [2, 1], [3, 2], [3, 8], [3, 4], [3, 10], [3, 6, 1], [3, 6, 2], [4, 3], [4, 5], [4, 7]]
            res[:extRefl] = [1, 15, 5]
            res[:indexchars] = Concatenation([1, 5, 9, 13, 17, 21, 25, 26], 30:33, 37:39, [62, 65], [69, 73, 77, 81], 85:87)
            res[:hgal] = perm"( 7, 9)(17,21,19)"
            res[:a] = [0, 1, 1, 1, 20, 20, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 6, 1, 6, 1, 6, 1, 5, 5]
            res[:A] = [0, 23, 23, 23, 28, 28, 27, 27, 27, 23, 23, 23, 23, 23, 23, 23, 26, 23, 26, 23, 26, 23, 25, 25]
        elseif ST == 15
            res[:charparams] = [[1, 0], [1, 6], [1, 8], [1, 14], [1, 16], [1, 22], [1, 12], [1, 18], [1, 20], [1, 26], [1, 28], [1, 34], [2, 9], [2, 12], [2, 15, 1], [2, 15, 2], [2, 18], [2, 21], [2, 5], [2, 8], [2, 11, 2], [2, 11, 1], [2, 14], [2, 17], [2, 1], [2, 4], [2, 7, 2], [2, 7, 1], [2, 10], [2, 13], [3, 8, 1], [3, 2], [3, 8, 2], [3, 14], [3, 4], [3, 10, 1], [3, 16], [3, 10, 2], [3, 12, 1], [3, 6, 1], [3, 12, 2], [3, 6, 2], [4, 9], [4, 11], [4, 7], [4, 3], [4, 5], [4, 13]]
            res[:extRefl] = [1, 25, 10]
            res[:indexchars] = Concatenation(3:6, [9, 10], 15:18, 23:42, [61], 64:66, 71:74, 79:82, 85:90)
            res[:hgal] = perm"(13,16,18,15)(19,22,24,21)(25,28,30,27)(31,39,35)(32,36,40)(33,37,41)(43,46)"
            res[:a] = [0, 1, 1, 5, 1, 5, 1, 5, 15, 26, 15, 26, 19 // 2, 5, 19 // 2, 19 // 2, 15, 19 // 2, 2, 1, 2, 2, 5, 2, 2, 1, 2, 2, 5, 2, 3, 5 // 3, 8, 5, 3, 5 // 3, 8, 5, 3, 5 // 3, 8, 5, 2, 5, 5, 2, 5, 5]
            res[:A] = [0, 11, 23, 31, 23, 31, 23, 31, 33, 34, 33, 34, 65 // 2, 31, 65 // 2, 65 // 2, 33, 65 // 2, 28, 23, 28, 28, 31, 28, 28, 23, 28, 28, 31, 28, 29, 79 // 3, 32, 31, 29, 79 // 3, 32, 31, 29, 79 // 3, 32, 31, 28, 31, 31, 28, 31, 31]
        elseif ST == 16
            res[:indexchars] = Concatenation(1:5, 81:100, 151:155, 166:170, [211, 217, 228, 229], 240:245)
            res[:extRefl] = [1, 6, 2]
            res[:charparams] = [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [2, 1], [2, 7], [2, 13, 1], [2, 19, 1], [2, 13, 2], [2, 19, 2], [2, 25, 2], [2, 25, 1], [2, 31], [2, 37], [3, 2], [3, 6], [3, 10, 2], [3, 10, 1], [3, 14, 1], [3, 18, 1], [3, 14, 2], [3, 18, 2], [3, 22], [3, 26], [4, 15], [4, 17], [4, 9], [4, 11], [4, 3], [4, 20], [4, 12], [4, 14], [4, 6], [4, 8], [5, 12], [5, 4], [5, 16], [5, 8], [5, 10], [6, 5], [6, 7], [6, 9], [6, 11], [6, 13]]
            res[:hgal] = perm"(27,32)(28,33)(29,34)(30,35)(36,37,38,39,40)"
            res[:a] = [0, 12, 12, 12, 12, 1, 1, 1, 1, 12, 12, 12, 12, 12, 12, 2, 2, 2, 2, 2, 2, 12, 12, 12, 12, 12, 7 // 2, 7 // 2, 7 // 2, 7 // 2, 12, 7 // 2, 7 // 2, 7 // 2, 7 // 2, 24 // 5, 24 // 5, 24 // 5, 24 // 5, 24 // 5, 2, 6, 6, 6, 6]
            res[:A] = [0, 48, 48, 48, 48, 29, 29, 29, 29, 48, 48, 48, 48, 48, 48, 38, 38, 38, 38, 38, 38, 48, 48, 48, 48, 48, 83 // 2, 83 // 2, 83 // 2, 83 // 2, 48, 83 // 2, 83 // 2, 83 // 2, 83 // 2, 216 // 5, 216 // 5, 216 // 5, 216 // 5, 216 // 5, 38, 44, 44, 44, 44]
        elseif ST == 17
            res[:indexchars] = Concatenation(11:20, [71, 32, 33, 84, 35, 86, 37, 38, 79, 40, 41, 62, 67, 68, 49, 70], [63, 54, 65, 56], 91:110, 151:155, 171:175, 181:185, 206:211, [214, 219, 220, 223, 226, 229, 232, 235, 238], 241:250)
            res[:extRefl] = [1, 21, 7]
            res[:charparams] = [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 30], [1, 42], [1, 54], [1, 66], [1, 78], [2, 11], [2, 17], [2, 13, 1], [2, 19, 1], [2, 13, 2], [2, 19, 2], [2, 25, 2], [2, 25, 1], [2, 31], [2, 37], [2, 1], [2, 7], [2, 35, 2], [2, 35, 1], [2, 41], [2, 47], [2, 23, 1], [2, 29, 1], [2, 23, 2], [2, 29, 2], [3, 2], [3, 6], [3, 10, 2], [3, 10, 1], [3, 14, 1], [3, 18, 1], [3, 14, 2], [3, 18, 2], [3, 22], [3, 26], [3, 12], [3, 16], [3, 20, 2], [3, 20, 1], [3, 24, 1], [3, 28, 1], [3, 24, 2], [3, 28, 2], [3, 32], [3, 36], [4, 15], [4, 27], [4, 19], [4, 11], [4, 3], [4, 30], [4, 22], [4, 14], [4, 6], [4, 18], [4, 25], [4, 17], [4, 9], [4, 21], [4, 13], [4, 20], [4, 12], [4, 24], [4, 16], [4, 8], [5, 12], [5, 22], [5, 4], [5, 14], [5, 16], [5, 26], [5, 8], [5, 18], [5, 20], [5, 10], [6, 15], [6, 17], [6, 19], [6, 11], [6, 13], [6, 5], [6, 7], [6, 9], [6, 21], [6, 23]]
            res[:hgal] = perm"(15,29)(16,30)(17,23)(18,24)(19,25)(20,26)(51,61)(52,67,62,57)(53,68,63,58)(54,69,64,59)(55,70,65,60)(56,66)(71,79,77,75,73)(72,78,74,80,76)(81,86)"
            res[:a] = [0, 1, 1, 1, 1, 1, 42, 42, 42, 42, 1, 1, 1, 1, 14, 14, 14, 14, 14, 14, 1, 1, 14, 14, 14, 14, 1, 1, 14, 14, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 23, 23, 23, 23, 14, 19 // 4, 19 // 4, 19 // 4, 19 // 4, 14, 19 // 4, 19 // 4, 19 // 4, 19 // 4, 14, 19 // 4, 19 // 4, 19 // 4, 19 // 4, 14, 19 // 4, 19 // 4, 19 // 4, 19 // 4, 19 // 5, 10, 19 // 5, 10, 19 // 5, 10, 19 // 5, 10, 19 // 5, 10, 7 // 2, 7, 7, 7, 7, 7 // 2, 7, 7, 7, 7]
            res[:A] = [0, 59, 59, 59, 59, 59, 78, 78, 78, 78, 59, 59, 59, 59, 76, 76, 76, 76, 76, 76, 59, 59, 76, 76, 76, 76, 59, 59, 76, 76, 59, 59, 59, 59, 59, 59, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 77, 77, 77, 77, 76, 281 // 4, 281 // 4, 281 // 4, 281 // 4, 76, 281 // 4, 281 // 4, 281 // 4, 281 // 4, 76, 281 // 4, 281 // 4, 281 // 4, 281 // 4, 76, 281 // 4, 281 // 4, 281 // 4, 281 // 4, 341 // 5, 74, 341 // 5, 74, 341 // 5, 74, 341 // 5, 74, 341 // 5, 74, 133 // 2, 73, 73, 73, 73, 133 // 2, 73, 73, 73, 73]
        elseif ST == 18
            res[:indexchars] = Concatenation(1:15, 61:100, 111:120, 131:134, 135:140, 181:211, 215:219, 223:225, [229, 230, 231, 235], 239:255)
            res[:extRefl] = [1, 36, 7]
            res[:charparams] = [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 20], [1, 32], [1, 44], [1, 56], [1, 68], [1, 40], [1, 52], [1, 64], [1, 76], [1, 88], [2, 21], [2, 27], [2, 33, 1], [2, 39, 1], [2, 33, 2], [2, 39, 2], [2, 45, 2], [2, 45, 1], [2, 51], [2, 57], [2, 11], [2, 17], [2, 23, 1], [2, 29, 1], [2, 23, 2], [2, 29, 2], [2, 35, 2], [2, 35, 1], [2, 41], [2, 47], [2, 1], [2, 7], [2, 13, 1], [2, 19, 1], [2, 13, 2], [2, 19, 2], [2, 25, 2], [2, 25, 1], [2, 31], [2, 37], [3, 2], [3, 26, 1], [3, 20, 2], [3, 20, 1], [3, 14, 1], [3, 38, 1], [3, 14, 2], [3, 38, 2], [3, 32], [3, 26, 2], [3, 22, 1], [3, 16], [3, 10, 2], [3, 10, 1], [3, 34, 1], [3, 28, 1], [3, 34, 2], [3, 28, 2], [3, 22, 2], [3, 46], [3, 12], [3, 6], [3, 30, 2], [3, 30, 1], [3, 24, 1], [3, 18, 1], [3, 24, 2], [3, 18, 2], [3, 42], [3, 36], [4, 15], [4, 27], [4, 9], [4, 21], [4, 3], [4, 35], [4, 17], [4, 29], [4, 11], [4, 23], [4, 25], [4, 37], [4, 19], [4, 31], [4, 13], [4, 30], [4, 12], [4, 24], [4, 6], [4, 18], [4, 20], [4, 32], [4, 14], [4, 26], [4, 8], [4, 40], [4, 22], [4, 34], [4, 16], [4, 28], [5, 12], [5, 32], [5, 22], [5, 24], [5, 14], [5, 4], [5, 36], [5, 26], [5, 16], [5, 18], [5, 8], [5, 28], [5, 30], [5, 20], [5, 10], [6, 25], [6, 7], [6, 19], [6, 31], [6, 13], [6, 5], [6, 17], [6, 29], [6, 11], [6, 23], [6, 15], [6, 27], [6, 9], [6, 21], [6, 33]]
            res[:hgal] = perm"( 46, 66, 56)( 47, 67, 57)( 48, 68, 58)( 49, 69, 59)( 50, 70, 60)( 51, 71, 61)( 52, 62, 72)( 53, 63, 73)( 54, 64, 74)( 55, 65, 75)( 77, 92)( 78, 93)( 79, 94)( 80, 95)( 81, 96)( 86,101)(106,112,118,109,115)(107,116,110,119,113)(108,117,111,120,114)(121,126,131)"
            res[:a] = [0, 1, 1, 1, 1, 1, 32, 32, 32, 32, 1, 32, 32, 32, 32, 7, 7, 7, 7, 32, 32, 32, 32, 32, 32, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 44 // 3, 44 // 3, 44 // 3, 44 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 44 // 3, 44 // 3, 44 // 3, 44 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 10 // 3, 44 // 3, 44 // 3, 44 // 3, 44 // 3, 7, 5 // 2, 5 // 2, 5 // 2, 5 // 2, 19, 7, 7, 7, 7, 19, 7, 7, 7, 7, 7, 5 // 2, 5 // 2, 5 // 2, 5 // 2, 19, 7, 7, 7, 7, 19, 7, 7, 7, 7, 12, 5, 5, 12, 5, 5, 12, 5, 5, 12, 5, 5, 12, 5, 5, 10 // 3, 7, 7, 7, 7, 10 // 3, 7, 7, 7, 7, 10 // 3, 7, 7, 7, 7]
            res[:A] = [0, 59, 59, 59, 59, 59, 88, 88, 88, 88, 59, 88, 88, 88, 88, 83, 83, 83, 83, 88, 88, 88, 88, 88, 88, 59, 59, 59, 59, 83, 83, 83, 83, 83, 83, 59, 59, 59, 59, 83, 83, 83, 83, 83, 83, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 256 // 3, 256 // 3, 256 // 3, 256 // 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 256 // 3, 256 // 3, 256 // 3, 256 // 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 230 // 3, 256 // 3, 256 // 3, 256 // 3, 256 // 3, 83, 145 // 2, 145 // 2, 145 // 2, 145 // 2, 86, 83, 83, 83, 83, 86, 83, 83, 83, 83, 83, 145 // 2, 145 // 2, 145 // 2, 145 // 2, 86, 83, 83, 83, 83, 86, 83, 83, 83, 83, 84, 79, 79, 84, 79, 79, 84, 79, 79, 84, 79, 79, 84, 79, 79, 230 // 3, 83, 83, 83, 83, 230 // 3, 83, 83, 83, 83, 230 // 3, 83, 83, 83, 83]
        elseif ST == 19
            res[:indexchars] = 1:270
            res[:extRefl] = [1, 81, 22]
            res[:charparams] = [[1, 0], [1, 12], [1, 24], [1, 36], [1, 48], [1, 20], [1, 32], [1, 44], [1, 56], [1, 68], [1, 40], [1, 52], [1, 64], [1, 76], [1, 88], [1, 30], [1, 42], [1, 54], [1, 66], [1, 78], [1, 50], [1, 62], [1, 74], [1, 86], [1, 98], [1, 70], [1, 82], [1, 94], [1, 106], [1, 118], [2, 51, 1], [2, 57, 1], [2, 33, 1], [2, 39, 1], [2, 33, 2], [2, 39, 2], [2, 45, 2], [2, 45, 1], [2, 51, 2], [2, 57, 2], [2, 41, 1], [2, 47, 1], [2, 53, 1], [2, 59, 1], [2, 53, 2], [2, 59, 2], [2, 35, 2], [2, 35, 1], [2, 41, 2], [2, 47, 2], [2, 31, 1], [2, 37, 1], [2, 43, 1], [2, 49, 1], [2, 43, 2], [2, 49, 2], [2, 55, 2], [2, 55, 1], [2, 31, 2], [2, 37, 2], [2, 21], [2, 27], [2, 63, 1], [2, 69, 1], [2, 63, 2], [2, 69, 2], [2, 75, 1], [2, 75, 2], [2, 81], [2, 87], [2, 11], [2, 17], [2, 23, 1], [2, 29, 1], [2, 23, 2], [2, 29, 2], [2, 65, 2], [2, 65, 1], [2, 71], [2, 77], [2, 1], [2, 7], [2, 13, 1], [2, 19, 1], [2, 13, 2], [2, 19, 2], [2, 25, 2], [2, 25, 1], [2, 61], [2, 67], [3, 2], [3, 26, 1], [3, 50, 2], [3, 50, 1], [3, 14, 1], [3, 38, 1], [3, 14, 2], [3, 38, 2], [3, 62], [3, 26, 2], [3, 32, 1], [3, 56, 1], [3, 20, 2], [3, 20, 1], [3, 44, 1], [3, 68, 1], [3, 44, 2], [3, 68, 2], [3, 32, 2], [3, 56, 2], [3, 22, 1], [3, 46, 1], [3, 10, 2], [3, 10, 1], [3, 34, 1], [3, 58, 1], [3, 34, 2], [3, 58, 2], [3, 22, 2], [3, 46, 2], [3, 52, 1], [3, 16], [3, 40, 2], [3, 40, 1], [3, 64, 1], [3, 28, 1], [3, 64, 2], [3, 28, 2], [3, 52, 2], [3, 76], [3, 42, 1], [3, 6], [3, 30, 2], [3, 30, 1], [3, 54, 1], [3, 18, 1], [3, 54, 2], [3, 18, 2], [3, 42, 2], [3, 66], [3, 12], [3, 36, 1], [3, 60, 2], [3, 60, 1], [3, 24, 1], [3, 48, 1], [3, 24, 2], [3, 48, 2], [3, 72], [3, 36, 2], [4, 15], [4, 27], [4, 39], [4, 51], [4, 3], [4, 35], [4, 47], [4, 59], [4, 11], [4, 23], [4, 55], [4, 67], [4, 19], [4, 31], [4, 43], [4, 30], [4, 42], [4, 54], [4, 6], [4, 18], [4, 50], [4, 62], [4, 14], [4, 26], [4, 38], [4, 70], [4, 22], [4, 34], [4, 46], [4, 58], [4, 45], [4, 57], [4, 9], [4, 21], [4, 33], [4, 65], [4, 17], [4, 29], [4, 41], [4, 53], [4, 25], [4, 37], [4, 49], [4, 61], [4, 13], [4, 60], [4, 12], [4, 24], [4, 36], [4, 48], [4, 20], [4, 32], [4, 44], [4, 56], [4, 8], [4, 40], [4, 52], [4, 64], [4, 16], [4, 28], [5, 12], [5, 32], [5, 52], [5, 42], [5, 62], [5, 22], [5, 24], [5, 44], [5, 4], [5, 54], [5, 14], [5, 34], [5, 36], [5, 56], [5, 16], [5, 66], [5, 26], [5, 46], [5, 48], [5, 8], [5, 28], [5, 18], [5, 38], [5, 58], [5, 60], [5, 20], [5, 40], [5, 30], [5, 50], [5, 10], [6, 25], [6, 7], [6, 49], [6, 61], [6, 43], [6, 35], [6, 17], [6, 59], [6, 11], [6, 53], [6, 45], [6, 27], [6, 9], [6, 21], [6, 63], [6, 55], [6, 37], [6, 19], [6, 31], [6, 13], [6, 5], [6, 47], [6, 29], [6, 41], [6, 23], [6, 15], [6, 57], [6, 39], [6, 51], [6, 33]]
            res[:hgal] = perm"( 35, 65)( 36, 66)( 37, 67)( 38, 68)( 39, 69)( 40, 70)( 41, 71)( 42, 72)( 43, 73)( 44, 74)( 51, 81)( 52, 82)( 53, 83)( 54, 84)( 91,111,131)( 92,112,132)( 93,113,133)( 94,114,134)( 95,115,135)( 96,116,136)(107,147,127)(108,148,128)(109,149,129)(110,150,130)(152,167,182,197)(153,168,183,198)(154,169,184,199)(155,170,185,200)(156,201,186,171)(161,206,191,176)(212,218,224,230,236)(213,219,225,231,237)(214,238,232,226,220)(241,246,251,256,261,266)"
            res[:a] = [0, 1, 1, 1, 1, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 62, 62, 62, 62, 7, 62, 62, 62, 62, 7, 7, 7, 7, 33, 33, 33, 33, 33, 33, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 7, 7, 7, 7, 7, 7, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 33, 33, 33, 33, 33, 33, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 7, 7, 7, 7, 7, 7, 3 // 2, 3 // 2, 3 // 2, 3 // 2, 7, 7, 7, 7, 7, 7, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 24, 24, 24, 24, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 24, 24, 24, 24, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7 // 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 24, 24, 24, 24, 7, 13 // 4, 13 // 4, 13 // 4, 13 // 4, 20, 7, 7, 7, 7, 20, 7, 7, 7, 7, 7, 13 // 4, 13 // 4, 13 // 4, 13 // 4, 20, 7, 7, 7, 7, 20, 7, 7, 7, 7, 7, 13 // 4, 13 // 4, 13 // 4, 13 // 4, 20, 7, 7, 7, 7, 20, 7, 7, 7, 7, 7, 13 // 4, 13 // 4, 13 // 4, 13 // 4, 20, 7, 7, 7, 7, 20, 7, 7, 7, 7, 7, 21 // 5, 21 // 5, 18, 7, 7, 7, 21 // 5, 21 // 5, 18, 7, 7, 7, 21 // 5, 21 // 5, 18, 7, 7, 7, 21 // 5, 21 // 5, 18, 7, 7, 7, 21 // 5, 21 // 5, 18, 7, 7, 31 // 6, 7, 7, 7, 7, 31 // 6, 7, 7, 7, 7, 31 // 6, 7, 7, 7, 7, 31 // 6, 7, 7, 7, 7, 31 // 6, 7, 7, 7, 7, 31 // 6, 7, 7, 7, 7]
            res[:A] = [0, 59, 59, 59, 59, 59, 113, 113, 113, 113, 59, 113, 113, 113, 113, 59, 113, 113, 113, 113, 113, 118, 118, 118, 118, 113, 118, 118, 118, 118, 113, 113, 113, 113, 117, 117, 117, 117, 117, 117, 177 // 2, 177 // 2, 177 // 2, 177 // 2, 113, 113, 113, 113, 113, 113, 177 // 2, 177 // 2, 177 // 2, 177 // 2, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 117, 117, 117, 117, 117, 117, 177 // 2, 177 // 2, 177 // 2, 177 // 2, 113, 113, 113, 113, 113, 113, 177 // 2, 177 // 2, 177 // 2, 177 // 2, 113, 113, 113, 113, 113, 113, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 116, 116, 116, 116, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 116, 116, 116, 116, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 293 // 3, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 116, 116, 116, 116, 113, 407 // 4, 407 // 4, 407 // 4, 407 // 4, 115, 113, 113, 113, 113, 115, 113, 113, 113, 113, 113, 407 // 4, 407 // 4, 407 // 4, 407 // 4, 115, 113, 113, 113, 113, 115, 113, 113, 113, 113, 113, 407 // 4, 407 // 4, 407 // 4, 407 // 4, 115, 113, 113, 113, 113, 115, 113, 113, 113, 113, 113, 407 // 4, 407 // 4, 407 // 4, 407 // 4, 115, 113, 113, 113, 113, 115, 113, 113, 113, 113, 113, 519 // 5, 519 // 5, 114, 113, 113, 113, 519 // 5, 519 // 5, 114, 113, 113, 113, 519 // 5, 519 // 5, 114, 113, 113, 113, 519 // 5, 519 // 5, 114, 113, 113, 113, 519 // 5, 519 // 5, 114, 113, 113, 629 // 6, 113, 113, 113, 113, 629 // 6, 113, 113, 113, 113, 629 // 6, 113, 113, 113, 113, 629 // 6, 113, 113, 113, 113, 629 // 6, 113, 113, 113, 113, 629 // 6, 113, 113, 113, 113]
        elseif ST == 20
            res[:indexchars] = Concatenation([1, 6, 11, 31, 32, 41, 42, 51, 52], [103, 104, 111, 112, 131, 132, 152, 156, 161, 167, 172, 176], 238:240, [241, 251, 246])
            res[:extRefl] = [1, 8, 2]
            res[:charparams] = [[1, 0], [1, 20], [1, 40], [2, 21], [2, 27], [2, 11], [2, 17], [2, 1], [2, 7], [3, 2], [3, 14], [3, 10, 1], [3, 10, 2], [3, 12], [3, 6], [4, 3], [4, 11], [4, 13], [4, 6], [4, 8], [4, 16], [5, 12], [5, 8], [5, 4], [6, 7], [6, 9], [6, 5]]
            res[:hgal] = perm"(10,12,14)(11,13,15)(17,20)(18,21)(25,26,27)"
            res[:a] = [0, 20, 20, 20, 20, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 1, 15 // 2, 15 // 2, 1, 15 // 2, 15 // 2, 10, 3, 3, 4, 4, 4]
            res[:A] = [0, 40, 40, 40, 40, 29, 29, 29, 29, 36, 36, 36, 36, 36, 36, 29, 75 // 2, 75 // 2, 29, 75 // 2, 75 // 2, 38, 33, 33, 36, 36, 36]
        elseif ST == 21
            res[:indexchars] = Concatenation(1:6 - 1:26, [65, 32, 35, 62, 41, 73, 43, 71, 84, 52, 82, 54, 91, 92, 101], [102, 111, 112, 121, 122, 131, 132, 141, 142, 151, 160, 161, 170, 171, 180, 181, 190, 191, 200], [201], 210:216, [241, 242, 246, 261, 251, 266])
            res[:extRefl] = [1, 18, 5]
            res[:charparams] = [[1, 0], [1, 20], [1, 40], [1, 30], [1, 50], [1, 70], [2, 39], [2, 33], [2, 21], [2, 27], [2, 29], [2, 23], [2, 17], [2, 11], [2, 19], [2, 13], [2, 7], [2, 1], [3, 2], [3, 14], [3, 20, 2], [3, 20, 1], [3, 10, 2], [3, 10, 1], [3, 28], [3, 16], [3, 18], [3, 6], [3, 12], [3, 24], [4, 3], [4, 11], [4, 19], [4, 6], [4, 14], [4, 22], [4, 9], [4, 17], [4, 13], [4, 12], [4, 8], [4, 16], [5, 12], [5, 8], [5, 4], [5, 18], [5, 14], [5, 10], [6, 13], [6, 7], [6, 11], [6, 5], [6, 9], [6, 15]]
            res[:hgal] = perm"(7, 9)(8,10)(21,29,25)(22,30,26)(32,41,38,35)(33,42,39,36)(49,54,52,50,53,51)"
            res[:a] = [0, 1, 1, 1, 50, 50, 21, 21, 21, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 37 // 3, 37 // 3, 1, 1, 37 // 3, 37 // 3, 1, 1, 37 // 3, 37 // 3, 1, 35 // 4, 35 // 4, 1, 35 // 4, 35 // 4, 1, 35 // 4, 35 // 4, 1, 35 // 4, 35 // 4, 7, 1, 1, 16, 7, 7, 35 // 6, 35 // 6, 35 // 6, 35 // 6, 35 // 6, 35 // 6]
            res[:A] = [0, 59, 59, 59, 70, 70, 69, 69, 69, 69, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 203 // 3, 203 // 3, 59, 59, 203 // 3, 203 // 3, 59, 59, 203 // 3, 203 // 3, 59, 265 // 4, 265 // 4, 59, 265 // 4, 265 // 4, 59, 265 // 4, 265 // 4, 59, 265 // 4, 265 // 4, 65, 59, 59, 68, 65, 65, 385 // 6, 385 // 6, 385 // 6, 385 // 6, 385 // 6, 385 // 6]
        elseif ST == 22
            res[:indexchars] = [1, 16, 65, 32, 35, 62, 91, 92, 101, 102, 151, 166, 181, 196, 211, 240, 241, 246]
            res[:extRefl] = [1, 5, 2]
            res[:charparams] = [[1, 0], [1, 30], [2, 11], [2, 13], [2, 1], [2, 7], [3, 2], [3, 6], [3, 12], [3, 16], [4, 3], [4, 6], [4, 9], [4, 8], [5, 4], [5, 10], [6, 7], [6, 5]]
            res[:hgal] = perm"( 3, 5)( 4, 6)(11,13)(12,14)(17,18)"
            res[:a] = [0, 30, 3, 3, 3, 3, 1, 1, 11, 11, 3, 3, 3, 3, 2, 8, 3, 3]
            res[:A] = [0, 30, 27, 27, 27, 27, 19, 19, 29, 29, 27, 27, 27, 27, 22, 28, 27, 27]
        end
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        res[:charnames] = map(exceptioCharName, res[:charparams])
        return res
    end)
chevieset(:G4_22, :HighestPowerFakeDegrees, function (ST,)
        return map((x->begin
                        x[length(x)]
                    end), (chevieget(:G4_22, :sparseFakeDegrees))(ST))
    end)
chevieset(:G4_22, :Generic, function (ST,)
        if ST in 4:7
            return 7
        elseif ST in 8:15
            return 11
        elseif ST in 16:22
            return 19
        end
    end)
chevieset(:G4_22, :SchurModels, function (ST,)
        if ST in 4:7
            return Dict{Symbol, Any}(:f1 => Dict{Symbol, Any}(:coeff => 1, :vcyc => [[[1, -1, 0, 0, 0, 0, 0, 0], 1], [[1, -1, 2, -1, -1, 2, -1, -1], 1], [[0, 0, 1, -1, 0, 0, 0, 0], 1], [[0, 0, 1, 0, -1, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1], 1], [[1, -1, 1, -1, 0, 1, -1, 0], 1], [[1, -1, 1, -1, 0, 1, 0, -1], 1], [[1, -1, 1, 0, -1, 1, -1, 0], 1], [[1, -1, 1, 0, -1, 1, 0, -1], 1]]), :f2 => Dict{Symbol, Any}(:coeff => 2, :factor => [0, 0, -1, 0, 1, 0, 0, 0], :root => [1, 1, 0, 1, 1, 0, 1, 1] // 2, :vcyc => [[[0, 0, 1, -1, 0, 0, 0, 0], 1], [[0, 0, -1, 0, 1, 0, 0, 0], 1], [[0, 0, 0, 0, 0, -1, 1, 0], 1], [[0, 0, 0, 0, 0, -1, 0, 1], 1], [[-1, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[-1, 0, 0, 0, -1, 0, -1, 0, 1], 1], [[-1, 0, 0, 0, -1, 0, 0, -1, 1], 1], [[0, -1, -1, 0, 0, -1, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, -1, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, -1, 1], 1]]), :f3 => Dict{Symbol, Any}(:coeff => 3, :root => [2, 1, 1, 1, 1, 1, 1, 1] // 3, :vcyc => [[[-1, 1, 0, 0, 0, 0, 0, 0], 1], [[1, 0, 1, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, -1], 1], [[1, 0, 0, 1, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 1, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 1, -1], 1], [[1, 0, 0, 0, 1, 1, 0, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 1, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 0, 1, -1], 1]]))
        elseif ST in 8:15
            return Dict{Symbol, Any}(:f1 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 1, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 1, 0, -1, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, -1, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[1, -1, 1, -1, 0, 1, -1, 0, 0], 1], [[1, -1, 1, -1, 0, 1, 0, -1, 0], 1], [[1, -1, 1, -1, 0, 1, 0, 0, -1], 1], [[1, -1, 1, 0, -1, 1, -1, 0, 0], 1], [[1, -1, 1, 0, -1, 1, 0, -1, 0], 1], [[1, -1, 1, 0, -1, 1, 0, 0, -1], 1], [[1, -1, 2, -1, -1, 2, -1, -1, 0], 1], [[1, -1, 2, -1, -1, 2, -1, 0, -1], 1], [[1, -1, 2, -1, -1, 2, 0, -1, -1], 1], [[2, -2, 2, -1, -1, 3, -1, -1, -1], 1]]), :f2 => Dict{Symbol, Any}(:coeff => -2, :factor => [0, 0, 0, 0, 0, -1, 1, 0, 0], :root => [1, 1, 0, 1, 1, 1, 1, 0, 0] // 2, :vcyc => [[[0, 0, -1, 1, 0, 0, 0, 0, 0], 1], [[0, 0, -1, 0, 1, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 1, -1, 0], 1], [[0, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[0, 0, -1, 1, 0, 1, 1, -1, -1], 1], [[0, 0, -1, 0, 1, 1, 1, -1, -1], 1], [[-1, 0, -1, 0, 0, 0, 0, -1, 0, 1], 1], [[-1, 0, -1, 0, 0, 0, 0, 0, -1, 1], 1], [[0, -1, -1, 0, 0, 0, 0, -1, 0, 1], 1], [[0, -1, -1, 0, 0, 0, 0, 0, -1, 1], 1], [[-1, 0, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[-1, 0, 0, 0, -1, 0, -1, 0, 0, 1], 1], [[0, -1, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, -1, 0, 0, 1], 1]]), :f3 => Dict{Symbol, Any}(:coeff => 3, :root => [2, 1, 1, 1, 1, 0, 1, 1, 1] // 3, :vcyc => [[[-1, 1, 0, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, -1, 0, 1, 0], 1], [[0, 0, 0, 0, 0, -1, 0, 0, 1], 1], [[0, 0, 0, 0, 0, -1, 1, 0, 0], 1], [[0, -1, -1, 0, 0, -1, 0, 0, 0, 1], 1], [[0, -1, 0, -1, 0, -1, 0, 0, 0, 1], 1], [[0, -1, 0, 0, -1, -1, 0, 0, 0, 1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 0, 1, -1], 1], [[1, 0, 0, 1, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 0, 1, -1], 1], [[1, 0, 0, 0, 1, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 0, 1, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 0, 0, 1, -1], 1]]), :f4 => Dict{Symbol, Any}(:coeff => -4, :root => [2, 2, 2, 1, 1, 1, 1, 1, 1] // 4, :vcyc => [[[0, 0, 1, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 1, 0, -1, 0, 0, 0, 0], 1], [[-1, 0, -1, 0, 0, -1, 0, 0, 0, 1], 1], [[0, -1, -1, 0, 0, -1, 0, 0, 0, 1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 0, 1, -1], 1], [[0, 1, 1, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 1, 1, 0, 0, 0, 0, 1, 0, -1], 1], [[0, 1, 1, 0, 0, 0, 0, 0, 1, -1], 1], [[1, 1, 1, 1, 0, 1, 1, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 1, -2], 1], [[1, 1, 1, 0, 1, 1, 1, 0, 0, -2], 1], [[1, 1, 1, 0, 1, 1, 0, 1, 0, -2], 1], [[1, 1, 1, 0, 1, 1, 0, 0, 1, -2], 1]]))
        elseif ST in 16:22
            return Dict{Symbol, Any}(:f1 => Dict{Symbol, Any}(:vcyc => [[[1, -1, 0, 0, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 1, -1, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 1, 0, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, -1, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[1, -1, 1, -1, 0, 1, -1, 0, 0, 0], 1], [[1, -1, 1, -1, 0, 1, 0, -1, 0, 0], 1], [[1, -1, 1, -1, 0, 1, 0, 0, -1, 0], 1], [[1, -1, 1, -1, 0, 1, 0, 0, 0, -1], 1], [[1, -1, 1, 0, -1, 1, -1, 0, 0, 0], 1], [[1, -1, 1, 0, -1, 1, 0, -1, 0, 0], 1], [[1, -1, 1, 0, -1, 1, 0, 0, -1, 0], 1], [[1, -1, 1, 0, -1, 1, 0, 0, 0, -1], 1], [[1, -1, 2, -1, -1, 2, -1, -1, 0, 0], 1], [[1, -1, 2, -1, -1, 2, -1, 0, -1, 0], 1], [[1, -1, 2, -1, -1, 2, -1, 0, 0, -1], 1], [[1, -1, 2, -1, -1, 2, 0, -1, -1, 0], 1], [[1, -1, 2, -1, -1, 2, 0, -1, 0, -1], 1], [[1, -1, 2, -1, -1, 2, 0, 0, -1, -1], 1], [[2, -2, 2, -1, -1, 3, -1, -1, -1, 0], 1], [[2, -2, 2, -1, -1, 3, -1, -1, 0, -1], 1], [[2, -2, 2, -1, -1, 3, -1, 0, -1, -1], 1], [[2, -2, 2, -1, -1, 3, 0, -1, -1, -1], 1], [[2, -2, 3, -2, -1, 4, -1, -1, -1, -1], 1], [[2, -2, 3, -1, -2, 4, -1, -1, -1, -1], 1], [[3, -3, 4, -2, -2, 4, -1, -1, -1, -1], 1]]), :f2 => Dict{Symbol, Any}(:coeff => -2, :root => [1, 1, 1, 1, 0, 1, 1, 0, 0, 0] // 2, :vcyc => [[[0, 0, 1, 0, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 1, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 1, -1, 0, 0], 1], [[0, 0, 0, 0, 0, 0, 1, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 0, 1, 0, -1, 1, 1, -1, -1, 0], 1], [[0, 0, 1, 0, -1, 1, 1, -1, 0, -1], 1], [[0, 0, 1, 0, -1, 1, 1, 0, -1, -1], 1], [[0, 0, 0, 1, -1, 1, 1, -1, -1, 0], 1], [[0, 0, 0, 1, -1, 1, 1, -1, 0, -1], 1], [[0, 0, 0, 1, -1, 1, 1, 0, -1, -1], 1], [[0, 0, 1, 1, -2, 1, 2, -1, -1, -1], 1], [[0, 0, 1, 1, -2, 2, 1, -1, -1, -1], 1], [[-1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[0, 1, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[-1, 0, 0, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[-1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 1], 1], [[-1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[-1, 0, 0, 0, -1, 1, 1, -1, -1, -1, 1], 1], [[0, -1, 0, 0, -1, 1, 1, -1, -1, -1, 1], 1]]), :f3 => Dict{Symbol, Any}(:coeff => 3, :root => [2, 1, 1, 1, 1, 1, 1, 1, 0, 0] // 3, :vcyc => [[[-1, 1, 0, 0, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 1, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 0, 1, -1, 0], 1], [[0, 0, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[1, -1, 0, 0, 0, 1, 1, 0, -1, -1], 1], [[1, -1, 0, 0, 0, 1, 0, 1, -1, -1], 1], [[1, -1, 0, 0, 0, 0, 1, 1, -1, -1], 1], [[0, -1, -1, 0, 0, 0, 0, 0, -1, 0, 1], 1], [[0, -1, -1, 0, 0, 0, 0, 0, 0, -1, 1], 1], [[0, -1, 0, -1, 0, 0, 0, 0, -1, 0, 1], 1], [[0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 0, 0, 1, 0, 0, 1, 0, 0, -1], 1], [[-1, -1, -1, -1, 0, 0, 0, 0, -1, -1, 2], 1], [[-1, -1, -1, 0, -1, 0, 0, 0, -1, -1, 2], 1], [[-1, -1, 0, -1, -1, 0, 0, 0, -1, -1, 2], 1]]), :f4 => Dict{Symbol, Any}(:coeff => -4, :root => [2, 2, 2, 1, 1, 1, 1, 1, 1, 0] // 4, :vcyc => [[[0, 0, -1, 1, 0, 0, 0, 0, 0, 0], 1], [[0, 0, 1, 0, -1, 0, 0, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[0, 0, 0, 0, 0, 0, 0, 0, 1, -1], 1], [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[0, 1, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[0, 1, 1, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[0, 1, 1, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[0, 1, 1, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[-1, 0, 0, -1, 0, 0, 0, 0, 0, -1, 1], 1], [[0, -1, 0, -1, 0, 0, 0, 0, 0, -1, 1], 1], [[-1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[-1, -1, -1, -1, 0, -1, -1, 0, 0, 0, 2], 1], [[-1, -1, -1, -1, 0, -1, 0, -1, 0, 0, 2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 0, 1, 1, 0, 0, -2], 1], [[-1, -1, -1, -1, 0, 0, -1, 0, -1, 0, 2], 1], [[-1, -1, -1, -1, 0, 0, 0, -1, -1, 0, 2], 1], [[-1, -1, 0, -1, -1, -1, 0, 0, 0, -1, 2], 1], [[-1, -1, 0, -1, -1, 0, -1, 0, 0, -1, 2], 1], [[-1, -1, 0, -1, -1, 0, 0, -1, 0, -1, 2], 1], [[-1, -1, 0, -1, -1, 0, 0, 0, -1, -1, 2], 1]]), :f5 => Dict{Symbol, Any}(:coeff => 5, :root => [3, 2, 2, 2, 1, 1, 1, 1, 1, 1] // 5, :vcyc => [[[1, -1, 0, 0, 0, 0, 0, 0, 0, 0], 1], [[0, 0, -1, 0, 1, 0, 0, 0, 0, 0], 1], [[0, 0, 0, -1, 1, 0, 0, 0, 0, 0], 1], [[1, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 1, 0, 0, 0, 0, 0, 0, 1, -1], 1], [[1, 0, 0, 1, 0, 1, 0, 0, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 1, 0, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 0, 1, 0, -1], 1], [[1, 0, 0, 1, 0, 0, 0, 0, 0, 1, -1], 1], [[0, -1, 0, 0, -1, -1, 0, 0, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, -1, 0, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 1], 1], [[0, -1, 0, 0, -1, 0, 0, 0, 0, -1, 1], 1], [[1, 1, 1, 1, 0, 1, 1, 0, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 1, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 0, 1, -2], 1], [[1, 1, 1, 1, 0, 0, 1, 1, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 0, 1, 0, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 0, 1, 0, 0, 1, -2], 1], [[1, 1, 1, 1, 0, 0, 0, 1, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 0, 0, 1, 0, 1, -2], 1], [[1, 1, 1, 1, 0, 0, 0, 0, 1, 1, -2], 1]]), :f6 => Dict{Symbol, Any}(:coeff => -6, :root => [3, 3, 2, 2, 2, 2, 1, 1, 1, 1] // 6, :vcyc => [[[0, 0, 0, 0, 0, 1, -1, 0, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, -1, 0, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, -1, 0], 1], [[0, 0, 0, 0, 0, 1, 0, 0, 0, -1], 1], [[-1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1], 1], [[-1, 0, 0, -1, 0, -1, 0, 0, 0, 0, 1], 1], [[-1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 1], 1], [[0, 1, 1, 0, 0, 1, 0, 0, 0, 0, -1], 1], [[0, 1, 0, 1, 0, 1, 0, 0, 0, 0, -1], 1], [[0, 1, 0, 0, 1, 1, 0, 0, 0, 0, -1], 1], [[1, 1, 1, 1, 0, 1, 1, 0, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 1, 0, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, -2], 1], [[1, 1, 1, 1, 0, 1, 0, 0, 0, 1, -2], 1], [[1, 1, 1, 0, 1, 1, 1, 0, 0, 0, -2], 1], [[1, 1, 1, 0, 1, 1, 0, 1, 0, 0, -2], 1], [[1, 1, 1, 0, 1, 1, 0, 0, 1, 0, -2], 1], [[1, 1, 1, 0, 1, 1, 0, 0, 0, 1, -2], 1], [[1, 1, 0, 1, 1, 1, 1, 0, 0, 0, -2], 1], [[1, 1, 0, 1, 1, 1, 0, 1, 0, 0, -2], 1], [[1, 1, 0, 1, 1, 1, 0, 0, 1, 0, -2], 1], [[1, 1, 0, 1, 1, 1, 0, 0, 0, 1, -2], 1], [[2, 1, 1, 1, 1, 1, 1, 1, 0, 0, -3], 1], [[2, 1, 1, 1, 1, 1, 1, 0, 1, 0, -3], 1], [[2, 1, 1, 1, 1, 1, 1, 0, 0, 1, -3], 1], [[2, 1, 1, 1, 1, 1, 0, 1, 1, 0, -3], 1], [[2, 1, 1, 1, 1, 1, 0, 1, 0, 1, -3], 1], [[2, 1, 1, 1, 1, 1, 0, 0, 1, 1, -3], 1]]))
        end
    end)
chevieset(:G4_22, :paramchars, function (ST,)
        if ST in 4:7
            return Concatenation(cartesian([1], 1:2, 1:3, 1:3), cartesian([2], 1:2, 1:3, 1:3), cartesian([3], 1:3, 1:2))
        elseif ST in 8:15
            return Concatenation(cartesian([1], 1:2, 1:3, 1:4), cartesian([2], 1:2, 1:3, 1:6), cartesian([3], 1:3, 1:2, 1:4), cartesian([4], 1:4, 1:3))
        elseif ST in 16:22
            return Concatenation(cartesian([1], 1:2, 1:3, 1:5), cartesian([2], 1:2, 1:3, 1:10), cartesian([3], 1:3, 1:2, 1:10), cartesian([4], 1:4, 1:3, 1:5), cartesian([5], 1:5, 1:2, 1:3), cartesian([6], 1:6, 1:5))
        end
    end)
chevieset(:G4_22, :SchurData, function (ST,)
        if ST in 4:7
            return map(function (char,)
                        local f
                        f(l, i) = begin
                                return Concatenation([l[i]], Drop(l, i))
                            end
                        if char[1] == 1
                            return Dict{Symbol, Any}(:name => "f1", :order => Concatenation(f([1, 2], char[2]), f(3:5, char[3]), f(6:8, char[4])))
                        elseif char[1] == 2
                            return Dict{Symbol, Any}(:name => "f2", :order => Concatenation([1, 2], f(3:5, char[3]), f(6:8, char[4])), :rootPower => (-1) ^ char[2])
                        elseif char[1] == 3
                            return Dict{Symbol, Any}(:name => "f3", :order => Concatenation(f(1:2, char[3]), 3:5, 6:8), :rootPower => E(3, char[2]))
                        end
                    end, (chevieget(:G4_22, :paramchars))(ST))
        elseif ST in 8:15
            return map(function (char,)
                        local f
                        f(l, i) = begin
                                return Concatenation([l[i]], Drop(l, i))
                            end
                        if char[1] == 1
                            return Dict{Symbol, Any}(:name => "f1", :order => Concatenation(f([1, 2], char[2]), f(3:5, char[3]), f(6:9, char[4])))
                        elseif char[1] == 2
                            return Dict{Symbol, Any}(:name => "f2", :order => Concatenation([1, 2], f(3:5, char[3]), 5 + (combinations(1:4, 2))[char[4]], 5 + Difference(1:4, (combinations(1:4, 2))[char[4]])), :rootPower => (-1) ^ char[2])
                        elseif char[1] == 3
                            return Dict{Symbol, Any}(:name => "f3", :order => Concatenation(f([1, 2], char[3]), 3:5, f(6:9, char[4])), :rootPower => E(3, char[2]))
                        elseif char[1] == 4
                            return Dict{Symbol, Any}(:name => "f4", :order => Concatenation([1, 2], f(3:5, char[3]), 6:9), :rootPower => E(4, char[2]))
                        end
                    end, (chevieget(:G4_22, :paramchars))(ST))
        elseif ST in 8:22
            return map(function (char,)
                        local f
                        f(l, i) = begin
                                return Concatenation([l[i]], Drop(l, i))
                            end
                        if char[1] == 1
                            return Dict{Symbol, Any}(:name => "f1", :order => Concatenation(f([1, 2], char[2]), f(3:5, char[3]), f(6:10, char[4])))
                        elseif char[1] == 2
                            return Dict{Symbol, Any}(:name => "f2", :order => Concatenation([1, 2], 2 + Drop(1:3, char[3]), [2 + char[3]], 5 + (combinations(1:5, 2))[char[4]], 5 + Difference(1:5, (combinations(1:5, 2))[char[4]])), :rootPower => (-1) ^ char[2])
                        elseif char[1] == 3
                            return Dict{Symbol, Any}(:name => "f3", :order => Concatenation(f([1, 2], char[3]), 3:5, 5 + (combinations(1:5, 3))[char[4]], 5 + Difference(1:5, (combinations(1:5, 3))[char[4]])), :rootPower => E(3, char[2]))
                        elseif char[1] == 4
                            return Dict{Symbol, Any}(:name => "f4", :order => Concatenation([1, 2], f(3:5, char[3]), Drop(6:10, char[4]), [5 + char[4]]), :rootPower => E(4, char[2]))
                        elseif char[1] == 5
                            return Dict{Symbol, Any}(:name => "f5", :order => Concatenation(f([1, 2], char[3]), Drop(3:5, char[4]), [2 + char[4]], 6:10), :rootPower => E(5, char[2]))
                        elseif char[1] == 6
                            return Dict{Symbol, Any}(:name => "f6", :order => Concatenation([1, 2], 3:5, f(6:10, char[3])), :rootPower => E(6, char[2]))
                        end
                    end, (chevieget(:G4_22, :paramchars))(ST))
        end
    end)
chevieset(:G4_22, :FactorizedSchurElement, function (ST, p, para, rootpara)
        local Y, index, g
        g = (chevieget(:G4_22, :Generic))(ST)
        index = (chevieget(:G4_22, :Size))(g) // (chevieget(:G4_22, :Size))(ST)
        Y = Concatenation((chevieget(:G4_22, :GetParams))(ST, para))
        g = (chevieget(:G4_22, :CharInfo))(ST)
        g = (G4_22FetchIndexChars(ST, para))[Position(g[:charparams], p)]
        g = ((chevieget(:G4_22, :SchurData))(ST))[g]
        g = VFactorSchurElement(Y, ((chevieget(:G4_22, :SchurModels))(ST))[Symbol(g[:name])], g)
        return g // index
    end)
chevieset(:G4_22, :SchurElement, function (ST, p, para, rootpara)
        local Y, index, g
        g = (chevieget(:G4_22, :Generic))(ST)
        index = (chevieget(:G4_22, :Size))(g) // (chevieget(:G4_22, :Size))(ST)
        Y = Concatenation((chevieget(:G4_22, :GetParams))(ST, para))
        g = (chevieget(:G4_22, :CharInfo))(ST)
        g = (G4_22FetchIndexChars(ST, para))[Position(g[:charparams], p)]
        g = ((chevieget(:G4_22, :SchurData))(ST))[g]
        g = VcycSchurElement(Y, ((chevieget(:G4_22, :SchurModels))(ST))[Symbol(g[:name])], g)
        return g // index
    end)
chevieset(:G4_22, :DecompositionMatrix, function (ST, p)
        local T, m
        T = (chevieget(:G4_22, :CharTable))(ST)
        T[:name] = T[:identifier]
        m = DecompositionMatrix(mod(T, p))
        return map((c->begin
                        [c[1], (m[c[1]])[c[2]]]
                    end), BlocksMat(m))
    end)
chevieset(:G4_22, :GetParams, function (ST, para)
        local d, f
        f(p) = begin
                p = map(GetRoot, p)
                return Concatenation(p, -p)
            end
        if ST == 4
            return [[1, -1], [1, E(3), E(3, 2)], para[1]]
        elseif ST == 5
            return [[1, -1], para[1], para[2]]
        elseif ST == 6
            return [para[1], [1, E(3), E(3, 2)], para[2]]
        elseif ST == 7
            return para
        elseif ST == 8
            return [[1, -1], [1, E(3), E(3, 2)], para[1]]
        elseif ST == 9
            return [para[1], [1, E(3), E(3, 2)], para[2]]
        elseif ST == 10
            return [[1, -1], para[1], para[2]]
        elseif ST == 11
            return para
        elseif ST == 12
            return [para[1], [1, E(3), E(3, 2)], [1, E(4), -1, E(4, 3)]]
        elseif ST == 13
            return [para[2], [1, E(3), E(3, 2)], f(para[1])]
        elseif ST == 14
            return [para[1], para[2], [1, E(4), -1, E(4, 3)]]
        elseif ST == 15
            return [para[1], para[2], f(para[3])]
        elseif ST == 16
            return [[1, -1], [1, E(3), E(3, 2)], para[1]]
        elseif ST == 17
            return [para[1], [1, E(3), E(3, 2)], para[2]]
        elseif ST == 18
            return [[1, -1], para[1], para[2]]
        elseif ST == 19
            return para
        elseif ST == 20
            return [[1, -1], para[1], [1, E(5), E(5, 2), E(5, 3), E(5, 4)]]
        elseif ST == 21
            return [para[1], para[2], [1, E(5), E(5, 2), E(5, 3), E(5, 4)]]
        elseif ST == 22
            return [para[1], [1, E(3), E(3, 2)], [1, E(5), E(5, 2), E(5, 3), E(5, 4)]]
        end
    end)
chevieset(:G4_22, :Embed, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [[1, 3, -1], [3]], Symbol("5") => [[2], [3]], Symbol("6") => [[1], [3]], Symbol("7") => [[1], [2], [3]], Symbol("8") => [[3], [1, 3, -1]], Symbol("9") => [[1], [3]], Symbol("10") => [[2], [3]], Symbol("11") => [[1], [2], [3]], Symbol("12") => [[1], [2, 1, -2], [-2, 1, 2]], Symbol("13") => [[3, 3], [1], [-2, 1, 2]], Symbol("14") => [[1], [2]], Symbol("15") => [[1], [2], [3, 3]], Symbol("16") => [[3], [1, 3, -1]], Symbol("17") => [[1], [3]], Symbol("18") => [[2], [3]], Symbol("19") => [[1], [2], [3]], Symbol("20") => [[2], [1, 2, -1]], Symbol("21") => [[1], [2]], Symbol("22") => [[1], [2, 1, -2], [-2, 1, 2]])
        return d[Symbol(ST)]
    end)
chevieset(:G4_22, :HeckeCharTable, function (ST, para, root)
        local X, Y, Z, classes, GenericRow, res, ci, ic, c, p, c24, c23, rows, c25, c35, c23
        X = (chevieget(:G4_22, :GetParams))(ST, para)
        Z = X[3]
        Y = X[2]
        X = X[1]
        c24 = combinations(1:4, 2)
        c23 = [[2, 3], [1, 3], [1, 2]]
        c25 = combinations(1:5, 2)
        c35 = combinations(1:5, 3)
        c23 = [[2, 3], [1, 3], [1, 2]]
        c = 0 * Product(para, Product)
        GenericRow(char) = begin
                local l, r
                if ST in 4:7
                    if char[1] == 1
                        l = [1, X[char[2]], Y[char[3]], Z[char[4]]]
                        return map((class->begin
                                        l[class[1]] * Product(l) ^ class[2]
                                    end), classes)
                    end
                    if char[1] == 2
                        l = [[2], X, Drop(Y, char[3]), Drop(Z, char[4])]
                    elseif char[1] == 3
                        l = [[3], X[[1, 2, char[3]]], Y, Z]
                    end
                    return G4_22Helper(map((class->begin
                                        Sum(l[class[1]])
                                    end), classes), map((c->begin
                                        c[2]
                                    end), classes), Product(l[2:4], Product), char[1], char[2])
                elseif ST in 8:15
                    if char[1] == 1
                        l = [1, X[char[2]], Y[char[3]], Z[char[4]], Z[char[4]] ^ 2]
                        return map((class->begin
                                            l[class[1]] * Product(l[2:4]) ^ class[2]
                                        end), classes) + c
                    end
                    if char[1] == 2
                        l = [[2], X, Y[c23[char[3]]], Z[c24[char[4]]]]
                    elseif char[1] == 3
                        l = [[3], X[[1, 2, char[3]]], Y, Drop(Z, char[4])]
                    elseif char[1] == 4
                        l = [[4], X[[1, 2, 1, 2]], Y[[1, 2, 3, char[3]]], Z]
                    end
                    push!(l, map((x->begin
                                    x ^ 2
                                end), l[4]))
                    return G4_22Helper(map((class->begin
                                            Sum(l[class[1]])
                                        end), classes), map((c->begin
                                            c[2]
                                        end), classes), Product(l[2:4], Product), char[1], char[2]) + c
                elseif ST in 16:22
                    if char[1] == 1
                        l = [1, X[char[2]], Y[char[3]], Z[char[4]], Z[char[4]] ^ 2]
                        return map((class->begin
                                        l[class[1]] * Product(l[2:4]) ^ class[2]
                                    end), classes)
                    end
                    if char[1] == 2
                        l = [[2], X, Y[c23[char[3]]], Z[c25[char[4]]]]
                    elseif char[1] == 3
                        l = [[3], X[[1, 2, char[3]]], Y, Z[c35[char[4]]]]
                    elseif char[1] == 4
                        l = [[4], X[[1, 2, 1, 2]], Y[[1, 2, 3, char[3]]], Drop(Z, char[4])]
                    elseif char[1] == 5
                        l = [[5], X[[1, 2, 1, 2, char[3]]], Concatenation(Y, Y[c23[char[4]]]), Z]
                    elseif char[1] == 6
                        l = [[6], X[[1, 2, 1, 2, 1, 2]], Y[[1, 2, 3, 1, 2, 3]], Z[[1, 2, 3, 4, 5, char[3]]]]
                    end
                    push!(l, map((x->begin
                                    x ^ 2
                                end), l[4]))
                    return G4_22Helper(map((class->begin
                                        Sum(l[class[1]])
                                    end), classes), map((c->begin
                                        c[2]
                                    end), classes), Product(l[2:4], Product), char[1], char[2])
                end
            end
        res = Dict{Symbol, Any}(:name => SPrint("H(G", ST, ")"), :ST => ST, :parameter => para, :degrees => (chevieget(:G4_22, :ReflectionDegrees))(ST), :dim => 2, :reflclasses => [3], :powermap => (chevieget(:G4_22, :PowerMaps))(ST))
        Inherit(res, (chevieget(:G4_22, :ClassInfo))(ST))
        classes = ((chevieget(:G4_22, :paramclasses))(ST))[res[:indexclasses]]
        res[:size] = Product(res[:degrees])
        res[:order] = res[:size]
        res[:identifier] = res[:name]
        res[:centralizers] = map((x->begin
                        div(res[:size], x)
                    end), res[:classes])
        ci = (chevieget(:G4_22, :CharInfo))(ST)
        res[:irredinfo] = map(function (x, y)
                    return Dict{Symbol, Any}(:charparam => x, :charname => y)
                end, ci[:charparams], ci[:charnames])
        rows = map(GenericRow, (chevieget(:G4_22, :paramchars))(ST))
        ci = G4_22Test(res, rows * Product(para, Product) ^ 0, ci[:indexchars])
        if ci != true
            res[:indexchars] = ci
        end
        return ((CHEVIE[:compat])[:MakeCharacterTable])(res)
    end)
chevieset(:G4_22, :CharTable, function (ST,)
        local para
        para = (chevieget(:G4_22, :EigenvaluesGeneratingReflections))(ST)
        para = map((x->begin
                        map((j->begin
                                    E(1 // x, j)
                                end), 0:1 // x - 1)
                    end), para)
        return (chevieget(:G4_22, :HeckeCharTable))(ST, para, [])
    end)
chevieset(:G4_22, :Rep, Dict{Symbol, Any}(Symbol("1") => function (X, Y, Z)
                return [[[X]], [[Y]], [[Z]]]
            end, Symbol("2") => function (X, Y, Z, root)
                local r
                r = (-1) ^ root * GetRoot(Product(X) * Product(Y) * Product(Z), 2)
                return [[[X[1], Sum(Y, (x->begin
                                                1 // x
                                            end)) - (Sum(Z) * X[2]) // r], [0, X[2]]], [[Sum(Y), 1 // X[1]], [-(Product(Y)) * X[1], 0]], [[0, (-r // Product(Y)) // Product(X)], [r, Sum(Z)]]]
            end, Symbol("3") => function (X, Y, Z, root)
                local r, x1, x2, a, z1
                x1 = X[1]
                x2 = X[2]
                z1 = Z[1]
                r = E(3, root) * GetRoot(x1 ^ 2 * x2 * Product(Y) * Product(Z), 3)
                a = ((Sum(Y) * r) // x1 - Product(Y) * Sum(Y, (y->begin
                                            1 // y
                                        end)) * z1) + (Product(Y) * (x1 * z1 ^ 2 - (x2 * Product(Z)) // z1)) // r
                return [[[x1, 0, (-(Product(Z)) * Sum(Z, (z->begin
                                                        1 // z
                                                    end)) * x2 * x1) // z1 + ((Sum(Y) * r ^ 2) // Product(Y)) // z1], [0, x1, (a // Product(Y)) // z1 * r ^ 2], [0, 0, x2]], [[Sum(Y) - (r // x1) // z1, 1 // z1, r], [a, (r // x1) // z1, 0], [(-(Product(Y)) * x1 * z1) // r ^ 2, 0, 0]], [[0, 0, (-x1 * Product(Z)) // z1], [0, z1, 0], [1 // x1, -1 // r, Sum(Z) - z1]]]
            end, Symbol("4") => function (X, Y, Z, root)
                local r, x1, x2, y1, y2, y3, a, b
                x1 = X[1]
                x2 = X[2]
                y1 = Y[3]
                y2 = Y[1]
                y3 = Y[2]
                r = GetRoot((x1 * x2 * y1) ^ 2 * y2 * y3 * Product(Z), 4) * E(4, root)
                a = y2 * x1 * x2 * y1 * Product(Z) * Sum(Z, (x->begin
                                        1 // x
                                    end)) - r ^ 2 * Sum(Z)
                b = x1 * x2 * y1 * Product(Z) * (y3 + y2) - r ^ 2 * Sum(combinations(1:4, 2), (x->begin
                                        Product(Z[x])
                                    end))
                return [[[x1, 0, x1 * a - (x1 * x2 * y1 * b) // r, x1 * (1 + y1 // y3) - (r * Sum(Z, (x->begin
                                                        1 // x
                                                    end))) // y3], [0, x1, 1 // y1 + 1 // y2, -x2 // r ^ 3], [0, 0, x2, 0], [0, 0, 0, x2]], [[y3 + y1, x1 * y1 * y2 * a, y1 * a, y1], [0, y1 + y2, 1 // x1, 0], [0, -x1 * y1 * y2, 0, 0], [-y3, 0, 0, 0]], [[0, 0, 0, -r // (y3 * x2)], [0, 0, -r // (y2 * x1 * x2 * y1), 0], [0, r, 0, 1 // r ^ 2], [r // (x1 * y1), -r * a, b, Sum(Z)]]]
            end, Symbol("5") => function (X, Y, Z, root)
                local r, x1, x2, y1, y2, y3, z1, z2, z3, z4, z5
                x1 = X[1]
                x2 = X[2]
                y1 = Y[1]
                y2 = Y[2]
                y3 = Y[3]
                z1 = Z[1]
                z2 = Z[2]
                z3 = Z[3]
                z4 = Z[4]
                z5 = Z[5]
                r = GetRoot(x1 ^ 3 * x2 ^ 2 * y1 * y2 ^ 2 * y3 ^ 2 * Product(Z), 5) * E(5, root)
                return [[[x2 + x1, 0, 0, 0, x1], [0, x2 + x1, 0, x2, 0], [0, 0, x1, 0, 0], [0, -x1, 0, 0, 0], [-x2, 0, 0, 0, 0]], [[0, 0, 0, 0, -r // (z5 * x2)], [0, 0, 0, (-r // z4) // x1, x2], [0, 0, (r // z3) // x1, (x2 * y2 * y3 * z2) // r - r // (x1 * z4), x2], [0, (r // z2) // x2, (x1 * x2 * y1 * y2 * y3 * z1 * z4 * z5 * ((x1 * (y3 + y2)) // r - 1 // z3)) // r ^ 2 - r // (z2 * x2), ((y2 + y3) - r // (z3 * x1)) + (x1 * x2 * z1 * z5 * y1 * y2 * y3) // r ^ 2, (-(x1 ^ 2) * x2 ^ 2 * y1 * y2 * y3 * z4 * z5 * z1) // r ^ 3], [(r // z1) // x1, ((r ^ 2 * (1 // (z4 * z2) + 1 // (z1 * z5))) // (x1 * x2 ^ 2) - (y2 * y3) // x2) - (x1 * y1 * y2 * y3 * z3) // (r * x2), (-(r ^ 3) // (x1 * x2 * z2 * z4) + z3 * x1 * y1 * y2 * y3) * ((1 // (r * x2) + r // (x1 ^ 2 * x2 * z3 ^ 2 * y2 * y3)) - (1 // y3 + 1 // y2) // (x1 * x2 * z3)), (y1 * y2 * y3 * (z2 + (z1 * z5) // z4)) // r - (r * (r + y1 * z3 * x1)) // (z3 * x1 ^ 2 * z4 * x2), (y1 + y2 + y3) - (z1 * z5 * x1 * x2 * y1 * y2 * y3) // r ^ 2]], [[z1, ((x1 * y2 * y3 * z1 * z2) // (r * x2) + (((((r ^ 3 // x1) // z4) // x2 ^ 3) // y3) // z5) // y2) - (r * (z2 // z5 + z1 // z4)) // x2 ^ 2, (((((-r * z3) // x2 ^ 2) // z5 - z1 // x2 * (y3 + y2)) + (x1 // x2 * z3 * z1 * y2 * y3) // r) - (x1 * y1 * y2 * y3 * z1 * z2 * z4) // r ^ 2) + (x1 ^ 2 * y1 * y2 * y3 * z1 * z2 * z3 * z4 * (y3 + y2)) // r ^ 3 + (r * z1) // (x1 * x2 * z3), ((((y2 * y3 * (x2 * z1 * z2 + x1 * z1 * (z2 + z3) + (x1 * z2 * z3 * z4) // z5)) // x2) // r + ((y1 * y2 * y3 * z1 * z2 * z3 * x1 * (x2 + x1)) // x2) // r ^ 2) - (y2 ^ 2 * y3 ^ 2 * z1 * z2 * z3 * x1 ^ 2 * z4) // r ^ 3) - (r * ((z2 + z3) // (z5 * x2) + z1 // (z4 * x2) + z2 // (z5 * x1) + z1 // (z4 * x1))) // x2, ((z1 * (x2 + x1)) // x2 + (x1 ^ 2 * z2 * z3 * z4 * y2 * y3) // r ^ 2) - (r * (1 // y1 + 1 // y2 + 1 // y3)) // x2], [0, z2, (z3 + (x1 * x2 ^ 2 * y1 * y2 * y3 * z1 * z2 * z4 * z5) // r ^ 3) - (r * (1 // y3 + 1 // y2)) // x1, (((x2 * z2) // x1 + z3 + z2) - (x1 * x2 * z2 * z3 * z4 * y2 * y3) // r ^ 2) - (r * (1 // y3 + 1 // y2)) // x1, -(r ^ 2) // (x1 * z1 * y1 * y2 * y3)], [0, 0, z3, -(r ^ 3) // (x1 ^ 2 * x2 * z1 * z5 * y1 * y2 * y3) + z3, -(r ^ 2) // (x1 * z1 * y1 * y2 * y3)], [0, 0, 0, z4, (z4 * x1 * x2 * z5) // r], [0, 0, 0, 0, z5]]]
            end, Symbol("6") => function (X, Y, Z, root)
                local r, x1, x2, y1, y2, y3, z1, z2, z3, z4, z5, a
                r = GetRoot(Product(Concatenation(X[[1, 2, 1, 2, 1, 2]], Y[[1, 2, 3, 1, 2, 3]], Z[[1, 2, 3, 4, 5, 5]])), 6) * E(6, root)
                x1 = X[1]
                x2 = X[2]
                y1 = Y[1]
                y2 = Y[2]
                y3 = Y[3]
                z1 = Z[1]
                z2 = Z[2]
                z3 = Z[3]
                z4 = Z[4]
                z5 = Z[5]
                a = 1
                return r ^ 0 * [[[x1 + x2, 0, 0, 0, 0, x2 * x1], [0, x1 + x2, 0, 0, x2 * x1, 0], [0, 0, x1 + x2, x2 * x1, 0, 0], [0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0], [-1, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, -1 // z5 * r], [0, 0, 0, 0, -1 // z4 * r, ((-1 // a) // r ^ 2) // z4], [0, 0, 0, -1 // z5 * r, z4 - z5, (-1 // a) // r ^ 3 * z5], [0, 0, ((r // z3) // x2) // x1, (x1 * x2 * y1 * y2 * y3 * (z2 * z5 + z4 * z1) - a // (z4 * z5 ^ 2)) // r ^ 2, (-x1 * x2 * y1 * y2 * y3 * z1 * z4 * z5 * (z4 - z5) + a // z5) // r ^ 3, (((((((1 // y1) // y2) // y3) // x1 ^ 2) // x2 ^ 2) // z2) // z3) // a], [0, ((1 // z2 * r) // x2) // x1, (-((y1 * y3 + y2 * y3 + y1 * y2)) * x1 * x2 * z1 * z5 ^ 2 * z4 * y1 * y2 * y3) // a + (((z5 // x2) // x1 * (y3 + y2 + y1) * r ^ 4) // z3) // a + (((r ^ 2 * y1 * y2 * y3 * z5 * (z4 * z3 * z1 - z2 ^ 2 * z5)) // a) // z2) // z3 + ((((((r ^ 2 * (-z3 + z2)) // z4) // z5) // x1) // x2) // z2) // z3, ((-z5 * (y1 * y3 + y2 * y3 + y1 * y2) * r ^ 3) // a + (((r * (z2 * z4 * x2 * x1 * z5 ^ 3 * y3 * y2 * y1 - a) * (y3 + y2 + y1)) // a) // z4) // z5 + (((x1 * x2) ^ 2 * (y1 * y2 * y3) ^ 2 * z5 ^ 2 * (z1 * z4 * z3 - z5 * z2 ^ 2)) // r) // a + (((x1 * x2 * y1 * y2 * y3 * (z4 * z1 + 2 * z5 * z2)) // r) // z4) // z5) - ((a // r) // z4 ^ 2) // z5 ^ 3, ((y3 + y2 + y1) - (x1 * x2 * y1 * y2 * y3 * ((z4 * z1 + z2 * z5) - z1 * z5)) // r ^ 2) + ((a // r ^ 2) // z4) // z5 ^ 2, (((((((((r // y1) // y2) // y3) // x1 ^ 2) // x2 ^ 2) // z2) // z3) // a) // z4) // z5], [((r // z1) // x2) // x1, (-((x1 * x2) ^ 2) * (y1 * y2 * y3) ^ 2 * z3 * z4 * z5 * (((-z2 * z5 + z2 * z4) - z4 * z1) + z1 * z5) * a) // r ^ 2 - ((x1 * y1 * y2 * y3 * x2 * z3 * a ^ 2) // r ^ 2) // z5, ((-((y1 * y3 + y2 * y3 + y1 * y2)) * (x1 * x2 * y1 * y2 * y3 * z1 * z4 * z5 ^ 2 * (z4 - z5) - a) * r ^ 3) // z5 + (z4 - z5) * x1 ^ 2 * x2 ^ 2 * y1 ^ 2 * y2 ^ 2 * y3 ^ 2 * z5 ^ 2 * z2 * z1 * z4 * (y3 + y2 + y1) * r) - (((x1 * x2 * y1 * y2 * y3 * (((x1 * x2) ^ 2 * (y1 * y2 * y3) ^ 2 * z1 * z4 ^ 2 * z5 ^ 4 * ((z5 * z2 ^ 2 * z4 + (z5 - z4) * z1 * z3 * z4) - z5 ^ 2 * z2 ^ 2) + x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * a * ((2 * z4 * z1 * z3 - z5 * z1 * z3) + z5 * z2 * z1 + z5 * z2 * z3)) - z3 * a ^ 2)) // r) // z5 ^ 2) // z4, (((-((z4 - z5)) * (y1 * y3 + y2 * y3 + y1 * y2) * x1 ^ 3 * x2 ^ 3 * z1 * z5 ^ 2 * z4 * z3 * z2 * y1 ^ 2 * y2 ^ 2 * y3 ^ 2 + (((y3 + y2 + y1) * (x1 * x2 * y1 * y2 * y3 * z2 * z4 * z5 ^ 2 * (z4 - z5) + a) * r ^ 4) // z5) // z4) - r ^ 2 * (x1 * x2) ^ 2 * (y1 * y2 * y3) ^ 2 * z5 * ((-z1 * z3 * z4 ^ 2 + z4 * z2 ^ 2 * z5 + z5 * z1 * z4 * z3) - z5 ^ 2 * z2 ^ 2)) - ((r ^ 2 * a * x1 * x2 * y1 * y2 * y3 * (((z4 * z3 + z4 * z1) - z2 * z4) + 2 * z5 * z2)) // z4) // z5) + ((r ^ 2 * a ^ 2) // z4 ^ 2) // z5 ^ 3, -x1 * x2 * y1 * y2 * y3 * (z2 - z1) * (z4 - z5) * a * r - ((a ^ 2 * r) // z5 ^ 2) // z4, ((((((((-1 // z3) // z4) // z2) // y1) // y2) // y3) // z5) // x1 ^ 2) // x2 ^ 2 * r ^ 4 + y1 + y3 + y2]], [[z1, ((z2 - z1) * (z4 - z5) * a * r ^ 3) // z5 + (((((((a ^ 2 * r ^ 3) // x1) // y1) // y2) // y3) // x2) // z5 ^ 3) // z4, ((x2 ^ 2 * x1 ^ 2 * y2 * y3 * z5 * y1 * (z4 - z5) * (y1 * y3 + y2 * y3 + y1 * y2) * z1 * z4 * z3 * z2 * r ^ 2 - (y3 + y2 + y1) * x1 ^ 2 * x2 ^ 2 * y1 * y2 * y3 * z2 * z3 * (x1 * x2 * y1 * y2 * y3 * z2 * z4 * z5 ^ 2 * (-z5 + z4) + a) * z1) + x1 * x2 * y1 * y2 * y3 * (z4 - z5) * (z2 ^ 2 * z5 - z1 * z4 * z3) * r ^ 4 + (a * (((z3 + z1) - z2) + (2 * z5 * z2) // z4) * r ^ 4) // z5 ^ 2) - (((((((a ^ 2 * r ^ 4) // x1) // x2) // y1) // y2) // y3) // z4 ^ 2) // z5 ^ 4, ((-((y3 + y2 + y1)) * (x1 + x2) * x1 ^ 2 * x2 ^ 2 * y1 * y2 * y3 * z2 * z3 * (x1 * x2 * y1 * y2 * y3 * z2 * z4 * z5 ^ 2 * (-z5 + z4) + a) * z1 - (y1 * y3 + y2 * y3 + y1 * y2) * (x1 * x2 * z1 * z4 * (z4 - z5) - (((a // y1) // y2) // y3) // z5 ^ 2) * r ^ 5) + ((x1 * x2 * y1 * y2 * y3 * (z5 - z4) * (z1 * z4 * z3 - z5 * z2 ^ 2) + ((a * (((z4 * z3 + z4 * z1) - z2 * z4) + 2 * z5 * z2)) // z4) // z5 ^ 2) - ((((((a ^ 2 // x1) // x2) // y1) // y2) // y3) // z4 ^ 2) // z5 ^ 4) * (x1 + x2) * r ^ 4 + x2 ^ 2 * x1 ^ 2 * y1 * y2 * y3 * z5 * z2 * z1 * z4 * (z4 - z5) * (y3 + y2 + y1) * r ^ 3 + x2 ^ 2 * x1 ^ 2 * y1 * y2 * y3 * z5 * z2 * z1 * z4 * z3 * (z4 - z5) * (y1 * y3 + y2 * y3 + y1 * y2) * (x1 + x2) * r ^ 2) - ((r * x1 * x2 * (((x1 * x2 * y1 * y2 * y3) ^ 2 * z1 * z4 ^ 2 * z5 ^ 4 * (z1 * z3 * z4 - z5 * z2 ^ 2) * (z5 - z4) + a * x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * ((2 * z4 * z1 * z3 - z5 * z1 * z3) + z5 * z2 * z1 + z5 * z2 * z3)) - z3 * a ^ 2)) // z4) // z5 ^ 3, (x1 + x2) * (((z1 - z2) * (z5 - z4)) // z5 + ((((((a // x1) // y1) // y2) // y3) // x2) // z5 ^ 3) // z4) * r ^ 3 * a - (x1 * x2 * z3 * (x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * (z1 - z2) * (z5 - z4) + a) * a) // z5 ^ 2, (((-((y1 * y3 + y2 * y3 + y1 * y2)) * r) // y1) // y2) // y3 + z1 * (x1 + x2) + (x1 ^ 2 * x2 ^ 2 * y1 * y2 * y3 * z2 * z5 * z4 * z3) // r ^ 3], [0, z2, (((((((y1 * y3 + y2 * y3 + y1 * y2) // x2) // x1 * r ^ 5) // y1) // y2) // y3) // a - (z5 * z2 * (y3 + y2 + y1) * r ^ 3) // a) + r * ((x1 * x2 * y1 * y2 * y3 * z5 * (-z4 * z3 * z1 + z2 ^ 2 * z5)) // a + ((z3 - z2) // z5) // z4), (((-z2 * z5 * (y3 + y2 + y1) * (x1 + x2) * r ^ 3) // a - r ^ 2 * ((z4 * x1 * x2 * z5 * z1) // a - ((((1 // y1) // y2) // y3) // z4) // z5) * (y1 * y3 + y2 * y3 + y1 * y2)) + (((r * ((x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * (-z4 * z3 * z1 + z2 ^ 2 * z5) + a * z3) - a * z2) * (x1 + x2)) // a) // z5) // z4 + (x2 ^ 2 * x1 ^ 2 * z2 * y1 * y2 * y3 * z5 ^ 2 * z1 * z4 * (y3 + y2 + y1)) // a + ((x2 ^ 2 * x1 ^ 2 * z2 * z3 * y1 * y2 * y3 * z5 ^ 2 * z1 * z4 * (y1 * y3 + y2 * y3 + y1 * y2) * (x1 + x2)) // a) // r) - (x1 * x2 * ((((x1 * x2 * y1 * y2 * y3) ^ 2 * z1 * z4 * z5 ^ 2 * (-z1 * z3 * z4 + z5 * z2 ^ 2)) // a + (x1 * x2 * y1 * y2 * y3 * z3 * (2 * z4 * z1 + z5 * z2)) // z4) - ((z3 * a) // z4 ^ 2) // z5 ^ 2)) // r ^ 2, ((((-((y1 * y3 + y2 * y3 + y1 * y2)) * r) // y1) // y2) // y3 + z2 * (x1 + x2)) - (((x1 * x2 * z3 * (x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * ((-z4 * z1 + z2 * z4) - z2 * z5) + a)) // r ^ 3) // z4) // z5, (((((((1 // x1) // x2) // y1) // y2) // y3) // a) // z1) // z4], [0, 0, z3, z3 * (x1 + x2) - (((x1 * x2 * z3 * (x1 * x2 * y1 * y2 * y3 * z4 * z5 ^ 2 * (z2 * z5 + z4 * z1) - a)) // r ^ 3) // z4) // z5, (-x1 * x2 * z3 * (x1 * x2 * y1 * y2 * y3 * z2 * z4 * z5 ^ 2 * (-z5 + z4) + a)) // r ^ 4, (((((((z5 // z1) // r) // x2) // x1) // y1) // y2) // y3) // a], [0, 0, 0, z5, ((z4 - z5) * z4) // r * z5, (-(z5 ^ 2) // r ^ 4) // a * z4], [0, 0, 0, 0, z4, (-1 // a) // r ^ 3 * z5], [0, 0, 0, 0, 0, z5]]]
            end))
chevieset(:G4_22, :HeckeRepresentation, function (ST, para, root, i)
        local X, Y, Z, v, rep, m, ci
        X = (chevieget(:G4_22, :GetParams))(ST, para)
        Z = X[3]
        Y = X[2]
        X = X[1]
        rep(char) = begin
                local r, dim
                dim = char[1]
                r = (chevieget(:G4_22, :Rep))[Symbol(dim)]
                if dim == 1
                    return r(X[char[2]], Y[char[3]], Z[char[4]])
                elseif dim == 2
                    if ST in 4:7
                        Z = Drop(Z, char[4])
                        if ST == 4
                            return [[[0, -(Z[2])], [Z[1], 0]], [[0, 0], [0, 0]], [[Z[2], Z[2]], [0, Z[1]]]]
                        else
                            return r(X, Drop(Y, char[3]), Z, char[2])
                        end
                    else
                        return r(X, Drop(Y, char[3]), Z[(combinations(1:length(Z), 2))[char[4]]], char[2])
                    end
                elseif dim == 3
                    X = X[[char[3], 3 - char[3]]]
                    if ST == 4
                        return [[[0, 0, 1], [0, -1, 0], [1, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[Z[1], -1, Z[2]], [0, Z[2], -((Z[3] * Z[1] + Z[2] ^ 2))], [0, 0, Z[3]]]]
                    elseif ST == 6
                        return [[[X[2], 0, 0], [(-(X[2]) * Z[3] - X[1] * Z[1]) - X[1] * Z[2], X[1], 0], [X[2] * Z[3] * Z[1] - X[1] * Z[2] ^ 2, 0, X[1]]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[Z[3], 1, 0], [0, Z[1], 1], [0, 0, Z[2]]]]
                    elseif ST in [5, 7]
                        return r(X, Y, Z, char[2])
                    elseif ST in 8:15
                        return r(X, Y, Drop(Z, char[4]), char[2])
                    else
                        return r(X, Y, Z[(combinations(1:5, 3))[char[4]]], char[2])
                    end
                elseif dim == 4
                    Y = Concatenation(Drop(Y, char[3]), [Y[char[3]]])
                    if ST in 8:15
                        return r(X, Y, Z, char[2])
                    else
                        return r(X, Y, Drop(Z, char[4]), char[2])
                    end
                elseif dim == 5
                    return r(X[[char[3], 3 - char[3]]], Concatenation([Y[char[4]]], Drop(Y, char[4])), Z, char[2])
                elseif dim == 6
                    return r(X, Y, Concatenation(Drop(Z, char[3]), [Z[char[3]]]), char[2])
                end
            end
        ci = (G4_22FetchIndexChars(ST, para))[i]
        m = rep(((chevieget(:G4_22, :paramchars))(ST))[ci]) + 0 * Product(para, Product)
        return map((x->begin
                        ApplyWord(x, m)
                    end), (chevieget(:G4_22, :Embed))(ST))
    end)
chevieset(:G4_22, :Representation, function (ST, i)
        local para
        para = (chevieget(:G4_22, :EigenvaluesGeneratingReflections))(ST)
        para = map((x->begin
                        map((j->begin
                                    E(1 // x, j)
                                end), 0:1 // x - 1)
                    end), para)
        return (chevieget(:G4_22, :HeckeRepresentation))(ST, para, [], i)
    end)
(CHEVIE[:families])[:G14] = Dict{Symbol, Any}(:fourierMat => root(-3) // 24 * [[4, -4, 4, -4, -4, -4, -4, -4, 0, 0, -4, -4, 4, 4, 0, 0, 0, 0], [-4, 4, 4, -4, 4, 4, 4, 4, 0, 0, -4, -4, 4, 4, 0, 0, 0, 0], [4, 4, 4, 4, -4, -4, 4, 4, 0, 0, -4, -4, -4, -4, 0, 0, 0, 0], [-4, -4, 4, 4, 4, 4, -4, -4, 0, 0, -4, -4, -4, -4, 0, 0, 0, 0], [-4, 4, -4, 4, 4 * E(3, 2), 4 * E(3), 4 * E(3, 2), 4 * E(3), 0, 0, -2, -2, 2, 2, 2 * root(-3), -2 * root(-3), 2 * root(-3), -2 * root(-3)], [-4, 4, -4, 4, 4 * E(3), 4 * E(3, 2), 4 * E(3), 4 * E(3, 2), 0, 0, -2, -2, 2, 2, -2 * root(-3), 2 * root(-3), -2 * root(-3), 2 * root(-3)], [-4, 4, 4, -4, 4 * E(3, 2), 4 * E(3), 4 * E(3, 2), 4 * E(3), 0, 0, 2, 2, -2, -2, -2 * root(-3), 2 * root(-3), -2 * root(-3), 2 * root(-3)], [-4, 4, 4, -4, 4 * E(3), 4 * E(3, 2), 4 * E(3), 4 * E(3, 2), 0, 0, 2, 2, -2, -2, 2 * root(-3), -2 * root(-3), 2 * root(-3), -2 * root(-3)], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * root(6), -2 * root(6), -2 * root(6), 2 * root(6), 2 * root(6), -2 * root(6), -2 * root(6), 2 * root(6)], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 * root(6), -2 * root(6), -2 * root(6), 2 * root(6), -2 * root(6), 2 * root(6), 2 * root(6), -2 * root(6)], [-4, -4, -4, -4, -2, -2, 2, 2, 2 * root(6), 2 * root(6), -2 + root(6), -2 - root(6), -2 + root(6), -2 - root(6), root(6), root(6), root(6), root(6)], [-4, -4, -4, -4, -2, -2, 2, 2, -2 * root(6), -2 * root(6), -2 - root(6), -2 + root(6), -2 - root(6), -2 + root(6), -(root(6)), -(root(6)), -(root(6)), -(root(6))], [4, 4, -4, -4, 2, 2, -2, -2, -2 * root(6), -2 * root(6), -2 + root(6), -2 - root(6), -2 + root(6), -2 - root(6), root(6), root(6), root(6), root(6)], [4, 4, -4, -4, 2, 2, -2, -2, 2 * root(6), 2 * root(6), -2 - root(6), -2 + root(6), -2 - root(6), -2 + root(6), -(root(6)), -(root(6)), -(root(6)), -(root(6))], [0, 0, 0, 0, 2 * root(-3), -2 * root(-3), -2 * root(-3), 2 * root(-3), 2 * root(6), -2 * root(6), root(6), -(root(6)), root(6), -(root(6)), (2 + root(-2)) * root(-3), (2 + root(-2)) * root(-3), (-2 + root(-2)) * root(-3), (-2 + root(-2)) * root(-3)], [0, 0, 0, 0, -2 * root(-3), 2 * root(-3), 2 * root(-3), -2 * root(-3), -2 * root(6), 2 * root(6), root(6), -(root(6)), root(6), -(root(6)), (2 + root(-2)) * root(-3), (2 + root(-2)) * root(-3), (-2 + root(-2)) * root(-3), (-2 + root(-2)) * root(-3)], [0, 0, 0, 0, 2 * root(-3), -2 * root(-3), -2 * root(-3), 2 * root(-3), -2 * root(6), 2 * root(6), root(6), -(root(6)), root(6), -(root(6)), (-2 + root(-2)) * root(-3), (-2 + root(-2)) * root(-3), (2 + root(-2)) * root(-3), (2 + root(-2)) * root(-3)], [0, 0, 0, 0, -2 * root(-3), 2 * root(-3), 2 * root(-3), -2 * root(-3), 2 * root(6), -2 * root(6), root(6), -(root(6)), root(6), -(root(6)), (-2 + root(-2)) * root(-3), (-2 + root(-2)) * root(-3), (2 + root(-2)) * root(-3), (2 + root(-2)) * root(-3)]], :eigenvalues => [E(3, 2), E(3, 2), E(3, 2), -(E(3, 2)), 1, 1, 1, 1, E(8), E(8, 3), 1, 1, -1, -1, E(4), -(E(4)), -(E(4)), E(4)], :charLabels => map(string, 1:18), :special => 12, :cospecial => 12, :name => "X_{18}", :explanation => "mysteryG14")
chevieset(:G4_22, :UnipotentCharacters, function (ST,)
        local r3, I, J, cuspidal
        I = E(4)
        J = E(3)
        r3 = -I * root(-3)
        if ST == 4
            return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:2, :rank => 2, :ST => 4), :levi => [], :parameterExponents => [1, 1], :charNumbers => 1:7, :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [2], :rank => 1), :levi => [1], :parameterExponents => [3], :charNumbers => [9, 8], :eigenvalue => E(3, 2), :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [10], :eigenvalue => -1, :cuspidalName => "G_4")], :families => [Family("C1", [1]), Family(((CHEVIE[:families])[:X])(3), [6, 5, 8], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => -1)), Family("C1", [7]), Family("X5", [2, 4, 10, 9, 3], Dict{Symbol, Any}(:signs => [1, 1, -1, -1, 1], :ennola => -5))], :a => [0, 4, 4, 4, 1, 1, 2, 1, 4, 4], :A => [0, 8, 8, 8, 5, 5, 6, 5, 8, 8])
        elseif ST == 6
            return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:2, :rank => 2, :ST => 6), :levi => [], :parameterExponents => [1, 1], :charNumbers => [1, 2, 3, 4, 5, 6, 12, 10, 8, 11, 7, 9, 13, 14], :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1], :rank => 1, :p => 4, :q => 1), :levi => [2], :parameterExponents => [[3, 3, 0, 3]], :charNumbers => [15, 17, 31, 16], :eigenvalue => E(3, 2), :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [18], :eigenvalue => -(E(3, 2)), :cuspidalName => "G_6[-\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [19], :eigenvalue => -(E(3, 2)), :cuspidalName => "G_6^2[-\\zeta_3^2]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [20], :eigenvalue => -1, :cuspidalName => "G_6[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [21], :eigenvalue => -1, :cuspidalName => "G_6^2[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [22], :eigenvalue => -1, :cuspidalName => "G_6^3[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [23], :eigenvalue => -1, :cuspidalName => "G_6^4[-1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [24], :eigenvalue => I, :cuspidalName => "G_6[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [25], :eigenvalue => I, :cuspidalName => "G_6^2[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [26], :eigenvalue => -I, :cuspidalName => "G_6[-i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [27], :eigenvalue => -I, :cuspidalName => "G_6^2[-i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [28], :eigenvalue => E(12, 5), :cuspidalName => "G_6[\\zeta_{12}^5]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [29], :eigenvalue => E(8, 3), :qEigen => 1 // 2, :cuspidalName => "G_6[\\zeta_8^3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [30], :eigenvalue => E(8, 7), :qEigen => 1 // 2, :cuspidalName => "G_6[\\zeta_8^7]")], :families => [Family("C1", [1]), Family(conj(SubFamilyij(((CHEVIE[:families])[:X])(12), 1, 3, (3 + root(-3)) // 2)), [7, 13, 8, 2, 27, 21, 24, 18, 15, 19, 10, 25, 22, 3, 9, 17, 28, 20, 4, 26, 16, 23], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1], :cospecial => 11, :ennola => -22)), Family("C1", [14]), Family("Z4", [29, 12, 30, 11], Dict{Symbol, Any}(:signs => [-1, 1, 1, -1], :ennola => -3)), Family(((CHEVIE[:families])[:X])(3), [5, 6, 31], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => -1))], :a => [0, 1, 1, 1, 10, 10, 1, 1, 1, 1, 5, 5, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 10], :A => [0, 11, 11, 11, 14, 14, 11, 11, 11, 11, 13, 13, 11, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 14])
        elseif ST == 8
            return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:2, :rank => 2, :ST => 8), :levi => [], :parameterExponents => [1, 1], :charNumbers => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 13, 12, 11, 16, 15], :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [2], :rank => 1, :p => 4, :q => 1), :levi => [1], :parameterExponents => [[3, 0, 0, 2]], :charNumbers => [17, 27, 25, 22], :eigenvalue => -1, :cuspidalName => ImprimitiveCuspidalName([[0], [0, 1], [0, 1], []])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [2], :rank => 1, :p => 4, :q => 1), :levi => [1], :parameterExponents => [[3, 0, 2, 0]], :charNumbers => [18, 29, 21, 30], :eigenvalue => -I, :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [2], :rank => 1, :p => 4, :q => 1), :levi => [1], :parameterExponents => [[3, 2, 0, 0]], :charNumbers => [19, 20, 26, 28], :eigenvalue => -1, :cuspidalName => ImprimitiveCuspidalName([[0], [], [0, 1], [0, 1]])), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [23], :eigenvalue => E(8, 3), :qEigen => 1 // 2, :cuspidalName => "G_8[\\zeta_8^3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [24], :eigenvalue => E(8, 7), :qEigen => 1 // 2, :cuspidalName => "G_8[\\zeta_8^7]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [31], :eigenvalue => 1, :cuspidalName => "G_8[1]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [32], :eigenvalue => I, :cuspidalName => "G_8[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [33], :eigenvalue => I, :cuspidalName => "G_8^2[i]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [34], :eigenvalue => J, :cuspidalName => "G_8[\\zeta_3]"), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [35], :eigenvalue => J ^ 2, :cuspidalName => "G_8[\\zeta_3^2]")], :families => [Family("C1", [1]), Family(((CHEVIE[:families])[:X])(4), [5, 6, 7, 17, 18, 19], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, -1], :ennola => 4)), Family(((CHEVIE[:families])[:X])(4), [11, 12, 13, 20, 21, 22], Dict{Symbol, Any}(:signs => [1, 1, 1, -1, -1, -1], :ennola => -6)), Family("Z4", [23, 15, 24, 16], Dict{Symbol, Any}(:signs => [-1, 1, 1, -1], :ennola => 1)), Family(Dict{Symbol, Any}(:fourierMat => [[-1, -1, 3, -3I, 3I, 1, 3, -3I, -3I, -3, 3, 3I, 3I, 1, -3I, -3I, 4, 4], [-1, -1, 3, 3I, -3I, 1, 3, 3I, 3I, -3, 3, -3I, -3I, 1, 3I, 3I, 4, 4], [3, 3, 3, -3, -3, 3, 3, 3, -3, 3, -3, -3, 3, 3, -3, 3, 0, 0], [-3I, 3I, -3, 3, 3, 3, 3, 3, -3, -3I, -3I, 3I, 3I, -3, 3I, 3I, 0, 0], [3I, -3I, -3, 3, 3, 3, 3, 3, -3, 3I, 3I, -3I, -3I, -3, -3I, -3I, 0, 0], [1, 1, 3, 3, 3, -1, 3, -3, 3, -3, 3, -3, 3, -1, -3, 3, -4, -4], [3, 3, 3, 3, 3, 3, 3, -3, 3, 3, -3, 3, -3, 3, 3, -3, 0, 0], [-3I, 3I, 3, 3, 3, -3, -3, 3, -3, -3I, -3I, -3I, -3I, 3, -3I, -3I, 0, 0], [-3I, 3I, -3, -3, -3, 3, 3, -3, 3, -3I, -3I, -3I, -3I, -3, -3I, -3I, 0, 0], [-3, -3, 3, -3I, 3I, -3, 3, -3I, -3I, 3, -3, -3I, -3I, -3, 3I, 3I, 0, 0], [3, 3, -3, -3I, 3I, 3, -3, -3I, -3I, -3, 3, -3I, -3I, 3, 3I, 3I, 0, 0], [3I, -3I, -3, 3I, -3I, -3, 3, -3I, -3I, -3I, -3I, -3, 3, 3, 3, -3, 0, 0], [3I, -3I, 3, 3I, -3I, 3, -3, -3I, -3I, -3I, -3I, 3, -3, -3, -3, 3, 0, 0], [1, 1, 3, -3, -3, -1, 3, 3, -3, -3, 3, 3, -3, -1, 3, -3, -4, -4], [-3I, 3I, -3, 3I, -3I, -3, 3, -3I, -3I, 3I, 3I, 3, -3, 3, -3, 3, 0, 0], [-3I, 3I, 3, 3I, -3I, 3, -3, -3I, -3I, 3I, 3I, -3, 3, -3, 3, -3, 0, 0], [4, 4, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, -4, 8], [4, 4, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 8, -4]] // 12, :eigenvalues => [1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -I, -I, 1, I, I, J, J ^ 2], :name => "?18", :explanation => "mystery G8", :special => 1, :cospecial => 2, :ennola => 6), [2, 4, 3, 8, 10, 9, 14, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], Dict{Symbol, Any}(:signs => [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1]))], :a => [0, 6, 6, 6, 1, 1, 1, 6, 6, 6, 2, 2, 2, 6, 3, 3, 1, 1, 1, 2, 2, 2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], :A => [0, 18, 18, 18, 11, 11, 11, 18, 18, 18, 14, 14, 14, 18, 15, 15, 11, 11, 11, 14, 14, 14, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])
        elseif ST == 14
            cuspidal(arg...) = begin
                    local res, n
                    n = "G_{14}"
                    if length(arg) > 2 && IsInt(arg[3])
                        n *= SPrint("^", arg[3])
                    end
                    n *= SPrint("[", FormatTeX(arg[2]), "]")
                    res = Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "A", :indices => [], :rank => 0), :levi => 1:2, :parameterExponents => [], :charNumbers => [arg[1]], :eigenvalue => arg[2], :cuspidalName => n)
                    if length(arg) > 2 && !(IsInt(arg[length(arg)]))
                        res[:qEigen] = arg[length(arg)]
                    end
                    return res
                end
            return Dict{Symbol, Any}(:harishChandra => [Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => 1:2, :rank => 2, :ST => 14), :levi => [], :parameterExponents => [1, 1], :charNumbers => [1, 2, 3, 4, 5, 6, 8, 7, 9, 12, 11, 10, 15, 14, 13, 16, 20, 18, 21, 17, 19, 22, 23, 24], :eigenvalue => 1, :cuspidalName => ""), Dict{Symbol, Any}(:relativeType => Dict{Symbol, Any}(:series => "ST", :indices => [1], :rank => 1, :p => 6, :q => 1), :levi => [2], :parameterExponents => [[3, 4, 4, 0, 4, 4]], :charNumbers => [66, 26, 27, 79, 28, 25], :eigenvalue => J ^ 2, :cuspidalName => ImprimitiveCuspidalName([[], [0, 1], [0, 1]])), cuspidal(34, 1), cuspidal(35, 1, 2), cuspidal(29, -1), cuspidal(30, -1, 2), cuspidal(31, -1, 3), cuspidal(32, -1, 4), cuspidal(33, -1, 5), cuspidal(73, -1, 6), cuspidal(74, -1, 7), cuspidal(40, J), cuspidal(41, J, 2), cuspidal(42, J, 3), cuspidal(43, J, 4), cuspidal(50, J, 5), cuspidal(51, J, 6), cuspidal(36, J ^ 2), cuspidal(37, J ^ 2, 2), cuspidal(52, -J), cuspidal(53, -J, 2), cuspidal(38, -(J ^ 2)), cuspidal(39, -(J ^ 2), 2), cuspidal(54, -I), cuspidal(55, -I, 2), cuspidal(56, I, 3), cuspidal(57, I, 4), cuspidal(58, I), cuspidal(59, I, 2), cuspidal(60, -I, 3), cuspidal(61, -I, 4), cuspidal(46, E(8)), cuspidal(47, E(8, 3), 2), cuspidal(48, E(8, 3)), cuspidal(49, E(8), 2), cuspidal(69, E(9, 5), 1 // 3), cuspidal(70, E(9, 5), 2, 2 // 3), cuspidal(71, E(9, 8), 1 // 3), cuspidal(72, E(9, 8), 2, 2 // 3), cuspidal(67, E(9, 2), 1 // 3), cuspidal(68, E(9, 2), 2, 2 // 3), cuspidal(62, E(12)), cuspidal(63, E(12, 7), 2), cuspidal(64, E(12, 7)), cuspidal(65, E(12), 2), cuspidal(75, E(16, 5), 1 // 2), cuspidal(77, E(16, 13), 1 // 2), cuspidal(78, E(16, 15), 1 // 2), cuspidal(76, E(16, 7), 1 // 2), cuspidal(44, E(24, 11)), cuspidal(45, E(24, 17))], :families => [Family("C1", [1]), Family(conj(((CHEVIE[:families])[:X])(3)) * Family("G14"), [26, 37, 28, 39, 14, 3, 34, 18, 46, 48, 15, 13, 30, 29, 59, 60, 55, 56, 25, 36, 27, 38, 2, 11, 16, 35, 49, 47, 12, 10, 32, 31, 58, 61, 54, 57, 4, 17, 22, 33, 41, 40, 43, 42, 44, 45, 51, 50, 53, 52, 64, 65, 62, 63], Dict{Symbol, Any}(:signs => [-1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1], :ennola => 32)), Family(((CHEVIE[:families])[:X])(3), [23, 24, 66], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => 2)), Family(((CHEVIE[:families])[:TQZ])(3, E(3, 2)), [19, 20, 21, 68, 70, 72, 67, 71, 69], Dict{Symbol, Any}(:cospecial => 2, :ennola => 8)), Family(Dict{Symbol, Any}(:fourierMat => OnMatrices([[1, 1, 2, 1, 1, -(root(-2)), -(root(-2)), -(root(-2)), -(root(-2))], [1, 1, 2, 1, 1, root(-2), root(-2), root(-2), root(-2)], [2, 2, 0, -2, -2, 0, 0, 0, 0], [1, 1, -2, 1, 1, -(root(-2)), root(-2), -(root(-2)), root(-2)], [1, 1, -2, 1, 1, root(-2), -(root(-2)), root(-2), -(root(-2))], [-(root(-2)), root(-2), 0, -(root(-2)), root(-2), 0, -2 * E(4), 0, 2 * E(4)], [-(root(-2)), root(-2), 0, root(-2), -(root(-2)), -2 * E(4), 0, 2 * E(4), 0], [-(root(-2)), root(-2), 0, -(root(-2)), root(-2), 0, 2 * E(4), 0, -2 * E(4)], [-(root(-2)), root(-2), 0, root(-2), -(root(-2)), 2 * E(4), 0, -2 * E(4), 0]] // 4, perm"(4,5)"), :explanation => "everything to explain", :eigenvalues => [1, 1, 1, -1, -1, E(16, 5), E(16, 7), -(E(16, 5)), -(E(16, 7))], :qEigen => [0, 0, 0, 0, 0, 1 // 2, 1 // 2, 1 // 2, 1 // 2], :special => 2, :ennola => -4), [8, 9, 7, 73, 74, 75, 76, 77, 78]), Family(((CHEVIE[:families])[:X])(3), [5, 6, 79], Dict{Symbol, Any}(:signs => [1, 1, -1], :ennola => -2))], :a => [0, 1, 1, 1, 20, 20, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 1, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 20], :A => [0, 23, 23, 23, 28, 28, 27, 27, 27, 23, 23, 23, 23, 23, 23, 23, 23, 23, 26, 26, 26, 23, 25, 25, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28])
        else
            return false
        end
    end)
chevieset(:G4_22, :Ennola, function (ST,)
        local uc, res, p, A, b, f
        uc = (chevieget(:G4_22, :UnipotentCharacters))(ST)
        if uc == false
            return false
        end
        res = uc[:a] * 0
        for f = uc[:families]
            A = Zbasedring(f)
            b = basis(A)
            if !(haskey(f, :ennola))
                f[:ennola] = f[:special]
            end
            if f[:ennola] > 0
                p = SPerm(b[f[:ennola]] * b, b)
            else
                p = SPerm(-(b[-(f[:ennola])]) * b, b)
            end
            res[f[:charNumbers]] = Permuted(f[:charNumbers], p)
        end
        return SPerm(res)
    end)
chevieset(:G4_22, :Invariants, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => [function (x1, x2)
                            return x1 ^ 4 - 8 * x1 * x2 ^ 3
                        end, function (x1, x2)
                            return (x1 ^ 6 + 20 * x1 ^ 3 * x2 ^ 3) - 8 * x2 ^ 6
                        end], Symbol("5") => [function (x1, x2)
                            return (x1 ^ 6 + 20 * x1 ^ 3 * x2 ^ 3) - 8 * x2 ^ 6
                        end, function (x1, x2)
                            return 3 * x1 ^ 3 * x2 ^ 9 + 3 * x1 ^ 6 * x2 ^ 6 + x1 ^ 9 * x2 ^ 3 + x2 ^ 12
                        end], Symbol("6") => [function (x1, x2)
                            return 8 * x1 * x2 ^ 3 + x1 ^ 4
                        end, function (x1, x2)
                            return ((-3 * x1 ^ 3 * x2 ^ 9 + 3 * x1 ^ 6 * x2 ^ 6) - x1 ^ 9 * x2 ^ 3) + x2 ^ 12
                        end], Symbol("7") => [function (x1, x2)
                            return (x1 ^ 10 * x2 ^ 2 - 2 * x1 ^ 6 * x2 ^ 6) + x1 ^ 2 * x2 ^ 10
                        end, function (x1, x2)
                            return ((x1 ^ 12 - 33 * x1 ^ 8 * x2 ^ 4) - 33 * x1 ^ 4 * x2 ^ 8) + x2 ^ 12
                        end], Symbol("8") => [function (x1, x2)
                            return 14 * x1 ^ 4 * x2 ^ 4 + x1 ^ 8 + x2 ^ 8
                        end, function (x1, x2)
                            return (-33 * x1 ^ 4 * x2 ^ 8 - 33 * x1 ^ 8 * x2 ^ 4) + x1 ^ 12 + x2 ^ 12
                        end], Symbol("9") => [function (x1, x2)
                            return 56 * x1 ^ 4 * x2 ^ 4 + 16 * x1 ^ 8 + x2 ^ 8
                        end, function (x1, x2)
                            return (((x1 ^ 4 * x2 ^ 20 - 16 * x1 ^ 8 * x2 ^ 16) + 96 * x1 ^ 12 * x2 ^ 12) - 256 * x1 ^ 16 * x2 ^ 8) + 256 * x1 ^ 20 * x2 ^ 4
                        end], Symbol("10") => [function (x1, x2)
                            return ((x1 ^ 12 - 88 * x1 ^ 9 * x2 ^ 3) - 704 * x1 ^ 3 * x2 ^ 9) - 64 * x2 ^ 12
                        end, function (x1, x2)
                            return (((((-512 * x1 ^ 3 * x2 ^ 21 - 1344 * x1 ^ 6 * x2 ^ 18) - 984 * x1 ^ 9 * x2 ^ 15) - 7 * x1 ^ 12 * x2 ^ 12) + 123 * x1 ^ 15 * x2 ^ 9) - 21 * x1 ^ 18 * x2 ^ 6) + x1 ^ 21 * x2 ^ 3
                        end], Symbol("11") => [function (x1, x2)
                            return ((x1 ^ 24 + 4048 * x1 ^ 18 * x2 ^ 6 + 20240 * x1 ^ 15 * x2 ^ 9 + 122544 * x1 ^ 12 * x2 ^ 12) - 161920 * x1 ^ 9 * x2 ^ 15) + 259072 * x1 ^ 6 * x2 ^ 18 + 4096 * x2 ^ 24
                        end, function (x1, x2)
                            return (((((x1 ^ 21 * x2 ^ 3 - 21 * x1 ^ 18 * x2 ^ 6) + 123 * x1 ^ 15 * x2 ^ 9) - 7 * x1 ^ 12 * x2 ^ 12) - 984 * x1 ^ 9 * x2 ^ 15) - 1344 * x1 ^ 6 * x2 ^ 18) - 512 * x1 ^ 3 * x2 ^ 21
                        end], Symbol("12") => [function (x1, x2)
                            return ((x1 ^ 6 + 10 * x1 ^ 4 * x2 ^ 2) - 20 * x1 ^ 2 * x2 ^ 4) - 8 * x2 ^ 6
                        end, function (x1, x2)
                            return (((3 * x1 ^ 8 - 56 * x1 ^ 6 * x2 ^ 2) - 56 * x1 ^ 4 * x2 ^ 4) - 224 * x1 ^ 2 * x2 ^ 6) + 48 * x2 ^ 8
                        end], Symbol("13") => [function (x1, x2)
                            return 14 * x1 ^ 4 * x2 ^ 4 + x1 ^ 8 + x2 ^ 8
                        end, function (x1, x2)
                            return (x1 ^ 2 * x2 ^ 10 - 2 * x1 ^ 6 * x2 ^ 6) + x1 ^ 10 * x2 ^ 2
                        end], Symbol("14") => [function (x1, x2)
                            return (-5 * x1 ^ 2 * x2 ^ 4 - 5 * x1 ^ 4 * x2 ^ 2) + x1 ^ 6 + x2 ^ 6
                        end, function (x1, x2)
                            return ((81 * x1 ^ 2 * x2 ^ 22 + 198 * x1 ^ 4 * x2 ^ 20 + 1309 * x1 ^ 6 * x2 ^ 18 + 264 * x1 ^ 8 * x2 ^ 16 + 2706 * x1 ^ 10 * x2 ^ 14) - 9116 * x1 ^ 12 * x2 ^ 12) + 2706 * x1 ^ 14 * x2 ^ 10 + 264 * x1 ^ 16 * x2 ^ 8 + 1309 * x1 ^ 18 * x2 ^ 6 + 198 * x1 ^ 20 * x2 ^ 4 + 81 * x1 ^ 22 * x2 ^ 2
                        end], Symbol("15") => [function (x1, x2)
                            return ((x1 ^ 12 + 40 * x1 ^ 9 * x2 ^ 3 + 384 * x1 ^ 6 * x2 ^ 6) - 320 * x1 ^ 3 * x2 ^ 9) + 64 * x2 ^ 12
                        end, function (x1, x2)
                            return (((512 * x1 ^ 3 * x2 ^ 21 + 1344 * x1 ^ 6 * x2 ^ 18 + 984 * x1 ^ 9 * x2 ^ 15 + 7 * x1 ^ 12 * x2 ^ 12) - 123 * x1 ^ 15 * x2 ^ 9) + 21 * x1 ^ 18 * x2 ^ 6) - x1 ^ 21 * x2 ^ 3
                        end], Symbol("16") => [function (x, y)
                            return ((228 * x ^ 5 * y ^ 15 + 494 * x ^ 10 * y ^ 10) - 228 * x ^ 15 * y ^ 5) + x ^ 20 + y ^ 20
                        end, function (x, y)
                            return ((-522 * x ^ 5 * y ^ 25 - 10005 * x ^ 10 * y ^ 20) - 10005 * x ^ 20 * y ^ 10) + 522 * x ^ 25 * y ^ 5 + x ^ 30 + y ^ 30
                        end], Symbol("17") => [function (x, y)
                            return ((228 * x ^ 5 * y ^ 15 + 494 * x ^ 10 * y ^ 10) - 228 * x ^ 15 * y ^ 5) + x ^ 20 + y ^ 20
                        end, function (x, y)
                            return ((((-6 * x ^ 5 * y ^ 55 + 330 * x ^ 10 * y ^ 50) - 7230 * x ^ 15 * y ^ 45) + 78540 * x ^ 20 * y ^ 40) - 417510 * x ^ 25 * y ^ 35) + 808566 * x ^ 30 * y ^ 30 + 417510 * x ^ 35 * y ^ 25 + 78540 * x ^ 40 * y ^ 20 + 7230 * x ^ 45 * y ^ 15 + 330 * x ^ 50 * y ^ 10 + 6 * x ^ 55 * y ^ 5
                        end], Symbol("18") => [function (x, y)
                            return ((-522 * x ^ 5 * y ^ 25 - 10005 * x ^ 10 * y ^ 20) - 10005 * x ^ 20 * y ^ 10) + 522 * x ^ 25 * y ^ 5 + x ^ 30 + y ^ 30
                        end, function (x, y)
                            return (((((((((6 * x ^ 5 * y ^ 55 - 330 * x ^ 10 * y ^ 50) + 7230 * x ^ 15 * y ^ 45) - 78540 * x ^ 20 * y ^ 40) + 417510 * x ^ 25 * y ^ 35) - 808566 * x ^ 30 * y ^ 30) - 417510 * x ^ 35 * y ^ 25) - 78540 * x ^ 40 * y ^ 20) - 7230 * x ^ 45 * y ^ 15) - 330 * x ^ 50 * y ^ 10) - 6 * x ^ 55 * y ^ 5
                        end], Symbol("19") => [function (x, y)
                            return ((((-(x ^ 5) * y ^ 55 + 55 * x ^ 10 * y ^ 50) - 1205 * x ^ 15 * y ^ 45) + 13090 * x ^ 20 * y ^ 40) - 69585 * x ^ 25 * y ^ 35) + 134761 * x ^ 30 * y ^ 30 + 69585 * x ^ 35 * y ^ 25 + 13090 * x ^ 40 * y ^ 20 + 1205 * x ^ 45 * y ^ 15 + 55 * x ^ 50 * y ^ 10 + x ^ 55 * y ^ 5
                        end, function (x, y)
                            return ((((-180 * x ^ 5 * y ^ 55 + 204954 * x ^ 10 * y ^ 50 + 11486340 * x ^ 15 * y ^ 45 + 88770255 * x ^ 20 * y ^ 40 + 70567704 * x ^ 25 * y ^ 35 + 83221580 * x ^ 30 * y ^ 30) - 70567704 * x ^ 35 * y ^ 25) + 88770255 * x ^ 40 * y ^ 20) - 11486340 * x ^ 45 * y ^ 15) + 204954 * x ^ 50 * y ^ 10 + 180 * x ^ 55 * y ^ 5 + x ^ 60 + y ^ 60
                        end], Symbol("20") => [function (x, y)
                            return ((34375 * x ^ 3 * y ^ 9 - 4125 * x ^ 6 * y ^ 6) - 275 * x ^ 9 * y ^ 3) + x ^ 12 + 15625 * y ^ 12
                        end, function (x, y)
                            return ((((-3540039062500 * x ^ 3 * y ^ 27 + 955810546875 * x ^ 6 * y ^ 24) - 977050781250 * x ^ 9 * y ^ 21) - 371279296875 * x ^ 12 * y ^ 18) - 2970234375 * x ^ 18 * y ^ 12) + 62531250 * x ^ 21 * y ^ 9 + 489375 * x ^ 24 * y ^ 6 + 14500 * x ^ 27 * y ^ 3 + 8 * x ^ 30 + 244140625000 * y ^ 30
                        end], Symbol("21") => [function (x, y)
                            return ((34375 * x ^ 3 * y ^ 9 - 4125 * x ^ 6 * y ^ 6) - 275 * x ^ 9 * y ^ 3) + x ^ 12 + 15625 * y ^ 12
                        end, function (x, y)
                            return -(x ^ 3) * y ^ 3 * ((5 * y ^ 2 - 5 * x * y) + 2 * x ^ 2) ^ 3 * (25 * y ^ 4 + 25 * y ^ 3 * x + 15 * y ^ 2 * x ^ 2 + 10 * y * x ^ 3 + 4 * x ^ 4) ^ 3 * (-5 * y ^ 2 + 5 * x * y + x ^ 2) ^ 3 * (((25 * y ^ 4 + 25 * y ^ 3 * x + 30 * y ^ 2 * x ^ 2) - 5 * y * x ^ 3) + x ^ 4) ^ 3 * (10 * y ^ 2 + 5 * x * y + x ^ 2) ^ 3 * ((((100 * y ^ 4 - 50 * y ^ 3 * x) + 15 * y ^ 2 * x ^ 2) - 5 * y * x ^ 3) + x ^ 4) ^ 3
                        end], Symbol("22") => [function (x, y)
                            return -x * y ^ 11 + 11 * x ^ 6 * y ^ 6 + x ^ 11 * y
                        end, function (x, y)
                            return ((228 * x ^ 5 * y ^ 15 + 494 * x ^ 10 * y ^ 10) - 228 * x ^ 15 * y ^ 5) + x ^ 20 + y ^ 20
                        end])
        return d[Symbol(ST)]
    end)
chevieset(:G4_22, :Discriminant, function (ST,)
        local d
        d = Dict{Symbol, Any}(Symbol("4") => function (t1, t2)
                        return -(t2 ^ 2) + t1 ^ 3
                    end, Symbol("5") => function (t1, t2)
                        return 64 * t2 ^ 2 - t1 ^ 2 * t2
                    end, Symbol("6") => function (t1, t2)
                        return 64 * t2 ^ 2 + t1 ^ 3 * t2
                    end, Symbol("7") => function (t1, t2)
                        return t2 ^ 2 * t1 + 108 * t1 ^ 3
                    end, Symbol("8") => function (t1, t2)
                        return -(t2 ^ 2) + t1 ^ 3
                    end, Symbol("9") => function (t1, t2)
                        return t1 ^ 3 * t2 - 432 * t2 ^ 2
                    end, Symbol("10") => function (t1, t2)
                        return 256 * t2 ^ 2 + t1 ^ 2 * t2
                    end, Symbol("11") => function (t1, t2)
                        return (96 * t1 * t2 ^ 2 - t1 ^ 2 * t2) + 14080 * t2 ^ 3
                    end, Symbol("12") => function (t1, t2)
                        return t2 ^ 3 - 27 * t1 ^ 4
                    end, Symbol("13") => function (t1, t2)
                        return 108 * t2 ^ 3 - t1 ^ 3 * t2
                    end, Symbol("14") => function (t1, t2)
                        return 16 * t2 ^ 2 + 27 * t1 ^ 4 * t2
                    end, Symbol("15") => function (t1, t2)
                        return 256 * t1 * t2 ^ 2 + t1 ^ 3 * t2
                    end, Symbol("16") => function (t1, t2)
                        return t2 ^ 2 - t1 ^ 3
                    end, Symbol("17") => function (t1, t2)
                        return 288 * t2 ^ 2 + t1 ^ 3 * t2
                    end, Symbol("18") => function (t1, t2)
                        return 288 * t2 ^ 2 + t1 ^ 2 * t2
                    end, Symbol("19") => function (t1, t2)
                        return t1 * t2 ^ 2 - 746496 * t1 ^ 3
                    end, Symbol("20") => function (t1, t2)
                        return t2 ^ 2 - 64 * t1 ^ 5
                    end, Symbol("21") => function (t1, t2)
                        return 625 * t2 ^ 2 - 64 * t1 ^ 5 * t2
                    end, Symbol("22") => function (t1, t2)
                        return t2 ^ 3 + 1728 * t1 ^ 5
                    end)
        return d[Symbol(ST)]
    end)
chevieset(Symbol("2G5"), :PhiFactors, [1, -1])
chevieset(Symbol("2G5"), :NrConjugacyClasses, 9)
chevieset(Symbol("2G5"), :ClassInfo, function ()
        local res
        res = Dict{Symbol, Any}(:classtext => [[], [1, 2, 2, 1, 2, 2, 1], [1, 2, 2, 1, 2, 2, 1, 1], [1], [1, 1, 2, 1, 1], [1, 1, 2, 2, 1, 1], [1, 2], [1, 2, 1], [2, 1, 2, 1]], :classes => [12, 6, 6, 6, 12, 6, 6, 6, 12], :orders => [2, 24, 24, 24, 6, 8, 24, 8, 6])
        res[:classnames] = map(joindigits, res[:classtext])
        return res
    end)
chevieset(Symbol("2G5"), :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 8, 2], [1, 16], [2, 9], [2, 5, 2], [2, 1], [3, 2], [3, 4], [3, 6]], :extRefl => [1, 6, 2], :b => [0, 8, 16, 9, 5, 1, 2, 4, 12], :B => [0, 8, 16, 15, 11, 7, 14, 4, 12], :charRestrictions => [1, 5, 9, 10, 14, 18, 20, 19, 21], :nrGroupClasses => 21)
        res[:charnames] = map(exceptioCharName, res[:charparams])
        return res
    end)
chevieset(Symbol("2G5"), :CharTable, function ()
        local res
        res = Dict{Symbol, Any}(:identifier => "2G5", :size => 72, :centralizers => [6, 12, 12, 12, 6, 12, 12, 12, 6], :irreducibles => [[1, 1, 1, 1, 1, 1, 1, 1, 1], -([1, E(3), E(3, 2), E(3), E(3, 2), 1, E(3, 2), 1, E(3)]), [1, E(3, 2), E(3), E(3, 2), E(3), 1, E(3), 1, E(3, 2)], [0, root(-2), -(root(-2)), -(root(-2)), 0, root(-2), root(-2), -(root(-2)), 0], [0, -(root(-2)) * E(3), root(-2) * E(3, 2), root(-2) * E(3), 0, -(root(-2)), -(root(-2)) * E(3, 2), root(-2), 0], -([0, root(-2) * E(3, 2), -(root(-2)) * E(3), -(root(-2)) * E(3, 2), 0, root(-2), root(-2) * E(3), -(root(-2)), 0]), [1, -(E(3)), -(E(3, 2)), -(E(3)), E(3, 2), -1, -(E(3, 2)), -1, E(3)], [1, -(E(3, 2)), -(E(3)), -(E(3, 2)), E(3), -1, -(E(3)), -1, E(3, 2)], [1, -1, -1, -1, 1, -1, -1, -1, 1]])
        return ((CHEVIE[:compat])[:MakeCharacterTable])(res)
    end)
