chevieset(:G31, :BraidRelations, [[[1, 4, 1], [4, 1, 4]], [[2, 4, 2], [4, 2, 4]], [[5, 3, 5], [3, 5, 3]], [[2, 5, 2], [5, 2, 5]], [[1, 2, 3], [2, 3, 1]], [[2, 3, 1], [3, 1, 2]], [[1, 5], [5, 1]], [[3, 4], [4, 3]], [[5, 4], [4, 5]]])
chevieset(:G31, :GeneratingRoots, [[E(4), 0, 0, 0], [-1 + E(4), -(E(4)) - 1, 0, 0] // 2, [1 + E(4), -(E(4)) - 1, 0, 0] // 2, [1, 1, 1, 1] // 2, [0, 1 + E(4), -(E(4)) - 1, 0] // 2])
chevieset(:G31, :EigenvaluesGeneratingReflections, [1 // 2, 1 // 2, 1 // 2, 1 // 2, 1 // 2])
chevieset(:G31, :Size, 46080)
chevieset(:G31, :ReflectionCoDegrees, [0, 12, 16, 28])
chevieset(:G31, :ReflectionDegrees, [8, 12, 20, 24])
chevieset(:G31, :ParabolicRepresentatives, function (s,)
        local t
        t = [[[]], [[1]], [[1, 4], [1, 5], 1:3], [[1, 4, 5], [2, 4, 5], 1:4], [1:5]]
        return t[s + 1]
    end)
chevieset(:G31, :NrConjugacyClasses, 59)
chevieset(:G31, :ClassNames, [".", "1", "34", "12", "25", "254", "321", "214", "231", "125", "354", "124", "c1c1c1", "5314", "1243", "3241", "c1", "2121", "53142", "zc", "41352", "31314", "c", "ccc123", "523523", "24z", "142142", "24zzz", "c1c1", "4124131", "354z", "354zzz", "ccc4", "cccc", "523524124", "313141314", "253254214", "cc", "24zz", "zzcc", "4135241352", "124zz", "ccc", "zccc", "1212124zz", "1243z", "43z", "c1c1c1c1", "1243zz", "1212z", "1z", "1zzz", "12zz", "123z", "123zz", "zcc", "z", "zzz", "zz"])
chevieset(:G31, :WordsClassRepresentatives, map((x->begin
                StringToDigits(Replace(x, ".", "", "z", "cccccc", "c", "12345"))
            end), chevieget(:G31, :ClassNames)))
chevieset(:G31, :ClassInfo, Dict{Symbol, Any}(:classtext => chevieget(:G31, :WordsClassRepresentatives), :classnames => chevieget(:G31, :ClassNames), :classparams => chevieget(:G31, :ClassNames), :orders => [1, 2, 2, 4, 3, 4, 4, 8, 4, 6, 6, 8, 20, 12, 8, 8, 20, 2, 12, 24, 12, 4, 24, 8, 4, 12, 4, 12, 10, 4, 12, 12, 8, 6, 12, 2, 12, 12, 6, 12, 6, 8, 8, 8, 8, 8, 4, 5, 8, 4, 4, 4, 4, 4, 4, 3, 4, 4, 2], :classes => [1, 60, 360, 180, 640, 2880, 30, 720, 30, 1920, 1920, 720, 2304, 960, 720, 720, 2304, 30, 960, 1920, 960, 720, 1920, 1440, 180, 640, 180, 640, 2304, 360, 1920, 1920, 2880, 160, 960, 60, 960, 160, 640, 160, 960, 720, 240, 240, 720, 720, 360, 2304, 720, 30, 60, 60, 180, 30, 30, 160, 1, 1, 1]))
chevieset(:G31, :PowerMaps, [nothing, [1, 1, 1, 18, 5, 3, 18, 27, 18, 5, 5, 25, 29, 34, 25, 27, 29, 1, 41, 40, 41, 18, 38, 50, 18, 39, 18, 39, 48, 18, 39, 39, 47, 56, 41, 1, 41, 34, 5, 34, 56, 25, 57, 58, 27, 27, 59, 48, 25, 59, 59, 59, 18, 18, 18, 56, 59, 59, 1], [1, 2, 3, 4, 1, 6, 9, 12, 7, 36, 2, 8, 17, 50, 16, 15, 13, 18, 54, 44, 55, 22, 43, 24, 27, 58, 25, 57, 29, 30, 52, 51, 33, 59, 9, 36, 7, 57, 59, 58, 18, 45, 44, 43, 42, 49, 47, 48, 46, 50, 52, 51, 53, 55, 54, 1, 58, 57, 59], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 58, 14, 15, 16, 57, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 59, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], nothing, [1, 2, 3, 4, 5, 6, 9, 12, 7, 10, 11, 8, 17, 14, 16, 15, 13, 18, 21, 23, 19, 22, 20, 24, 27, 28, 25, 26, 29, 30, 32, 31, 33, 34, 37, 36, 35, 40, 39, 38, 41, 45, 44, 43, 42, 49, 47, 48, 46, 50, 52, 51, 53, 55, 54, 56, 58, 57, 59], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 9, 12, 7, 10, 11, 8, 17, 14, 16, 15, 13, 18, 21, 23, 19, 22, 20, 24, 27, 28, 25, 26, 29, 30, 32, 31, 33, 34, 37, 36, 35, 40, 39, 38, 41, 45, 44, 43, 42, 49, 47, 48, 46, 50, 52, 51, 53, 55, 54, 56, 58, 57, 59], nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], nothing, [1, 2, 3, 4, 5, 6, 9, 12, 7, 10, 11, 8, 17, 14, 16, 15, 13, 18, 21, 23, 19, 22, 20, 24, 27, 28, 25, 26, 29, 30, 32, 31, 33, 34, 37, 36, 35, 40, 39, 38, 41, 45, 44, 43, 42, 49, 47, 48, 46, 50, 52, 51, 53, 55, 54, 56, 58, 57, 59], nothing, nothing, nothing, [1, 2, 3, 4, 5, 6, 9, 12, 7, 10, 11, 8, 17, 14, 16, 15, 13, 18, 21, 23, 19, 22, 20, 24, 27, 28, 25, 26, 29, 30, 32, 31, 33, 34, 37, 36, 35, 40, 39, 38, 41, 45, 44, 43, 42, 49, 47, 48, 46, 50, 52, 51, 53, 55, 54, 56, 58, 57, 59]])
chevieset(:G31, :CharInfo, function ()
        local res
        res = Dict{Symbol, Any}(:charparams => [[1, 0], [1, 60], [4, 37], [4, 1], [4, 31], [4, 7], [5, 12], [5, 24], [5, 40], [5, 4], [6, 14], [6, 18], [9, 28], [9, 8], [10, 24], [10, 12], [10, 30], [10, 6], [10, 26], [10, 2], [15, 20, 1], [15, 8, 2], [15, 8, 1], [15, 20, 2], [16, 16], [20, 14], [20, 13, 2], [20, 13, 1], [20, 19], [20, 7], [20, 5], [20, 23], [20, 3], [20, 21], [24, 6], [24, 14], [30, 16], [30, 4], [30, 10, 2], [30, 10, 1], [36, 10], [36, 5], [36, 15], [36, 7], [36, 17], [40, 6], [40, 18], [40, 14], [40, 10], [40, 9], [40, 13], [40, 7], [40, 15], [45, 12, 1], [45, 8, 1], [45, 12, 2], [45, 8, 2], [64, 9], [64, 11]], :extRefl => [1, 4, 11, 5, 2], :hgal => perm"( 3, 5)( 4, 6)(11,12)(17,19)(18,20)(27,29)(28,30)(31,33)(32,34)(35,36)(39,40)(42,44)(43,45)(48,49)(50,52)(51,53)")
        res[:b] = map((x->begin
                        x[2]
                    end), res[:charparams])
        res[:charnames] = map(exceptioCharName, res[:charparams])
        res[:a] = [0, 60, 63 // 2, 3 // 2, 63 // 2, 3 // 2, 6, 18, 37, 1, 8, 8, 23, 3, 16, 4, 26, 2, 26, 2, 16, 4, 4, 16, 8, 10, 25 // 2, 13 // 2, 25 // 2, 13 // 2, 3, 21, 3, 21, 8, 8, 16, 4, 8, 8, 8, 5, 15, 5, 15, 4, 16, 8, 8, 6, 12, 6, 12, 11, 7, 11, 7, 8, 8]
        res[:A] = [0, 60, 117 // 2, 57 // 2, 117 // 2, 57 // 2, 42, 54, 59, 23, 52, 52, 57, 37, 56, 44, 58, 34, 58, 34, 56, 44, 44, 56, 52, 50, 107 // 2, 95 // 2, 107 // 2, 95 // 2, 39, 57, 39, 57, 52, 52, 56, 44, 52, 52, 52, 45, 55, 45, 55, 44, 56, 52, 52, 48, 54, 48, 54, 53, 49, 53, 49, 52, 52]
        return res
    end)
chevieset(:G31, :cycpolfakedegrees, [[1, 0], [1, 60], [1, 37, 8, 8, 24], [1, 1, 8, 24, 32], [1, 31, 8, 24, 32], [1, 7, 8, 8, 24], [1, 12, 5, 10, 20, 24], [1, 24, 5, 10, 20, 24], [1, 40, 5, 10, 20], [1, 4, 5, 10, 20], [[1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 1], 14], [[1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1], 18], [1, 28, 3, 3, 6, 6, 12, 12, 24], [1, 8, 3, 3, 6, 6, 12, 12, 24], [1, 24, 5, 10, 16, 20], [1, 12, 5, 10, 16, 20], [1, 30, 5, 10, 16, 20], [1, 6, 5, 10, 16, 20], [1, 26, 5, 10, 20, 32], [1, 2, 5, 10, 20, 32], [[1, 0, 1, 0, -1, 0, 1, 0, 1], 20, 5, 10, 20], [[1, 0, 1, 0, -1, 0, 1, 0, 1], 8, 5, 10, 20], [[1, 0, 1, 0, -1, 0, 1, 0, 1], 8, 5, 10, 20], [[1, 0, 1, 0, -1, 0, 1, 0, 1], 20, 5, 10, 20], [1, 16, 8, 8, 8, 16, 24], [1, 14, 5, 8, 8, 10, 20, 24], [1, 13, 5, 8, 8, 10, 20, 24, 24], [2, 13, 5, 8, 10, 20, 24], [2, 19, 5, 8, 10, 20, 24], [1, 7, 5, 8, 8, 10, 20, 24, 24], [1, 5, 5, 8, 8, 10, 20, 24], [1, 23, 5, 8, 8, 10, 20, 24], [1, 3, 5, 8, 10, 16, 20, 24], [1, 21, 5, 8, 10, 16, 20, 24], [[1, 0, 0, 0, 1, 0, 2, 0, 3, 0, 3, 0, 4, 0, 3, 0, 3, 0, 2, 0, 1, 0, 0, 0, 1], 6], [[1, 0, 3, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 3, 0, 1], 14], [[1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1], 16, 5, 10, 20], [[1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1], 4, 5, 10, 20], [[1, 0, 1, 0, -1, 0, 1, 0, 1], 10, 5, 10, 16, 20], [[1, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1], 10, 5, 10, 20], [1, 10, 3, 3, 6, 6, 8, 8, 12, 12, 24, 24], [1, 5, 3, 3, 6, 6, 8, 8, 12, 12, 24, 24], [1, 15, 3, 3, 6, 6, 8, 8, 12, 12, 24, 24], [1, 7, 3, 3, 6, 6, 8, 12, 12, 16, 24], [1, 17, 3, 3, 6, 6, 8, 12, 12, 16, 24], [1, 6, 5, 8, 8, 8, 10, 20, 24], [1, 18, 5, 8, 8, 8, 10, 20, 24], [[2, 0, 1, 0, 2, 0, 1, 0, 2], 14, 5, 10, 20], [[1, 0, 1, 0, 2, 0, 0, 0, 2, 0, 1, 0, 1], 10, 5, 10, 20], [1, 9, 5, 8, 8, 8, 10, 20, 24], [1, 13, 5, 8, 8, 10, 16, 20, 24], [1, 7, 5, 8, 8, 10, 16, 20, 24], [1, 15, 5, 8, 8, 8, 10, 20, 24], [1, 12, 3, 3, 5, 6, 6, 10, 12, 12, 20, 24], [1, 8, 3, 3, 5, 6, 6, 10, 12, 12, 20, 24], [1, 12, 3, 3, 5, 6, 6, 10, 12, 12, 20, 24], [1, 8, 3, 3, 5, 6, 6, 10, 12, 12, 20, 24], [[1, 0, 1, 0, 4, 0, 3, 0, 3, 0, 2, 0, 2], 9, 8, 8, 24], [[2, 0, 2, 0, 3, 0, 3, 0, 4, 0, 1, 0, 1], 11, 8, 8, 24]])
chevieset(:G31, :SchurModels, Dict{Symbol, Any}(:f1_0 => Dict{Symbol, Any}(:coeff => 1, :factor => 0, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 9, 10, 12, 15]), :f4_1 => Dict{Symbol, Any}(:coeff => 2, :factor => -3, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 5, 5, 6, 6, 8, 9, 12, 12, 15, 20], :root => 1), :f5_4 => Dict{Symbol, Any}(:coeff => -1, :factor => -1, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 4, 4, 5, 6, 6, 9, 12]), :f5_12 => Dict{Symbol, Any}(:coeff => 1, :factor => -6, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 4, 4, 6, 6]), :f6_14 => Dict{Symbol, Any}(:coeff => 30, :factor => -16, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 15], :root => 1), :f9_8 => Dict{Symbol, Any}(:coeff => -1, :factor => -3, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 5, 5, 10]), :f10_12 => Dict{Symbol, Any}(:coeff => 2, :factor => -4, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 6, 6]), :f10_2 => Dict{Symbol, Any}(:coeff => 2, :factor => -4, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 5, 6, 6, 6, 6, 12, 12, 14, 18], :root => 1), :f15_8p => Dict{Symbol, Any}(:coeff => 3, :factor => -4, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 9]), :f15_8s => Dict{Symbol, Any}(:coeff => 3, :factor => -4, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 4, 4]), :f16_16 => Dict{Symbol, Any}(:coeff => 4, :factor => -8, :vcyc => [1, 1, 1, 1, 3, 3, 6, 6, 10]), :f20_14 => Dict{Symbol, Any}(:coeff => 1, :factor => -10, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 6, 6]), :f20_7 => Dict{Symbol, Any}(:coeff => -2, :factor => -6, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 6, 6, 7, 8, 9, 12, 12], :root => 1), :f20_3 => Dict{Symbol, Any}(:coeff => -2, :factor => -13, :vcyc => [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 8, 12, 12, 18], :root => 1), :f24_6 => Dict{Symbol, Any}(:coeff => 120, :factor => -16, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 6, 6, 6, 6, 10, 10], :root => 1), :f30_4 => Dict{Symbol, Any}(:coeff => 6, :factor => -4, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 12]), :f30_10p => Dict{Symbol, Any}(:coeff => 6, :factor => -16, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 9, 10, 10], :root => 1), :f36_10 => Dict{Symbol, Any}(:coeff => 5, :factor => -8, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3]), :f36_5 => Dict{Symbol, Any}(:coeff => -2, :factor => -10, :vcyc => [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 6, 8, 10, 10, 14, 20], :root => 1), :f40_6 => Dict{Symbol, Any}(:coeff => 2, :factor => -4, :vcyc => [1, 1, 1, 1, 3, 3, 4, 4, 6, 6, 12]), :f40_7 => Dict{Symbol, Any}(:coeff => 2, :factor => -12, :vcyc => [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 6, 6, 6, 6, 10, 12, 12], :root => 1), :f40_10 => Dict{Symbol, Any}(:coeff => 8, :factor => -16, :vcyc => [2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 10, 10, 12, 12], :root => 1), :f45_8p => Dict{Symbol, Any}(:coeff => -1, :factor => -7, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 5]), :f45_8s => Dict{Symbol, Any}(:coeff => -1, :factor => -11, :vcyc => [1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 7]), :f64_9 => Dict{Symbol, Any}(:coeff => 4, :factor => -8, :vcyc => [4, 4, 6, 6, 10, 12])))
chevieset(:G31, :SchurData, [Dict{Symbol, Any}(:name => "f1_0", :order => [1, 2]), Dict{Symbol, Any}(:name => "f1_0", :order => [2, 1]), Dict{Symbol, Any}(:name => "f4_1", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f4_1", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f4_1", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f4_1", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f5_12", :order => [1, 2]), Dict{Symbol, Any}(:name => "f5_12", :order => [2, 1]), Dict{Symbol, Any}(:name => "f5_4", :order => [2, 1]), Dict{Symbol, Any}(:name => "f5_4", :order => [1, 2]), Dict{Symbol, Any}(:name => "f6_14", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f6_14", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f9_8", :order => [2, 1]), Dict{Symbol, Any}(:name => "f9_8", :order => [1, 2]), Dict{Symbol, Any}(:name => "f10_12", :order => [2, 1]), Dict{Symbol, Any}(:name => "f10_12", :order => [1, 2]), Dict{Symbol, Any}(:name => "f10_2", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f10_2", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f10_2", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f10_2", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f15_8p", :order => [2, 1]), Dict{Symbol, Any}(:name => "f15_8p", :order => [1, 2]), Dict{Symbol, Any}(:name => "f15_8s", :order => [1, 2]), Dict{Symbol, Any}(:name => "f15_8s", :order => [2, 1]), Dict{Symbol, Any}(:name => "f16_16", :order => [1, 2]), Dict{Symbol, Any}(:name => "f20_14", :order => [1, 2]), Dict{Symbol, Any}(:name => "f20_3", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f20_3", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f20_3", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f20_3", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f20_7", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f20_7", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f20_7", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f20_7", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f24_6", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f24_6", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f30_4", :order => [2, 1]), Dict{Symbol, Any}(:name => "f30_4", :order => [1, 2]), Dict{Symbol, Any}(:name => "f30_10p", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f30_10p", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f36_10", :order => [1, 2]), Dict{Symbol, Any}(:name => "f36_5", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f36_5", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f36_5", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f36_5", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f40_6", :order => [1, 2]), Dict{Symbol, Any}(:name => "f40_6", :order => [2, 1]), Dict{Symbol, Any}(:name => "f40_10", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f40_10", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f40_7", :order => [1, 2], :rootPower => 1), Dict{Symbol, Any}(:name => "f40_7", :order => [2, 1], :rootPower => 1), Dict{Symbol, Any}(:name => "f40_7", :order => [1, 2], :rootPower => 0), Dict{Symbol, Any}(:name => "f40_7", :order => [2, 1], :rootPower => 0), Dict{Symbol, Any}(:name => "f45_8p", :order => [2, 1]), Dict{Symbol, Any}(:name => "f45_8p", :order => [1, 2]), Dict{Symbol, Any}(:name => "f45_8s", :order => [1, 2]), Dict{Symbol, Any}(:name => "f45_8s", :order => [2, 1]), Dict{Symbol, Any}(:name => "f64_9", :order => [1, 2]), Dict{Symbol, Any}(:name => "f64_9", :order => [1, 2])])
chevieset(:G31, :FactorizedSchurElement, function (p, para, root)
        local ci, data, r, q, res
        ci = Position(((chevieget(:G31, :CharInfo))())[:charparams], p)
        data = (chevieget(:G31, :SchurData))[ci]
        r = (chevieget(:G31, :SchurModels))[Symbol(data[:name])]
        q = (para[1])[data[:order]]
        q = q[1] // q[2]
        if haskey(r, :root)
            q = GetRoot(q, 2) * (-1) ^ data[:rootPower]
        end
        res = Dict{Symbol, Any}(:factor => Mvp(r[:coeff] * q ^ r[:factor]), :vcyc => map((v->begin
                                Dict{Symbol, Any}(:monomial => q, :pol => CycPol([1, 0, v]))
                            end), r[:vcyc]), :operations => FactorizedSchurElementsOps)
        return (FactorizedSchurElementsOps[:Simplify])(res)
    end)
chevieset(:G31, :HeckeCharTable, function (para, root)
        local tbl, x, I, r, p, adj, f1, f6, f7, f9, f11, f14, f16, f17, f21, f23, f25, f26, f27, f31, f35, f37, f39, f41, f42, f46, f48, f50, f54, f56, f58
        x = GetRoot(-((para[1])[1]) // (para[1])[2], 2)
        I = E(4)
        r = (para[1])[1]
        p = (para[1])[2]
        tbl = Dict{Symbol, Any}(:identifier => "H(G31)", :size => 46080, :order => 46080, :powermap => chevieget(:G31, :PowerMaps))
        Inherit(tbl, chevieget(:G31, :ClassInfo))
        adj(p, x) = begin
                return map(function (x, y)
                            return x * y
                        end, x, map((x->begin
                                    (-p) ^ length(x)
                                end), tbl[:classtext]))
            end
        f1(r) = begin
                return map((x->begin
                                r ^ length(x)
                            end), tbl[:classtext])
            end
        f6(x, y, sgn) = begin
                local v
                v = sgn * GetRoot(x * y, 2)
                return [4, 3x + y, 2 * x * y + 2 * x ^ 2, (-v * x - v * y) + 2 * x ^ 2, x * y + 2 * x ^ 2, x ^ 2 * y + x ^ 3, (((((-4 * v * x * y - 3 * v * x ^ 2) - 3 * v * y ^ 2) - 3 * x * y ^ 2) - 3 * x ^ 2 * y) + x ^ 3) - y ^ 3, (((-2 * v * x * y - v * x ^ 2) - x * y ^ 2) - x ^ 2 * y) + x ^ 3, -2 * v * x * y + 2 * x ^ 3, (-v * x * y - v * x ^ 2) + x ^ 3, 2 * x ^ 2 * y + x ^ 3, -v * x ^ 2 + x ^ 3, v * x ^ 13 * y ^ 4, -v * x ^ 2 * y - v * x ^ 3, -v * x ^ 2 * y + x ^ 4, (((-v * x * y ^ 2 - 3 * v * x ^ 2 * y) - 3 * v * x ^ 3) - 2 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y, v * x ^ 4 * y, x * y ^ 3 + x ^ 3 * y + 2 * x ^ 4, v * x ^ 2 * y ^ 2 + x ^ 3 * y ^ 2, 0, (((-2 * v * x ^ 3 * y - 3 * v * x ^ 4) - x ^ 3 * y ^ 2) - 3 * x ^ 4 * y) - x ^ 5, v * x ^ 2 * y ^ 2 + v * x ^ 3 * y + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 0, 0, 2 * v * x ^ 3 * y ^ 2 + x ^ 5 * y + x ^ 6, -v * x ^ 23 * y ^ 8 - 2 * v * x ^ 24 * y ^ 7, 4 * v * x ^ 2 * y ^ 3 + 8 * v * x ^ 3 * y ^ 2 + 6 * v * x ^ 4 * y + x ^ 2 * y ^ 4 + 6 * x ^ 3 * y ^ 3 + 7 * x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + x ^ 6, -v * x ^ 68 * y ^ 23 - 2 * v * x ^ 69 * y ^ 22, -(x ^ 9) * y ^ 3, v * x ^ 3 * y ^ 3 + 3 * v * x ^ 4 * y ^ 2 + 2 * v * x ^ 5 * y + 2 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y + x ^ 7, -2 * v * x ^ 24 * y ^ 8 - v * x ^ 25 * y ^ 7, -2 * v * x ^ 69 * y ^ 23 - v * x ^ 70 * y ^ 22, 0, -2 * x ^ 15 * y ^ 5, 3 * v * x ^ 6 * y ^ 2 + 2 * v * x ^ 7 * y + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2 + x ^ 8 * y, ((((((-v * x ^ 4 * y ^ 4 - 3 * v * x ^ 5 * y ^ 3) - 3 * v * x ^ 6 * y ^ 2) - v * x ^ 7 * y) - 3 * x ^ 5 * y ^ 4) - 3 * x ^ 6 * y ^ 3) - 3 * x ^ 7 * y ^ 2) + x ^ 9, (((((-4 * v * x ^ 4 * y ^ 4 - 5 * v * x ^ 5 * y ^ 3) + 3 * v * x ^ 6 * y ^ 2 + 5 * v * x ^ 7 * y) - x ^ 4 * y ^ 5) - 6 * x ^ 5 * y ^ 4) - 2 * x ^ 6 * y ^ 3) + 4 * x ^ 7 * y ^ 2 + 2 * x ^ 8 * y, 2 * v * x ^ 7 * y ^ 2, x ^ 46 * y ^ 16 + 2 * x ^ 47 * y ^ 15, 2 * v * x ^ 52 * y ^ 17, 8 * v * x ^ 6 * y ^ 3 + 28 * v * x ^ 7 * y ^ 2 + 26 * v * x ^ 8 * y + 6 * v * x ^ 9 + x ^ 6 * y ^ 4 + 18 * x ^ 7 * y ^ 3 + 31 * x ^ 8 * y ^ 2 + 15 * x ^ 9 * y + x ^ 10, -v * x ^ 47 * y ^ 15 + x ^ 48 * y ^ 15, 0, 0, ((v * x ^ 49 * y ^ 17 - x ^ 48 * y ^ 19) - x ^ 49 * y ^ 18) + x ^ 52 * y ^ 15, -v * x ^ 26 * y ^ 7 + x ^ 25 * y ^ 9, -2 * v * x ^ 23 * y ^ 8 - 2 * v * x ^ 24 * y ^ 7, -(x ^ 18) * y ^ 6, -v * x ^ 47 * y ^ 16 + x ^ 49 * y ^ 15, (-v * x ^ 23 * y ^ 10 - v * x ^ 25 * y ^ 8) - 2 * v * x ^ 26 * y ^ 7, -v * x ^ 22 * y ^ 8 - 3 * v * x ^ 23 * y ^ 7, -v * x ^ 67 * y ^ 23 - 3 * v * x ^ 68 * y ^ 22, (-v * x ^ 45 * y ^ 16 - v * x ^ 46 * y ^ 15) + 2 * x ^ 47 * y ^ 15, -2 * v * x ^ 25 * y ^ 7 + 2 * x ^ 24 * y ^ 9, -2 * v * x ^ 46 * y ^ 16 + 2 * x ^ 48 * y ^ 15, -2 * x ^ 30 * y ^ 10, -4 * v * x ^ 22 * y ^ 7, -4 * v * x ^ 67 * y ^ 22, 4 * x ^ 45 * y ^ 15] * x ^ 0 * y ^ 0
            end
        f7(r, p) = begin
                local q
                q = -r // p
                return adj(p, [5, -2 + 3q, (1 - 2q) + 2 * q ^ 2, (1 - 2q) + 2 * q ^ 2, -2q + q ^ 2, -(q ^ 2), (-1 - 3 * q ^ 2) + q ^ 3, -(q ^ 2), (-1 - 3 * q ^ 2) + q ^ 3, (q - q ^ 2) + q ^ 3, (q - q ^ 2) + q ^ 3, -(q ^ 2), 0, q ^ 2 + q ^ 4, -(q ^ 3), -(q ^ 3), 0, 1 + 2 * q ^ 2 + 2 * q ^ 4, 0, 0, 0, q ^ 5, 0, (q ^ 9 + q ^ 11) - q ^ 12, 2 * q ^ 3 - q ^ 4, -2 * q ^ 19 + q ^ 20, 2 * q ^ 3 - q ^ 4, -2 * q ^ 55 + q ^ 56, 0, -2 * q ^ 3 - q ^ 5, (q ^ 19 - q ^ 20) + q ^ 21, (q ^ 55 - q ^ 56) + q ^ 57, q ^ 9 - 2 * q ^ 10, 2 * q ^ 12, q ^ 5 - q ^ 6, -2 * q ^ 3 + 2 * q ^ 6 + q ^ 9, q ^ 5 - q ^ 6, 2 * q ^ 6, -2 * q ^ 37 + q ^ 38, 2 * q ^ 42, 2 * q ^ 6, -(q ^ 38), -3 * q ^ 9, -3 * q ^ 27, (((q ^ 38 - q ^ 39) + q ^ 40) - 3 * q ^ 41) + q ^ 42, -(q ^ 21), (q ^ 18 - 2 * q ^ 19) + 2 * q ^ 20, 0, -(q ^ 39), q ^ 18 + 2 * q ^ 20 + 2 * q ^ 22, -2 * q ^ 18 + 3 * q ^ 19, -2 * q ^ 54 + 3 * q ^ 55, (q ^ 36 - 2 * q ^ 37) + 2 * q ^ 38, (-(q ^ 18) - 3 * q ^ 20) + q ^ 21, (-(q ^ 36) - 3 * q ^ 38) + q ^ 39, 2 * q ^ 24, 5 * q ^ 18, 5 * q ^ 54, 5 * q ^ 36])
            end
        f9(r, p) = begin
                local q
                q = -r // p
                return adj(p, [5, -4 + q, 3 - 2q, 3 - 2q, 3 - q, -2 + q, -2 + 3q, -2 + q, -2 + 3q, -2 + 2q, -2 + 2q, -2 + q, 0, 1 - 2q, 1 - 2q, 1 - 2q, 0, 3 + 2 * q ^ 2, q, q ^ 7, q, -2 - q ^ 2, q, q ^ 4, 2 - q ^ 2, 3 * q ^ 6 - q ^ 7, 2 - q ^ 2, 3 * q ^ 18 - q ^ 19, 0, -1 + q + q ^ 2, -2 * q ^ 6 + 2 * q ^ 7, -2 * q ^ 18 + 2 * q ^ 19, -(q ^ 3), -(q ^ 4), q ^ 2, -2 - q ^ 3, q ^ 2, -(q ^ 2), 3 * q ^ 12 - q ^ 13, -(q ^ 14), -(q ^ 2), -2 * q ^ 12 + q ^ 13, q ^ 3, q ^ 9, (-2 * q ^ 12 - q ^ 13) + 2 * q ^ 14, q ^ 6 - 2 * q ^ 7, 3 * q ^ 6 - 2 * q ^ 7, 0, q ^ 12 - 2 * q ^ 13, 3 * q ^ 6 + 2 * q ^ 8, -4 * q ^ 6 + q ^ 7, -4 * q ^ 18 + q ^ 19, 3 * q ^ 12 - 2 * q ^ 13, -2 * q ^ 6 + 3 * q ^ 7, -2 * q ^ 12 + 3 * q ^ 13, -(q ^ 8), 5 * q ^ 6, 5 * q ^ 18, 5 * q ^ 12])
            end
        f11(x, y, sgn) = begin
                local v
                v = sgn * GetRoot(x * y, 2)
                return [6, 3x + 3y, 4 * x * y + x ^ 2 + y ^ 2, 2 * v * x + 2 * v * y + x ^ 2 + y ^ 2, 2 * x * y + x ^ 2 + y ^ 2, x * y ^ 2 + x ^ 2 * y, ((((8 * v * x * y + 6 * v * x ^ 2 + 6 * v * y ^ 2) - 6 * x * y ^ 2) - 6 * x ^ 2 * y) - x ^ 3) - y ^ 3, ((4 * v * x * y + v * x ^ 2 + v * y ^ 2) - 2 * x * y ^ 2) - 2 * x ^ 2 * y, 4 * v * x * y + x ^ 3 + y ^ 3, 2 * v * x * y + v * x ^ 2 + v * y ^ 2, 2 * x * y ^ 2 + 2 * x ^ 2 * y, v * x ^ 2 + v * y ^ 2, x ^ 9 * y ^ 9, (2 * v * x * y ^ 2 + 2 * v * x ^ 2 * y) - x ^ 2 * y ^ 2, v * x * y ^ 2 + v * x ^ 2 * y, (((((4 * v * x * y ^ 2 + 4 * v * x ^ 2 * y + 3 * v * x ^ 3 + 3 * v * y ^ 3) - 3 * x * y ^ 3) - 4 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4) - y ^ 4, x ^ 3 * y ^ 3, 2 * x * y ^ 3 + 2 * x ^ 3 * y + x ^ 4 + y ^ 4, -v * x ^ 2 * y ^ 2 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, v * x ^ 17 * y ^ 17, ((2 * v * x * y ^ 3 + 5 * v * x ^ 2 * y ^ 2 + 2 * v * x ^ 3 * y) - 4 * x ^ 2 * y ^ 3) - 4 * x ^ 3 * y ^ 2, ((-v * x * y ^ 3 - 2 * v * x ^ 2 * y ^ 2) - v * x ^ 3 * y) + x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, v * x ^ 2 * y ^ 2, -v * x ^ 7 * y ^ 10 - v * x ^ 10 * y ^ 7, (-2 * v * x ^ 2 * y ^ 3 - 2 * v * x ^ 3 * y ^ 2) + x * y ^ 5 + x ^ 5 * y, x ^ 15 * y ^ 17 + 2 * x ^ 16 * y ^ 16 + x ^ 17 * y ^ 15, (((-6 * v * x * y ^ 4 - 12 * v * x ^ 2 * y ^ 3) - 12 * v * x ^ 3 * y ^ 2) - 6 * v * x ^ 4 * y) + 3 * x * y ^ 5 + 8 * x ^ 2 * y ^ 4 + 12 * x ^ 3 * y ^ 3 + 8 * x ^ 4 * y ^ 2 + 3 * x ^ 5 * y, x ^ 45 * y ^ 47 + 2 * x ^ 46 * y ^ 46 + x ^ 47 * y ^ 45, x ^ 6 * y ^ 6, ((((-2 * v * x * y ^ 5 - 3 * v * x ^ 2 * y ^ 4) - 2 * v * x ^ 3 * y ^ 3) - 3 * v * x ^ 4 * y ^ 2) - 2 * v * x ^ 5 * y) + x * y ^ 6 + 2 * x ^ 2 * y ^ 5 + 2 * x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 2 * x ^ 16 * y ^ 17 + 2 * x ^ 17 * y ^ 16, 2 * x ^ 46 * y ^ 47 + 2 * x ^ 47 * y ^ 46, -v * x ^ 7 * y ^ 8 - v * x ^ 8 * y ^ 7, 3 * x ^ 10 * y ^ 10, ((-v * x ^ 3 * y ^ 5 - v * x ^ 4 * y ^ 4) - v * x ^ 5 * y ^ 3) + 3 * x ^ 4 * y ^ 5 + 3 * x ^ 5 * y ^ 4, ((((((v * x * y ^ 7 + 3 * v * x ^ 2 * y ^ 6 + 3 * v * x ^ 3 * y ^ 5 + 2 * v * x ^ 4 * y ^ 4 + 3 * v * x ^ 5 * y ^ 3 + 3 * v * x ^ 6 * y ^ 2 + v * x ^ 7 * y) - 3 * x ^ 2 * y ^ 7) - 3 * x ^ 3 * y ^ 6) - 3 * x ^ 4 * y ^ 5) - 3 * x ^ 5 * y ^ 4) - 3 * x ^ 6 * y ^ 3) - 3 * x ^ 7 * y ^ 2, (((((-3 * v * x ^ 2 * y ^ 6 + 3 * v * x ^ 3 * y ^ 5 + 11 * v * x ^ 4 * y ^ 4 + 3 * v * x ^ 5 * y ^ 3) - 3 * v * x ^ 6 * y ^ 2) + x ^ 2 * y ^ 7 + 2 * x ^ 3 * y ^ 6) - 7 * x ^ 4 * y ^ 5) - 7 * x ^ 5 * y ^ 4) + 2 * x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, 3 * x ^ 5 * y ^ 5, x ^ 30 * y ^ 32 + 2 * x ^ 31 * y ^ 31 + x ^ 32 * y ^ 30, 3 * x ^ 35 * y ^ 35, (((-6 * v * x ^ 3 * y ^ 6 - 16 * v * x ^ 4 * y ^ 5) - 16 * v * x ^ 5 * y ^ 4) - 6 * v * x ^ 6 * y ^ 3) + 2 * x ^ 3 * y ^ 7 + 12 * x ^ 4 * y ^ 6 + 19 * x ^ 5 * y ^ 5 + 12 * x ^ 6 * y ^ 4 + 2 * x ^ 7 * y ^ 3, v * x ^ 30 * y ^ 32 + v * x ^ 32 * y ^ 30, -2 * v * x ^ 7 * y ^ 7, -2 * v * x ^ 22 * y ^ 22, ((-v * x ^ 32 * y ^ 34 - v * x ^ 34 * y ^ 32) - 2 * x ^ 33 * y ^ 34) - 2 * x ^ 34 * y ^ 33, v * x ^ 16 * y ^ 17 + v * x ^ 17 * y ^ 16, x ^ 15 * y ^ 17 + 4 * x ^ 16 * y ^ 16 + x ^ 17 * y ^ 15, x ^ 12 * y ^ 12, v * x ^ 31 * y ^ 32 + v * x ^ 32 * y ^ 31, x ^ 15 * y ^ 19 + 2 * x ^ 16 * y ^ 18 + 2 * x ^ 18 * y ^ 16 + x ^ 19 * y ^ 15, 3 * x ^ 15 * y ^ 16 + 3 * x ^ 16 * y ^ 15, 3 * x ^ 45 * y ^ 46 + 3 * x ^ 46 * y ^ 45, 2 * v * x ^ 30 * y ^ 31 + 2 * v * x ^ 31 * y ^ 30 + x ^ 30 * y ^ 32 + x ^ 32 * y ^ 30, 4 * v * x ^ 16 * y ^ 16 + x ^ 15 * y ^ 18 + x ^ 18 * y ^ 15, 4 * v * x ^ 31 * y ^ 31 + x ^ 30 * y ^ 33 + x ^ 33 * y ^ 30, 3 * x ^ 20 * y ^ 20, 6 * x ^ 15 * y ^ 15, 6 * x ^ 45 * y ^ 45, 6 * x ^ 30 * y ^ 30] * x ^ 0 * y ^ 0
            end
        f14(r, p) = begin
                local q
                q = -r // p
                return adj(p, [9, -3 + 6q, (1 - 4q) + 4 * q ^ 2, (1 - 4q) + 4 * q ^ 2, -3q + 3 * q ^ 2, -2 * q ^ 2 + q ^ 3, (3q - 3 * q ^ 2) + 3 * q ^ 3, -2 * q ^ 2 + q ^ 3, (3q - 3 * q ^ 2) + 3 * q ^ 3, (q - 3 * q ^ 2) + 2 * q ^ 3, (q - 3 * q ^ 2) + 2 * q ^ 3, -2 * q ^ 2 + q ^ 3, -(q ^ 12), (q ^ 2 - 2 * q ^ 3) + q ^ 4, (q ^ 2 - q ^ 3) + q ^ 4, (q ^ 2 - q ^ 3) + q ^ 4, -(q ^ 4), 1 + 4 * q ^ 2 + 4 * q ^ 4, 0, 0, 0, q ^ 3 + 2 * q ^ 5, 0, (q ^ 11 - q ^ 12) + q ^ 13, (2 * q ^ 3 - 2 * q ^ 4) + q ^ 6, -3 * q ^ 21 + 3 * q ^ 22, (2 * q ^ 3 - 2 * q ^ 4) + q ^ 6, -3 * q ^ 61 + 3 * q ^ 62, -(q ^ 8), (3 * q ^ 4 - q ^ 5) + q ^ 7, (q ^ 21 - 3 * q ^ 22) + 2 * q ^ 23, (q ^ 61 - 3 * q ^ 62) + 2 * q ^ 63, -(q ^ 10) + 2 * q ^ 11, 0, 0, -2 * q ^ 3 + 3 * q ^ 6 + 2 * q ^ 9, 0, 0, -3 * q ^ 41 + 3 * q ^ 42, 0, 0, -2 * q ^ 42 + q ^ 43, 3 * q ^ 10, 3 * q ^ 30, (((q ^ 42 - q ^ 43) + q ^ 44) - 5 * q ^ 45) + 2 * q ^ 46 + q ^ 47, (q ^ 22 - q ^ 23) + q ^ 24, (q ^ 20 - 4 * q ^ 21) + 4 * q ^ 22, -(q ^ 16), (q ^ 42 - q ^ 43) + q ^ 44, q ^ 20 + 4 * q ^ 22 + 4 * q ^ 24, -3 * q ^ 20 + 6 * q ^ 21, -3 * q ^ 60 + 6 * q ^ 61, (q ^ 40 - 4 * q ^ 41) + 4 * q ^ 42, (3 * q ^ 21 - 3 * q ^ 22) + 3 * q ^ 23, (3 * q ^ 41 - 3 * q ^ 42) + 3 * q ^ 43, 0, 9 * q ^ 20, 9 * q ^ 60, 9 * q ^ 40])
            end
        f16(r, p) = begin
                local q
                q = -r // p
                return adj(p, [10, -4 + 6q, (1 - 6q) + 3 * q ^ 2, (1 - 6q) + 3 * q ^ 2, (1 - 3q) + 3 * q ^ 2, (q - 2 * q ^ 2) + q ^ 3, (3q - 6 * q ^ 2) + q ^ 3, (q - 2 * q ^ 2) + q ^ 3, (3q - 6 * q ^ 2) + q ^ 3, (2q - 4 * q ^ 2) + q ^ 3, (2q - 4 * q ^ 2) + q ^ 3, (q - 2 * q ^ 2) + q ^ 3, 0, 3 * q ^ 2 - 2 * q ^ 3, 2 * q ^ 2 - 2 * q ^ 3, 2 * q ^ 2 - 2 * q ^ 3, 0, 1 + 6 * q ^ 2 + 3 * q ^ 4, q ^ 3, q ^ 21, q ^ 3, -(q ^ 2) + 2 * q ^ 3 + q ^ 5, q ^ 3, -(q ^ 10) - q ^ 12, (-(q ^ 2) - 2 * q ^ 4) + q ^ 6, (q ^ 18 - 3 * q ^ 19) + 3 * q ^ 20, (-(q ^ 2) - 2 * q ^ 4) + q ^ 6, (q ^ 54 - 3 * q ^ 55) + 3 * q ^ 56, 0, ((-(q ^ 3) + q ^ 4) - q ^ 5) - q ^ 6, (2 * q ^ 19 - 4 * q ^ 20) + q ^ 21, (2 * q ^ 55 - 4 * q ^ 56) + q ^ 57, q ^ 9 - q ^ 10, q ^ 12, q ^ 5, -(q ^ 3) + 2 * q ^ 6 + q ^ 9, q ^ 5, q ^ 6, (q ^ 36 - 3 * q ^ 37) + 3 * q ^ 38, q ^ 42, q ^ 6, (q ^ 37 - 2 * q ^ 38) + q ^ 39, -2 * q ^ 9, -2 * q ^ 27, ((-(q ^ 37) + 2 * q ^ 38) - 4 * q ^ 41) + 2 * q ^ 42 + q ^ 43, 2 * q ^ 20 - 2 * q ^ 21, (q ^ 18 - 6 * q ^ 19) + 3 * q ^ 20, 0, 2 * q ^ 38 - 2 * q ^ 39, q ^ 18 + 6 * q ^ 20 + 3 * q ^ 22, -4 * q ^ 18 + 6 * q ^ 19, -4 * q ^ 54 + 6 * q ^ 55, (q ^ 36 - 6 * q ^ 37) + 3 * q ^ 38, (3 * q ^ 19 - 6 * q ^ 20) + q ^ 21, (3 * q ^ 37 - 6 * q ^ 38) + q ^ 39, q ^ 24, 10 * q ^ 18, 10 * q ^ 54, 10 * q ^ 36])
            end
        f17(x, y, sgn) = begin
                local v
                v = sgn * GetRoot(x * y, 2)
                return [10, 3x + 7y, 4 * x * y + x ^ 2 + 5 * y ^ 2, (-2 * v * x - 2 * v * y) + 2 * x * y + 4 * y ^ 2, 3 * x * y + 4 * y ^ 2, 2 * x * y ^ 2 + 2 * y ^ 3, (((((-8 * v * x * y - 6 * v * x ^ 2) - 6 * v * y ^ 2) - 3 * x * y ^ 2) - 6 * x ^ 2 * y) - 2 * x ^ 3) + y ^ 3, ((((-3 * v * x * y - v * x ^ 2) - 2 * v * y ^ 2) - x * y ^ 2) - 2 * x ^ 2 * y) + y ^ 3, -4 * v * x * y + 3 * x * y ^ 2 + 3 * y ^ 3, (-2 * v * x * y - 2 * v * y ^ 2) + x * y ^ 2 + 2 * y ^ 3, 3 * x * y ^ 2 + x ^ 2 * y + 3 * y ^ 3, (-v * x * y - v * y ^ 2) + x * y ^ 2 + y ^ 3, 0, (-2 * v * x * y ^ 2 - 2 * v * y ^ 3) + y ^ 4, -2 * v * x * y ^ 2 + x * y ^ 3 + y ^ 4, (((((-6 * v * x * y ^ 2 - 3 * v * x ^ 2 * y) - 5 * v * y ^ 3) - 4 * x * y ^ 3) - 4 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 0, 2 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + 4 * y ^ 4, v * x ^ 2 * y ^ 2 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, -v * x ^ 10 * y ^ 24, ((((-4 * v * x * y ^ 3 - v * x ^ 2 * y ^ 2) - 4 * v * y ^ 4) - 4 * x * y ^ 4) - 2 * x ^ 2 * y ^ 3) - 2 * y ^ 5, v * x * y ^ 3 + 2 * v * x ^ 2 * y ^ 2 + v * x ^ 3 * y + 2 * x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 2 * y ^ 5, -v * x * y ^ 3, v * x ^ 4 * y ^ 13 + v * x ^ 5 * y ^ 12, ((2 * v * x * y ^ 4 + 2 * v * x ^ 2 * y ^ 3 + x * y ^ 5) - x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3 + y ^ 6, 4 * x ^ 9 * y ^ 23 + 3 * x ^ 10 * y ^ 22, 10 * v * x * y ^ 4 + 14 * v * x ^ 2 * y ^ 3 + 8 * v * x ^ 3 * y ^ 2 + 2 * v * x ^ 4 * y + 2 * v * y ^ 5 + 6 * x * y ^ 5 + 11 * x ^ 2 * y ^ 4 + 11 * x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + x ^ 5 * y + y ^ 6, 4 * x ^ 27 * y ^ 65 + 3 * x ^ 28 * y ^ 64, 0, 3 * v * x * y ^ 5 + 6 * v * x ^ 2 * y ^ 4 + 3 * v * x ^ 3 * y ^ 3 + x * y ^ 6 + 3 * x ^ 2 * y ^ 5 + 4 * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3 + y ^ 7, 3 * x ^ 9 * y ^ 24 + 3 * x ^ 10 * y ^ 23 + x ^ 11 * y ^ 22, 3 * x ^ 27 * y ^ 66 + 3 * x ^ 28 * y ^ 65 + x ^ 29 * y ^ 64, v * x ^ 4 * y ^ 11 + v * x ^ 5 * y ^ 10, x ^ 6 * y ^ 14, v * x * y ^ 7 + v * x ^ 2 * y ^ 6 + v * x ^ 3 * y ^ 5 + 2 * x ^ 2 * y ^ 7 + 2 * x ^ 3 * y ^ 6, (((((((-2 * v * x * y ^ 7 - 6 * v * x ^ 2 * y ^ 6) - 6 * v * x ^ 3 * y ^ 5) - 2 * v * x ^ 4 * y ^ 4) - 3 * x ^ 2 * y ^ 7) - 8 * x ^ 3 * y ^ 6) - 6 * x ^ 4 * y ^ 5) - 3 * x ^ 5 * y ^ 4) + 2 * y ^ 9, ((((((3 * v * x * y ^ 7 - 9 * v * x ^ 3 * y ^ 5) - 6 * v * x ^ 4 * y ^ 4) + v * x ^ 6 * y ^ 2 + 2 * x * y ^ 8 + 2 * x ^ 2 * y ^ 7) - 5 * x ^ 3 * y ^ 6) - 8 * x ^ 4 * y ^ 5) - 2 * x ^ 5 * y ^ 4) + x ^ 6 * y ^ 3, x ^ 3 * y ^ 7, 4 * x ^ 18 * y ^ 44 + 3 * x ^ 19 * y ^ 43, x ^ 21 * y ^ 49, ((((((24 * v * x * y ^ 8 + 20 * v * x ^ 2 * y ^ 7) - 2 * v * x ^ 3 * y ^ 6) - 6 * v * x ^ 4 * y ^ 5) + 8 * v * y ^ 9 + 16 * x * y ^ 9 + 26 * x ^ 2 * y ^ 8 + 10 * x ^ 3 * y ^ 7) - 6 * x ^ 4 * y ^ 6) - 3 * x ^ 5 * y ^ 5) + 2 * y ^ 10, (-v * x ^ 18 * y ^ 44 - v * x ^ 19 * y ^ 43) + x ^ 18 * y ^ 45 + x ^ 19 * y ^ 44, 2 * v * x ^ 4 * y ^ 10, 2 * v * x ^ 13 * y ^ 31, ((((((v * x ^ 18 * y ^ 48 + v * x ^ 19 * y ^ 47 + v * x ^ 20 * y ^ 46) - v * x ^ 22 * y ^ 44) + x ^ 18 * y ^ 49) - 2 * x ^ 19 * y ^ 48) - 3 * x ^ 20 * y ^ 47) - x ^ 21 * y ^ 46) - x ^ 22 * y ^ 45, -2 * v * x ^ 10 * y ^ 23 + x ^ 9 * y ^ 25 + x ^ 10 * y ^ 24, 5 * x ^ 9 * y ^ 23 + 4 * x ^ 10 * y ^ 22 + x ^ 11 * y ^ 21, 0, -2 * v * x ^ 19 * y ^ 44 + x ^ 18 * y ^ 46 + x ^ 19 * y ^ 45, 4 * x ^ 9 * y ^ 25 + 2 * x ^ 10 * y ^ 24 + 2 * x ^ 11 * y ^ 23 + 2 * x ^ 12 * y ^ 22, 7 * x ^ 9 * y ^ 22 + 3 * x ^ 10 * y ^ 21, 7 * x ^ 27 * y ^ 64 + 3 * x ^ 28 * y ^ 63, (-2 * v * x ^ 18 * y ^ 43 - 2 * v * x ^ 19 * y ^ 42) + 4 * x ^ 18 * y ^ 44 + 2 * x ^ 19 * y ^ 43, -4 * v * x ^ 10 * y ^ 22 + 3 * x ^ 9 * y ^ 24 + 3 * x ^ 10 * y ^ 23, -4 * v * x ^ 19 * y ^ 43 + 3 * x ^ 18 * y ^ 45 + 3 * x ^ 19 * y ^ 44, x ^ 12 * y ^ 28, 10 * x ^ 9 * y ^ 21, 10 * x ^ 27 * y ^ 63, 10 * x ^ 18 * y ^ 42] * x ^ 0 * y ^ 0
            end
        f21(r, p) = begin
                local q
                q = -r // p
                return adj(p, [15, -9 + 6q, (5 - 8q) + 2 * q ^ 2, (4 - 2q) + q ^ 2, (4 - 5q) + q ^ 2, (-1 + 3q) - q ^ 2, (-12q + 9 * q ^ 2) - 4 * q ^ 3, (-3q + 3 * q ^ 2) - q ^ 3, -4 - 3 * q ^ 2, -1 + q, (-2 + 5q) - 3 * q ^ 2, -1, 0, -(q ^ 2), 1, (((-1 + 9q) - 9 * q ^ 2) + 3 * q ^ 3) - q ^ 4, 0, (((4 - 4q) + 2 * q ^ 2) - 4 * q ^ 3) + q ^ 4, (q - q ^ 2) - q ^ 4, q ^ 14, (-6q + 8 * q ^ 2) - 3 * q ^ 3, (((-1 + 3q) - 4 * q ^ 2) + 4 * q ^ 3) - q ^ 4, q ^ 2, -(q ^ 8), (1 - 2q) + 2 * q ^ 3 + 2 * q ^ 4, (4 * q ^ 12 - 5 * q ^ 13) + q ^ 14, (((((2 - 8q) + 21 * q ^ 2) - 20 * q ^ 3) + 11 * q ^ 4) - 4 * q ^ 5) + q ^ 6, (4 * q ^ 36 - 5 * q ^ 37) + q ^ 38, 0, ((((-1 + 2q) - 4 * q ^ 2) + 6 * q ^ 3) - 4 * q ^ 4) + 2 * q ^ 5, (-2 * q ^ 12 + 5 * q ^ 13) - 3 * q ^ 14, (-2 * q ^ 36 + 5 * q ^ 37) - 3 * q ^ 38, -(q ^ 6), 3 * q ^ 8, 4 * q ^ 3 - 5 * q ^ 4, (((((-1 + 6 * q ^ 2) - 11 * q ^ 3) + 9 * q ^ 4) - 6 * q ^ 5) + 3 * q ^ 6) - 3 * q ^ 7, ((((-q - q ^ 2) + 8 * q ^ 4) - 9 * q ^ 5) + 3 * q ^ 6) - q ^ 8, 3 * q ^ 4, (4 * q ^ 24 - 5 * q ^ 25) + q ^ 26, 3 * q ^ 28, ((((-4q + 20 * q ^ 2) - 32 * q ^ 3) + 24 * q ^ 4) - 12 * q ^ 5) + q ^ 6 + 2 * q ^ 7, -(q ^ 24), q ^ 6, q ^ 18, (((-(q ^ 24) + 3 * q ^ 26) - 5 * q ^ 27) + 3 * q ^ 28) - q ^ 29, q ^ 12, (5 * q ^ 12 - 8 * q ^ 13) + 2 * q ^ 14, 0, q ^ 24, (((4 * q ^ 12 - 4 * q ^ 13) + 2 * q ^ 14) - 4 * q ^ 15) + q ^ 16, -9 * q ^ 12 + 6 * q ^ 13, -9 * q ^ 36 + 6 * q ^ 37, (4 * q ^ 24 - 2 * q ^ 25) + q ^ 26, -4 * q ^ 12 - 3 * q ^ 14, -4 * q ^ 24 - 3 * q ^ 26, 3 * q ^ 16, 15 * q ^ 12, 15 * q ^ 36, 15 * q ^ 24])
            end
        f23(r, p) = begin
                local q
                q = -r // p
                return adj(p, [15, -6 + 9q, (3 - 6q) + 6 * q ^ 2, -4q + 3 * q ^ 2, (1 - 5q) + 4 * q ^ 2, (q - 2 * q ^ 2) + 2 * q ^ 3, ((4 - 12q) + 6 * q ^ 2) - 3 * q ^ 3, ((1 - 3q) + 2 * q ^ 2) - q ^ 3, -6 * q ^ 2 + q ^ 3, -(q ^ 2) + q ^ 3, ((-1 + 2q) - 4 * q ^ 2) + 3 * q ^ 3, -(q ^ 2), 0, -(q ^ 2), -(q ^ 3), ((5q - 9 * q ^ 2) + 6 * q ^ 3) - 3 * q ^ 4, 0, ((-4q + 4 * q ^ 2) - 4 * q ^ 3) + 3 * q ^ 4, (q - q ^ 2) + q ^ 3, -(q ^ 21), ((4 * q ^ 2 - 6 * q ^ 3) + 5 * q ^ 4) - 2 * q ^ 5, (((q - 4 * q ^ 2) + 4 * q ^ 3) - 3 * q ^ 4) + q ^ 5, -(q ^ 3), -(q ^ 12), -2 * q ^ 3 + q ^ 4, (q ^ 18 - 5 * q ^ 19) + 4 * q ^ 20, (((((1 - 4q) + 13 * q ^ 2) - 20 * q ^ 3) + 18 * q ^ 4) - 10 * q ^ 5) + q ^ 6, (q ^ 54 - 5 * q ^ 55) + 4 * q ^ 56, 0, (6 * q ^ 3 - 8 * q ^ 4) + 5 * q ^ 5, ((-(q ^ 18) + 2 * q ^ 19) - 4 * q ^ 20) + 3 * q ^ 21, ((-(q ^ 54) + 2 * q ^ 55) - 4 * q ^ 56) + 3 * q ^ 57, q ^ 9, 3 * q ^ 12, 5 * q ^ 5 - 4 * q ^ 6, ((((-3 * q ^ 3 + 9 * q ^ 4) - 12 * q ^ 5) + 11 * q ^ 6) - 3 * q ^ 7) + q ^ 9, (((((q ^ 2 - 5 * q ^ 3) + 6 * q ^ 4) - 3 * q ^ 5) + q ^ 6) - q ^ 7) + 2 * q ^ 8, 3 * q ^ 6, (q ^ 36 - 5 * q ^ 37) + 4 * q ^ 38, 3 * q ^ 42, (((((2 * q ^ 3 - 14 * q ^ 5) + 28 * q ^ 6) - 28 * q ^ 7) + 15 * q ^ 8) - 6 * q ^ 9) + 2 * q ^ 10, -(q ^ 38), -(q ^ 9), -(q ^ 27), ((2 * q ^ 38 - 2 * q ^ 39) - 4 * q ^ 41) + 3 * q ^ 42, -(q ^ 21), (3 * q ^ 18 - 6 * q ^ 19) + 6 * q ^ 20, 0, -(q ^ 39), ((-4 * q ^ 19 + 4 * q ^ 20) - 4 * q ^ 21) + 3 * q ^ 22, -6 * q ^ 18 + 9 * q ^ 19, -6 * q ^ 54 + 9 * q ^ 55, -4 * q ^ 37 + 3 * q ^ 38, -6 * q ^ 20 + q ^ 21, -6 * q ^ 38 + q ^ 39, 3 * q ^ 24, 15 * q ^ 18, 15 * q ^ 54, 15 * q ^ 36])
            end
        f25(r, p) = begin
                local q
                q = -r // p
                return adj(p, [16, -8 + 8q, (4 - 8q) + 4 * q ^ 2, (4 - 8q) + 4 * q ^ 2, (2 - 6q) + 2 * q ^ 2, 2q - 2 * q ^ 2, ((-2 + 6q) - 6 * q ^ 2) + 2 * q ^ 3, 2q - 2 * q ^ 2, ((-2 + 6q) - 6 * q ^ 2) + 2 * q ^ 3, ((-1 + 4q) - 4 * q ^ 2) + q ^ 3, ((-1 + 4q) - 4 * q ^ 2) + q ^ 3, 2q - 2 * q ^ 2, q ^ 9, (-2q + 2 * q ^ 2) - 2 * q ^ 3, (-q + 2 * q ^ 2) - q ^ 3, (-q + 2 * q ^ 2) - q ^ 3, q ^ 3, 4 + 8 * q ^ 2 + 4 * q ^ 4, 0, 0, 0, (-1 - q ^ 2) + q ^ 3 + q ^ 5, 0, 0, (-2 * q ^ 2 + 4 * q ^ 3) - 2 * q ^ 4, (2 * q ^ 15 - 6 * q ^ 16) + 2 * q ^ 17, (-2 * q ^ 2 + 4 * q ^ 3) - 2 * q ^ 4, (2 * q ^ 45 - 6 * q ^ 46) + 2 * q ^ 47, q ^ 6, ((q ^ 2 - 3 * q ^ 3) + 3 * q ^ 4) - q ^ 5, ((-(q ^ 15) + 4 * q ^ 16) - 4 * q ^ 17) + q ^ 18, ((-(q ^ 45) + 4 * q ^ 46) - 4 * q ^ 47) + q ^ 48, 0, -2 * q ^ 10, -(q ^ 4) + q ^ 5, (-1 - 5 * q ^ 3) + 5 * q ^ 6 + q ^ 9, -(q ^ 4) + q ^ 5, -2 * q ^ 5, (2 * q ^ 30 - 6 * q ^ 31) + 2 * q ^ 32, -2 * q ^ 35, -2 * q ^ 5, 2 * q ^ 31 - 2 * q ^ 32, 0, 0, ((((-2 * q ^ 31 + 6 * q ^ 32) - 2 * q ^ 33) + 2 * q ^ 34) - 6 * q ^ 35) + 2 * q ^ 36, (-(q ^ 16) + 2 * q ^ 17) - q ^ 18, (4 * q ^ 15 - 8 * q ^ 16) + 4 * q ^ 17, q ^ 12, (-(q ^ 31) + 2 * q ^ 32) - q ^ 33, 4 * q ^ 15 + 8 * q ^ 17 + 4 * q ^ 19, -8 * q ^ 15 + 8 * q ^ 16, -8 * q ^ 45 + 8 * q ^ 46, (4 * q ^ 30 - 8 * q ^ 31) + 4 * q ^ 32, ((-2 * q ^ 15 + 6 * q ^ 16) - 6 * q ^ 17) + 2 * q ^ 18, ((-2 * q ^ 30 + 6 * q ^ 31) - 6 * q ^ 32) + 2 * q ^ 33, -2 * q ^ 20, 16 * q ^ 15, 16 * q ^ 45, 16 * q ^ 30])
            end
        f26(r, p) = begin
                local q
                q = -r // p
                return adj(p, [20, -10 + 10q, (4 - 12q) + 4 * q ^ 2, (2 - 8q) + 2 * q ^ 2, (4 - 6q) + 4 * q ^ 2, ((-1 + 3q) - 3 * q ^ 2) + q ^ 3, ((4 - 6q) + 6 * q ^ 2) - 4 * q ^ 3, ((1 - q) + q ^ 2) - q ^ 3, 6q - 6 * q ^ 2, 3q - 3 * q ^ 2, ((-1 + 6q) - 6 * q ^ 2) + q ^ 3, ((-1 + q) - q ^ 2) + q ^ 3, 0, 2 * q ^ 2, (-q + 2 * q ^ 2) - q ^ 3, (((-1 + 5q) - 8 * q ^ 2) + 5 * q ^ 3) - q ^ 4, 0, (((2 - 4q) + 8 * q ^ 2) - 4 * q ^ 3) + 2 * q ^ 4, ((-1 + q) - q ^ 4) + q ^ 5, 0, ((-2q + 6 * q ^ 2) - 6 * q ^ 3) + 2 * q ^ 4, ((2q - 6 * q ^ 2) + 6 * q ^ 3) - 2 * q ^ 4, 0, 0, 1 + q ^ 2 + q ^ 4 + q ^ 6, (-4 * q ^ 15 + 6 * q ^ 16) - 4 * q ^ 17, (((((3 - 6q) + 15 * q ^ 2) - 20 * q ^ 3) + 15 * q ^ 4) - 6 * q ^ 5) + 3 * q ^ 6, (-4 * q ^ 45 + 6 * q ^ 46) - 4 * q ^ 47, 0, ((((q - 2 * q ^ 2) + 7 * q ^ 3) - 7 * q ^ 4) + 2 * q ^ 5) - q ^ 6, ((q ^ 15 - 6 * q ^ 16) + 6 * q ^ 17) - q ^ 18, ((q ^ 45 - 6 * q ^ 46) + 6 * q ^ 47) - q ^ 48, 0, 2 * q ^ 10, -4 * q ^ 4 + 4 * q ^ 5, ((((3 * q ^ 2 - 6 * q ^ 3) + 9 * q ^ 4) - 9 * q ^ 5) + 6 * q ^ 6) - 3 * q ^ 7, ((((2 * q ^ 2 - 4 * q ^ 3) + 4 * q ^ 4) - 4 * q ^ 5) + 4 * q ^ 6) - 2 * q ^ 7, -2 * q ^ 5, (4 * q ^ 30 - 6 * q ^ 31) + 4 * q ^ 32, -2 * q ^ 35, (((((2 * q ^ 2 - 10 * q ^ 3) + 20 * q ^ 4) - 26 * q ^ 5) + 20 * q ^ 6) - 10 * q ^ 7) + 2 * q ^ 8, ((-(q ^ 30) + q ^ 31) - q ^ 32) + q ^ 33, 0, 0, (((((-(q ^ 30) - q ^ 31) + 4 * q ^ 32) - 2 * q ^ 33) + 2 * q ^ 34) - 4 * q ^ 35) + q ^ 36 + q ^ 37, (q ^ 16 - 2 * q ^ 17) + q ^ 18, (-4 * q ^ 15 + 12 * q ^ 16) - 4 * q ^ 17, 0, (-(q ^ 31) + 2 * q ^ 32) - q ^ 33, (((-2 * q ^ 15 + 4 * q ^ 16) - 8 * q ^ 17) + 4 * q ^ 18) - 2 * q ^ 19, 10 * q ^ 15 - 10 * q ^ 16, 10 * q ^ 45 - 10 * q ^ 46, (2 * q ^ 30 - 8 * q ^ 31) + 2 * q ^ 32, -6 * q ^ 16 + 6 * q ^ 17, 6 * q ^ 31 - 6 * q ^ 32, 2 * q ^ 20, -20 * q ^ 15, -20 * q ^ 45, 20 * q ^ 30])
            end
        f27(x, y, sgn) = begin
                local v
                v = sgn * GetRoot(x * y, 2)
                return [20, 9x + 11y, 10 * x * y + 4 * x ^ 2 + 6 * y ^ 2, 3 * v * x + 3 * v * y + 4 * x * y + 2 * x ^ 2 + 4 * y ^ 2, 7 * x * y + 2 * x ^ 2 + 4 * y ^ 2, 3 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, ((((12 * v * x * y + 9 * v * x ^ 2 + 9 * v * y ^ 2) - 9 * x * y ^ 2) - 15 * x ^ 2 * y) - 3 * x ^ 3) - 3 * y ^ 3, ((((5 * v * x * y + 2 * v * x ^ 2 + 2 * v * y ^ 2) - 3 * x * y ^ 2) - 4 * x ^ 2 * y) - x ^ 3) - y ^ 3, 6 * v * x * y + 6 * x * y ^ 2 + 2 * x ^ 3 + 2 * y ^ 3, 3 * v * x * y + v * x ^ 2 + 2 * v * y ^ 2 + x * y ^ 2 + x ^ 2 * y + y ^ 3, 6 * x * y ^ 2 + 4 * x ^ 2 * y + x ^ 3 + 2 * y ^ 3, v * x * y + v * x ^ 2 + v * y ^ 2 + x * y ^ 2, 0, 2 * v * x * y ^ 2 + v * x ^ 2 * y + v * y ^ 3, 2 * v * x * y ^ 2 + v * x ^ 2 * y + x * y ^ 3, (((((7 * v * x * y ^ 2 + 6 * v * x ^ 2 * y + 3 * v * x ^ 3 + 5 * v * y ^ 3) - 7 * x * y ^ 3) - 11 * x ^ 2 * y ^ 2) - 7 * x ^ 3 * y) - x ^ 4) - 3 * y ^ 4, 0, 5 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 5 * x ^ 3 * y + 2 * x ^ 4 + 4 * y ^ 4, -v * x ^ 2 * y ^ 2 + v * x ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 0, (((((-v * x * y ^ 3 - 2 * v * x ^ 2 * y ^ 2) - v * x ^ 3 * y) - x * y ^ 4) - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - y ^ 5, ((-v * x * y ^ 3 - 3 * v * x ^ 2 * y ^ 2) - 2 * v * x ^ 3 * y) + 3 * x * y ^ 4 + 5 * x ^ 2 * y ^ 3 + 5 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + y ^ 5, 0, 0, ((((-2 * v * x * y ^ 4 - 2 * v * x ^ 2 * y ^ 3) - 2 * v * x ^ 3 * y ^ 2) + x * y ^ 5 + x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + x ^ 5 * y, (-4 * v * x ^ 13 * y ^ 18 - 7 * v * x ^ 14 * y ^ 17) - 2 * v * x ^ 15 * y ^ 16, ((((-10 * v * x * y ^ 4 - 18 * v * x ^ 2 * y ^ 3) - 16 * v * x ^ 3 * y ^ 2) - 8 * v * x ^ 4 * y) - 2 * v * y ^ 5) + 10 * x * y ^ 5 + 21 * x ^ 2 * y ^ 4 + 25 * x ^ 3 * y ^ 3 + 18 * x ^ 4 * y ^ 2 + 6 * x ^ 5 * y + x ^ 6 + y ^ 6, (-4 * v * x ^ 40 * y ^ 51 - 7 * v * x ^ 41 * y ^ 50) - 2 * v * x ^ 42 * y ^ 49, 0, ((((-3 * v * x * y ^ 5 - 6 * v * x ^ 2 * y ^ 4) - 4 * v * x ^ 3 * y ^ 3) - 3 * v * x ^ 4 * y ^ 2) - 2 * v * x ^ 5 * y) + x * y ^ 6 + 5 * x ^ 2 * y ^ 5 + 8 * x ^ 3 * y ^ 4 + 5 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, ((-2 * v * x ^ 13 * y ^ 19 - 6 * v * x ^ 14 * y ^ 18) - 4 * v * x ^ 15 * y ^ 17) - v * x ^ 16 * y ^ 16, ((-2 * v * x ^ 40 * y ^ 52 - 6 * v * x ^ 41 * y ^ 51) - 4 * v * x ^ 42 * y ^ 50) - v * x ^ 43 * y ^ 49, 0, -4 * x ^ 9 * y ^ 11, 5 * v * x ^ 3 * y ^ 5 + 5 * v * x ^ 4 * y ^ 4, (((((((2 * v * x * y ^ 7 + 6 * v * x ^ 2 * y ^ 6 + 6 * v * x ^ 3 * y ^ 5 + 3 * v * x ^ 4 * y ^ 4 + 3 * v * x ^ 5 * y ^ 3 + 3 * v * x ^ 6 * y ^ 2 + v * x ^ 7 * y) - 6 * x ^ 2 * y ^ 7) - 11 * x ^ 3 * y ^ 6) - 12 * x ^ 4 * y ^ 5) - 9 * x ^ 5 * y ^ 4) - 8 * x ^ 6 * y ^ 3) - 3 * x ^ 7 * y ^ 2) + y ^ 9, ((((((((3 * v * x * y ^ 7 + 10 * v * x ^ 2 * y ^ 6 + 21 * v * x ^ 3 * y ^ 5 + 20 * v * x ^ 4 * y ^ 4 + 4 * v * x ^ 5 * y ^ 3) - 5 * v * x ^ 6 * y ^ 2) - 3 * v * x ^ 7 * y) - 2 * x * y ^ 8) - 7 * x ^ 2 * y ^ 7) - 15 * x ^ 3 * y ^ 6) - 20 * x ^ 4 * y ^ 5) - 12 * x ^ 5 * y ^ 4) + 3 * x ^ 7 * y ^ 2 + x ^ 8 * y, 4 * v * x ^ 4 * y ^ 5, 4 * x ^ 27 * y ^ 35 + 7 * x ^ 28 * y ^ 34 + 2 * x ^ 29 * y ^ 33, 4 * v * x ^ 31 * y ^ 38, ((((((8 * v * x * y ^ 8 + 36 * v * x ^ 2 * y ^ 7 + 76 * v * x ^ 3 * y ^ 6 + 86 * v * x ^ 4 * y ^ 5 + 54 * v * x ^ 5 * y ^ 4 + 16 * v * x ^ 6 * y ^ 3) - 11 * x ^ 2 * y ^ 8) - 33 * x ^ 3 * y ^ 7) - 48 * x ^ 4 * y ^ 6) - 38 * x ^ 5 * y ^ 5) - 14 * x ^ 6 * y ^ 4) + x ^ 7 * y ^ 3 + 2 * x ^ 8 * y ^ 2 + y ^ 10, v * x ^ 27 * y ^ 35 + v * x ^ 28 * y ^ 34 + v * x ^ 29 * y ^ 33 + x ^ 28 * y ^ 35, 0, 0, ((((((-v * x ^ 27 * y ^ 39 - v * x ^ 28 * y ^ 38) - v * x ^ 29 * y ^ 37) - 2 * x ^ 28 * y ^ 39) - 4 * x ^ 29 * y ^ 38) - 3 * x ^ 30 * y ^ 37) - 5 * x ^ 31 * y ^ 36) - 3 * x ^ 32 * y ^ 35, (-v * x ^ 14 * y ^ 19 - 2 * x ^ 15 * y ^ 19) - x ^ 16 * y ^ 18, (-6 * v * x ^ 13 * y ^ 18 - 10 * v * x ^ 14 * y ^ 17) - 4 * v * x ^ 15 * y ^ 16, 0, 2 * v * x ^ 28 * y ^ 35 + v * x ^ 29 * y ^ 34 + x ^ 28 * y ^ 36, (((-4 * v * x ^ 13 * y ^ 20 - 5 * v * x ^ 14 * y ^ 19) - 4 * v * x ^ 15 * y ^ 18) - 5 * v * x ^ 16 * y ^ 17) - 2 * v * x ^ 17 * y ^ 16, -11 * v * x ^ 13 * y ^ 17 - 9 * v * x ^ 14 * y ^ 16, -11 * v * x ^ 40 * y ^ 50 - 9 * v * x ^ 41 * y ^ 49, 3 * v * x ^ 27 * y ^ 34 + 3 * v * x ^ 28 * y ^ 33 + 4 * x ^ 27 * y ^ 35 + 4 * x ^ 28 * y ^ 34 + 2 * x ^ 29 * y ^ 33, ((-2 * v * x ^ 13 * y ^ 19 - 6 * v * x ^ 14 * y ^ 18) - 2 * v * x ^ 16 * y ^ 16) - 6 * x ^ 15 * y ^ 18, 6 * v * x ^ 28 * y ^ 34 + 2 * x ^ 27 * y ^ 36 + 6 * x ^ 28 * y ^ 35 + 2 * x ^ 30 * y ^ 33, -4 * x ^ 18 * y ^ 22, -20 * v * x ^ 13 * y ^ 16, -20 * v * x ^ 40 * y ^ 49, 20 * x ^ 27 * y ^ 33] * x ^ 0 * y ^ 0
            end
        f31(x, y, sgn) = begin
                local v
                v = sgn * GetRoot(x * y, 2)
                return [20, 13x + 7y, 10 * x * y + 8 * x ^ 2 + 2 * y ^ 2, v * x + v * y + 4 * x * y + 6 * x ^ 2, 6 * x * y + 7 * x ^ 2 + y ^ 2, x * y ^ 2 + 4 * x ^ 2 * y + 3 * x ^ 3, ((((4 * v * x * y + 3 * v * x ^ 2 + 3 * v * y ^ 2) - 15 * x * y ^ 2) - 9 * x ^ 2 * y) - x ^ 3) - 5 * y ^ 3, ((((v * x * y + v * x ^ 2 + v * y ^ 2) - 4 * x * y ^ 2) - 3 * x ^ 2 * y) + x ^ 3) - y ^ 3, 2 * v * x * y + 6 * x ^ 2 * y + 4 * x ^ 3, v * x * y + v * x ^ 2 + 2 * x ^ 2 * y + 2 * x ^ 3, 3 * x * y ^ 2 + 7 * x ^ 2 * y + 4 * x ^ 3, v * x * y + x ^ 2 * y + 2 * x ^ 3, 0, v * x ^ 2 * y + v * x ^ 3, v * x ^ 2 * y + 2 * x ^ 3 * y + x ^ 4, ((((2 * v * x * y ^ 2 + 3 * v * x ^ 2 * y + 2 * v * x ^ 3) - 4 * x * y ^ 3) - 11 * x ^ 2 * y ^ 2) - 9 * x ^ 3 * y) - 3 * x ^ 4, 0, 5 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 5 * x ^ 3 * y + 6 * x ^ 4, v * x * y ^ 3 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 0, (((((-v * x ^ 2 * y ^ 2 - v * x ^ 3 * y) + v * x ^ 4) - x ^ 2 * y ^ 3) - 5 * x ^ 3 * y ^ 2) - 6 * x ^ 4 * y) - 3 * x ^ 5, (-v * x * y ^ 3 - v * x ^ 2 * y ^ 2) + x * y ^ 4 + 5 * x ^ 2 * y ^ 3 + 6 * x ^ 3 * y ^ 2 + 4 * x ^ 4 * y + 2 * x ^ 5, 0, 0, -2 * v * x ^ 4 * y + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + 2 * x ^ 6, v * x ^ 19 * y ^ 12 + 6 * v * x ^ 20 * y ^ 11 + 7 * v * x ^ 21 * y ^ 10, ((((-2 * v * x * y ^ 4 - 4 * v * x ^ 2 * y ^ 3) - 6 * v * x ^ 3 * y ^ 2) - 4 * v * x ^ 4 * y) - 2 * v * x ^ 5) + 3 * x * y ^ 5 + 12 * x ^ 2 * y ^ 4 + 27 * x ^ 3 * y ^ 3 + 27 * x ^ 4 * y ^ 2 + 13 * x ^ 5 * y + 3 * x ^ 6 + y ^ 6, v * x ^ 58 * y ^ 33 + 6 * v * x ^ 59 * y ^ 32 + 7 * v * x ^ 60 * y ^ 31, 0, ((-2 * v * x ^ 3 * y ^ 3 - 3 * v * x ^ 4 * y ^ 2) - v * x ^ 5 * y) + 5 * x ^ 3 * y ^ 4 + 10 * x ^ 4 * y ^ 3 + 7 * x ^ 5 * y ^ 2 + 3 * x ^ 6 * y + x ^ 7, 3 * v * x ^ 20 * y ^ 12 + 7 * v * x ^ 21 * y ^ 11 + 4 * v * x ^ 22 * y ^ 10, 3 * v * x ^ 59 * y ^ 33 + 7 * v * x ^ 60 * y ^ 32 + 4 * v * x ^ 61 * y ^ 31, 0, 2 * x ^ 13 * y ^ 7, 3 * v * x ^ 5 * y ^ 3 + 2 * v * x ^ 6 * y ^ 2 + x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, ((((((v * x ^ 4 * y ^ 4 + 3 * v * x ^ 5 * y ^ 3 + 3 * v * x ^ 6 * y ^ 2 + v * x ^ 7 * y) - 3 * x ^ 3 * y ^ 6) - 6 * x ^ 4 * y ^ 5) - 15 * x ^ 5 * y ^ 4) - 13 * x ^ 6 * y ^ 3) - 9 * x ^ 7 * y ^ 2) + 2 * x ^ 9, ((((((-2 * v * x ^ 2 * y ^ 6 - 5 * v * x ^ 3 * y ^ 5) + 4 * v * x ^ 4 * y ^ 4 + 15 * v * x ^ 5 * y ^ 3 + 10 * v * x ^ 6 * y ^ 2 + v * x ^ 7 * y + 2 * x ^ 2 * y ^ 7 + 3 * x ^ 3 * y ^ 6) - 8 * x ^ 4 * y ^ 5) - 20 * x ^ 5 * y ^ 4) - 17 * x ^ 6 * y ^ 3) - 4 * x ^ 7 * y ^ 2) + x ^ 8 * y, 2 * v * x ^ 6 * y ^ 3, x ^ 39 * y ^ 23 + 6 * x ^ 40 * y ^ 22 + 7 * x ^ 41 * y ^ 21, 2 * v * x ^ 45 * y ^ 24, ((((((-2 * v * x ^ 3 * y ^ 6 + 2 * v * x ^ 4 * y ^ 5 + 30 * v * x ^ 5 * y ^ 4 + 56 * v * x ^ 6 * y ^ 3 + 38 * v * x ^ 7 * y ^ 2 + 6 * v * x ^ 8 * y) - 2 * v * x ^ 9) - x ^ 4 * y ^ 6) - 17 * x ^ 5 * y ^ 5) - 33 * x ^ 6 * y ^ 4) - 15 * x ^ 7 * y ^ 3) + 12 * x ^ 8 * y ^ 2 + 13 * x ^ 9 * y + 3 * x ^ 10, v * x ^ 40 * y ^ 22 + x ^ 41 * y ^ 22 + 2 * x ^ 42 * y ^ 21, 0, 0, (((((((v * x ^ 41 * y ^ 25 - v * x ^ 44 * y ^ 22) - v * x ^ 45 * y ^ 21) - 2 * x ^ 41 * y ^ 26) - 4 * x ^ 42 * y ^ 25) - 2 * x ^ 43 * y ^ 24) - 3 * x ^ 44 * y ^ 23) - 2 * x ^ 45 * y ^ 22) + 2 * x ^ 46 * y ^ 21, 2 * v * x ^ 22 * y ^ 11 + v * x ^ 23 * y ^ 10 + x ^ 22 * y ^ 12, 2 * v * x ^ 19 * y ^ 12 + 10 * v * x ^ 20 * y ^ 11 + 8 * v * x ^ 21 * y ^ 10, 0, v * x ^ 41 * y ^ 22 + 2 * x ^ 42 * y ^ 22 + x ^ 43 * y ^ 21, 5 * v * x ^ 20 * y ^ 13 + 4 * v * x ^ 21 * y ^ 12 + 5 * v * x ^ 22 * y ^ 11 + 6 * v * x ^ 23 * y ^ 10, 7 * v * x ^ 19 * y ^ 11 + 13 * v * x ^ 20 * y ^ 10, 7 * v * x ^ 58 * y ^ 32 + 13 * v * x ^ 59 * y ^ 31, v * x ^ 39 * y ^ 22 + v * x ^ 40 * y ^ 21 + 4 * x ^ 40 * y ^ 22 + 6 * x ^ 41 * y ^ 21, 6 * v * x ^ 21 * y ^ 11 + 4 * v * x ^ 22 * y ^ 10 + 2 * x ^ 21 * y ^ 12, 2 * v * x ^ 40 * y ^ 22 + 6 * x ^ 41 * y ^ 22 + 4 * x ^ 42 * y ^ 21, 2 * x ^ 26 * y ^ 14, 20 * v * x ^ 19 * y ^ 10, 20 * v * x ^ 58 * y ^ 31, 20 * x ^ 39 * y ^ 21] * x ^ 0 * y ^ 0
            end
        f35(r, p, sgn) = begin
                local v
                v = sgn * GetRoot(r // p, 2)
                return adj(p, [24, -12 - 12 * v ^ 2, 6 + 12 * v ^ 2 + 6 * v ^ 4, 2 + 4v + 4 * v ^ 2 + 4 * v ^ 3 + 2 * v ^ 4, 4 + 8 * v ^ 2 + 4 * v ^ 4, ((-1 - 3 * v ^ 2) - 3 * v ^ 4) - v ^ 6, (((((7 - 12v) + 21 * v ^ 2) - 16 * v ^ 3) + 21 * v ^ 4) - 12 * v ^ 5) + 7 * v ^ 6, (((((2 - 3v) + 6 * v ^ 2) - 6 * v ^ 3) + 6 * v ^ 4) - 3 * v ^ 5) + 2 * v ^ 6, (((-1 - 3 * v ^ 2) - 8 * v ^ 3) - 3 * v ^ 4) - v ^ 6, (-2v - 4 * v ^ 3) - 2 * v ^ 5, ((-2 - 6 * v ^ 2) - 6 * v ^ 4) - 2 * v ^ 6, (-v - 2 * v ^ 3) - v ^ 5, -(v ^ 18), (((2 * v ^ 2 - 2 * v ^ 3) + 3 * v ^ 4) - 2 * v ^ 5) + 2 * v ^ 6, 2 * v ^ 3 + 2 * v ^ 5, (((((((-3 + 5v) - 12 * v ^ 2) + 9 * v ^ 3) - 18 * v ^ 4) + 9 * v ^ 5) - 12 * v ^ 6) + 5 * v ^ 7) - 3 * v ^ 8, -(v ^ 6), 2 + 8 * v ^ 2 + 4 * v ^ 4 + 8 * v ^ 6 + 2 * v ^ 8, (((((((-2v + 2 * v ^ 2) - 3 * v ^ 3) + 3 * v ^ 4) - 3 * v ^ 5) + 3 * v ^ 6) - 3 * v ^ 7) + 2 * v ^ 8) - 2 * v ^ 9, v ^ 35, (((((((2v - 4 * v ^ 2) + 11 * v ^ 3) - 10 * v ^ 4) + 19 * v ^ 5) - 10 * v ^ 6) + 11 * v ^ 7) - 4 * v ^ 8) + 2 * v ^ 9, (((((-4 * v ^ 2 + 2 * v ^ 3) - 8 * v ^ 4) + 4 * v ^ 5) - 8 * v ^ 6) + 2 * v ^ 7) - 4 * v ^ 8, v ^ 5, ((-(v ^ 15) - v ^ 17) - v ^ 19) - v ^ 21, (((((((v ^ 2 - 2 * v ^ 3) + 2 * v ^ 4) - 2 * v ^ 5) + 2 * v ^ 6) - 2 * v ^ 7) + 2 * v ^ 8) - 2 * v ^ 9) + v ^ 10, 4 * v ^ 30 + 8 * v ^ 32 + 4 * v ^ 34, (((((((((((2 - 2v) + 13 * v ^ 2) - 12 * v ^ 3) + 32 * v ^ 4) - 22 * v ^ 5) + 42 * v ^ 6) - 22 * v ^ 7) + 32 * v ^ 8) - 12 * v ^ 9) + 13 * v ^ 10) - 2 * v ^ 11) + 2 * v ^ 12, 4 * v ^ 90 + 8 * v ^ 92 + 4 * v ^ 94, -(v ^ 12), (((((((((-(v ^ 2) + 3 * v ^ 3) - 6 * v ^ 4) + 6 * v ^ 5) - 13 * v ^ 6) + 6 * v ^ 7) - 13 * v ^ 8) + 6 * v ^ 9) - 6 * v ^ 10) + 3 * v ^ 11) - v ^ 12, ((-2 * v ^ 30 - 6 * v ^ 32) - 6 * v ^ 34) - 2 * v ^ 36, ((-2 * v ^ 90 - 6 * v ^ 92) - 6 * v ^ 94) - 2 * v ^ 96, -2 * (v ^ 17 + v ^ 15), 3 * v ^ 20, (((-(v ^ 7) - 3 * v ^ 8) - v ^ 9) - 3 * v ^ 10) - v ^ 11, (((((((((((-2 * v ^ 3 + 6 * v ^ 4) - 6 * v ^ 5) + 12 * v ^ 6) - 6 * v ^ 7) + 18 * v ^ 8) - 4 * v ^ 9) + 18 * v ^ 10) - 6 * v ^ 11) + 12 * v ^ 12) - 6 * v ^ 13) + 6 * v ^ 14) - 2 * v ^ 15, (((((((((((2 * v ^ 3 - 3 * v ^ 4) + 12 * v ^ 5) - 17 * v ^ 6) + 31 * v ^ 7) - 36 * v ^ 8) + 41 * v ^ 9) - 36 * v ^ 10) + 31 * v ^ 11) - 17 * v ^ 12) + 12 * v ^ 13) - 3 * v ^ 14) + 2 * v ^ 15, 3 * v ^ 10, 4 * v ^ 60 + 8 * v ^ 62 + 4 * v ^ 64, 3 * v ^ 70, (((((((((((((((4 * v ^ 2 - 20 * v ^ 3) + 66 * v ^ 4) - 152 * v ^ 5) + 301 * v ^ 6) - 472 * v ^ 7) + 678 * v ^ 8) - 798 * v ^ 9) + 877 * v ^ 10) - 798 * v ^ 11) + 678 * v ^ 12) - 472 * v ^ 13) + 301 * v ^ 14) - 152 * v ^ 15) + 66 * v ^ 16) - 20 * v ^ 17) + 4 * v ^ 18, (-(v ^ 61) - 2 * v ^ 63) - v ^ 65, 4 * v ^ 15, 4 * v ^ 45, v ^ 61 + v ^ 62 + v ^ 63 + 3 * v ^ 64 + 4 * v ^ 66 + 4 * v ^ 68 + 3 * v ^ 70 + v ^ 71 + v ^ 72 + v ^ 73, 2 * v ^ 33 + 2 * v ^ 35, 6 * v ^ 30 + 12 * v ^ 32 + 6 * v ^ 34, -(v ^ 24), 2 * v ^ 63 + 2 * v ^ 65, 2 * v ^ 30 + 8 * v ^ 32 + 4 * v ^ 34 + 8 * v ^ 36 + 2 * v ^ 38, -12 * v ^ 30 - 12 * v ^ 32, -12 * v ^ 90 - 12 * v ^ 92, 2 * v ^ 60 + 4 * v ^ 61 + 4 * v ^ 62 + 4 * v ^ 63 + 2 * v ^ 64, (((-(v ^ 30) - 3 * v ^ 32) - 8 * v ^ 33) - 3 * v ^ 34) - v ^ 36, (((-(v ^ 60) - 3 * v ^ 62) - 8 * v ^ 63) - 3 * v ^ 64) - v ^ 66, 3 * v ^ 40, 24 * v ^ 30, 24 * v ^ 90, 24 * v ^ 60])
            end
        f37(x, y) = begin
                return [30, 12x + 18y, 14 * x * y + 5 * x ^ 2 + 11 * y ^ 2, 6 * x * y + x ^ 2 + 7 * y ^ 2, 10 * x * y + 2 * x ^ 2 + 8 * y ^ 2, 5 * x * y ^ 2 + 2 * x ^ 2 * y + 3 * y ^ 3, ((-18 * x * y ^ 2 - 21 * x ^ 2 * y) - 8 * x ^ 3) - 3 * y ^ 3, ((-5 * x * y ^ 2 - 6 * x ^ 2 * y) - 2 * x ^ 3) - y ^ 3, 6 * x * y ^ 2 + 3 * x ^ 2 * y + 5 * y ^ 3, 2 * x * y ^ 2 + 2 * y ^ 3, 9 * x * y ^ 2 + 5 * x ^ 2 * y + x ^ 3 + 5 * y ^ 3, x * y ^ 2 + y ^ 3, 0, x ^ 2 * y ^ 2, x * y ^ 3 + y ^ 4, (((-15 * x * y ^ 3 - 18 * x ^ 2 * y ^ 2) - 8 * x ^ 3 * y) - x ^ 4) - 4 * y ^ 4, 0, 8 * x * y ^ 3 + 6 * x ^ 2 * y ^ 2 + 8 * x ^ 3 * y + x ^ 4 + 7 * y ^ 4, (x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y, x ^ 14 * y ^ 21, (-2 * x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2) - 2 * y ^ 5, 6 * x * y ^ 4 + 8 * x ^ 2 * y ^ 3 + 8 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + 2 * y ^ 5, x ^ 2 * y ^ 3, -(x ^ 6) * y ^ 12 - x ^ 8 * y ^ 10, 2 * x * y ^ 5 + x ^ 2 * y ^ 4 + 2 * x ^ 4 * y ^ 2 + y ^ 6, 8 * x ^ 12 * y ^ 20 + 10 * x ^ 13 * y ^ 19 + 2 * x ^ 14 * y ^ 18, 18 * x * y ^ 5 + 39 * x ^ 2 * y ^ 4 + 40 * x ^ 3 * y ^ 3 + 24 * x ^ 4 * y ^ 2 + 8 * x ^ 5 * y + 2 * x ^ 6 + 3 * y ^ 6, 8 * x ^ 36 * y ^ 56 + 10 * x ^ 37 * y ^ 55 + 2 * x ^ 38 * y ^ 54, 0, 2 * x * y ^ 6 + 9 * x ^ 2 * y ^ 5 + 14 * x ^ 3 * y ^ 4 + 10 * x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + y ^ 7, 5 * x ^ 12 * y ^ 21 + 9 * x ^ 13 * y ^ 20 + 5 * x ^ 14 * y ^ 19 + x ^ 15 * y ^ 18, 5 * x ^ 36 * y ^ 57 + 9 * x ^ 37 * y ^ 56 + 5 * x ^ 38 * y ^ 55 + x ^ 39 * y ^ 54, -(x ^ 6) * y ^ 10 - x ^ 7 * y ^ 9, -3 * x ^ 8 * y ^ 12, -4 * x ^ 3 * y ^ 6 - 5 * x ^ 4 * y ^ 5, (((((-9 * x ^ 2 * y ^ 7 - 22 * x ^ 3 * y ^ 6) - 21 * x ^ 4 * y ^ 5) - 15 * x ^ 5 * y ^ 4) - 6 * x ^ 6 * y ^ 3) - 3 * x ^ 7 * y ^ 2) + 2 * y ^ 9, (((-3 * x * y ^ 8 - 27 * x ^ 2 * y ^ 7) - 58 * x ^ 3 * y ^ 6) - 47 * x ^ 4 * y ^ 5) + 22 * x ^ 6 * y ^ 3 + 11 * x ^ 7 * y ^ 2 + x ^ 8 * y, -3 * x ^ 4 * y ^ 6, 8 * x ^ 24 * y ^ 38 + 10 * x ^ 25 * y ^ 37 + 2 * x ^ 26 * y ^ 36, -3 * x ^ 28 * y ^ 42, ((((-8 * x * y ^ 9 - 70 * x ^ 2 * y ^ 8) - 156 * x ^ 3 * y ^ 7) - 149 * x ^ 4 * y ^ 6) - 52 * x ^ 5 * y ^ 5) + 10 * x ^ 6 * y ^ 4 + 8 * x ^ 7 * y ^ 3 + 2 * y ^ 10, x ^ 24 * y ^ 39 + x ^ 25 * y ^ 38, -2 * x ^ 6 * y ^ 9, -2 * x ^ 18 * y ^ 27, ((((x ^ 24 * y ^ 43 - 3 * x ^ 25 * y ^ 42) - 7 * x ^ 26 * y ^ 41) - 5 * x ^ 27 * y ^ 40) - 5 * x ^ 28 * y ^ 39) - 3 * x ^ 29 * y ^ 38, x ^ 12 * y ^ 22 + x ^ 13 * y ^ 21, 11 * x ^ 12 * y ^ 20 + 14 * x ^ 13 * y ^ 19 + 5 * x ^ 14 * y ^ 18, 0, x ^ 24 * y ^ 40 + x ^ 25 * y ^ 39, 7 * x ^ 12 * y ^ 22 + 8 * x ^ 13 * y ^ 21 + 6 * x ^ 14 * y ^ 20 + 8 * x ^ 15 * y ^ 19 + x ^ 16 * y ^ 18, 18 * x ^ 12 * y ^ 19 + 12 * x ^ 13 * y ^ 18, 18 * x ^ 36 * y ^ 55 + 12 * x ^ 37 * y ^ 54, 7 * x ^ 24 * y ^ 38 + 6 * x ^ 25 * y ^ 37 + x ^ 26 * y ^ 36, 5 * x ^ 12 * y ^ 21 + 6 * x ^ 13 * y ^ 20 + 3 * x ^ 14 * y ^ 19, 5 * x ^ 24 * y ^ 39 + 6 * x ^ 25 * y ^ 38 + 3 * x ^ 26 * y ^ 37, -3 * x ^ 16 * y ^ 24, 30 * x ^ 12 * y ^ 18, 30 * x ^ 36 * y ^ 54, 30 * x ^ 24 * y ^ 36] * x ^ 0 * y ^ 0
            end
        f39(r, p, sgn) = begin
                local v
                v = sgn * GetRoot(r // p, 2)
                return adj(p, [30, -15 - 15 * v ^ 2, 7 + 16 * v ^ 2 + 7 * v ^ 4, 3 + 2v + 4 * v ^ 2 + 2 * v ^ 3 + 3 * v ^ 4, 5 + 10 * v ^ 2 + 5 * v ^ 4, ((-1 - 4 * v ^ 2) - 4 * v ^ 4) - v ^ 6, (((((8 - 6v) + 27 * v ^ 2) - 8 * v ^ 3) + 27 * v ^ 4) - 6 * v ^ 5) + 8 * v ^ 6, (((((2 - 2v) + 8 * v ^ 2) - 2 * v ^ 3) + 8 * v ^ 4) - 2 * v ^ 5) + 2 * v ^ 6, (((-2 - 3 * v ^ 2) - 4 * v ^ 3) - 3 * v ^ 4) - 2 * v ^ 6, (-v - 2 * v ^ 3) - v ^ 5, ((-2 - 8 * v ^ 2) - 8 * v ^ 4) - 2 * v ^ 6, -2 * v ^ 3, 0, Unknown(), v ^ 3 + v ^ 5, (((((((-4 + 2v) - 15 * v ^ 2) + 5 * v ^ 3) - 22 * v ^ 4) + 5 * v ^ 5) - 15 * v ^ 6) + 2 * v ^ 7) - 4 * v ^ 8, 0, 3 + 10 * v ^ 2 + 4 * v ^ 4 + 10 * v ^ 6 + 3 * v ^ 8, Unknown(), -(v ^ 35), Unknown(), (((((-5 * v ^ 2 + v ^ 3) - 10 * v ^ 4) + 2 * v ^ 5) - 10 * v ^ 6) + v ^ 7) - 5 * v ^ 8, -(v ^ 5), -(v ^ 17) - v ^ 19, (((2 * v ^ 2 - 2 * v ^ 3) + 2 * v ^ 4 + 2 * v ^ 6 + 2 * v ^ 8) - 2 * v ^ 9) + 2 * v ^ 10, 5 * v ^ 30 + 10 * v ^ 32 + 5 * v ^ 34, (((((((((((2 - 2v) + 16 * v ^ 2) - 6 * v ^ 3) + 40 * v ^ 4) - 10 * v ^ 5) + 54 * v ^ 6) - 10 * v ^ 7) + 40 * v ^ 8) - 6 * v ^ 9) + 16 * v ^ 10) - 2 * v ^ 11) + 2 * v ^ 12, 5 * v ^ 90 + 10 * v ^ 92 + 5 * v ^ 94, 0, (((((((((-2 * v ^ 2 + v ^ 3) - 8 * v ^ 4) + 3 * v ^ 5) - 15 * v ^ 6) + 4 * v ^ 7) - 15 * v ^ 8) + 3 * v ^ 9) - 8 * v ^ 10) + v ^ 11) - 2 * v ^ 12, ((-2 * v ^ 30 - 8 * v ^ 32) - 8 * v ^ 34) - 2 * v ^ 36, ((-2 * v ^ 90 - 8 * v ^ 92) - 8 * v ^ 94) - 2 * v ^ 96, -((v ^ 17 + v ^ 15)), -3 * v ^ 20, Unknown(), (((((((((((-(v ^ 3) + 9 * v ^ 4) - 3 * v ^ 5) + 15 * v ^ 6) - 3 * v ^ 7) + 21 * v ^ 8) - 2 * v ^ 9) + 21 * v ^ 10) - 3 * v ^ 11) + 15 * v ^ 12) - 3 * v ^ 13) + 9 * v ^ 14) - v ^ 15, Unknown(), -3 * v ^ 10, 5 * v ^ 60 + 10 * v ^ 62 + 5 * v ^ 64, -3 * v ^ 70, Unknown(), -2 * v ^ 63, 2 * v ^ 15, 2 * v ^ 45, ((((v ^ 61 + v ^ 62 + v ^ 63 + 3 * v ^ 64) - v ^ 65) + 6 * v ^ 66 + 6 * v ^ 68) - v ^ 69) + 3 * v ^ 70 + v ^ 71 + v ^ 72 + v ^ 73, v ^ 33 + v ^ 35, 7 * v ^ 30 + 16 * v ^ 32 + 7 * v ^ 34, 0, v ^ 63 + v ^ 65, 3 * v ^ 30 + 10 * v ^ 32 + 4 * v ^ 34 + 10 * v ^ 36 + 3 * v ^ 38, -15 * v ^ 30 - 15 * v ^ 32, -15 * v ^ 90 - 15 * v ^ 92, 3 * v ^ 60 + 2 * v ^ 61 + 4 * v ^ 62 + 2 * v ^ 63 + 3 * v ^ 64, (((-2 * v ^ 30 - 3 * v ^ 32) - 4 * v ^ 33) - 3 * v ^ 34) - 2 * v ^ 36, (((-2 * v ^ 60 - 3 * v ^ 62) - 4 * v ^ 63) - 3 * v ^ 64) - 2 * v ^ 66, -3 * v ^ 40, 30 * v ^ 30, 30 * v ^ 90, 30 * v ^ 60])
            end
        f41(r, p) = begin
                local q
                q = -r // p
                return adj(p, [36, -18 + 18q, (10 - 16q) + 10 * q ^ 2, (2 - 8q) + 2 * q ^ 2, (6 - 12q) + 6 * q ^ 2, ((-2 + 4q) - 4 * q ^ 2) + 2 * q ^ 3, ((12 - 30q) + 30 * q ^ 2) - 12 * q ^ 3, ((4 - 8q) + 8 * q ^ 2) - 4 * q ^ 3, 6q - 6 * q ^ 2, 0, ((-4 + 8q) - 8 * q ^ 2) + 4 * q ^ 3, 0, -(q ^ 9), Unknown(), 0, (((-4 + 18q) - 28 * q ^ 2) + 18 * q ^ 3) - 4 * q ^ 4, -(q ^ 3), (((2 - 12q) + 8 * q ^ 2) - 12 * q ^ 3) + 2 * q ^ 4, Unknown(), 0, Unknown(), ((6q - 12 * q ^ 2) + 12 * q ^ 3) - 6 * q ^ 4, 0, 0, (4 * q ^ 2 - 4 * q ^ 3) + 4 * q ^ 4, (-6 * q ^ 15 + 12 * q ^ 16) - 6 * q ^ 17, (((((4 - 20q) + 48 * q ^ 2) - 60 * q ^ 3) + 48 * q ^ 4) - 20 * q ^ 5) + 4 * q ^ 6, (-6 * q ^ 45 + 12 * q ^ 46) - 6 * q ^ 47, q ^ 6, ((-8 * q ^ 2 + 22 * q ^ 3) - 22 * q ^ 4) + 8 * q ^ 5, ((4 * q ^ 15 - 8 * q ^ 16) + 8 * q ^ 17) - 4 * q ^ 18, ((4 * q ^ 45 - 8 * q ^ 46) + 8 * q ^ 47) - 4 * q ^ 48, 0, 0, Unknown(), ((((6 * q ^ 2 - 18 * q ^ 3) + 30 * q ^ 4) - 30 * q ^ 5) + 18 * q ^ 6) - 6 * q ^ 7, Unknown(), 0, (6 * q ^ 30 - 12 * q ^ 31) + 6 * q ^ 32, 0, Unknown(), 0, 0, 0, ((((-2 * q ^ 31 + 6 * q ^ 32) - 4 * q ^ 33) + 4 * q ^ 34) - 6 * q ^ 35) + 2 * q ^ 36, 0, (-10 * q ^ 15 + 16 * q ^ 16) - 10 * q ^ 17, q ^ 12, 0, (((-2 * q ^ 15 + 12 * q ^ 16) - 8 * q ^ 17) + 12 * q ^ 18) - 2 * q ^ 19, 18 * q ^ 15 - 18 * q ^ 16, 18 * q ^ 45 - 18 * q ^ 46, (2 * q ^ 30 - 8 * q ^ 31) + 2 * q ^ 32, -6 * q ^ 16 + 6 * q ^ 17, 6 * q ^ 31 - 6 * q ^ 32, 0, -36 * q ^ 15, -36 * q ^ 45, 36 * q ^ 30])
            end
        f42(x, y, s) = begin
                local v
                v = s * GetRoot(x * y)
                return [36, 21x + 15y, 18 * x * y + 12 * x ^ 2 + 6 * y ^ 2, (-3 * v * x - 3 * v * y) + 8 * x * y + 8 * x ^ 2 + 2 * y ^ 2, 12 * x * y + 9 * x ^ 2 + 3 * y ^ 2, 3 * x * y ^ 2 + 6 * x ^ 2 * y + 3 * x ^ 3, (((((-12 * v * x * y - 9 * v * x ^ 2) - 9 * v * y ^ 2) - 21 * x * y ^ 2) - 21 * x ^ 2 * y) - 3 * x ^ 3) - 9 * y ^ 3, (((((-4 * v * x * y - 3 * v * x ^ 2) - 2 * v * y ^ 2) - 7 * x * y ^ 2) - 5 * x ^ 2 * y) - x ^ 3) - 2 * y ^ 3, -6 * v * x * y + 6 * x * y ^ 2 + 6 * x ^ 2 * y + 6 * x ^ 3, ((-3 * v * x * y - 2 * v * x ^ 2) - v * y ^ 2) + x * y ^ 2 + 3 * x ^ 2 * y + 2 * x ^ 3, 7 * x * y ^ 2 + 11 * x ^ 2 * y + 5 * x ^ 3 + y ^ 3, (-2 * v * x * y - v * x ^ 2) + 2 * x ^ 2 * y + x ^ 3, v * x ^ 10 * y ^ 7, (-v * x * y ^ 2 - 2 * v * x ^ 2 * y) - v * x ^ 3, (-v * x * y ^ 2 - 2 * v * x ^ 2 * y) + x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, (((((((-6 * v * x * y ^ 2 - 8 * v * x ^ 2 * y) - 5 * v * x ^ 3) - 2 * v * y ^ 3) - 9 * x * y ^ 3) - 19 * x ^ 2 * y ^ 2) - 17 * x ^ 3 * y) - 4 * x ^ 4) - 2 * y ^ 4, v * x ^ 3 * y ^ 2, 9 * x * y ^ 3 + 8 * x ^ 2 * y ^ 2 + 9 * x ^ 3 * y + 8 * x ^ 4 + 2 * y ^ 4, v * x ^ 2 * y ^ 2 + v * x ^ 3 * y + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 0, ((((-v * x ^ 3 * y - v * x ^ 4) - 2 * x ^ 2 * y ^ 3) - 7 * x ^ 3 * y ^ 2) - 6 * x ^ 4 * y) - x ^ 5, v * x * y ^ 3 + 3 * v * x ^ 2 * y ^ 2 + 2 * v * x ^ 3 * y + 3 * x * y ^ 4 + 9 * x ^ 2 * y ^ 3 + 10 * x ^ 3 * y ^ 2 + 6 * x ^ 4 * y + 2 * x ^ 5, 0, 0, 2 * v * x * y ^ 4 + 2 * v * x ^ 3 * y ^ 2 + 2 * v * x ^ 4 * y + 2 * x ^ 2 * y ^ 4 + 3 * x ^ 5 * y + x ^ 6, 3 * v * x ^ 17 * y ^ 14 + 12 * v * x ^ 18 * y ^ 13 + 9 * v * x ^ 19 * y ^ 12, 6 * v * x * y ^ 4 + 14 * v * x ^ 2 * y ^ 3 + 18 * v * x ^ 3 * y ^ 2 + 12 * v * x ^ 4 * y + 2 * v * x ^ 5 + 2 * v * y ^ 5 + 10 * x * y ^ 5 + 27 * x ^ 2 * y ^ 4 + 46 * x ^ 3 * y ^ 3 + 43 * x ^ 4 * y ^ 2 + 19 * x ^ 5 * y + 3 * x ^ 6 + 2 * y ^ 6, 3 * v * x ^ 52 * y ^ 39 + 12 * v * x ^ 53 * y ^ 38 + 9 * v * x ^ 54 * y ^ 37, x ^ 7 * y ^ 5, v * x * y ^ 5 + 3 * v * x ^ 2 * y ^ 4 + 5 * v * x ^ 3 * y ^ 3 + 6 * v * x ^ 4 * y ^ 2 + 3 * v * x ^ 5 * y + 4 * x ^ 2 * y ^ 5 + 11 * x ^ 3 * y ^ 4 + 14 * x ^ 4 * y ^ 3 + 9 * x ^ 5 * y ^ 2 + 3 * x ^ 6 * y + x ^ 7, v * x ^ 17 * y ^ 15 + 7 * v * x ^ 18 * y ^ 14 + 11 * v * x ^ 19 * y ^ 13 + 5 * v * x ^ 20 * y ^ 12, v * x ^ 52 * y ^ 40 + 7 * v * x ^ 53 * y ^ 39 + 11 * v * x ^ 54 * y ^ 38 + 5 * v * x ^ 55 * y ^ 37, 0, 0, 0, ((((((((((((-v * x * y ^ 7 - 3 * v * x ^ 2 * y ^ 6) - 3 * v * x ^ 3 * y ^ 5) - 3 * v * x ^ 4 * y ^ 4) - 6 * v * x ^ 5 * y ^ 3) - 6 * v * x ^ 6 * y ^ 2) - 2 * v * x ^ 7 * y) - 3 * x ^ 2 * y ^ 7) - 11 * x ^ 3 * y ^ 6) - 15 * x ^ 4 * y ^ 5) - 24 * x ^ 5 * y ^ 4) - 21 * x ^ 6 * y ^ 3) - 12 * x ^ 7 * y ^ 2) + 2 * x ^ 9, ((((((((((2 * v * x * y ^ 7 + 6 * v * x ^ 2 * y ^ 6 + 5 * v * x ^ 3 * y ^ 5) - 9 * v * x ^ 4 * y ^ 4) - 18 * v * x ^ 5 * y ^ 3) - 11 * v * x ^ 6 * y ^ 2) - 3 * v * x ^ 7 * y) + 2 * x * y ^ 8 + 7 * x ^ 2 * y ^ 7 + 4 * x ^ 3 * y ^ 6) - 17 * x ^ 4 * y ^ 5) - 37 * x ^ 5 * y ^ 4) - 33 * x ^ 6 * y ^ 3) - 15 * x ^ 7 * y ^ 2) - 3 * x ^ 8 * y, 0, 3 * x ^ 35 * y ^ 27 + 12 * x ^ 36 * y ^ 26 + 9 * x ^ 37 * y ^ 25, 0, (((((((((((2 * v * x ^ 2 * y ^ 7 + 8 * v * x ^ 3 * y ^ 6 + 6 * v * x ^ 4 * y ^ 5) - 18 * v * x ^ 5 * y ^ 4) - 40 * v * x ^ 6 * y ^ 3) - 30 * v * x ^ 7 * y ^ 2) - 8 * v * x ^ 8 * y) - 14 * x ^ 4 * y ^ 6) - 56 * x ^ 5 * y ^ 5) - 87 * x ^ 6 * y ^ 4) - 65 * x ^ 7 * y ^ 3) - 22 * x ^ 8 * y ^ 2) - x ^ 9 * y) + x ^ 10, (-2 * v * x ^ 36 * y ^ 26 - v * x ^ 37 * y ^ 25) + 2 * x ^ 37 * y ^ 26 + x ^ 38 * y ^ 25, 0, 0, (((((((((v * x ^ 35 * y ^ 31 + v * x ^ 36 * y ^ 30) - v * x ^ 37 * y ^ 29) + v * x ^ 40 * y ^ 26 + v * x ^ 41 * y ^ 25) - x ^ 36 * y ^ 31) - 4 * x ^ 37 * y ^ 30) - 6 * x ^ 38 * y ^ 29) - 6 * x ^ 39 * y ^ 28) - 8 * x ^ 40 * y ^ 27) - 3 * x ^ 41 * y ^ 26) + x ^ 42 * y ^ 25, ((v * x ^ 19 * y ^ 14 + v * x ^ 20 * y ^ 13 + v * x ^ 21 * y ^ 12) - x ^ 19 * y ^ 15) - 2 * x ^ 20 * y ^ 14, 6 * v * x ^ 17 * y ^ 14 + 18 * v * x ^ 18 * y ^ 13 + 12 * v * x ^ 19 * y ^ 12, x ^ 14 * y ^ 10, (-v * x ^ 36 * y ^ 27 - 2 * v * x ^ 37 * y ^ 26) + x ^ 37 * y ^ 27 + x ^ 38 * y ^ 26 + x ^ 39 * y ^ 25, 2 * v * x ^ 17 * y ^ 16 + 9 * v * x ^ 18 * y ^ 15 + 8 * v * x ^ 19 * y ^ 14 + 9 * v * x ^ 20 * y ^ 13 + 8 * v * x ^ 21 * y ^ 12, 15 * v * x ^ 17 * y ^ 13 + 21 * v * x ^ 18 * y ^ 12, 15 * v * x ^ 52 * y ^ 38 + 21 * v * x ^ 53 * y ^ 37, (-3 * v * x ^ 35 * y ^ 26 - 3 * v * x ^ 36 * y ^ 25) + 2 * x ^ 35 * y ^ 27 + 8 * x ^ 36 * y ^ 26 + 8 * x ^ 37 * y ^ 25, (6 * v * x ^ 18 * y ^ 14 + 6 * v * x ^ 19 * y ^ 13 + 6 * v * x ^ 20 * y ^ 12) - 6 * x ^ 19 * y ^ 14, -6 * v * x ^ 36 * y ^ 26 + 6 * x ^ 36 * y ^ 27 + 6 * x ^ 37 * y ^ 26 + 6 * x ^ 38 * y ^ 25, 0, 36 * v * x ^ 17 * y ^ 12, 36 * v * x ^ 52 * y ^ 37, 36 * x ^ 35 * y ^ 25] * x ^ 0 * y ^ 0
            end
        f46(x, y) = begin
                return [40, 24x + 16y, 20 * x * y + 14 * x ^ 2 + 6 * y ^ 2, 12 * x * y + 10 * x ^ 2 + 2 * y ^ 2, 13 * x * y + 11 * x ^ 2 + 3 * y ^ 2, 3 * x * y ^ 2 + 7 * x ^ 2 * y + 4 * x ^ 3, ((-18 * x * y ^ 2 - 12 * x ^ 2 * y) - 2 * x ^ 3) - 8 * y ^ 3, (-5 * x * y ^ 2 - 3 * x ^ 2 * y) - 2 * y ^ 3, 6 * x * y ^ 2 + 12 * x ^ 2 * y + 6 * x ^ 3, 2 * x * y ^ 2 + 6 * x ^ 2 * y + 3 * x ^ 3, 7 * x * y ^ 2 + 13 * x ^ 2 * y + 6 * x ^ 3 + y ^ 3, x * y ^ 2 + 3 * x ^ 2 * y + 2 * x ^ 3, 0, 2 * x ^ 3 * y, 2 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, (((-8 * x * y ^ 3 - 16 * x ^ 2 * y ^ 2) - 13 * x ^ 3 * y) - 4 * x ^ 4) - y ^ 4, 0, 8 * x * y ^ 3 + 12 * x ^ 2 * y ^ 2 + 8 * x ^ 3 * y + 10 * x ^ 4 + 2 * y ^ 4, x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 0, ((-4 * x ^ 2 * y ^ 3 - 10 * x ^ 3 * y ^ 2) - 8 * x ^ 4 * y) - 2 * x ^ 5, 2 * x * y ^ 4 + 9 * x ^ 2 * y ^ 3 + 10 * x ^ 3 * y ^ 2 + 6 * x ^ 4 * y + 3 * x ^ 5, 0, 0, (x ^ 2 * y ^ 4 - x ^ 4 * y ^ 2) + 2 * x ^ 5 * y + 2 * x ^ 6, (-3 * x ^ 18 * y ^ 14 - 13 * x ^ 19 * y ^ 13) - 11 * x ^ 20 * y ^ 12, 8 * x * y ^ 5 + 23 * x ^ 2 * y ^ 4 + 40 * x ^ 3 * y ^ 3 + 37 * x ^ 4 * y ^ 2 + 18 * x ^ 5 * y + 4 * x ^ 6 + 2 * y ^ 6, (-3 * x ^ 54 * y ^ 38 - 13 * x ^ 55 * y ^ 37) - 11 * x ^ 56 * y ^ 36, 0, 2 * x ^ 2 * y ^ 5 + 9 * x ^ 3 * y ^ 4 + 13 * x ^ 4 * y ^ 3 + 8 * x ^ 5 * y ^ 2 + 3 * x ^ 6 * y + x ^ 7, ((-(x ^ 18) * y ^ 15 - 7 * x ^ 19 * y ^ 14) - 13 * x ^ 20 * y ^ 13) - 6 * x ^ 21 * y ^ 12, ((-(x ^ 54) * y ^ 39 - 7 * x ^ 55 * y ^ 38) - 13 * x ^ 56 * y ^ 37) - 6 * x ^ 57 * y ^ 36, 0, -2 * x ^ 12 * y ^ 8, 4 * x ^ 5 * y ^ 4 + 4 * x ^ 6 * y ^ 3, (((((-3 * x ^ 2 * y ^ 7 - 7 * x ^ 3 * y ^ 6) - 15 * x ^ 4 * y ^ 5) - 21 * x ^ 5 * y ^ 4) - 24 * x ^ 6 * y ^ 3) - 9 * x ^ 7 * y ^ 2) + 3 * x ^ 9, ((((((x * y ^ 8 + 3 * x ^ 2 * y ^ 7) - 4 * x ^ 3 * y ^ 6) - 18 * x ^ 4 * y ^ 5) - 22 * x ^ 5 * y ^ 4) - 16 * x ^ 6 * y ^ 3) - 9 * x ^ 7 * y ^ 2) - 3 * x ^ 8 * y, 2 * x ^ 6 * y ^ 4, 3 * x ^ 36 * y ^ 26 + 13 * x ^ 37 * y ^ 25 + 11 * x ^ 38 * y ^ 24, 2 * x ^ 42 * y ^ 28, ((-6 * x ^ 4 * y ^ 6 - 24 * x ^ 5 * y ^ 5) - 24 * x ^ 6 * y ^ 4) + 14 * x ^ 8 * y ^ 2 + 8 * x ^ 9 * y + 2 * x ^ 10, x ^ 37 * y ^ 26 + 3 * x ^ 38 * y ^ 25 + 2 * x ^ 39 * y ^ 24, 0, 0, (((((-(x ^ 37) * y ^ 30 - 5 * x ^ 38 * y ^ 29) - 5 * x ^ 39 * y ^ 28) - 5 * x ^ 40 * y ^ 27) - 11 * x ^ 41 * y ^ 26) - 5 * x ^ 42 * y ^ 25) + 2 * x ^ 43 * y ^ 24, (-2 * x ^ 20 * y ^ 14 - 3 * x ^ 21 * y ^ 13) - x ^ 22 * y ^ 12, (-6 * x ^ 18 * y ^ 14 - 20 * x ^ 19 * y ^ 13) - 14 * x ^ 20 * y ^ 12, 0, 2 * x ^ 38 * y ^ 26 + 3 * x ^ 39 * y ^ 25 + x ^ 40 * y ^ 24, (((-2 * x ^ 18 * y ^ 16 - 8 * x ^ 19 * y ^ 15) - 12 * x ^ 20 * y ^ 14) - 8 * x ^ 21 * y ^ 13) - 10 * x ^ 22 * y ^ 12, -16 * x ^ 18 * y ^ 13 - 24 * x ^ 19 * y ^ 12, -16 * x ^ 54 * y ^ 37 - 24 * x ^ 55 * y ^ 36, 2 * x ^ 36 * y ^ 26 + 12 * x ^ 37 * y ^ 25 + 10 * x ^ 38 * y ^ 24, (-6 * x ^ 19 * y ^ 14 - 12 * x ^ 20 * y ^ 13) - 6 * x ^ 21 * y ^ 12, 6 * x ^ 37 * y ^ 26 + 12 * x ^ 38 * y ^ 25 + 6 * x ^ 39 * y ^ 24, -2 * x ^ 24 * y ^ 16, -40 * x ^ 18 * y ^ 12, -40 * x ^ 54 * y ^ 36, 40 * x ^ 36 * y ^ 24] * x ^ 0 * y ^ 0
            end
        f48(x, y, s) = begin
                local v
                v = s * GetRoot(x * y)
                return [40, 20x + 20y, 20 * x * y + 10 * x ^ 2 + 10 * y ^ 2, (-4 * v * x - 4 * v * y) + 12 * x * y + 6 * x ^ 2 + 6 * y ^ 2, 14 * x * y + 6 * x ^ 2 + 6 * y ^ 2, 5 * x * y ^ 2 + 5 * x ^ 2 * y + x ^ 3 + y ^ 3, (((((-16 * v * x * y - 12 * v * x ^ 2) - 12 * v * y ^ 2) - 15 * x * y ^ 2) - 15 * x ^ 2 * y) - 5 * x ^ 3) - 5 * y ^ 3, (((((-6 * v * x * y - 3 * v * x ^ 2) - 3 * v * y ^ 2) - 4 * x * y ^ 2) - 4 * x ^ 2 * y) - 2 * x ^ 3) - 2 * y ^ 3, -8 * v * x * y + 9 * x * y ^ 2 + 9 * x ^ 2 * y + 3 * x ^ 3 + 3 * y ^ 3, ((-4 * v * x * y - 2 * v * x ^ 2) - 2 * v * y ^ 2) + 4 * x * y ^ 2 + 4 * x ^ 2 * y + x ^ 3 + y ^ 3, 10 * x * y ^ 2 + 10 * x ^ 2 * y + 3 * x ^ 3 + 3 * y ^ 3, ((-2 * v * x * y - v * x ^ 2) - v * y ^ 2) + 2 * x * y ^ 2 + 2 * x ^ 2 * y, 0, (-2 * v * x * y ^ 2 - 2 * v * x ^ 2 * y) + x ^ 2 * y ^ 2, (-2 * v * x * y ^ 2 - 2 * v * x ^ 2 * y) + x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, (((((((-9 * v * x * y ^ 2 - 9 * v * x ^ 2 * y) - 5 * v * x ^ 3) - 5 * v * y ^ 3) - 11 * x * y ^ 3) - 16 * x ^ 2 * y ^ 2) - 11 * x ^ 3 * y) - 3 * x ^ 4) - 3 * y ^ 4, 0, 8 * x * y ^ 3 + 12 * x ^ 2 * y ^ 2 + 8 * x ^ 3 * y + 6 * x ^ 4 + 6 * y ^ 4, v * x * y ^ 3 + v * x ^ 2 * y ^ 2 + v * x ^ 3 * y + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, -v * x ^ 17 * y ^ 17, (((((-v * x * y ^ 3 - v * x ^ 2 * y ^ 2) - v * x ^ 3 * y) - 2 * x * y ^ 4) - 6 * x ^ 2 * y ^ 3) - 6 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y, 2 * v * x * y ^ 3 + 4 * v * x ^ 2 * y ^ 2 + 2 * v * x ^ 3 * y + 4 * x * y ^ 4 + 9 * x ^ 2 * y ^ 3 + 9 * x ^ 3 * y ^ 2 + 4 * x ^ 4 * y + x ^ 5 + y ^ 5, -v * x ^ 2 * y ^ 2, ((-v * x ^ 7 * y ^ 10 - v * x ^ 8 * y ^ 9) - v * x ^ 9 * y ^ 8) - v * x ^ 10 * y ^ 7, ((2 * v * x * y ^ 4 + 2 * v * x ^ 2 * y ^ 3 + 2 * v * x ^ 3 * y ^ 2 + 2 * v * x ^ 4 * y + x * y ^ 5) - 2 * x ^ 3 * y ^ 3) + x ^ 5 * y, 6 * x ^ 15 * y ^ 17 + 14 * x ^ 16 * y ^ 16 + 6 * x ^ 17 * y ^ 15, 12 * v * x * y ^ 4 + 22 * v * x ^ 2 * y ^ 3 + 22 * v * x ^ 3 * y ^ 2 + 12 * v * x ^ 4 * y + 2 * v * x ^ 5 + 2 * v * y ^ 5 + 13 * x * y ^ 5 + 30 * x ^ 2 * y ^ 4 + 38 * x ^ 3 * y ^ 3 + 30 * x ^ 4 * y ^ 2 + 13 * x ^ 5 * y + 2 * x ^ 6 + 2 * y ^ 6, 6 * x ^ 45 * y ^ 47 + 14 * x ^ 46 * y ^ 46 + 6 * x ^ 47 * y ^ 45, 0, 3 * v * x * y ^ 5 + 6 * v * x ^ 2 * y ^ 4 + 6 * v * x ^ 3 * y ^ 3 + 6 * v * x ^ 4 * y ^ 2 + 3 * v * x ^ 5 * y + x * y ^ 6 + 5 * x ^ 2 * y ^ 5 + 10 * x ^ 3 * y ^ 4 + 10 * x ^ 4 * y ^ 3 + 5 * x ^ 5 * y ^ 2 + x ^ 6 * y, 3 * x ^ 15 * y ^ 18 + 10 * x ^ 16 * y ^ 17 + 10 * x ^ 17 * y ^ 16 + 3 * x ^ 18 * y ^ 15, 3 * x ^ 45 * y ^ 48 + 10 * x ^ 46 * y ^ 47 + 10 * x ^ 47 * y ^ 46 + 3 * x ^ 48 * y ^ 45, -2 * v * x ^ 7 * y ^ 8 - 2 * v * x ^ 8 * y ^ 7, x ^ 10 * y ^ 10, ((-v * x ^ 3 * y ^ 5 - v * x ^ 4 * y ^ 4) - v * x ^ 5 * y ^ 3) + 2 * x ^ 4 * y ^ 5 + 2 * x ^ 5 * y ^ 4, ((((((((((((-2 * v * x * y ^ 7 - 6 * v * x ^ 2 * y ^ 6) - 6 * v * x ^ 3 * y ^ 5) - 4 * v * x ^ 4 * y ^ 4) - 6 * v * x ^ 5 * y ^ 3) - 6 * v * x ^ 6 * y ^ 2) - 2 * v * x ^ 7 * y) - 6 * x ^ 2 * y ^ 7) - 17 * x ^ 3 * y ^ 6) - 18 * x ^ 4 * y ^ 5) - 18 * x ^ 5 * y ^ 4) - 17 * x ^ 6 * y ^ 3) - 6 * x ^ 7 * y ^ 2) + x ^ 9 + y ^ 9, (((((((((-4 * v * x ^ 2 * y ^ 6 - 13 * v * x ^ 3 * y ^ 5) - 19 * v * x ^ 4 * y ^ 4) - 13 * v * x ^ 5 * y ^ 3) - 4 * v * x ^ 6 * y ^ 2) - 3 * x ^ 2 * y ^ 7) - 11 * x ^ 3 * y ^ 6) - 19 * x ^ 4 * y ^ 5) - 19 * x ^ 5 * y ^ 4) - 11 * x ^ 6 * y ^ 3) - 3 * x ^ 7 * y ^ 2, x ^ 5 * y ^ 5, 6 * x ^ 30 * y ^ 32 + 14 * x ^ 31 * y ^ 31 + 6 * x ^ 32 * y ^ 30, x ^ 35 * y ^ 35, (((((((((((-8 * v * x ^ 2 * y ^ 7 - 32 * v * x ^ 3 * y ^ 6) - 58 * v * x ^ 4 * y ^ 5) - 58 * v * x ^ 5 * y ^ 4) - 32 * v * x ^ 6 * y ^ 3) - 8 * v * x ^ 7 * y ^ 2) - 2 * x ^ 2 * y ^ 8) - 11 * x ^ 3 * y ^ 7) - 30 * x ^ 4 * y ^ 6) - 41 * x ^ 5 * y ^ 5) - 30 * x ^ 6 * y ^ 4) - 11 * x ^ 7 * y ^ 3) - 2 * x ^ 8 * y ^ 2, ((-v * x ^ 30 * y ^ 32 - 2 * v * x ^ 31 * y ^ 31) - v * x ^ 32 * y ^ 30) + 2 * x ^ 31 * y ^ 32 + 2 * x ^ 32 * y ^ 31, -4 * v * x ^ 7 * y ^ 7, -4 * v * x ^ 22 * y ^ 22, ((((((v * x ^ 30 * y ^ 36 + v * x ^ 31 * y ^ 35 + v * x ^ 35 * y ^ 31 + v * x ^ 36 * y ^ 30) - 3 * x ^ 31 * y ^ 36) - 9 * x ^ 32 * y ^ 35) - 6 * x ^ 33 * y ^ 34) - 6 * x ^ 34 * y ^ 33) - 9 * x ^ 35 * y ^ 32) - 3 * x ^ 36 * y ^ 31, (-2 * v * x ^ 16 * y ^ 17 - 2 * v * x ^ 17 * y ^ 16) + x ^ 16 * y ^ 18 + 2 * x ^ 17 * y ^ 17 + x ^ 18 * y ^ 16, 10 * x ^ 15 * y ^ 17 + 20 * x ^ 16 * y ^ 16 + 10 * x ^ 17 * y ^ 15, 0, (-2 * v * x ^ 31 * y ^ 32 - 2 * v * x ^ 32 * y ^ 31) + x ^ 31 * y ^ 33 + 2 * x ^ 32 * y ^ 32 + x ^ 33 * y ^ 31, 6 * x ^ 15 * y ^ 19 + 8 * x ^ 16 * y ^ 18 + 12 * x ^ 17 * y ^ 17 + 8 * x ^ 18 * y ^ 16 + 6 * x ^ 19 * y ^ 15, 20 * x ^ 15 * y ^ 16 + 20 * x ^ 16 * y ^ 15, 20 * x ^ 45 * y ^ 46 + 20 * x ^ 46 * y ^ 45, (-4 * v * x ^ 30 * y ^ 31 - 4 * v * x ^ 31 * y ^ 30) + 6 * x ^ 30 * y ^ 32 + 12 * x ^ 31 * y ^ 31 + 6 * x ^ 32 * y ^ 30, -8 * v * x ^ 16 * y ^ 16 + 3 * x ^ 15 * y ^ 18 + 9 * x ^ 16 * y ^ 17 + 9 * x ^ 17 * y ^ 16 + 3 * x ^ 18 * y ^ 15, -8 * v * x ^ 31 * y ^ 31 + 3 * x ^ 30 * y ^ 33 + 9 * x ^ 31 * y ^ 32 + 9 * x ^ 32 * y ^ 31 + 3 * x ^ 33 * y ^ 30, x ^ 20 * y ^ 20, 40 * x ^ 15 * y ^ 15, 40 * x ^ 45 * y ^ 45, 40 * x ^ 30 * y ^ 30] * x ^ 0 * y ^ 0
            end
        f50(r, p, sgn) = begin
                local v
                v = sgn * GetRoot(r // p, 2)
                return adj(p, [40, -18 - 22 * v ^ 2, 8 + 20 * v ^ 2 + 12 * v ^ 4, (((2 - 2v) + 12 * v ^ 2) - 2 * v ^ 3) + 6 * v ^ 4, 5 + 13 * v ^ 2 + 9 * v ^ 4, ((-1 - 4 * v ^ 2) - 6 * v ^ 4) - 3 * v ^ 6, 10 + 6v + 24 * v ^ 2 + 8 * v ^ 3 + 18 * v ^ 4 + 6 * v ^ 5 + 8 * v ^ 6, 3 + v + 6 * v ^ 2 + 3 * v ^ 3 + 5 * v ^ 4 + 2 * v ^ 5 + 2 * v ^ 6, ((-6 * v ^ 2 + 4 * v ^ 3) - 12 * v ^ 4) - 2 * v ^ 6, ((((v - 2 * v ^ 2) + 2 * v ^ 3) - 4 * v ^ 4) + v ^ 5) - v ^ 6, ((-2 - 9 * v ^ 2) - 11 * v ^ 4) - 5 * v ^ 6, (((-(v ^ 2) + v ^ 3) - 2 * v ^ 4) + v ^ 5) - v ^ 6, 0, Unknown(), ((-(v ^ 3) + 2 * v ^ 4) - v ^ 5) + 2 * v ^ 6, (((((((-2 - 2v) - 13 * v ^ 2) - 4 * v ^ 3) - 21 * v ^ 4) - 5 * v ^ 5) - 15 * v ^ 6) - 3 * v ^ 7) - 5 * v ^ 8, 0, 2 + 10 * v ^ 2 + 12 * v ^ 4 + 10 * v ^ 6 + 6 * v ^ 8, Unknown(), 0, Unknown(), (((((-4 * v ^ 2 - 11 * v ^ 4) - 2 * v ^ 5) - 12 * v ^ 6) - 2 * v ^ 7) - 6 * v ^ 8) - v ^ 10, 0, 0, 2 * v ^ 3 + v ^ 4 + 3 * v ^ 6 + 2 * v ^ 7 + 2 * v ^ 8 + v ^ 10 + v ^ 12, 5 * v ^ 33 + 13 * v ^ 35 + 9 * v ^ 37, 3 + 2v + 13 * v ^ 2 + 4 * v ^ 3 + 34 * v ^ 4 + 10 * v ^ 5 + 51 * v ^ 6 + 12 * v ^ 7 + 43 * v ^ 8 + 8 * v ^ 9 + 20 * v ^ 10 + 4 * v ^ 12, 5 * v ^ 99 + 13 * v ^ 101 + 9 * v ^ 103, 0, ((((((((-(v ^ 3) - 4 * v ^ 4) - 3 * v ^ 5) - 15 * v ^ 6) - 3 * v ^ 7) - 18 * v ^ 8) - 3 * v ^ 9) - 9 * v ^ 10) - 2 * v ^ 11) - 2 * v ^ 12, ((-2 * v ^ 33 - 9 * v ^ 35) - 11 * v ^ 37) - 5 * v ^ 39, ((-2 * v ^ 99 - 9 * v ^ 101) - 11 * v ^ 103) - 5 * v ^ 105, 0, -2 * v ^ 22, Unknown(), (v ^ 3 + 3 * v ^ 4 + 3 * v ^ 5 + 13 * v ^ 6 + 3 * v ^ 7 + 21 * v ^ 8 + 2 * v ^ 9 + 27 * v ^ 10 + 3 * v ^ 11 + 20 * v ^ 12 + 3 * v ^ 13 + 9 * v ^ 14 + v ^ 15) - v ^ 18, Unknown(), -2 * v ^ 11, 5 * v ^ 66 + 13 * v ^ 68 + 9 * v ^ 70, -2 * v ^ 77, Unknown(), (((-(v ^ 68) + v ^ 69) - 2 * v ^ 70) + v ^ 71) - v ^ 72, 0, 0, (((-(v ^ 67) + 2 * v ^ 68) - v ^ 69) + 7 * v ^ 70 + 5 * v ^ 72 + 3 * v ^ 74 + 8 * v ^ 76 + 4 * v ^ 78) - v ^ 80, ((-(v ^ 36) + 2 * v ^ 37) - v ^ 38) + 2 * v ^ 39, 8 * v ^ 33 + 20 * v ^ 35 + 12 * v ^ 37, 0, ((-(v ^ 69) + 2 * v ^ 70) - v ^ 71) + 2 * v ^ 72, 2 * v ^ 33 + 10 * v ^ 35 + 12 * v ^ 37 + 10 * v ^ 39 + 6 * v ^ 41, -18 * v ^ 33 - 22 * v ^ 35, -18 * v ^ 99 - 22 * v ^ 101, (((2 * v ^ 66 - 2 * v ^ 67) + 12 * v ^ 68) - 2 * v ^ 69) + 6 * v ^ 70, ((-6 * v ^ 35 + 4 * v ^ 36) - 12 * v ^ 37) - 2 * v ^ 39, ((-6 * v ^ 68 + 4 * v ^ 69) - 12 * v ^ 70) - 2 * v ^ 72, -2 * v ^ 44, 40 * v ^ 33, 40 * v ^ 99, 40 * v ^ 66])
            end
        f54(x, y) = begin
                return [45, 21x + 24y, 22 * x * y + 10 * x ^ 2 + 13 * y ^ 2, 12 * x * y + 3 * x ^ 2 + 6 * y ^ 2, 15 * x * y + 6 * x ^ 2 + 9 * y ^ 2, 6 * x * y ^ 2 + 5 * x ^ 2 * y + x ^ 3 + 3 * y ^ 3, ((-27 * x * y ^ 2 - 27 * x ^ 2 * y) - 12 * x ^ 3) - 9 * y ^ 3, ((-7 * x * y ^ 2 - 8 * x ^ 2 * y) - 3 * x ^ 3) - 3 * y ^ 3, 9 * x * y ^ 2 + 9 * x ^ 2 * y + 3 * y ^ 3, 3 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 12 * x * y ^ 2 + 10 * x ^ 2 * y + 3 * x ^ 3 + 5 * y ^ 3, 2 * x * y ^ 2 + x ^ 2 * y, 0, 0, x * y ^ 3 + 2 * x ^ 2 * y ^ 2, (((-20 * x * y ^ 3 - 25 * x ^ 2 * y ^ 2) - 15 * x ^ 3 * y) - 4 * x ^ 4) - 5 * y ^ 4, 0, 12 * x * y ^ 3 + 12 * x ^ 2 * y ^ 2 + 12 * x ^ 3 * y + 3 * x ^ 4 + 6 * y ^ 4, x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 0, ((-5 * x * y ^ 4 - 8 * x ^ 2 * y ^ 3) - 4 * x ^ 3 * y ^ 2) - x ^ 4 * y, 7 * x * y ^ 4 + 13 * x ^ 2 * y ^ 3 + 13 * x ^ 3 * y ^ 2 + 5 * x ^ 4 * y + y ^ 5, 0, (-(x ^ 7) * y ^ 11 - x ^ 8 * y ^ 10) - x ^ 9 * y ^ 9, 2 * x * y ^ 5 + 4 * x ^ 3 * y ^ 3 + 3 * x ^ 4 * y ^ 2, 9 * x ^ 14 * y ^ 18 + 15 * x ^ 15 * y ^ 17 + 6 * x ^ 16 * y ^ 16, 22 * x * y ^ 5 + 51 * x ^ 2 * y ^ 4 + 62 * x ^ 3 * y ^ 3 + 42 * x ^ 4 * y ^ 2 + 18 * x ^ 5 * y + 3 * x ^ 6 + 3 * y ^ 6, 9 * x ^ 42 * y ^ 50 + 15 * x ^ 43 * y ^ 49 + 6 * x ^ 44 * y ^ 48, 0, 2 * x * y ^ 6 + 9 * x ^ 2 * y ^ 5 + 21 * x ^ 3 * y ^ 4 + 17 * x ^ 4 * y ^ 3 + 8 * x ^ 5 * y ^ 2, 5 * x ^ 14 * y ^ 19 + 12 * x ^ 15 * y ^ 18 + 10 * x ^ 16 * y ^ 17 + 3 * x ^ 17 * y ^ 16, 5 * x ^ 42 * y ^ 51 + 12 * x ^ 43 * y ^ 50 + 10 * x ^ 44 * y ^ 49 + 3 * x ^ 45 * y ^ 48, -(x ^ 7) * y ^ 9 - 2 * x ^ 8 * y ^ 8, 0, 0, (((((-9 * x ^ 2 * y ^ 7 - 24 * x ^ 3 * y ^ 6) - 30 * x ^ 4 * y ^ 5) - 27 * x ^ 5 * y ^ 4) - 16 * x ^ 6 * y ^ 3) - 6 * x ^ 7 * y ^ 2) + y ^ 9, (((((-2 * x * y ^ 8 - 13 * x ^ 2 * y ^ 7) - 29 * x ^ 3 * y ^ 6) - 39 * x ^ 4 * y ^ 5) - 31 * x ^ 5 * y ^ 4) - 10 * x ^ 6 * y ^ 3) + 2 * x ^ 7 * y ^ 2 + 2 * x ^ 8 * y, 0, 9 * x ^ 28 * y ^ 34 + 15 * x ^ 29 * y ^ 33 + 6 * x ^ 30 * y ^ 32, 0, (((((-15 * x ^ 2 * y ^ 8 - 58 * x ^ 3 * y ^ 7) - 100 * x ^ 4 * y ^ 6) - 92 * x ^ 5 * y ^ 5) - 44 * x ^ 6 * y ^ 4) - 12 * x ^ 7 * y ^ 3) - 3 * x ^ 8 * y ^ 2, 2 * x ^ 29 * y ^ 34 + x ^ 30 * y ^ 33, -3 * x ^ 7 * y ^ 8, -3 * x ^ 21 * y ^ 24, ((((-4 * x ^ 29 * y ^ 38 - 10 * x ^ 30 * y ^ 37) - 6 * x ^ 31 * y ^ 36) - 4 * x ^ 32 * y ^ 35) - 6 * x ^ 33 * y ^ 34) - 3 * x ^ 34 * y ^ 33, x ^ 15 * y ^ 19 + 2 * x ^ 16 * y ^ 18, 13 * x ^ 14 * y ^ 18 + 22 * x ^ 15 * y ^ 17 + 10 * x ^ 16 * y ^ 16, 0, x ^ 29 * y ^ 35 + 2 * x ^ 30 * y ^ 34, 6 * x ^ 14 * y ^ 20 + 12 * x ^ 15 * y ^ 19 + 12 * x ^ 16 * y ^ 18 + 12 * x ^ 17 * y ^ 17 + 3 * x ^ 18 * y ^ 16, 24 * x ^ 14 * y ^ 17 + 21 * x ^ 15 * y ^ 16, 24 * x ^ 42 * y ^ 49 + 21 * x ^ 43 * y ^ 48, 6 * x ^ 28 * y ^ 34 + 12 * x ^ 29 * y ^ 33 + 3 * x ^ 30 * y ^ 32, 3 * x ^ 14 * y ^ 19 + 9 * x ^ 15 * y ^ 18 + 9 * x ^ 16 * y ^ 17, 3 * x ^ 28 * y ^ 35 + 9 * x ^ 29 * y ^ 34 + 9 * x ^ 30 * y ^ 33, 0, 45 * x ^ 14 * y ^ 16, 45 * x ^ 42 * y ^ 48, 45 * x ^ 28 * y ^ 32] * x ^ 0 * y ^ 0
            end
        f56(x, y) = begin
                return [45, 21x + 24y, 24 * x * y + 9 * x ^ 2 + 12 * y ^ 2, 10 * x * y + 4 * x ^ 2 + 7 * y ^ 2, 15 * x * y + 6 * x ^ 2 + 9 * y ^ 2, 7 * x * y ^ 2 + 5 * x ^ 2 * y + x ^ 3 + 2 * y ^ 3, ((-24 * x * y ^ 2 - 33 * x ^ 2 * y) - 9 * x ^ 3) - 9 * y ^ 3, ((-8 * x * y ^ 2 - 8 * x ^ 2 * y) - 3 * x ^ 3) - 2 * y ^ 3, 12 * x * y ^ 2 + 3 * x ^ 2 * y + 3 * x ^ 3 + 3 * y ^ 3, 3 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 13 * x * y ^ 2 + 11 * x ^ 2 * y + 2 * x ^ 3 + 4 * y ^ 3, x * y ^ 2 + x ^ 2 * y + y ^ 3, 0, 0, 2 * x * y ^ 3 + x ^ 2 * y ^ 2, (((-17 * x * y ^ 3 - 26 * x ^ 2 * y ^ 2) - 17 * x ^ 3 * y) - 3 * x ^ 4) - 6 * y ^ 4, 0, 12 * x * y ^ 3 + 10 * x ^ 2 * y ^ 2 + 12 * x ^ 3 * y + 4 * x ^ 4 + 7 * y ^ 4, x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + y ^ 5, 0, (((-3 * x * y ^ 4 - 7 * x ^ 2 * y ^ 3) - 6 * x ^ 3 * y ^ 2) - x ^ 4 * y) - y ^ 5, 7 * x * y ^ 4 + 13 * x ^ 2 * y ^ 3 + 13 * x ^ 3 * y ^ 2 + 5 * x ^ 4 * y + y ^ 5, 0, (-(x ^ 7) * y ^ 11 - x ^ 9 * y ^ 9) - x ^ 10 * y ^ 8, 2 * x * y ^ 5 + 3 * x ^ 2 * y ^ 4 + x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + y ^ 6, 9 * x ^ 14 * y ^ 18 + 15 * x ^ 15 * y ^ 17 + 6 * x ^ 16 * y ^ 16, 22 * x * y ^ 5 + 50 * x ^ 2 * y ^ 4 + 62 * x ^ 3 * y ^ 3 + 44 * x ^ 4 * y ^ 2 + 16 * x ^ 5 * y + 3 * x ^ 6 + 4 * y ^ 6, 9 * x ^ 42 * y ^ 50 + 15 * x ^ 43 * y ^ 49 + 6 * x ^ 44 * y ^ 48, 0, 3 * x * y ^ 6 + 11 * x ^ 2 * y ^ 5 + 20 * x ^ 3 * y ^ 4 + 15 * x ^ 4 * y ^ 3 + 6 * x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 4 * x ^ 14 * y ^ 19 + 13 * x ^ 15 * y ^ 18 + 11 * x ^ 16 * y ^ 17 + 2 * x ^ 17 * y ^ 16, 4 * x ^ 42 * y ^ 51 + 13 * x ^ 43 * y ^ 50 + 11 * x ^ 44 * y ^ 49 + 2 * x ^ 45 * y ^ 48, -2 * x ^ 7 * y ^ 9 - x ^ 8 * y ^ 8, 0, 0, (((((-12 * x ^ 2 * y ^ 7 - 24 * x ^ 3 * y ^ 6) - 27 * x ^ 4 * y ^ 5) - 24 * x ^ 5 * y ^ 4) - 16 * x ^ 6 * y ^ 3) - 9 * x ^ 7 * y ^ 2) + y ^ 9, (((((-3 * x * y ^ 8 - 11 * x ^ 2 * y ^ 7) - 27 * x ^ 3 * y ^ 6) - 41 * x ^ 4 * y ^ 5) - 34 * x ^ 5 * y ^ 4) - 10 * x ^ 6 * y ^ 3) + 4 * x ^ 7 * y ^ 2 + 2 * x ^ 8 * y, 0, 9 * x ^ 28 * y ^ 34 + 15 * x ^ 29 * y ^ 33 + 6 * x ^ 30 * y ^ 32, 0, (((((-15 * x ^ 2 * y ^ 8 - 56 * x ^ 3 * y ^ 7) - 99 * x ^ 4 * y ^ 6) - 96 * x ^ 5 * y ^ 5) - 50 * x ^ 6 * y ^ 4) - 10 * x ^ 7 * y ^ 3) + x ^ 8 * y ^ 2 + y ^ 10, x ^ 28 * y ^ 35 + x ^ 29 * y ^ 34 + x ^ 30 * y ^ 33, -3 * x ^ 7 * y ^ 8, -3 * x ^ 21 * y ^ 24, (((((x ^ 28 * y ^ 39 - 3 * x ^ 29 * y ^ 38) - 7 * x ^ 30 * y ^ 37) - 7 * x ^ 31 * y ^ 36) - 9 * x ^ 32 * y ^ 35) - 7 * x ^ 33 * y ^ 34) - x ^ 34 * y ^ 33, 2 * x ^ 15 * y ^ 19 + x ^ 16 * y ^ 18, 12 * x ^ 14 * y ^ 18 + 24 * x ^ 15 * y ^ 17 + 9 * x ^ 16 * y ^ 16, 0, 2 * x ^ 29 * y ^ 35 + x ^ 30 * y ^ 34, 7 * x ^ 14 * y ^ 20 + 12 * x ^ 15 * y ^ 19 + 10 * x ^ 16 * y ^ 18 + 12 * x ^ 17 * y ^ 17 + 4 * x ^ 18 * y ^ 16, 24 * x ^ 14 * y ^ 17 + 21 * x ^ 15 * y ^ 16, 24 * x ^ 42 * y ^ 49 + 21 * x ^ 43 * y ^ 48, 7 * x ^ 28 * y ^ 34 + 10 * x ^ 29 * y ^ 33 + 4 * x ^ 30 * y ^ 32, 3 * x ^ 14 * y ^ 19 + 12 * x ^ 15 * y ^ 18 + 3 * x ^ 16 * y ^ 17 + 3 * x ^ 17 * y ^ 16, 3 * x ^ 28 * y ^ 35 + 12 * x ^ 29 * y ^ 34 + 3 * x ^ 30 * y ^ 33 + 3 * x ^ 31 * y ^ 32, 0, 45 * x ^ 14 * y ^ 16, 45 * x ^ 42 * y ^ 48, 45 * x ^ 28 * y ^ 32] * x ^ 0 * y ^ 0
            end
        f58(r, p, I) = begin
                local q
                q = -r // p
                return adj(p, [64, -32 + 32q, (16 - 32q) + 16 * q ^ 2, (8 - 16q) + 8 * q ^ 2, (10 - 22q) + 10 * q ^ 2, ((-2 + 8q) - 8 * q ^ 2) + 2 * q ^ 3, ((12 - 36q) + 36 * q ^ 2) - 12 * q ^ 3, ((4 - 10q) + 10 * q ^ 2) - 4 * q ^ 3, ((-4 + 12q) - 12 * q ^ 2) + 4 * q ^ 3, ((-1 + 4q) - 4 * q ^ 2) + q ^ 3, ((-5 + 16q) - 16 * q ^ 2) + 5 * q ^ 3, 2q - 2 * q ^ 2, I * q ^ 9, Unknown(), (-q + 2 * q ^ 2) - q ^ 3, (((-6 + 23q) - 34 * q ^ 2) + 23 * q ^ 3) - 6 * q ^ 4, -I * q ^ 3, (((8 - 16q) + 16 * q ^ 2) - 16 * q ^ 3) + 8 * q ^ 4, Unknown(), 0, Unknown(), ((((-1 + 8q) - 17 * q ^ 2) + 17 * q ^ 3) - 8 * q ^ 4) + q ^ 5, 0, 0, (-2q + 2 * q ^ 2 + 2 * q ^ 4) - 2 * q ^ 5, (10 * I * q ^ 15 - 22 * I * q ^ 16) + 10 * I * q ^ 17, (((((4 - 26q) + 62 * q ^ 2) - 80 * q ^ 3) + 62 * q ^ 4) - 26 * q ^ 5) + 4 * q ^ 6, (-10 * I * q ^ 45 + 22 * I * q ^ 46) - 10 * I * q ^ 47, q ^ 6, ((((2q - 11 * q ^ 2) + 23 * q ^ 3) - 23 * q ^ 4) + 11 * q ^ 5) - 2 * q ^ 6, ((-5 * I * q ^ 15 + 16 * I * q ^ 16) - 16 * I * q ^ 17) + 5 * I * q ^ 18, ((5 * I * q ^ 45 - 16 * I * q ^ 46) + 16 * I * q ^ 47) - 5 * I * q ^ 48, 0, -4 * q ^ 10, Unknown(), ((((((-1 + 12 * q ^ 2) - 29 * q ^ 3) + 36 * q ^ 4) - 36 * q ^ 5) + 29 * q ^ 6) - 12 * q ^ 7) + q ^ 9, Unknown(), -4 * I * q ^ 5, (-10 * q ^ 30 + 22 * q ^ 31) - 10 * q ^ 32, 4 * I * q ^ 35, Unknown(), -2 * q ^ 31 + 2 * q ^ 32, 0, 0, ((((4 * q ^ 31 - 12 * q ^ 32) + 10 * q ^ 33) - 10 * q ^ 34) + 12 * q ^ 35) - 4 * q ^ 36, (-I * q ^ 16 + 2 * I * q ^ 17) - I * q ^ 18, (16 * I * q ^ 15 - 32 * I * q ^ 16) + 16 * I * q ^ 17, -(q ^ 12), (q ^ 31 - 2 * q ^ 32) + q ^ 33, (((8 * I * q ^ 15 - 16 * I * q ^ 16) + 16 * I * q ^ 17) - 16 * I * q ^ 18) + 8 * I * q ^ 19, -32 * I * q ^ 15 + 32 * I * q ^ 16, 32 * I * q ^ 45 - 32 * I * q ^ 46, (-8 * q ^ 30 + 16 * q ^ 31) - 8 * q ^ 32, ((-4 * I * q ^ 15 + 12 * I * q ^ 16) - 12 * I * q ^ 17) + 4 * I * q ^ 18, ((4 * q ^ 30 - 12 * q ^ 31) + 12 * q ^ 32) - 4 * q ^ 33, 4 * q ^ 20, 64 * I * q ^ 15, -64 * I * q ^ 45, -64 * q ^ 30])
            end
        tbl[:irreducibles] = [f1(r), f1(p), f6(p, r, -1), f6(r, p, 1), f6(p, r, 1), f6(r, p, -1), f7(r, p), f7(p, r), f9(r, p), f9(p, r), f11(r, p, -1), f11(r, p, 1), f14(p, r), f14(r, p), f16(p, r), f16(r, p), f17(r, p, -1), f17(p, r, -1), f17(r, p, 1), f17(p, r, 1), f21(r, p), f21(p, r), f23(r, p), f23(p, r), f25(r, p), f26(r, p), f27(r, p, -1), f27(p, r, 1), f27(r, p, 1), f27(p, r, -1), f31(r, p, 1), f31(p, r, 1), f31(r, p, -1), f31(p, r, -1), f35(r, p, 1), f35(r, p, -1), f37(r, p), f37(p, r), f39(r, p, 1), f39(r, p, -1), f41(r, p), f42(r, p, 1), f42(p, r, 1), f42(r, p, -1), f42(p, r, -1), f46(r, p), f46(p, r), f48(r, p, -1), f48(r, p, 1), f50(r, p, 1), f50(p, r, 1), f50(r, p, -1), f50(p, r, -1), f54(r, p), f54(p, r), f56(r, p), f56(p, r), f58(r, p, E(4)), f58(r, p, -(E(4)))]
        tbl[:centralizers] = map((x->begin
                        div(tbl[:order], x)
                    end), tbl[:classes])
        tbl[:irredinfo] = chevieget(:G31, :IrredInfo)
        tbl = ((CHEVIE[:compat])[:MakeCharacterTable])(tbl)
        return tbl
    end)
chevieset(:G31, :HeckeRepresentation, function (para, root, i)
        local x, y, rep, f1, f6, f7, f9, f11, f14, f16, f19, f21, f23, f25, f26, f27, f31, f35, f37, f42, f46, f48, f54, f56
        x = (para[1])[1]
        y = (para[1])[2]
        f1 = (x->begin
                    [[[x]], [[x]], [[x]], [[x]], [[x]]]
                end)
        f6(x, y, s) = begin
                local v
                v = s * GetRoot(x * y)
                return [[[x, 0, 0, 0], [0, -v + x + y, -v + x, v], [0, v - y, v, -v], [0, 0, 0, x]], [[x + y, (v - x) - y, -x, -v], [0, x, 0, 0], [y, (v - x) - y, 0, -v], [0, 0, 0, x]], [[x + y, -x, -v, 0], [y, 0, -v, 0], [0, 0, x, 0], [0, 0, 0, x]], [[x, 0, 0, 0], [0, x, 0, 0], [0, 0, x, 0], [0, 0, v, y]], [[y, -y, -y, 0], [0, x, 0, 0], [0, 0, x, 0], [0, 0, 0, x]]] * x ^ 0 * y ^ 0
            end
        f7(x, y) = begin
                return ExpandRep(5, 5, [[-x, 35, 38, 96], [-y, 15, 21, 46, 88, 101, 110, 113, 119], [x, 3, 6, 12, 22, 25, 31, 43, 50, 55, 58, 62, 68, 70, 72, 75, 80, 82, 92, 95, 98, 102, 106, 123], [y, 24, 37, 48, 49, 56, 74, 84, 104, 111], [x + y, 0, 20, 23, 73, 83, 93, 99, 100, 103, 124]]) * x ^ 0 * y ^ 0
            end
        f9(x, y) = begin
                return ExpandRep(5, 5, [[-x, 33, 48, 95], [-y, 20, 61, 90, 117], [x, 4, 28, 38, 43, 57, 75, 112], [y, 6, 12, 18, 25, 31, 37, 49, 50, 68, 74, 81, 87, 93, 99, 100, 106, 107, 118, 124], [x + y, 0, 56]]) * x ^ 0 * y ^ 0
            end
        f11(x, y, s) = begin
                return map((m->begin
                                ExteriorPower(m, 2) // x
                            end), f6(x, y, s))
            end
        f14(x, y) = begin
                return ExpandRep(5, 9, [[-x, 225, 235, 236], [-y, 11, 32, 43, 93, 104, 244, 294, 314, 355, 376, 386], [x, 0, 19, 48, 60, 67, 80, 81, 109, 121, 128, 141, 151, 162, 172, 182, 192, 212, 222, 252, 263, 273, 283, 302, 322, 324, 334, 344, 363, 392, 402], [y, 153, 154, 155, 156, 157, 158, 159, 160, 161, 198, 199, 201, 202, 227, 230, 232, 240, 242], [x + y, 20, 50, 70, 111, 131, 253, 303, 323, 364, 394, 404]]) * x ^ 0 * y ^ 0
            end
        f16(x, y) = begin
                return ExpandRep(5, 10, [[-x, 42, 60, 68, 80, 90, 120, 128, 148, 153, 163, 170, 178, 184, 194, 363, 384, 389, 404, 406, 407, 485, 495], [-y, 65, 76, 94, 104, 130, 138, 150, 158, 160, 168, 190, 234, 239, 254, 259, 269, 272, 342, 360, 368, 380, 390, 394, 453, 463], [-x * y, 118], [-(x ^ 2), 12], [-x - y, 124, 174], [(-x * y - x ^ 2) - y ^ 2, 312], [-x + y, 98, 465], [1, 121, 141, 171, 181], [x, 0, 33, 55, 67, 92, 99, 142, 155, 177, 182, 200, 211, 222, 244, 270, 278, 288, 299, 304, 309, 322, 333, 355, 377, 388, 402, 405, 408, 411, 422, 433, 444, 466, 472, 484, 486, 493, 496], [y, 11, 24, 75, 78, 88, 102, 136, 137, 156, 157, 167, 192, 199, 233, 238, 255, 258, 266, 277, 311, 344, 366, 367, 392, 455, 470, 478, 488, 494, 499], [x ^ 2, 14, 110], [x - y, 198, 365], [x + y, 44, 66, 111, 166, 172, 300, 400], [2x + y, 122]]) * x ^ 0 * y ^ 0
            end
        f19(x, y, v) = begin
                local s
                s = v * GetRoot(x * y)
                return ExpandRep(5, 10, [[-1, 56, 159], [1, 78, 179, 303, 325, 347, 416], [-s, 98, 268, 296], [-x, 420, 453], [-y, 31, 120, 224, 257], [-s * y ^ -1, 178], [-s * y, 167], [-x * y, 87, 330, 352, 374, 461], [-s * y ^ 2, 182, 292], [-x * y ^ 2, 192, 490], [-(y ^ 2), 130, 150], [-(y ^ 3), 294, 392], [-x * y - x ^ 2, 91, 93, 174, 261, 263, 281, 283], [-s * x * y - s * x ^ 2, 284, 290], [-s * y ^ 2 - x ^ 2 * y, 262], [-x * y ^ 2 - x ^ 2 * y, 264], [(-x * y - x ^ 2) - y ^ 2, 172], [((-s * x * y - s * x ^ 2) - s * y ^ 2) + x * y ^ 2, 282], [(-s * x * y - s * x ^ 2) + y ^ 3, 160, 180], [-s + y, 288], [s, 169, 189, 299], [x, 13, 100, 242, 275, 286], [y, 0, 22, 44, 99, 111, 122, 133, 140, 144, 168, 188, 200, 211, 233, 298, 311, 366, 388, 399, 402, 435, 444, 477, 488, 499], [s * y ^ -1, 176], [s * y, 97, 185], [x * y, 65, 195], [s * x * y, 162], [x * y ^ 2, 492], [y ^ 2, 110, 152, 170, 395], [s - x, 269, 289], [x + y, 11, 66, 88, 96, 175, 177, 199, 244, 266, 277, 333, 355, 377, 422, 455, 466], [s * x + s * y, 285, 287, 291, 293], [x * y + y ^ 2, 95, 265, 267], [s * x * y + s * y ^ 2, 164], [x ^ 2 * y + x ^ 3, 260, 280]]) * x ^ 0 * y ^ 0
            end
        f21(x, y) = begin
                return ExpandRep(5, 15, [[-2 * x * y, 495], [-2x - y, 625], [-2 * x * y - y ^ 2, 1096], [-1, 81, 107, 108, 133, 190, 193, 246, 451, 711, 861, 1026], [-(x ^ -1), 116, 854], [-(x ^ -1) * y, 191, 636, 643], [-(x ^ -1) * y ^ 2, 632], [-x, 46, 76, 183, 184, 287, 347, 348, 426, 430, 431, 483, 492, 496, 518, 526, 621, 780, 1005, 1082, 1083], [-y, 17, 242, 252, 274, 330, 396, 400, 528, 529, 537, 550, 740, 743, 800, 857, 933, 968, 1021, 1023, 1101], [-x * y ^ -1, 70], [-x * y, 45, 75, 319, 391, 398, 502, 542, 623], [-x * y ^ 2, 143, 420, 427, 1095], [-x * y ^ 3, 212, 213, 437, 1112, 1113], [-(x ^ 2), 421, 423, 616, 617, 871, 1045], [-(y ^ 2), 152, 187, 378, 387, 720, 742, 975, 1080, 1097], [-(x ^ 2) * y, 540, 600, 607, 870], [-(x ^ 2) * y ^ 2, 664, 887, 888], [-(y ^ 3), 840, 990], [-(x ^ 3) * y, 360, 367], [-(x ^ 4) * y, 435, 442], [-1 - x ^ -1 * y, 1104], [-1 - x * y ^ -1, 130], [-x - y, 963, 1022], [-x * y - x ^ 2, 541], [-x * y - y ^ 2, 199], [-x * y ^ 2 - x ^ 2 * y, 138], [-(x ^ 2) - y ^ 2, 424], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 447, 672], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 667], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 663], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) + x ^ 4, 438], [-x * y + y ^ 2, 240, 247, 525, 855, 862], [-x * y ^ 2 + x ^ 2 * y, 390, 397, 645, 652], [-x * y ^ 2 + y ^ 3, 375, 382], [-(x ^ 2) + y ^ 2, 318, 422], [-(x ^ 2) * y + y ^ 3, 137], [1, 2, 3, 486, 490, 556, 726, 981], [x ^ -1, 565, 969], [x ^ -1 * y, 501, 505, 508, 966, 970, 973, 1059], [x ^ -1 * y ^ 2, 497], [x, 31, 61, 78, 96, 188, 232, 381, 386, 417, 481, 498, 507, 631, 651, 675, 691, 736, 758, 867, 900, 947, 976, 980, 1028, 1081, 1085, 1088, 1108], [y, 80, 144, 192, 224, 259, 278, 305, 369, 433, 449, 530, 533, 574, 594, 626, 674, 722, 723, 738, 739, 747, 787, 819, 835, 876, 883, 916, 961, 964, 978, 996, 1012, 1076, 1092, 1124], [x * y, 203, 300, 307, 316, 366, 393, 402, 432, 465, 618, 619, 627, 630, 647, 657, 767, 826, 1067, 1068], [x * y ^ 2, 136, 139, 361, 362, 586, 811], [x * y ^ 3, 585, 810], [x * y ^ 4, 210, 1110], [x ^ 2, 376, 428, 543, 552], [y ^ 2, 141, 145, 148, 154, 327, 383, 532, 842, 843, 872, 915, 992, 993, 1051], [x ^ 2 * y, 165, 172, 896, 1036], [x ^ 2 * y ^ 2, 436, 668], [y ^ 3, 673, 1050], [x ^ -1 * y ^ 2 - x, 962], [x - y, 243, 858], [x * y - x ^ 2, 480, 487, 648], [x * y - y ^ 2, 180, 323, 735], [x * y ^ 2 - x ^ 2 * y, 363], [x * y ^ 2 - y ^ 3, 315, 322], [x * y ^ 4 - x ^ 3 * y ^ 2, 660], [x ^ 2 - y ^ 2, 377], [x + y, 32, 48, 64, 121, 128, 176, 181, 225, 289, 321, 353, 385, 466, 482, 514, 610, 658, 755, 771, 899, 948, 977, 1044], [x + x ^ 2 * y ^ -1, 1105], [x * y + y ^ 2, 317, 960], [x * y ^ 2 + x ^ 2 * y, 445, 446], [x * y ^ 3 + x ^ 2 * y ^ 2, 135, 443], [x ^ 2 * y + x ^ 3, 615, 622], [(x * y ^ 2 + x ^ 2 * y) - x ^ 3, 441], [x * y ^ 2 + x ^ 2 * y + y ^ 3, 666], [x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 662], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 661], [2 * x * y ^ 2 + 2 * x ^ 2 * y + y ^ 3, 670]]) * x ^ 0 * y ^ 0
            end
        f23(x, y) = begin
                return ExpandRep(5, 15, [[-2 * x ^ 2, 571], [-2 * x ^ 3, 766], [-1, 19, 281, 304, 567, 584, 657, 700, 922], [-x, 152, 226, 277, 363, 470, 512, 568, 572, 577, 580, 587, 621, 737, 779, 1037], [-y, 62, 102, 114, 133, 177, 352, 355, 588, 813, 897, 933, 963, 969], [-x * y ^ -1, 426], [-x * y, 103, 105, 155, 178, 189, 193, 345, 346, 439, 480, 810, 898, 960, 993, 999, 1003, 1074, 1078, 1093, 1100], [-x * y ^ 2, 315], [-(x ^ 2), 184, 223, 425, 575, 586, 590, 767, 772, 773, 775, 848, 868, 994, 1069, 1123], [-(y ^ 2), 260, 318, 324], [-(x ^ 2) * y, 180, 990, 1065], [-(x ^ 3), 405, 770], [-x - y, 222], [-x * y - x ^ 2, 255, 256, 408, 414], [-x * y - y ^ 2, 438, 444], [-(x ^ 2) - x ^ 3 * y ^ -1, 409], [(-x * y ^ 2 - x ^ 2 * y) + x ^ 3, 435], [1, 17, 371, 452, 582, 591, 597, 760, 988], [x, 16, 34, 48, 54, 96, 112, 128, 154, 160, 191, 224, 257, 273, 353, 367, 417, 423, 429, 433, 449, 514, 562, 583, 594, 598, 610, 626, 739, 751, 755, 771, 777, 787, 788, 790, 819, 851, 869, 878, 880, 883, 947, 996, 1039, 1057, 1058, 1060, 1076, 1092, 1124], [y, 0, 80, 101, 144, 208, 240, 259, 337, 385, 401, 416, 498, 526, 546, 675, 707, 723, 803, 900, 1028], [x * y ^ -1, 366], [x * y, 97, 125, 172, 219, 290, 412, 618, 643, 667, 668, 670, 826, 843, 892, 1006, 1087], [x * y ^ 2, 440], [x ^ 2, 45, 150, 182, 187, 361, 420, 442, 445, 510, 556, 560, 585, 601, 605, 735, 778, 780, 781, 862, 870, 871, 1035, 1050, 1051, 1067, 1072, 1117], [x ^ 2 * y ^ -1, 424], [x ^ 2 * y, 91, 95, 166, 170, 185, 210, 406, 660, 661, 886, 890, 995, 1070, 1081, 1085], [x ^ 3, 181, 215, 436, 856, 860, 1066, 1111, 1115], [x + y, 64, 176, 221, 241, 305, 321, 441, 482, 530, 642, 674, 835, 899, 948, 1012, 1044, 1108], [x + x ^ 2 * y ^ -1, 411], [x * y + x ^ 2, 217], [x * y + y ^ 2, 511, 515], [x ^ 2 * y + x ^ 3, 211, 410]]) * x ^ 0 * y ^ 0
            end
        f25(x, y) = begin
                return ExpandRep(5, 16, [[-x, 112, 230, 250, 390, 711, 801, 933, 1013, 1056, 1057, 1232], [-y, 21, 39, 41, 60, 75, 141, 289, 323, 416, 419, 420, 444, 493, 561, 576, 578, 579, 618, 633, 647, 649, 650, 697, 700, 709, 751, 772, 886, 922, 958, 966, 975, 983, 986, 1158, 1159, 1173, 1223], [x, 81, 144, 145, 146, 161, 165, 180, 195, 216, 241, 245, 246, 256, 274, 308, 343, 345, 375, 409, 417, 418, 459, 478, 497, 498, 503, 529, 546, 560, 564, 597, 663, 682, 715, 721, 722, 727, 766, 785, 819, 832, 871, 904, 935, 937, 1003, 1017, 1020, 1024, 1041, 1092, 1109, 1126, 1143, 1185, 1189, 1190, 1211, 1262, 1265, 1269], [y, 7, 37, 110, 174, 175, 341, 360, 426, 507, 508, 509, 510, 511, 512, 513, 514, 609, 613, 614, 640, 641, 643, 644, 645, 648, 693, 731, 732, 733, 734, 735, 800, 802, 803, 804, 849, 853, 913, 917, 918, 970, 976, 979, 980, 984, 987, 988, 989, 990, 991, 1058, 1072, 1075, 1076, 1160, 1175, 1177, 1194, 1227, 1228, 1245, 1246, 1278, 1279], [x + y, 85, 119, 153, 187, 204, 221, 238, 255, 273, 307, 392, 423, 425, 460, 477, 505, 563, 665, 716, 729, 767, 836, 870, 938, 1006, 1023, 1239]]) * x ^ 0 * y ^ 0
            end
        f26(x, y) = begin
                return ExpandRep(5, 20, [[-2 * x * y, 343, 1003, 1309], [-2 * x ^ 2, 203, 903], [-2 * x * y - x ^ 2, 1823, 1828], [-1, 1, 85, 134, 402, 466, 676, 854, 944, 997, 1343, 1818], [-(x ^ -1) * y, 834, 1054, 1434], [-(x ^ -1) * y ^ 2, 822, 1042, 1422], [-x, 202, 321, 325, 326, 331, 385, 826, 831, 902, 910, 1017, 1057, 1103, 1104, 1317, 1319, 1437], [-y, 275, 342, 391, 431, 517, 803, 931, 1002, 1121, 1125, 1204, 1332, 1373, 1668, 1795, 1959], [-x * y, 324, 329, 340, 371, 384, 1000, 1043, 1044, 1049, 1183, 1184, 1423, 1424, 1429], [-x * y ^ 2, 1568, 1573, 1827], [-(x ^ 2), 187, 200, 707, 900, 1643, 1648, 1649, 1653, 1655, 1867], [-(y ^ 2), 1124, 1129, 1171, 1566, 1572], [-(x ^ 2) * y, 607], [-(x ^ 3), 683, 1927], [-(y ^ 3), 1169], [-(x ^ 3) * y, 767], [-x * y ^ 2 - 2 * x ^ 2 * y, 207], [-(x ^ -1) * y ^ 3 - y ^ 2, 690], [-(x ^ -1) * y ^ 4 - y ^ 3, 289, 827, 1893], [-x - y, 381, 426], [-x * y - x ^ 2, 361, 365, 623], [-x * y - y ^ 2, 389, 509, 1161, 1165], [-x * y ^ 2 - x ^ 2 * y, 364, 369, 1847], [-x * y ^ 2 - y ^ 3, 127, 847, 1563], [-x * y ^ 3 - y ^ 4, 1487], [-(x ^ 2) * y - x ^ 3, 247], [(-(x ^ -1) * y ^ 3 - x * y) - y ^ 2, 1040, 1420], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 1164], [(-x * y ^ 2 - x ^ 2 * y) + x ^ 3, 647, 907, 1407], [-x + y, 642, 1108, 1113, 1402], [-x * y + x ^ 2, 323, 1300, 1303, 1304, 1308, 1313, 1315, 1928, 1935], [-x * y + y ^ 2, 348, 349, 353, 355, 1008, 1009, 1013, 1015], [-x * y ^ 2 + x ^ 2 * y, 347, 768, 775, 1007, 1575], [-x * y ^ 2 + x ^ 3, 368, 1227], [-(x ^ 2) + y ^ 2, 640, 1223, 1228, 1233, 1235, 1400, 1640], [(-(x ^ -1) * y ^ 4 + x ^ 2 * y) - y ^ 3, 1047, 1427], [-(x ^ -1) * y ^ 3 + x * y + x ^ 2, 820], [1, 334, 702, 706, 710, 716, 1117, 1194, 1938], [x ^ -1, 550, 1114], [x ^ -1 * y, 149, 1102, 1753], [x, 42, 63, 168, 201, 211, 231, 252, 313, 484, 589, 621, 700, 703, 713, 715, 745, 799, 860, 901, 911, 968, 1026, 1073, 1122, 1126, 1130, 1136, 1178, 1237, 1239, 1242, 1280, 1389, 1446, 1468, 1494, 1515, 1557, 1599, 1600, 1621, 1684, 1705, 1763, 1909, 1930, 1936, 1997], [y, 210, 322, 336, 341, 345, 351, 357, 378, 382, 399, 568, 646, 650, 652, 694, 778, 821, 1001, 1005, 1011, 1046, 1051, 1052, 1109, 1115, 1182, 1199, 1221, 1305, 1406, 1410, 1412, 1426, 1431, 1432, 1536, 1578, 1642, 1726, 1821, 1831, 1852, 1894], [x * y, 20, 104, 286, 362, 440, 523, 733, 770, 776, 887, 909, 1082, 1149, 1177, 1267, 1970], [x ^ 2, 681, 686, 691, 1166, 1933], [y ^ 2, 320, 333, 335, 344, 682, 1004, 1180, 1820, 1829, 1833, 1835], [x ^ 2 * y, 773], [x ^ 3, 1160, 1647], [y ^ 3, 373, 375, 680], [x - y, 708, 1922, 1926], [x * y - x ^ 2, 208, 213, 215, 648, 653, 655, 908, 913, 915, 1408, 1413, 1415], [x * y - y ^ 2, 762, 766, 1562], [x * y ^ 2 - x ^ 3, 1127], [x ^ 2 - y ^ 2, 388, 393, 395, 1120, 1128, 1133, 1135, 1920, 1923], [x ^ 2 * y - x ^ 3, 1307], [x ^ 2 * y - y ^ 3, 760, 763, 1560], [x ^ 3 - y ^ 3, 1168, 1173, 1175], [(x ^ -1 * y ^ 2 - x) + y, 1100], [(x * y - x ^ 2) + y ^ 2, 643, 1220, 1224, 1403], [x + y, 21, 41, 105, 126, 189, 205, 315, 442, 526, 610, 631, 736, 757, 863, 905, 947, 1031, 1094, 1157, 1197, 1284, 1347, 1452, 1473, 1768, 1873, 1915, 1978, 1999], [x * y + x ^ 2, 40, 383, 1170, 1240, 1989], [x * y + y ^ 2, 123, 204, 249, 749, 843, 904, 1189, 1229, 1244, 1723, 1728, 1853, 1955], [x * y ^ 2 + x ^ 2 * y, 283, 387, 1080], [x * y ^ 2 + y ^ 3, 1084, 1483], [x * y ^ 3 + x ^ 2 * y ^ 2, 1567], [x * y ^ 3 + y ^ 4, 687, 1887], [x ^ 2 + y ^ 2, 1162], [x ^ 2 * y + x ^ 3, 363], [x ^ 2 * y ^ 2 + x ^ 3 * y, 367], [(x * y + x ^ 2) - y ^ 2, 1123], [(x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 4, 1167], [x ^ -1 * y ^ 3 + x ^ 2 + y ^ 2, 1107], [x * y + x ^ 2 + y ^ 2, 823], [x * y ^ 2 + x ^ 2 * y + x ^ 3, 1163], [x * y ^ 2 + x ^ 2 * y + y ^ 3, 327, 1187], [2 * x * y + y ^ 2, 209]]) * x ^ 0 * y ^ 0
            end
        f27(x, y, v) = begin
                local s
                s = v * GetRoot(x * y)
                return ExpandRep(5, 20, [[(-2 * s * x * y - s * x ^ 2) - s * y ^ 2, 1799], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 99, 1699], [(-2 * s * x * y + x * y ^ 2 + x ^ 2 * y) - y ^ 3, 436], [-1, 61, 145, 254, 394, 565, 647, 1151, 1220, 1302], [-(x ^ -1), 1109], [-(x ^ -1) * y, 229], [-s, 337, 470, 657, 716, 756, 1056, 1093, 1516, 1572, 1784, 1918, 1919, 1959], [-x, 690, 1939], [-y, 74, 154, 208, 392, 481, 523, 755, 777, 1087, 1176, 1640, 1701, 1743, 1826, 1868], [-s * x ^ -1, 124, 333, 669, 1570, 1930], [-s * x ^ -1 * y ^ 2, 535], [-s * x, 77, 157, 1819], [-s * y, 557, 617, 635, 695, 893, 956, 1016, 1496, 1898, 1899], [-x * y, 177, 217, 277, 619, 636, 677, 979, 1076, 1412], [-s * x * y, 37, 117, 597, 996, 1639, 1719], [-s * y ^ 2, 98, 898], [-x * y ^ 2, 899], [-(y ^ 2), 34, 78, 114, 138, 475, 878, 938], [-(y ^ 3), 38, 838, 1237, 1317], [-(y ^ 4), 18, 818, 1217, 1257], [-x - y, 1192], [-s * x ^ -1 * y ^ 2 - s * y, 139], [-s * x - s * y, 137, 237, 537, 577, 936, 976, 1679, 1739, 1759, 1839], [-s * x - y ^ 2, 536, 556, 1276, 1356, 1678, 1758], [-x * y - y ^ 2, 179, 219, 1779, 1879], [-s * x * y - s * x ^ 2, 197, 596], [-s * x * y - s * y ^ 2, 517, 916], [-s * x * y ^ 2 - s * y ^ 3, 415], [-s * y ^ 2 - x * y ^ 2, 496], [-x * y ^ 2 - x ^ 2 * y, 97], [-x * y ^ 2 - y ^ 3, 435], [(-s * x * y - s * x ^ 2) - x * y ^ 2, 1396, 1798], [(-s * x * y - s * x ^ 2) - y ^ 3, 813, 1236, 1316, 1638, 1718], [(-s * x * y ^ 2 - s * x ^ 2 * y) - y ^ 4, 1216, 1256, 1618, 1658], [(-s * y ^ 2 - x * y ^ 2) - x ^ 2 * y, 1296, 1698], [(-s * y ^ 2 - x * y ^ 2) - y ^ 3, 495], [(-s * x - s * y) + y ^ 2, 477, 876], [((-s * x - s * y) + x * y) - y ^ 2, 476], [(-s * x - s * y) + x * y + y ^ 2, 483], [(-s * x * y - s * y ^ 2) + x * y ^ 2 + y ^ 3, 437, 836], [((-s * x * y - s * x ^ 2) + s * y ^ 2 + x ^ 2 * y) - y ^ 3, 516], [-1 + s * y ^ -1, 864, 1914], [-s + y, 868], [-s * x + x * y, 423, 616], [-s * y + x * y, 883, 1895], [-s * y + y ^ 2, 539], [(-s * y ^ 2 + x * y ^ 2) - x ^ 3, 411, 451], [(-s * y ^ 3 + x * y ^ 3) - x ^ 3 * y, 15, 55, 1612, 1652], [(((-s * x + x * y) - s * x ^ 2 * y ^ -1) + x ^ 2) - y ^ 2, 576], [-s + x + y, 884, 1915], [-s * x + x * y + y ^ 2, 1772, 1872], [-s * y + x * y + y ^ 2, 75, 155, 431, 511], [-s * x * y + x * y ^ 2 + x ^ 2 * y, 1299], [-s * x * y ^ 2 + s * x ^ 3 + x * y ^ 3, 17, 57, 1619, 1659], [-s * y ^ 2 + x * y ^ 2 + y ^ 3, 35, 115, 1632, 1712], [1, 651, 1133, 1173, 1188], [s, 335, 655, 671, 691, 863, 933, 953, 1013, 1689, 1894, 1912, 1952], [x, 0, 42, 170, 174, 214, 259, 400, 424, 466, 778, 800, 821, 926, 954, 1263, 1284, 1347, 1389, 1494, 1515, 1602, 1625, 1667, 1731, 1773, 1957], [y, 255, 294, 315, 357, 378, 395, 402, 442, 571, 614, 659, 736, 757, 775, 799, 802, 825, 842, 905, 1010, 1033, 1052, 1156, 1178, 1266, 1326, 1351, 1368, 1431, 1452, 1473, 1517, 1536, 1557, 1576, 1599, 1852, 1938, 1978, 1999], [s * x ^ -1, 1113], [s * y ^ -1, 711, 751, 1053], [s * x ^ -1 * y, 534, 930], [s * x, 86, 276, 593, 1418, 1816], [s * y, 697, 1096, 1272, 1286, 1393, 1416, 1818, 1892], [x * y, 23, 107, 275, 508, 552, 675, 699, 1037, 1201, 1245, 1391, 1492], [s * x * y, 515], [x ^ 2, 191], [y ^ 2, 479, 559, 579, 932, 1226, 1288, 1311, 1352, 1497], [x ^ 2 * y, 995], [y ^ 3, 519, 1206, 1251], [s - x, 776], [s - y, 873], [s * x - x * y, 486, 1279], [s * y - x * y, 490], [s * y - y ^ 2, 615], [s * x * y - x * y ^ 2, 832], [s * x * y - y ^ 3, 1292], [s * y ^ 2 - x ^ 2 * y, 497, 896], [(x - y) - s * x * y ^ -1, 656], [(s * x - s * y) - x * y, 696], [(s * x - x * y) - x ^ 2, 676], [(s * y - x * y) - y ^ 2, 833, 888], [(s * x ^ 2 * y - s * y ^ 3) + y ^ 4, 455], [(s * y ^ 3 - x * y ^ 3) + x ^ 3 * y, 456], [s + s * x * y ^ -1, 973], [x + y, 63, 126, 147, 210, 231, 336, 399, 471, 484, 526, 531, 551, 568, 610, 631, 652, 673, 1073, 1094, 1115, 1157, 1199, 1221, 1305, 1578, 1642, 1705, 1747, 1789, 1831, 1873, 1936], [s * x + s * y, 491, 872, 913, 993], [x * y + x ^ 2, 591], [x * y + y ^ 2, 94, 135, 172, 212, 235, 952, 972, 1092, 1672, 1732, 1752, 1832], [s * x * y + s * y ^ 2, 499, 1692], [s * x * y + y ^ 3, 439], [x * y ^ 2 + x ^ 2 * y, 195, 1792], [x * y ^ 2 + y ^ 3, 92], [(s * x + s * y) - y ^ 2, 575], [(s * x ^ 2 * y + s * x ^ 3) - x ^ 2 * y ^ 2, 416], [((s * x * y + s * y ^ 2) - x * y ^ 2) - y ^ 3, 95, 1232], [((s * x * y ^ 2 + s * y ^ 3) - x * y ^ 3) - y ^ 4, 1212], [s * x ^ 2 * y + s * x ^ 3 + x * y ^ 3 + y ^ 4, 417, 816], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 892]]) * x ^ 0 * y ^ 0
            end
        f31(x, y, v) = begin
                local s
                s = v * GetRoot(x * y)
                return ExpandRep(5, 20, [[(((((((((-2 * s * x ^ 3 * y ^ -3 - 3 * s * x ^ 4 * y ^ -4) - 4 * s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 3 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 284], [(((((((-2x - 3 * s * x ^ 2 * y ^ -2) - 4 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 145], [((((((-2s - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 65], [(((-2x + s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 238], [((-2 * x ^ -1 * y ^ 2 + s) - y) + s * x ^ -2 * y ^ 2 + s * x ^ -1 * y, 823], [-2 * x ^ -1 * y ^ 2 + s * x ^ -2 * y ^ 2 + s * x ^ -1 * y, 85], [(((-2s + 2x) - 2 * s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2, 25], [(((-2s + 3x + y) - s * x ^ -1 * y) - 2 * s * x * y ^ -1) + s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1, 925], [-(x ^ -1) * y ^ 2, 556, 1753], [-s, 210, 336, 611, 1322], [-x, 1478], [-y, 278, 609, 672, 1029, 1092, 1510, 1596, 1849, 1930, 1995], [-s * x ^ -2 * y ^ 2, 479, 1281], [-s * x ^ -1 * y, 440, 1367, 1951], [-s * x * y ^ -1, 591], [-s * x ^ 2 * y ^ -2, 741, 1880, 1968], [-s * x ^ 3 * y ^ -3, 1122], [-(x ^ 2) * y ^ -1, 565, 1140, 1265], [-(x ^ 3) * y ^ -2, 1186], [-(x ^ 5) * y ^ -4, 1964], [((((((((((-s * x ^ 2 * y ^ -2 - 4 * s * x ^ 3 * y ^ -3) - 7 * s * x ^ 4 * y ^ -4) - 6 * s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 4 * x ^ 6 * y ^ -5) - 3 * x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 205, 325], [(((((((((-s * x ^ 2 * y ^ -2 - 4 * s * x ^ 3 * y ^ -3) - 6 * s * x ^ 4 * y ^ -4) - 4 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 305, 385], [((((((-s * x ^ 3 * y ^ -3 - 4 * s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 265], [(((((((((((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) - 6 * s * x ^ 4 * y ^ -4) - 6 * s * x ^ 5 * y ^ -5) - 3 * s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 5 * x ^ 4 * y ^ -3) - 4 * x ^ 5 * y ^ -4) - 3 * x ^ 6 * y ^ -5) - 2 * x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 185, 245], [(((((((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) - x ^ 2 * y ^ -1) - x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 224], [((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 985], [(((((((((((-s - 3x) - y) - 4 * s * x * y ^ -1) - 7 * s * x ^ 2 * y ^ -2) - 6 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - 4 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 186, 246], [(((((((((-s - 3x) - y) - 3 * s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 181, 241], [((((((((-s - 3x) - y) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 981, 1041], [(((((((-(x ^ -1) * y ^ 2 - 3s) - x) - y) - s * x ^ -1 * y) - 2 * s * x * y ^ -1) - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 146], [((((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + s * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5, 1045], [(((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1185], [((((((((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 646], [(((((((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 282], [(((((((((((-s - 2x) - y) - 4 * s * x * y ^ -1) - 5 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - 3 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 6 * x ^ 4 * y ^ -3) - 4 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 206], [(((((((((-s - 2x) - y) - 4 * s * x * y ^ -1) - 5 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 306, 386], [(((((((((-s - 2x) - y) - 4 * s * x * y ^ -1) - 5 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 3 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 5 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 326], [(((((((((-s - 2x) - y) - 3 * s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 201], [((((((((-s - 2x) - y) - 3 * s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 321], [((((((((-s - 2x) - y) - 3 * s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 266], [(((((((-s - 2x) - y) - 3 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 301, 381], [((((((((-s - 2x) - y) - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1001], [((((((-s - 2x) - y) - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1, 1121], [((((((-s - 2x) - y) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1101, 1181], [(((((((-s - 2x) - y) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 261], [((((((-s - 2x) - y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 924], [(((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 988, 1048], [(((((((((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 586], [((((((-(x ^ -1) * y ^ 2 - 2s) - x) - y) - s * x ^ -1 * y) - s * x * y ^ -1) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 141], [(((((-(x ^ -1) * y ^ 2 - 2s) - x) - y) - s * x ^ -1 * y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 122], [((((((-s - 2x) - y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1061], [((((((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 666], [((((((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 682], [((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1105], [((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 1025], [-(x ^ -2) * y ^ 3 - s * x ^ -1 * y, 908], [-s - x, 337], [-s - y, 211], [-s - s * x * y ^ -1, 234, 442, 1033], [-x - x ^ 2 * y ^ -1, 233], [-y - s * x ^ -2 * y ^ 2, 520, 927], [-y - x ^ 2 * y ^ -1, 8, 298, 426], [-s * x * y ^ -1 - s * x ^ 2 * y ^ -2, 347, 993, 1038, 1108, 1188], [-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3, 998], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 320], [((((((((((-s - x) - 3 * s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 4 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 183, 243], [(((((((-(x ^ -1) * y ^ 2 - s) - 3x) - 3y) - s * x ^ -2 * y ^ 2) - s * x ^ -1 * y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 66], [(((((((((-s - x) - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - 4 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 203, 323], [((((((((-s - x) - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 303, 383], [(((((((-s - x) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 263], [((((((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 726], [(((((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 786], [(((((-x - s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 222], [((((((-(x ^ -1) * y ^ 2 - s) - 2x) - y) - s * x ^ -1 * y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 63], [(-s - x) - s * x ^ -1 * y, 104], [(-s - x) - s * x * y ^ -1, 359], [(-s - s * x * y ^ -1) - x ^ 3 * y ^ -2, 1168], [(-x - y) - x ^ 3 * y ^ -2, 258], [(-x - s * x * y ^ -1) - x ^ 2 * y ^ -1, 235, 1035], [(-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 1606], [(-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - x ^ 4 * y ^ -3, 680, 1087], [(-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) - s * x ^ 5 * y ^ -5, 188], [(-s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 995], [(-s * x ^ 3 * y ^ -3 - s * x ^ 4 * y ^ -4) - x ^ 4 * y ^ -3, 1882], [(-s * x ^ 3 * y ^ -3 - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 402], [(-s * x ^ 4 * y ^ -4 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 248, 364], [(((((((-s - x) - y) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 124], [((((((((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 606], [(((((-(x ^ -1) * y ^ 2 - s) - x) - 2y) - s * x ^ -2 * y ^ 2) - s * x ^ -1 * y) - s * x * y ^ -1, 61], [((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1008, 1128], [(((((((-s - x) - y) - s * x ^ -1 * y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 143], [(((-s - x) - y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 466], [(((-x - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 742], [(((((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 706], [((((((-s * x ^ 4 * y ^ -4 - s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 1084], [((((-(x ^ -1) * y ^ 2 - s) - x) - y) - s * x ^ -2 * y ^ 2) - s * x ^ -1 * y, 861], [((((-(x ^ -1) * y ^ 2 - s) - y) - s * x ^ -1 * y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2, 941], [((((-s - x) - y) - s * x ^ -1 * y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 522], [((((-s - x) - y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3, 964], [((((-s - x) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 546, 844], [((((-x - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 2], [((((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 622], [((((-s * x ^ 3 * y ^ -3 - s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 804], [((((-s * x ^ 5 * y ^ -5 - s * x ^ 6 * y ^ -6) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 1024], [((-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 1144], [((-(x ^ -2) * y ^ 3 - x ^ -1 * y ^ 2) - y) + 2 * s * x ^ -2 * y ^ 2 + s * x ^ -1 * y, 885], [(-(x ^ -1) * y ^ 2 - x) + s * x * y ^ -1, 23], [((-(x ^ -1) * y ^ 2 - s) + x + s * x ^ -2 * y ^ 2) - s * x * y ^ -1, 863, 905], [((((-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 1005], [(((-s - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 342], [((-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 365], [((((-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 1125], [-(x ^ -2) * y ^ 3 + s * x ^ -3 * y ^ 3, 888], [-(x ^ -1) * y ^ 2 + s * x ^ -2 * y ^ 2, 827], [(-s + x) - s * x * y ^ -1, 42], [(-y + s * x ^ -1 * y) - x ^ 2 * y ^ -1, 807], [(((((-s * x * y ^ -1 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 344], [((-s + x) - s * x * y ^ -1) - x ^ 3 * y ^ -2, 620, 1027], [-(x ^ -1) * y ^ 2 + x + s * x ^ -1 * y, 105], [-(x ^ -1) * y ^ 2 + y + s * x ^ -2 * y ^ 2, 420], [-x + s * x * y ^ -1 + s * x ^ 3 * y ^ -3, 808], [(((-s + x + y) - 2 * s * x * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1063], [(-s + x + y) - s * x ^ -1 * y, 843], [((((-s + x + y) - s * x * y ^ -1) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1103], [((((((-s + x + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1003], [(((((-s + x + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1183], [((((((-s + x + y) - s * x * y ^ -1) + 3 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1123], [-s * x ^ 2 * y ^ -2 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1028], [((-s + y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 165], [((-s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 5], [-s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 348], [(((-s + 2x) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1023], [(((-s + 2x + y) - 3 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1, 983], [(((((-s + 2x + y) - 3 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 1043], [-s * x ^ 2 * y ^ -2 + 2 * s * x ^ 4 * y ^ -4 + 3 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 345], [x ^ -2 * y ^ 3, 939], [x ^ -1 * y ^ 2, 508, 817, 1303], [s, 148, 841, 1246], [x, 0, 147, 189, 252, 273, 294, 315, 399, 484, 590, 631, 653, 674, 694, 715, 778, 991, 1010, 1054, 1073, 1093, 1115, 1178, 1200, 1389, 1415, 1431, 1452, 1494, 1539, 1557, 1621, 1642, 1663, 1684, 1705, 1726, 1792, 1816, 1919], [y, 168, 378, 1573], [s * x ^ -3 * y ^ 3, 856], [s * x ^ -2 * y ^ 2, 437, 1614, 1778], [s * x * y ^ -1, 1348, 1741, 1837], [s * x ^ 2 * y ^ -2, 783, 1224, 1764], [s * x ^ 3 * y ^ -3, 1861], [x ^ 2 * y ^ -1, 654, 727, 1053, 1098, 1867], [x ^ 3 * y ^ -2, 1058], [(((x - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1, 44], [((((s - 2x) - y) + s * x * y ^ -1) - x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 198], [((((x ^ -1 * y ^ 2 - 2x) - s * x ^ -1 * y) + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 943], [x - x ^ 2 * y ^ -1, 400], [(x ^ -1 * y ^ 2 - s * x ^ -2 * y ^ 2) - 2 * s * x ^ -1 * y, 847], [((((x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1165], [(s - x) - y, 1147], [(s - y) - s * x ^ -2 * y ^ 2, 21], [((s - x) - y) - s * x ^ 2 * y ^ -2, 740], [(((((((s * x * y ^ -1 - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 4], [((s - x) - y) + x ^ 2 * y ^ -1, 318], [((s - x) - y) + s * x * y ^ -1 + x ^ 3 * y ^ -2, 845], [((s - x) - y) + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3, 803], [((s - x) - y) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 218], [(((s - x) + y + 3 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 24], [(((x ^ -1 * y ^ 2 - s) + 2y) - s * x ^ -1 * y) + s * x * y ^ -1, 928], [(s - x) + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6], [(((y - s * x ^ -1 * y) + 2 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 965], [x ^ -1 * y ^ 2 + s, 540], [s + x, 230], [s + y, 356], [s + s * x * y ^ -1, 214], [x + y, 41, 421, 463, 505, 547, 610, 673, 800, 842, 926, 1031, 1094, 1284, 1305, 1326, 1368, 1515, 1578, 1599, 1600, 1747, 1768, 1852, 1936, 1957, 1999], [x + s * x ^ -1 * y, 848], [x + s * x * y ^ -1, 446], [x + x ^ 2 * y ^ -1, 213, 614], [y + s * x ^ -2 * y ^ 2, 460, 867], [s * x ^ -1 * y + s * x * y ^ -1, 422], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 340], [s * x ^ 3 * y ^ -3 + x ^ 4 * y ^ -3, 406], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 327, 594], [(((s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1, 328], [(x ^ -1 * y ^ 2 + y) - s * x ^ -1 * y, 84], [(x + y) - s * x ^ -2 * y ^ 2, 821, 884], [(s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 1148], [((s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1, 388], [((((x + y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1, 1141], [(((x ^ -1 * y ^ 2 + y) - s * x ^ -2 * y ^ 2) - s * x ^ -1 * y) + s * x * y ^ -1, 923], [(((s + s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 226], [((x ^ -1 * y ^ 2 + s) - x) + s * x * y ^ -1, 22], [x ^ -1 * y ^ 2 + s + s * x * y ^ -1, 947, 968], [s + x + y, 231, 357, 1030], [s + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 164], [x + y + s * x ^ 2 * y ^ -2, 660, 1067], [x + s * x * y ^ -1 + x ^ 2 * y ^ -1, 215, 339, 990, 1602], [s * x ^ 4 * y ^ -4 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1886], [s * x ^ 5 * y ^ -5 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1088], [s + x + s * x ^ -1 * y + x ^ 2 * y ^ -1, 43], [x + y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 700, 780, 1107, 1187], [s * x * y ^ -1 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 3 * y ^ -2, 746], [s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 5 * y ^ -4, 626], [((s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 805], [s + x + y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 526], [x ^ -1 * y ^ 2 + s + x + y + s * x ^ -2 * y ^ 2 + s * x ^ -1 * y, 921], [x ^ -1 * y ^ 2 + s + x + y + s * x ^ -1 * y + s * x * y ^ -1, 904], [s + x + y + s * x ^ -1 * y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 462], [s + x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 801], [s + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1], [s + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1021], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 3], [s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 6 * y ^ -5, 686], [s + x + y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 542], [s + s * x * y ^ -1 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 221], [x + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 223], [x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 662], [x + y + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2, 720], [x + y + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3, 341, 600, 1007, 1127], [s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1083], [s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 1085], [x ^ -1 * y ^ 2 + s + x + 2y + s * x ^ -2 * y ^ 2 + s * x ^ -1 * y + s * x * y ^ -1, 121], [s + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 343], [s + x + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 262], [x ^ -1 * y ^ 2 + s + 2x + 2y + s * x ^ -1 * y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 123], [x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 702, 782], [s + x + 2 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 302, 382], [x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 582, 642], [s + x + 2 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 322], [s + x + 2 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 202], [(((x + y + 2 * s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 346], [x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 722], [x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 602], [s + x + 3 * s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 182, 242], [x ^ -1 * y ^ 2 + s + 3x + 4y + s * x ^ -2 * y ^ 2 + s * x ^ -1 * y + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 126], [s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1104], [x ^ -1 * y ^ 2 + 2s + x + y + s * x ^ -1 * y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 62], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1081, 1164], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 281], [s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 283], [s + 2x + y + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 125], [s + 2x + y + s * x ^ -1 * y + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 142], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4, 264], [s + 2x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 144], [s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 1004, 1124], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 286], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 4 * s * x ^ 4 * y ^ -4 + 3 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 3 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 384], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 5 * s * x ^ 4 * y ^ -4 + 3 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5, 304], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 5 * s * x ^ 4 * y ^ -4 + 6 * s * x ^ 5 * y ^ -5 + 4 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + 3 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 324], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 6 * s * x ^ 4 * y ^ -4 + 6 * s * x ^ 5 * y ^ -5 + 4 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + 2 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 3 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 204], [s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1184], [s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 984, 1044], [s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 4 * s * x ^ 4 * y ^ -4 + 3 * s * x ^ 5 * y ^ -5 + 2 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + 2 * x ^ 2 * y ^ -1 + 5 * x ^ 3 * y ^ -2 + 6 * x ^ 4 * y ^ -3 + 5 * x ^ 5 * y ^ -4 + 3 * x ^ 6 * y ^ -5, 244], [(s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + 5 * s * x ^ 4 * y ^ -4 + 4 * s * x ^ 5 * y ^ -5 + 2 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + 2 * x ^ 2 * y ^ -1 + 5 * x ^ 3 * y ^ -2 + 6 * x ^ 4 * y ^ -3 + 4 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 184], [(((2s - 2x) - 2y) - s * x ^ -2 * y ^ 2) + s * x * y ^ -1, 26], [((((2s - 2x) - y) + 3 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 1143], [(2s - 2x) + 3 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 45], [2x + y + s * x ^ -1 * y + x ^ 2 * y ^ -1, 46], [2x + y + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 580, 640, 987, 1047], [2s + x + y + 4 * s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 64], [((((2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 6 * y ^ -5, 1145], [((2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4) - x ^ 3 * y ^ -2) + 2 * x ^ 5 * y ^ -4 + 3 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 225], [2 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + s * x ^ 8 * y ^ -8 + x ^ 5 * y ^ -4 + 4 * x ^ 6 * y ^ -5 + 2 * x ^ 7 * y ^ -6 + x ^ 8 * y ^ -7, 285]]) * x ^ 0 * y ^ 0
            end
        f35(x, y, s) = begin
                local v
                v = s * GetRoot(x * y)
                return ExpandRep(5, 24, [[(((-5 * x * y ^ 3 - 8 * x ^ 2 * y ^ 2) - 5 * x ^ 3 * y) - x ^ 4) - y ^ 4, 43], [(((-3 * v * x * y ^ 3 - 4 * v * x ^ 2 * y ^ 2) - 3 * v * x ^ 3 * y) - v * x ^ 4) - v * y ^ 4, 1199], [((((-3 * v * x * y ^ 3 - 4 * v * x ^ 2 * y ^ 2) - 3 * v * x ^ 3 * y) - v * x ^ 4) - v * y ^ 4) + 5 * x * y ^ 4 + 11 * x ^ 2 * y ^ 3 + 11 * x ^ 3 * y ^ 2 + 5 * x ^ 4 * y + x ^ 5 + y ^ 5, 623], [((((-3 * v * x * y ^ 3 - 4 * v * x ^ 2 * y ^ 2) - 3 * v * x ^ 3 * y) - v * x ^ 4) - v * y ^ 4) + 6 * x * y ^ 4 + 13 * x ^ 2 * y ^ 3 + 13 * x ^ 3 * y ^ 2 + 6 * x ^ 4 * y + x ^ 5 + y ^ 5, 47], [((-3 * v * x * y ^ 2 - 3 * v * x ^ 2 * y) - v * x ^ 3) - v * y ^ 3, 23, 239, 719], [((-3 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 30, 236, 1159, 1182, 1194, 1279, 1765, 1770], [(((-3 * v * x * y ^ 2 - 3 * v * x ^ 2 * y) - v * x ^ 3) - v * y ^ 3) + 3 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4 + y ^ 4, 263], [(-2v - v * x ^ -1 * y) - v * x * y ^ -1, 78], [(-2 * x * y - x ^ 2) - y ^ 2, 34, 209, 246, 257, 331, 356, 551, 608, 668, 879, 910, 934, 1079, 1531, 2321, 2403, 2609], [(-2 * v * x * y - v * x ^ 2) - v * y ^ 2, 20, 27, 39, 140, 199, 211, 383, 598, 911, 935, 1197, 1411, 1607], [(((((-2 * v * x * y - v * x ^ 2) - v * y ^ 2) - 3 * x * y ^ 2) - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 1179], [(((-2 * v * x * y - v * x ^ 2) - v * y ^ 2) - x * y ^ 2) - x ^ 2 * y, 1399, 2349], [((-2 * v * x * y - v * x ^ 2) - v * y ^ 2) + x * y ^ 2 + x ^ 2 * y, 527, 1447, 1583], [-1, 72, 80, 217, 486, 571, 922, 1077, 1119, 1147, 1338, 1696, 1723, 1729, 1909, 1914, 2148, 2241, 2352, 2483, 2746], [-v, 61, 66, 101, 204, 248, 399, 515, 780, 797, 846, 973, 1025, 1217, 1238, 1257, 1392, 1448, 1479, 1662, 1811, 1858, 2101, 2175, 2589, 2601, 2733], [-x * y, 218, 254, 334, 415, 579, 604, 631, 1181, 1436, 1830, 1922, 2084, 2131, 2279, 2336, 2416, 2439, 2467, 2523, 2605, 2610, 2662, 2719, 2807], [-v * x * y, 615, 1192, 1294, 1363], [((((((-v * x ^ -1 * y ^ 4 - 10 * v * x * y ^ 2) - 10 * v * x ^ 2 * y) - 5 * v * x ^ 3) - 5 * v * y ^ 3) + 4 * x * y ^ 3) - v * x ^ 4 * y ^ -1) + 6 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + x ^ 4 + y ^ 4, 119], [(((-v * x ^ -1 * y ^ 3 - 6 * v * x * y) - 4 * v * x ^ 2) - 4 * v * y ^ 2) - v * x ^ 3 * y ^ -1, 116], [((((-v * x ^ -1 * y ^ 2 - 3 * v * x) - 3 * v * y) + 2 * x * y) - v * x ^ 2 * y ^ -1) + x ^ 2 + y ^ 2, 91], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 2335], [-x - y, 87, 89, 90, 187, 221, 650, 669, 682, 741, 1528, 1578, 1737, 2149, 2369, 2409, 2602], [-v * x - v * y, 18, 28, 32, 134, 194, 208, 242, 255, 258, 382, 427, 524, 646, 683, 717, 783, 807, 859, 955, 982, 1222, 1343, 1362, 1395, 1442, 1456, 1483, 2031, 2441, 2499, 2507], [-v * x * y ^ 2 - v * x ^ 2 * y, 31, 143, 1195], [-x * y ^ 2 - x ^ 2 * y, 262, 583, 606, 616, 718, 743, 1223, 1366, 1462, 1773, 1927, 2330], [(((-v * x - v * y) - 2 * x * y) - x ^ 2) - y ^ 2, 1180], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 1463], [(((((-v * x * y - v * x ^ 2) - v * y ^ 2) - 3 * x * y ^ 2) - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 42], [((-v * x * y - v * x ^ 2) - v * y ^ 2) + 3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 595], [(-v * x * y ^ 2 - v * x ^ 2 * y) + x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 1295], [(-v * x - v * y) + 2 * x * y + x ^ 2 + y ^ 2, 191, 233, 283, 643, 767], [(-v * x * y ^ 2 - v * x ^ 2 * y) + 4 * x * y ^ 3 + 6 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + x ^ 4 + y ^ 4, 695, 1183], [1, 185, 346, 348, 541, 648, 673, 746, 1273, 1643, 1784, 1876, 2200, 2222, 2302, 2385, 2489, 2497, 2626, 2628, 2669, 2692, 2766, 2846, 2876], [v, 12, 124, 285, 296, 376, 434, 639, 705, 731, 766, 872, 904, 1002, 1162, 1216, 1317, 1356, 1372, 1491, 1525, 1562, 1973, 1995, 2055, 2553, 2681, 2739, 2819], [x * y, 3, 33, 164, 454, 479, 830, 958, 1055, 1100, 1558, 1582, 1591, 1631, 1752, 1965, 2033, 2167, 2306, 2445, 2562], [v * x * y, 37, 127, 1171, 2431], [(((v * x * y - 3 * x * y ^ 2) - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 671], [x + y, 0, 25, 50, 96, 104, 106, 108, 125, 200, 226, 270, 342, 350, 353, 375, 397, 425, 449, 500, 510, 525, 547, 550, 575, 651, 676, 680, 751, 776, 801, 826, 851, 903, 927, 976, 1026, 1075, 1101, 1126, 1151, 1218, 1252, 1276, 1277, 1281, 1302, 1327, 1402, 1452, 1477, 1502, 1577, 1652, 1702, 1727, 1753, 1778, 1789, 1794, 1853, 1875, 1878, 1903, 2003, 2028, 2103, 2203, 2228, 2253, 2303, 2354, 2373, 2379, 2496, 2504, 2554, 2579, 2629, 2633, 2679, 2691, 2704, 2729, 2779, 2854, 2879], [v * x + v * y, 55, 123, 290, 303, 306, 523, 591, 612, 685, 860, 1127, 1166, 1173, 1185, 1219, 1262, 1290, 1361, 1371, 1398, 1486, 1567, 1579, 1603, 1739, 1835, 1861, 1983, 2315, 2325, 2337, 2613], [v * x * y ^ 2 + v * x ^ 2 * y, 1198, 1367], [x * y ^ 2 + x ^ 2 * y, 139, 247, 310, 431, 455, 596, 614, 812, 838, 1103, 1755, 2311, 2599], [(((v * x + v * y) - 2 * x * y) - x ^ 2) - y ^ 2, 284, 1207], [v * x * y + v * x ^ 2 + v * y ^ 2, 694], [v * x * y ^ 2 + v * x ^ 2 * y + x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 622], [v * x + v * y + 2 * x * y + x ^ 2 + y ^ 2, 210, 1170], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 607, 791, 815, 1759], [v * x ^ -1 * y ^ 2 + 3 * v * x + 3 * v * y + v * x ^ 2 * y ^ -1, 92, 102], [(((((v * x ^ -1 * y ^ 3 + 6 * v * x * y + 4 * v * x ^ 2 + 4 * v * y ^ 2) - 3 * x * y ^ 2) + v * x ^ 3 * y ^ -1) - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 95, 115], [2 * x * y + x ^ 2 + y ^ 2, 67, 110, 111, 114, 222, 234, 406, 610, 674, 693, 1158, 1251, 1275, 1278, 1410, 1534, 1741, 1746, 1761, 2029], [2 * v * x * y + v * x ^ 2 + v * y ^ 2, 235, 611, 715, 790, 863, 959, 1487, 2331], [((((2 * v * x * y + v * x ^ 2 + v * y ^ 2) - 4 * x * y ^ 2) - 4 * x ^ 2 * y) - x ^ 3) - y ^ 3, 647], [((((2 * v * x * y + v * x ^ 2 + v * y ^ 2) - 3 * x * y ^ 2) - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 259], [((((2 * v * x * y + v * x ^ 2 + v * y ^ 2) - 2 * x * y ^ 2) - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 287], [((2 * v * x * y + v * x ^ 2 + v * y ^ 2) - x * y ^ 2) - x ^ 2 * y, 38, 214], [2 * v * x * y + v * x ^ 2 + v * y ^ 2 + x * y ^ 2 + x ^ 2 * y, 7], [2 * v * x * y ^ 2 + 2 * v * x ^ 2 * y + v * x ^ 3 + v * y ^ 3, 1175], [2 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 260, 335, 886, 1535], [(((((2 * v * x * y ^ 2 + 2 * v * x ^ 2 * y + v * x ^ 3 + v * y ^ 3) - 5 * x * y ^ 3) - 8 * x ^ 2 * y ^ 2) - 5 * x ^ 3 * y) - x ^ 4) - y ^ 4, 619], [(((((2 * v * x * y ^ 2 + 2 * v * x ^ 2 * y + v * x ^ 3 + v * y ^ 3) - 4 * x * y ^ 3) - 6 * x ^ 2 * y ^ 2) - 4 * x ^ 3 * y) - x ^ 4) - y ^ 4, 599], [3 * x * y + 2 * x ^ 2 + 2 * y ^ 2, 113], [3 * v * x * y ^ 2 + 3 * v * x ^ 2 * y + v * x ^ 3 + v * y ^ 3, 887], [3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 307, 692, 2345], [(((((3 * v * x * y ^ 2 + 3 * v * x ^ 2 * y + v * x ^ 3 + v * y ^ 3) - 4 * x * y ^ 3) - 6 * x ^ 2 * y ^ 2) - 4 * x ^ 3 * y) - x ^ 4) - y ^ 4, 311], [(3 * v * x * y ^ 2 + 3 * v * x ^ 2 * y + v * x ^ 3 + v * y ^ 3) - x ^ 2 * y ^ 2, 1415], [(((3 * v * x * y ^ 2 + 3 * v * x ^ 2 * y + v * x ^ 3 + v * y ^ 3) - x * y ^ 3) - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 215], [3 * v * x * y ^ 2 + 3 * v * x ^ 2 * y + v * x ^ 3 + v * y ^ 3 + 4 * x * y ^ 3 + 6 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + x ^ 4 + y ^ 4, 44], [4 * v * x * y + 2 * v * x ^ 2 + 2 * v * y ^ 2, 19]]) * x ^ 0 * y ^ 0
            end
        f37(x, y) = begin
                return ExpandRep(5, 30, [[(((-4x - y) - 6 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 2879], [((-3x - 6 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 2939], [((-3 * x ^ 2 * y ^ -1 - 6 * x ^ 3 * y ^ -2) - 5 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4, 2789], [((-3 * x ^ 2 * y ^ -1 - 4 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3629], [(-3x - 2y) - 2 * x ^ 2 * y ^ -1, 2961], [(((-3x - y) - 4 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 190, 203, 472], [((-3x - y) - 3 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 2909, 3179], [(((-3x - y) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3, 209, 2007], [(-3x - y) - x ^ 2 * y ^ -1, 2901], [((-2 * x ^ 2 * y ^ -1 - 4 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 22], [(-2x - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 2871, 2931], [(-2 * x ^ 2 * y ^ -1 - 3 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 2781], [(-2 * x ^ 3 * y ^ -2 - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 170], [-2x - 2 * x ^ 2 * y ^ -1, 2365, 3256], [(((-2x - y) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 250, 263], [(-2x - y) - x ^ 2 * y ^ -1, 352, 412, 428, 430, 443, 1048, 3601, 3721], [((-2x - y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 179, 239, 1977, 2037], [((-2x - y) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 85, 520, 2788], [(-2x - y) + x ^ 3 * y ^ -2, 1372, 3177], [-(x ^ -1) * y ^ 2, 2796], [-x, 107, 169, 337, 645, 685, 717, 789, 1221, 1246, 1252, 1314, 1402, 1522, 1531, 1552, 1709, 1850, 2150, 2299, 2330, 2455, 2484, 2516, 2698, 2820, 3054, 3057, 3207, 3223, 3327, 3346, 3357, 3388, 3469, 3602, 3653, 3922, 3926, 3953, 4019, 4133], [-y, 445, 449, 631, 719, 745, 839, 852, 1014, 1064, 1112, 1287, 1344, 1353, 1478, 1524, 1612, 1794, 1847, 1915, 1952, 2047, 2115, 2169, 2231, 2247, 2485, 2517, 2545, 2743, 2769, 2806, 2862, 3141, 3142, 3148, 3329, 3376, 3417, 3436, 3448, 3719, 3858, 3874, 3946, 4006, 4049, 4215, 4229, 4261], [-(x ^ 2) * y ^ -1, 135, 1021, 1414, 3509, 4004, 4012, 4072], [-(x ^ 3) * y ^ -2, 1411, 3856], [-(x ^ 4) * y ^ -3, 3766, 3826], [-(x ^ 5) * y ^ -4, 3676], [(((-(x ^ -1) * y ^ 2 - 6x) - 4y) - 5 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 2969], [((-(x ^ 2) * y ^ -1 - 3 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 4077], [(-x - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 2278], [((-x - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 3621], [((-x - 2 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 260], [(((-x - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 160, 173, 220, 233], [(((-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 70, 83], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 145, 322, 2128, 2848, 3171, 4071], [(-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1378, 1438, 3927], [((-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 89, 1887], [-(x ^ -1) * y ^ 2 - y, 588, 1158, 1162, 1488, 2803, 2967, 4031], [-x - y, 100, 113, 226, 294, 345, 431, 495, 502, 578, 585, 622, 652, 1069, 1072, 1231, 1338, 1381, 1471, 2090, 2121, 2180, 2271, 2609, 2819, 2877, 3078, 3149, 3419, 3871, 3893, 3901, 3983], [-x - x ^ 2 * y ^ -1, 40, 50, 53, 144, 295, 346, 477, 565, 659, 804, 1000, 1010, 1013, 1045, 1312, 1328, 1371, 1735, 1738, 1798, 2215, 2457, 2459, 2519, 2707, 2977, 2988, 2998, 3021, 3029, 3068, 3106, 3117, 3268, 3622, 3742, 3781, 3802, 3861, 3921, 4001, 4051, 4076], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 205, 323, 1228, 2827, 2908, 3867, 3869], [-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3, 470, 1224, 1435], [(-(x ^ -1) * y ^ 2 - x) - 2y, 438], [(((-x - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 4079], [((-(x ^ -1) * y ^ 2 - x) - 2y) - x ^ 2 * y ^ -1, 269, 2067], [((-x - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1374], [(-x - y) - x ^ 2 * y ^ -1, 110, 405, 1291], [(-x - y) - x ^ 4 * y ^ -3, 922, 2727], [(-x - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 555, 1441], [(-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3929], [((-x - y) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3777], [((((-x - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 15, 901], [((-x - y) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 530, 1945, 2836], [(-x - y) + x ^ 3 * y ^ -2, 805, 2607, 3508], [(((-x - y) + x ^ 2 * y ^ -1) - 3 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4, 1825, 2716], [(-x - y) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 175, 235, 2878, 2938], [(-x - y) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 533], [(-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3627], [(((-x - y) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 479], [-x + x ^ 3 * y ^ -2, 982, 1464, 2787, 3741, 4131], [-y + x ^ 2 * y ^ -1, 1132, 2125, 2937, 3016, 3891], [-(x ^ 2) * y ^ -1 + x ^ 4 * y ^ -3, 149, 1947], [-y + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 130, 1351], [-(x ^ 2) * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4139], [x ^ -1 * y ^ 2, 1037, 4033], [x, 45, 51, 55, 304, 355, 388, 535, 625, 680, 740, 770, 865, 869, 899, 931, 967, 1005, 1159, 1325, 1582, 1644, 1672, 1674, 1722, 1732, 1734, 1764, 1865, 2018, 2082, 2144, 2260, 2311, 2480, 2510, 2575, 2637, 2667, 2697, 2758, 2972, 3058, 3065, 3103, 3163, 3238, 3328, 3374, 3387, 3466, 3477, 3537, 3568, 3599, 3652, 3729, 3981, 4070, 4096, 4148, 4186, 4251, 4283, 4313, 4349, 4377, 4437, 4469, 4499], [y, 0, 62, 105, 186, 221, 248, 296, 359, 403, 434, 496, 509, 513, 558, 575, 599, 744, 833, 900, 991, 1086, 1179, 1303, 1391, 1458, 1462, 1520, 1540, 1613, 1675, 1768, 1796, 1800, 1893, 1924, 1986, 2157, 2203, 2240, 2307, 2358, 2386, 2397, 2420, 2451, 2540, 2542, 2600, 2603, 2669, 2704, 2731, 2917, 2948, 3010, 3013, 3051, 3165, 3201, 3227, 3258, 3267, 3291, 3295, 3320, 3413, 3431, 3506, 3660, 3693, 3755, 3786, 3817, 3941, 3972, 4021, 4036, 4043, 4127, 4189, 4201, 4223, 4341, 4343, 4344, 4371, 4375, 4381, 4390, 4403, 4468], [x ^ 2 * y ^ -1, 315, 380, 389, 650, 1201, 1222, 1282, 1432, 2185, 2187, 2883, 3027, 3076, 3087, 3237, 4111, 4132], [x ^ 3 * y ^ -2, 290, 299, 809, 2095, 2097, 2986, 4156], [x ^ 6 * y ^ -5, 3616], [((x - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 230], [((x - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) + x ^ 6 * y ^ -5, 924], [x - x ^ 3 * y ^ -2, 320, 2335, 3226], [x ^ 2 * y ^ -1 - x ^ 4 * y ^ -3, 325, 329, 3028], [((x - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 200], [(y - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 262], [x ^ -1 * y ^ 2 + y, 168, 228, 1068, 2868], [x + y, 31, 93, 158, 218, 341, 348, 427, 435, 511, 589, 713, 742, 772, 806, 868, 993, 1029, 1058, 1117, 1241, 1285, 1288, 1321, 1334, 1370, 1373, 1427, 1489, 1494, 1551, 1737, 1799, 1831, 1855, 1880, 1955, 1970, 2048, 2110, 2141, 2172, 2296, 2482, 2513, 2699, 2713, 2746, 2767, 2778, 2824, 2833, 2858, 2886, 2893, 2979, 2999, 3059, 3072, 3111, 3144, 3209, 3299, 3351, 3359, 3371, 3382, 3444, 3475, 3631, 3661, 3662, 3683, 3691, 3712, 3773, 3879, 4003, 4158, 4197, 4210, 4220, 4379, 4401, 4406, 4467], [x + x ^ 2 * y ^ -1, 59, 91, 115, 265, 338, 382, 454, 500, 531, 640, 653, 1339, 1708, 1851, 1857, 2129, 2331, 2458, 2608, 2708, 2818, 2841, 2968, 4161], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 111, 117, 143, 324, 410, 539, 562, 1419, 1558, 2275, 2337, 2518, 2828, 3166, 3231, 4137, 4167, 4169], [x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 3807], [(x + y) - x ^ 3 * y ^ -2, 525], [(((x + y) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 460, 473], [((x + y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 310, 3771], [((x + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3837], [((x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 25, 2728, 3687], [(((x + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) + 2 * x ^ 5 * y ^ -4 + 3 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 20], [x + y + x ^ 2 * y ^ -1, 419, 442, 569, 2217, 2367], [x + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 465, 1192, 1434, 1704, 2997, 4409], [((x + y + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3779], [x + y + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 255, 1141], [x + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 140, 165, 225, 1051, 1111], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 75, 961], [x + y + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 1194], [x + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 29, 1827], [x + 2 * x ^ 2 * y ^ -1, 1284], [((x + 2y) - 3 * x ^ 2 * y ^ -1) + 5 * x ^ 4 * y ^ -3 + 5 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5, 2729], [((x + 2y) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 3831], [x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1859, 2279, 2339, 4407], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 119, 474, 3239], [(((x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 80], [((x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 475, 3178], [x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 3899], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 3749], [x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 550, 563], [x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 10, 23], [x + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 3747], [x + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1102, 2907], [x + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 1975, 2866], [x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1885, 2776], [(x + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2) - x ^ 5 * y ^ -4, 984], [(2y - 2 * x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4, 2721], [2 * x ^ 2 * y ^ -1 - x ^ 4 * y ^ -3, 1074], [2x + y, 682], [((2x + y) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 3796], [(2x + y) - x ^ 3 * y ^ -2, 532, 1164], [2x + y + x ^ 2 * y ^ -1, 340, 353, 436, 490, 503, 580, 590, 593, 802, 3119], [((2x + y + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 172], [2x + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1042, 2847], [2x + y + 2 * x ^ 2 * y ^ -1, 3987, 3989], [(2x + y + 2 * x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 2127], [2x + y + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 195, 292, 400, 413, 1081], [2x + y + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 3897], [2x + 2 * x ^ 2 * y ^ -1, 3261], [2x + 2 * x ^ 2 * y ^ -1 + x ^ 4 * y ^ -3, 1104, 3809], [2x + 2y + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1044], [2x + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 2005, 2896], [2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 560], [2x + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 2035, 2926], [((2x + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 2277], [((3x + y + 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3681], [(3x + y + 3 * x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 1134], [3x + y + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 2849], [3x + y + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2, 3269], [((3x + y + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 82], [((3x + 2y + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 232, 3839], [3x + 2y + 2 * x ^ 2 * y ^ -1, 2065, 2956], [((3x + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 3689], [4x + y + 4 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 202], [4x + 2y + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 142]]) * x ^ 0 * y ^ 0
            end
        f42(x, y, v) = begin
                local s
                s = v * GetRoot(x * y)
                return ExpandRep(5, 36, [[((((((-4x - 2y) - s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3903], [(((-3x - y) + s * x ^ 3 * y ^ -3) - 4 * x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 2879], [-2 * x ^ 2 * y ^ -1 - x ^ 3 * y ^ -2, 1582, 2014], [(-2x - y) - 2 * x ^ 2 * y ^ -1, 3311], [((-2x - y) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6 + x ^ 8 * y ^ -7, 5209], [(-2x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2, 1939], [(((-2x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1651], [(-2x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1759], [(((((-2x - y) + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2) - x ^ 5 * y ^ -4) - x ^ 7 * y ^ -6, 1310], [(((-2x - y) + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 2622], [(-2x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + 2 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1471], [((((-2x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) + 5 * x ^ 3 * y ^ -2 + 6 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 8 * y ^ -7, 1363], [-2s + x + y, 4274, 4382], [((-2s + x + y) - s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1, 4276, 4384], [-2x + y + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 3235], [((((((((-2x + y + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) + s * x ^ 7 * y ^ -7) - x ^ 2 * y ^ -1) + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) + x ^ 8 * y ^ -7, 2659], [-2x + y + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2, 2767, 2947, 3055], [(((-2x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) + x ^ 3 * y ^ -2, 5539], [(((((((-2x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 7 * s * x ^ 4 * y ^ -4) - 6 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) + s * x ^ 7 * y ^ -7 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 5251], [-2x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3, 5647, 5827], [(((-2x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) + x ^ 3 * y ^ -2, 5359], [(((((-2x + s * x * y ^ -1 + 4 * s * x ^ 2 * y ^ -2 + 6 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4) - s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) + 2 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 3920], [-(x ^ -3) * y ^ 4, 1773], [-(x ^ -2) * y ^ 3, 549, 724, 3997, 4068, 4293], [-(x ^ -1) * y ^ 2, 2171, 2312, 3176, 5704], [-s, 1259, 1293, 1685, 2369, 2370, 2442, 3118, 3270, 3306, 3414, 4964], [-x, 598, 706, 770, 887, 995, 1257, 2047, 2118, 2142, 2178, 2286, 2407, 3261, 3325, 3405, 3477, 3556, 3585, 4477, 4635, 4712, 4784, 4885, 4892, 5435, 5573, 5681, 5755, 5787, 5867, 5895, 6003, 6227, 6371], [-y, 131, 258, 291, 311, 419, 526, 880, 947, 959, 991, 1180, 1422, 1441, 1602, 1710, 1987, 2216, 2250, 2291, 2589, 2917, 2982, 2991, 3028, 3090, 3294, 3426, 3507, 3666, 3768, 3775, 3779, 3967, 4405, 4621, 4659, 4767, 4942, 4981, 4988, 5025, 5185, 5367, 5557, 5715, 5808, 5964, 5995], [-s * x ^ -1 * y, 6404], [-s * x * y ^ -1, 203, 897, 1005, 1494, 1830, 1974, 2154, 2190, 2298, 3415, 4561, 4748, 5147, 5612, 5861, 5897, 6005, 6046, 6152, 6225], [-s * x ^ 2 * y ^ -2, 198, 753, 1482, 5490], [-(x ^ 2) * y ^ -1, 202, 1743, 1903, 2011, 3199, 3307, 4189, 4633, 4679, 4787, 4895, 5391, 5569, 5677, 5792, 5900], [-(x ^ 3) * y ^ -2, 1510, 4643, 5471, 5795, 5903], [((((((((-s * x ^ 2 * y ^ -2 - 3 * s * x ^ 3 * y ^ -3) + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - s * x ^ 8 * y ^ -8) + 2 * x ^ 2 * y ^ -1) - 4 * x ^ 4 * y ^ -3) - 4 * x ^ 5 * y ^ -4) + x ^ 7 * y ^ -6) - x ^ 9 * y ^ -8, 3959], [(((((-x - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 1435], [(((-s - 2 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1, 1543], [(((-x - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 1615], [(((((((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - 3 * s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - s * x ^ 8 * y ^ -8) + x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + 2 * x ^ 7 * y ^ -6 + x ^ 8 * y ^ -7 + x ^ 9 * y ^ -8, 3921], [((((-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 3 * y ^ -2) + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1507], [(-(x ^ -2) * y ^ 3 - 2 * x ^ -1 * y ^ 2) - y, 4085], [(-x - 2 * s * x * y ^ -1) - x ^ 2 * y ^ -1, 2263], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 3905], [(-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 3941], [(((-x - 2 * s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 2803], [((((-s - 2x) - y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1, 4021], [((((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1579], [(((-x - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1723], [((-s - 2x) + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1, 1434], [(-s - 2x) + y + 2 * s * x ^ 2 * y ^ -2, 3239], [(((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) + s * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 4067], [(((-s * x ^ 2 * y ^ -2 - 2 * s * x ^ 3 * y ^ -3) + s * x ^ 5 * y ^ -5 + 2 * x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 4247], [(((-s - 2x) + y + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2, 2771, 3059], [((((-s - 2x) + y + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 2951], [(((((((((-s - 2x) + y + 3 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - 3 * s * x ^ 5 * y ^ -5) + s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) + 2 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) + x ^ 8 * y ^ -7, 2663], [-(x ^ -2) * y ^ 3 - x ^ -1 * y ^ 2, 1781], [-(x ^ -1) * y ^ 2 - y, 557, 737, 1853, 4301], [-s - x, 785, 1145, 2262], [-s - y, 418, 958, 2066, 2081, 2174, 2441, 3549, 3631, 4849, 5607, 6147], [-x - y, 535, 1789, 2482, 2862], [-x - s * x * y ^ -1, 1829, 1867, 1973, 2829, 3018, 3441, 3851, 3973, 4129, 5427, 5611, 6151], [-x - x ^ 2 * y ^ -1, 287, 318, 3200, 4425, 5394, 5455, 5719], [-y - s * x * y ^ -1, 4024, 4310], [-s * x ^ -2 * y ^ 2 - s * x ^ -1 * y, 5858], [-s * x * y ^ -1 - s * x ^ 2 * y ^ -2, 2009], [-s * x * y ^ -1 - x ^ 2 * y ^ -1, 533], [-s * x * y ^ -1 - x ^ 3 * y ^ -2, 5324, 5504], [-s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1, 5609], [-s * x ^ 3 * y ^ -3 - x ^ 2 * y ^ -1, 2875, 5431, 5467], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 138, 161, 251, 341, 1457, 1637, 2933, 4229, 5322, 5791], [-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3, 1349, 1497, 2645, 3017, 5199, 5204], [-(x ^ 4) * y ^ -3 - x ^ 5 * y ^ -4, 2729, 5235, 5240], [-(x ^ 5) * y ^ -4 - x ^ 6 * y ^ -5, 1450, 2926], [-(x ^ 6) * y ^ -5 - x ^ 7 * y ^ -6, 1342, 2638], [((((((-y - s * x ^ 2 * y ^ -2) - 3 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) + s * x ^ 7 * y ^ -7 + 2 * x ^ 2 * y ^ -1) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5 + x ^ 8 * y ^ -7, 2623], [((((((-s - x) - 3 * s * x * y ^ -1) - 3 * s * x ^ 2 * y ^ -2) + 3 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 5 * y ^ -4, 1325], [(-(x ^ -1) * y ^ 2 - x) - 2y, 4013], [(-x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2, 5323], [((-y - s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4345], [(((-x - s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 4081], [((((((((-x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 5 * y ^ -5) - 3 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 29], [(-s - x) - y, 3635], [(-s - x) - x ^ 2 * y ^ -1, 1722], [(-x - y) - s * x ^ 2 * y ^ -2, 4571], [(-x - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 5432], [(-y - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3, 4057], [(-y - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 4525], [(-s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 2119], [(-s * x * y ^ -1 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1542], [(-s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5468], [((((-y - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 4237], [((-s - x) - y) - s * x * y ^ -1, 2338], [((-s - y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 2721, 3009], [((-x - y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 4022], [((-x - s * x * y ^ -1) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 238, 274, 5463], [((-s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 137], [(((-s - x) - y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 130, 310, 5319, 5499], [((((-s - x) - y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 4309], [(((-s - x) - y) - s * x * y ^ -1) + x ^ 3 * y ^ -2, 4201], [(((-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3, 2807], [((-s - y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2, 3975], [((-x - y) - s * x ^ -1 * y) + s * x * y ^ -1, 5864], [((((-x - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5503], [((((-s - y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1402], [((-s - x) - y) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2, 1382], [((-s - y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 2699], [(((((-y - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 3949], [(-s - x) + y, 382, 490, 3167, 3527, 5571, 5679, 6116], [(-s - x) + x ^ 3 * y ^ -2, 1614], [(-s - y) + s * x ^ 2 * y ^ -2, 2901], [(-x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2, 393], [(-x - s * x * y ^ -1) + x ^ 2 * y ^ -1, 4568], [((-s - x) + y) - s * x * y ^ -1, 5756], [(((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2, 5828], [((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1, 1942], [(((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2, 5648], [(((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 5540], [(((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 5360], [(((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 1654], [((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1, 1762], [(((((-s - x) + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 1474], [(((((((((-s - x) + y) - s * x * y ^ -1) + 2 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) + 2 * x ^ 4 * y ^ -3) - x ^ 6 * y ^ -5) + x ^ 8 * y ^ -7, 5252], [((((((((((-s - x) + y) - s * x * y ^ -1) + 2 * s * x ^ 2 * y ^ -2 + 4 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 3 * s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) - 3 * x ^ 2 * y ^ -1) + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) + x ^ 8 * y ^ -7 + x ^ 9 * y ^ -8, 1366], [(-s - x) + s * x * y ^ -1 + x ^ 2 * y ^ -1, 383, 1674, 4280], [(-x - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 1686], [(-x - s * x * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 2730], [(-s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5321], [(-s - x) + y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 2973], [((-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3) + 2 * x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 4355], [(-x - s * x * y ^ -1) + 2 * s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1, 3992], [((((-x - y) + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 3915], [-s + x, 2874, 4560], [-s + y, 4598, 4632, 4670, 4672, 4706, 4778, 4780, 4992], [-x + y, 3163, 3523], [-x + s * x * y ^ -1, 4744, 4888, 5145, 5935, 6295], [-x + x ^ 2 * y ^ -1, 4132], [-y + s * x * y ^ -1, 4045, 4333, 4513], [-s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 501], [-s * x * y ^ -1 + x ^ 2 * y ^ -1, 4130, 4893, 5465], [-s * x * y ^ -1 + x ^ 4 * y ^ -3, 105], [-s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 1577, 4083, 4092], [-s * x ^ 2 * y ^ -2 + x ^ 3 * y ^ -2, 4641], [(((((-x + y) - 3 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 3951], [((-x + y) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4059, 4239, 4347], [(((-x + s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 209], [(((((((-s + y) - 2 * s * x * y ^ -1) + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4) - s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 23, 1314], [(-s + y) - s * x * y ^ -1, 4705], [(-s + y) - x ^ 2 * y ^ -1, 2230], [(-x + y) - x ^ 2 * y ^ -1, 4527], [(-s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5687], [((-s + y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 1870], [((-s * x * y ^ -1 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 213], [(((-s + x) - y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 3984], [(((((-y + s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 3937], [((-s + x) - s * x * y ^ -1) + x ^ 2 * y ^ -1, 2158, 2302], [((-x + y) - s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3, 95, 1386], [((-x + s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1, 5291], [(((-s + x) - y) + s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3, 2695], [((-s * x ^ 2 * y ^ -2 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 3995], [-s + x + y, 4708], [-s + x + s * x * y ^ -1, 933], [-s + y + x ^ 2 * y ^ -1, 4273, 4381], [-x + s * x * y ^ -1 + x ^ 2 * y ^ -1, 491, 1782, 3081, 3343, 3347, 4388], [-x + s * x * y ^ -1 + x ^ 3 * y ^ -2, 2050], [-x + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2, 4139], [-s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 1794], [-s * x * y ^ -1 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 4136], [(((-s + x + y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1, 4600], [((-s + x + y) - s * x * y ^ -1) + x ^ 2 * y ^ -1, 4597], [((-s * x * y ^ -1 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1433], [(((((((-s + x + y) - s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 4 * s * x ^ 4 * y ^ -4 + 3 * s * x ^ 5 * y ^ -5 + 4 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + s * x ^ 8 * y ^ -8 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 4 * x ^ 5 * y ^ -4) - 4 * x ^ 6 * y ^ -5) - 2 * x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 3916], [-s + x + y + s * x * y ^ -1, 1866, 2226], [-s + x + s * x * y ^ -1 + x ^ 2 * y ^ -1, 573], [-y + s * x * y ^ -1 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 4225], [(-s + x + s * x * y ^ -1 + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 645], [(((((-s + x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 177], [((((-s + x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 465], [((((-s + x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 357], [((((((((-s + x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 4 * y ^ -4) + s * x ^ 6 * y ^ -6) - s * x ^ 8 * y ^ -8) + x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 3 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 69], [(-x + y + s * x * y ^ -1 + 2 * s * x ^ 3 * y ^ -3) - x ^ 4 * y ^ -3, 3988], [((-s + x + y + 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - x ^ 3 * y ^ -2, 1938], [(((((-s + x + y + 2 * s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1470, 1650], [((((-s + x + y + 2 * s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 1758], [((((((((((-s + x + y + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - s * x ^ 8 * y ^ -8) - 2 * x ^ 2 * y ^ -1) - 6 * x ^ 3 * y ^ -2) - 7 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 1362], [((((((-x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) + s * x ^ 8 * y ^ -8 + 2 * x ^ 3 * y ^ -2) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) + x ^ 7 * y ^ -6 + x ^ 9 * y ^ -8, 5219], [(((-x + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 5213], [-s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1, 4535], [((-s + 2y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2, 4344, 4524], [((((-s + 2y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1, 4056], [((((((-s + 2y) - 2 * s * x * y ^ -1) + s * x ^ 2 * y ^ -2 + 7 * s * x ^ 3 * y ^ -3 + 6 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 4 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3948], [(((-s + 2y) - 2 * s * x * y ^ -1) + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1, 4236], [(((-s + 2x + y) - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 4168], [((((-s + 2x + y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + 2 * x ^ 2 * y ^ -1, 4165], [(((-s + 2x + y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + 2 * x ^ 2 * y ^ -1, 4166], [(((((((-s + 3x + y) - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + 2 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + 2 * s * x ^ 6 * y ^ -6 + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 3914], [x ^ -1 * y ^ 2, 1848], [s, 670, 1294, 2371, 2478, 3117, 3398, 4418, 4549, 4585, 4693, 5859, 6440], [x, 0, 37, 74, 116, 223, 370, 422, 444, 481, 600, 629, 711, 742, 925, 1040, 1110, 1147, 1296, 1336, 1370, 1407, 1567, 1666, 1886, 1888, 1925, 2041, 2073, 2110, 2151, 2258, 2480, 2519, 2592, 2637, 2666, 2711, 2748, 2777, 2831, 2851, 2962, 3127, 3157, 3198, 3221, 3259, 3271, 3487, 3488, 3491, 3591, 3595, 3599, 3665, 3813, 3850, 4036, 4110, 4142, 4184, 4275, 4277, 4332, 4383, 4406, 4417, 4480, 4517, 4554, 4591, 4638, 4675, 4702, 4739, 4820, 4850, 5036, 5146, 5220, 5258, 5297, 5327, 5332, 5406, 5443, 5507, 5517, 5591, 5615, 5633, 5662, 5717, 5739, 5890, 5924, 5931, 5933, 6069, 6080, 6146, 6155, 6188, 6293, 6294], [y, 389, 525, 671, 778, 814, 851, 886, 994, 1031, 1073, 1175, 1221, 1530, 1814, 1962, 2322, 2466, 2518, 2554, 2590, 3080, 3126, 3342, 3369, 3626, 3667, 3702, 3739, 3765, 3887, 4261, 4369, 4452, 4455, 4669, 4777, 4815, 4924, 4945, 5028, 5072, 5109, 5183, 5353, 5533, 5641, 5749, 5821, 5967, 6075, 6109, 6183, 6257, 6331, 6476], [s * x ^ -2 * y ^ 2, 653, 1517, 5840], [s * x ^ -1 * y, 6400, 6431], [s * x * y ^ -1, 1546, 1831, 1975, 2843, 3455, 4490], [s * x ^ 2 * y ^ -2, 609, 717, 1902, 2010, 5399], [x ^ 2 * y ^ -1, 429, 599, 707, 969, 1566, 1612, 1716, 1890, 1998, 2896, 2910, 3189, 3297, 4427, 4489, 4496, 4604, 4823, 5774, 5789, 5929, 5936, 6047, 6083, 6191], [x ^ 3 * y ^ -2, 164, 339, 3893, 3927, 4223, 4499, 4607, 5501], [x ^ 4 * y ^ -3, 1633], [(((((((s - 4x) - 2y) + 4 * s * x * y ^ -1 + 6 * s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 2 * x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3912], [((((((((s - 3x) - y) - 2 * s * x ^ 2 * y ^ -2) + 2 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - s * x ^ 8 * y ^ -8) - 3 * x ^ 2 * y ^ -1) + 3 * x ^ 4 * y ^ -3 + 3 * x ^ 5 * y ^ -4) - x ^ 8 * y ^ -7, 1326], [((((((((s * x * y ^ -1 - 2 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - s * x ^ 8 * y ^ -8) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5 + x ^ 8 * y ^ -7 + x ^ 9 * y ^ -8, 3957], [s - x, 4153], [s - y, 4263, 4272, 4371, 4380, 4454, 4587, 4695], [x - y, 562, 1670, 1778, 3153, 3513, 4453, 4852, 5751], [x - s * x * y ^ -1, 4816, 5000, 5575, 5683], [x - s * x ^ 2 * y ^ -2, 5357, 5645, 5825], [x - s * x ^ 3 * y ^ -3, 5281, 5288], [x - x ^ 2 * y ^ -1, 1795, 5684], [y - s * x * y ^ -1, 1742, 1850, 1922, 2766, 3054, 3234], [s * x * y ^ -1 - x ^ 2 * y ^ -1, 4461, 4821, 5863], [s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1, 4094, 4636], [s * x ^ 2 * y ^ -2 - x ^ 3 * y ^ -2, 101, 245, 281, 1490, 1578, 4281, 4389, 4497], [s * x ^ 3 * y ^ -3 - x ^ 3 * y ^ -2, 4029, 4317, 5395], [s * x ^ 3 * y ^ -3 - x ^ 4 * y ^ -3, 317, 4209], [x ^ 2 * y ^ -1 - x ^ 3 * y ^ -2, 2865], [(((s * x * y ^ -1 - s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4245], [(x - s * x * y ^ -1) - x ^ 2 * y ^ -1, 743, 2034, 3091, 3095, 3333, 4640, 5759, 6119], [(s * x * y ^ -1 - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 2046], [(s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1906], [((((((s - x) - y) - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) + 2 * s * x ^ 5 * y ^ -5 + 2 * s * x ^ 6 * y ^ -6 + x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3) - 2 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 3950], [((s - x) - y) - x ^ 2 * y ^ -1, 4346, 4526], [((x - s * x ^ 2 * y ^ -2) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 5537], [((y - s * x * y ^ -1) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 2946], [((s * x * y ^ -1 - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4065, 4353], [((((s - x) - y) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 4238], [((((s - x) - y) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4058], [((x - y) - s * x * y ^ -1) + x ^ 2 * y ^ -1, 4312], [((y - s * x * y ^ -1) - s * x ^ 4 * y ^ -4) + x ^ 4 * y ^ -3, 1634], [((y - s * x * y ^ -1) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 1454], [(((s - x) - y) + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 4155], [((y - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6 + x ^ 8 * y ^ -7, 5245], [(((((((((s - x) - y) + 3 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 4 * s * x ^ 4 * y ^ -4) - 3 * s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) + 2 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2) - 2 * x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6 + x ^ 8 * y ^ -7 + x ^ 9 * y ^ -8, 1330], [((((((((((s - x) - y) + 3 * s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5 + x ^ 8 * y ^ -7, 5216], [(x - y) + s * x * y ^ -1, 454, 634, 5643, 5823], [(x - y) + x ^ 2 * y ^ -1, 4204], [(s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2, 2793, 4283, 4391, 5939], [(((((((x - y) + s * x * y ^ -1) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + x ^ 7 * y ^ -6, 58, 5247], [(((x - s * x * y ^ -1) + s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) + x ^ 3 * y ^ -2, 5831], [((x - y) + s * x * y ^ -1) - s * x ^ 3 * y ^ -3, 346, 5535], [((s * x * y ^ -1 - s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5579], [(((((((((s - x) + s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - s * x ^ 8 * y ^ -8) - 3 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + 2 * x ^ 5 * y ^ -4 + 2 * x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 33], [(((x - y) + s * x * y ^ -1) - s * x ^ 3 * y ^ -3) + x ^ 2 * y ^ -1, 166, 5355], [((((s - x) + y) - s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2, 2685], [(s * x ^ 2 * y ^ -2 - s * x ^ 4 * y ^ -4) + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4101], [((((x - s * x ^ 2 * y ^ -2) + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) + x ^ 6 * y ^ -5 + x ^ 7 * y ^ -6, 5249], [((((y - s * x * y ^ -1) + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 2658], [(((((y - s * x * y ^ -1) + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - x ^ 7 * y ^ -6, 1346], [(((x - s * x * y ^ -1) + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 5363, 5543, 5651], [(((((((((s - y) + 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - 4 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) + s * x ^ 7 * y ^ -7 + 3 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + 2 * x ^ 6 * y ^ -5 + x ^ 8 * y ^ -7, 2627], [((((((((((x - s * x * y ^ -1) + 2 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) - 2 * s * x ^ 6 * y ^ -6) + s * x ^ 8 * y ^ -8) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) + x ^ 9 * y ^ -8, 5255], [x ^ -3 * y ^ 4 + x ^ -2 * y ^ 3, 1776], [x ^ -2 * y ^ 3 + x ^ -1 * y ^ 2, 552, 732, 4000, 4296], [x ^ -1 * y ^ 2 + y, 1779, 2186, 2330, 3194], [s + x, 2045, 2334, 2405], [s + y, 2443, 3559, 3621, 3815, 4308, 4839, 4848], [s + s * x * y ^ -1, 1533], [x + y, 259, 296, 518, 555, 592, 666, 703, 740, 745, 962, 1184, 1258, 1444, 1518, 1777, 1851, 1999, 2036, 2184, 2192, 2295, 2332, 2406, 2591, 2863, 2925, 2999, 3036, 3073, 3184, 3196, 3295, 3303, 3309, 3406, 3443, 3480, 3517, 3628, 3962, 3979, 3999, 4073, 4295, 4416, 4813, 4961, 4998, 5035, 5184, 5188, 5193, 5369, 5375, 5554, 5702, 5813, 5850, 5961, 5998, 6405, 6442, 6479], [x + s * x * y ^ -1, 749, 1109, 1994, 2102, 2191, 2694, 4119, 4297, 4856], [x + s * x ^ 2 * y ^ -2, 4128, 4164], [x + x ^ 2 * y ^ -1, 156, 336, 787, 1610, 1632, 1718, 1745, 2002, 2906, 3267, 3273, 3928, 4159, 4167, 4224, 4488, 4599, 5224, 5229, 5303, 5458, 5498], [y + s * x * y ^ -1, 3986], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 286, 4713], [s * x * y ^ -1 + x ^ 2 * y ^ -1, 4492], [s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3, 250], [s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1, 4319, 4859, 5285], [s * x ^ 2 * y ^ -2 + x ^ 3 * y ^ -2, 1613], [s * x ^ 2 * y ^ -2 + x ^ 4 * y ^ -3, 3993], [s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 141, 321], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1570, 1724, 2904, 2908], [x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 169, 1635, 1640], [(((((((((x + s * x * y ^ -1) - 3 * s * x ^ 3 * y ^ -3) - 5 * s * x ^ 4 * y ^ -4) - 3 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) + x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - 6 * x ^ 4 * y ^ -3) - 5 * x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5, 65], [(((((((x + s * x * y ^ -1) - 2 * s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 353], [(s + x) - y, 563, 923, 1854, 2214], [(s + x) - x ^ 2 * y ^ -1, 1687, 5576], [(s + x) - x ^ 3 * y ^ -2, 1690], [(s + y) - s * x ^ 2 * y ^ -2, 2911], [(s + s * x * y ^ -1) - x ^ 2 * y ^ -1, 3275], [(x + s * x * y ^ -1) - x ^ 2 * y ^ -1, 4316], [(y + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 4569], [(s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 3203], [(s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1, 4093], [((((((x + s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - 2 * s * x ^ 4 * y ^ -4) - s * x ^ 5 * y ^ -5) + x ^ 2 * y ^ -1) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 173], [(((((((x + y) - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 7 * y ^ -6, 22, 5211], [((s + x) - y) - s * x * y ^ -1, 4456], [((s + x) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 2983, 2987], [((s + y) - s * x ^ 2 * y ^ -2) - x ^ 3 * y ^ -2, 94, 5283], [((x + s * x * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 4009], [((x + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 3987], [((s * x * y ^ -1 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4533], [(((s + x) - y) - s * x * y ^ -1) - 2 * x ^ 2 * y ^ -1, 4528], [((((s + x) - y) - s * x * y ^ -1) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 4348], [((((((((s + x) - y) - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + 2 * s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + s * x ^ 8 * y ^ -8 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4) - 2 * x ^ 6 * y ^ -5) - 2 * x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 3952], [((((((s + x) - y) - s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3, 4240], [((((((s + x) - y) - s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) + x ^ 4 * y ^ -3, 4060], [((((x + s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1) - x ^ 4 * y ^ -3, 461], [s + x + y, 2246, 2266, 3563], [s + x + s * x * y ^ -1, 1937], [s + x + x ^ 2 * y ^ -1, 4424], [s + y + s * x * y ^ -1, 3019], [x + y + x ^ 2 * y ^ -1, 239, 275], [x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 2839, 3451], [x + s * x * y ^ -1 + x ^ 2 * y ^ -1, 641], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 3 * y ^ -2, 249], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 4 * y ^ -3, 4103], [s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2, 285], [s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4175], [((((((((s + x + s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - 6 * s * x ^ 3 * y ^ -3) - 4 * s * x ^ 4 * y ^ -4) + s * x ^ 6 * y ^ -6) - 3 * x ^ 3 * y ^ -2) - 5 * x ^ 4 * y ^ -3) - 3 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 1361], [(((((s + x + s * x * y ^ -1) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1469], [(s + x + y) - s * x ^ 2 * y ^ -2, 1618], [(s + y + s * x * y ^ -1) - x ^ 2 * y ^ -1, 681], [(s + y + s * x * y ^ -1) - x ^ 3 * y ^ -2, 3985], [(x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 3 * y ^ -2, 5396], [((((((s + x + s * x * y ^ -1) - s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - 2 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1649], [((s + y + s * x * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 2731], [(((s + x + s * x * y ^ -1) - s * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1757], [(((x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 5287], [((x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + x ^ 3 * y ^ -2, 4208], [s + x + y + s * x * y ^ -1, 2083, 4191], [s + x + y + x ^ 2 * y ^ -1, 1706], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1, 1397], [(s + x + y + s * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2, 2915], [((s + x + y + s * x * y ^ -1) - s * x ^ 2 * y ^ -2) + x ^ 2 * y ^ -1, 4200], [s + x + y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 1726], [(s + x + y + s * x * y ^ -1 + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 1438], [x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1562], [(s + x + y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 2735, 3023], [s + y + 2 * s * x * y ^ -1, 4020], [s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + 2 * x ^ 2 * y ^ -1, 4172], [s + x + 2y + s * x * y ^ -1, 4299], [x + s * x ^ 2 * y ^ -2 + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 2802], [s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5393], [(x + s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1, 4028], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * x ^ 3 * y ^ -2, 1506], [(((((y + s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 2 * s * x ^ 4 * y ^ -4) - s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 2613], [(((x + 2 * s * x * y ^ -1) - 3 * s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) - x ^ 4 * y ^ -3, 1399], [((((((((((s + 2x) - y) - 2 * s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5) - s * x ^ 7 * y ^ -7) + x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 59, 1350], [((s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4605], [(((s + 2x) - y) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 635, 1926], [((((s + 2x) - y) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - x ^ 3 * y ^ -2, 167, 347, 455, 1458, 1638, 1746], [((((s + 2x) - s * x * y ^ -1) + x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) + x ^ 4 * y ^ -3, 1398], [s + 2 * s * x * y ^ -1 + x ^ 2 * y ^ -1, 1526], [s + 2x + y + s * x * y ^ -1 + x ^ 2 * y ^ -1, 1598], [s + 2x + y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2 + 2 * x ^ 2 * y ^ -1, 1418], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + 2 * x ^ 3 * y ^ -2, 4100], [s + 2x + 2y + 2 * s * x * y ^ -1 + x ^ 2 * y ^ -1, 4011], [(((s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4) - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 4173], [s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4 + x ^ 3 * y ^ -2, 1505], [2x, 4460], [2y, 4335, 4443, 4515], [2 * x ^ 2 * y ^ -1, 4463], [((((((((2x - s * x * y ^ -1) - 4 * s * x ^ 2 * y ^ -2) - 6 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) + s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + s * x ^ 7 * y ^ -7 + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6, 5215], [((2x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1, 4532], [((((2x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + s * x ^ 4 * y ^ -4) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4352], [((((2x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4244], [((((((((2x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + 2 * s * x ^ 3 * y ^ -3 + 8 * s * x ^ 4 * y ^ -4 + 6 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - 2 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) + 2 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5) - x ^ 8 * y ^ -7, 3956], [((((2x - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) + 3 * s * x ^ 4 * y ^ -4 + s * x ^ 5 * y ^ -5) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 4064], [(2x - s * x * y ^ -1) - x ^ 3 * y ^ -2, 1798], [(2 * s * x ^ 2 * y ^ -2 - x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4096], [((2x - y) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3, 2757, 3045], [((2x - y) - s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 3225], [(((2x - y) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + s * x ^ 4 * y ^ -4, 2937], [((((((((2x - y) - s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) + 2 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5) - s * x ^ 7 * y ^ -7) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 8 * y ^ -7, 2649], [2x + x ^ 2 * y ^ -1, 2194], [((2y + s * x ^ 3 * y ^ -3) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 4047], [(((((((((2x + y) - s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3) - s * x ^ 4 * y ^ -4) + x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 3901], [(((((2y + s * x ^ 3 * y ^ -3) - s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) - 4 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 3939], [2x + y + x ^ 2 * y ^ -1, 2871, 2877], [2y + s * x ^ 3 * y ^ -3 + x ^ 3 * y ^ -2, 4227], [((((((((2x + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * s * x ^ 3 * y ^ -3) - 3 * s * x ^ 4 * y ^ -4) - 2 * s * x ^ 5 * y ^ -5) - s * x ^ 6 * y ^ -6) + 4 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4) + x ^ 6 * y ^ -5 + x ^ 8 * y ^ -7, 1327], [(2s + s * x ^ -1 * y + s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - x ^ 2 * y ^ -1, 677], [2 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3 + x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 4031, 4211], [(((((2x + y + s * x ^ 2 * y ^ -2 + 3 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4 + 2 * s * x ^ 5 * y ^ -5 + s * x ^ 6 * y ^ -6 + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4) - 3 * x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) - x ^ 8 * y ^ -7, 3913], [(2s + s * x ^ -1 * y + 2 * s * x * y ^ -1) - x ^ 3 * y ^ -2, 1541], [(((((((((2 * s * x ^ 3 * y ^ -3 + 3 * s * x ^ 4 * y ^ -4) - s * x ^ 6 * y ^ -6) - s * x ^ 7 * y ^ -7) - s * x ^ 8 * y ^ -8) - 2 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3) + x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5) - x ^ 7 * y ^ -6) - x ^ 9 * y ^ -8, 3923]]) * x ^ 0 * y ^ 0
            end
        f46(x, y) = begin
                return ExpandRep(5, 40, [[(((-3 * x * y ^ 5 - 3 * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) + x ^ 5 * y) - y ^ 6, 1323], [((-3 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 1363], [-3 * x ^ 4 * y ^ 2 - 2 * x ^ 5 * y, 4269], [((-3 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 6907], [-2 * x * y ^ 3, 2905], [(-2 * x ^ 3 * y ^ 3 - 5 * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y, 4789], [(((-2 * x ^ 2 * y ^ 4 - 4 * x ^ 3 * y ^ 3) - 4 * x ^ 4 * y ^ 2) - 3 * x ^ 5 * y) - x ^ 6, 323], [(-2 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 581], [(-2 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 2025], [((-2 * x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + x ^ 4 * y + 2 * x ^ 5, 522], [((-2 * x * y ^ 5 - 2 * x ^ 2 * y ^ 4) + x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + x ^ 6) - y ^ 6, 1203], [-2 * x * y - y ^ 2, 7227], [-2 * x * y ^ 2 - x ^ 2 * y, 482], [-2 * x ^ 2 * y ^ 2 - x ^ 3 * y, 6701, 6987], [(-2 * x * y - x ^ 2) - y ^ 2, 642, 1083, 1122, 3229], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 580, 4349], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 1962], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y, 3502, 5101], [((-2 * x * y ^ 8 - x ^ 2 * y ^ 7) + x ^ 5 * y ^ 4) - y ^ 9, 3062], [(-2 * x * y ^ 3 + x ^ 3 * y) - y ^ 4, 1282], [-1, 64, 391, 610, 1022, 1319, 1782, 1968, 2031, 2033, 2232, 2348, 2464, 2696, 2762, 3211, 3228, 3322, 3430, 3608, 3639, 3857, 3969, 4012, 4513, 4756, 4961, 5207, 5455, 5459, 5489, 5734, 6790, 6885, 6926, 6967, 7219, 7330, 7416, 7434, 7537, 7578], [-(y ^ -3), 5246], [-(x ^ -2), 1878, 3517, 5157, 5959], [-(y ^ -2), 4053, 4066, 5693, 5706], [-(x ^ -2) * y ^ -1, 1837], [-(x ^ -1), 6554], [-(y ^ -1), 1516, 1617], [-(x ^ -1) * y ^ 2, 6026], [-x, 546, 1004, 1591, 3013, 3225, 3559, 3746, 3975, 4041, 4298, 4331, 4582, 5744, 6181, 6946, 7990], [-y, 60, 149, 392, 651, 860, 1163, 1660, 2032, 2375, 2460, 2675, 2976, 3385, 3874, 6386, 6480, 7291, 7833], [-x * y ^ -1, 1616], [-x * y, 42, 444, 621, 644, 780, 802, 842, 884, 941, 1378, 2065, 2505, 2987, 3801, 4865, 5224, 5384, 5594, 5665, 6104, 6467, 7267, 7547, 7672], [-x * y ^ 2, 1643, 1976, 2180, 2225, 2403, 2443, 3622, 4029, 4535, 5104, 5221, 5425, 5427, 6981], [-x * y ^ 3, 2083, 3709, 6107, 6154, 7674], [-x * y ^ 4, 1338], [-(x ^ 2), 781, 2220, 3575, 3615, 3902, 3961, 4324, 5501, 6666, 7969], [-(y ^ 2), 247, 534, 620, 714, 940, 2376, 4497, 6099], [-(x ^ 2) * y ^ -1, 5350], [-(x ^ 2) * y, 600, 1252, 2161, 2307, 3497, 3818, 3827, 5099, 5194, 5234, 5282, 5344, 5585, 5603, 6064, 7043], [-(x ^ 2) * y ^ 2, 1298, 5000, 7620], [-(x ^ 2) * y ^ 3, 274, 1244, 1550, 1559, 1860, 1945, 4625, 7683, 7951], [-(x ^ 3), 680, 760, 1212, 1343, 1423, 3535, 3898, 3907, 3987, 6739, 7735, 7815], [-(y ^ 3), 245, 394, 532, 1300, 2663], [-(x ^ 3) * y, 301, 3481, 5154, 7621, 7980], [-(x ^ 3) * y ^ 2, 282, 4755, 5105, 5107], [-(x ^ 4), 3028, 3618, 3721, 4251, 4268, 4726, 5027, 6954, 7981], [-(y ^ 4), 2936], [-(x ^ 4) * y, 1485, 2138, 3133, 3720, 5147, 5345, 7467], [-(x ^ 4) * y ^ 2, 1525, 4675], [-(x ^ 4) * y ^ 4, 7954], [-(x ^ 5), 2842, 4646, 4746], [-(x ^ 5) * y, 549, 2949, 4697, 6299, 7443], [-(x ^ 5) * y ^ 2, 1445], [-(x ^ 5) * y ^ 3, 3140, 7941], [-(x ^ 6), 4666], [(-(x ^ 2) * y ^ 4 - 4 * x ^ 3 * y ^ 3) - 2 * x ^ 4 * y ^ 2, 4429], [-(x ^ 2) * y ^ 3 - 3 * x ^ 3 * y ^ 2, 1242], [((-(x ^ 4) * y ^ 5 - 3 * x ^ 5 * y ^ 4) - 3 * x ^ 6 * y ^ 3) - 2 * x ^ 7 * y ^ 2, 1509], [((-(x ^ 3) * y ^ 4 - 3 * x ^ 4 * y ^ 3) - 3 * x ^ 5 * y ^ 2) - x ^ 6 * y, 7914], [((-x * y ^ 5 - 2 * x ^ 4 * y ^ 2) - 3 * x ^ 5 * y) - 2 * x ^ 6, 3458], [((-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - x ^ 5, 3538], [((-x * y ^ 5 - 2 * x ^ 4 * y ^ 2) - 2 * x ^ 5 * y) - x ^ 6, 240, 3467], [((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + 2 * x ^ 6, 1043], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 3422, 3761, 4164, 5021], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 364, 3542, 5141, 6310, 6700, 6714, 6754], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 563, 3520], [(-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 763, 3404], [(-(x ^ 2) * y ^ 3 - 2 * x ^ 3 * y ^ 2) - x ^ 4 * y, 3162], [(-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 309, 349, 6304], [(-(x ^ 3) * y ^ 2 - 2 * x ^ 4 * y) - x ^ 5, 403], [(-(x ^ 3) * y ^ 5 - 2 * x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 3098, 4680], [(((-(x ^ 2) * y ^ 6 - 2 * x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3) + x ^ 6 * y ^ 2, 6264], [((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + x ^ 6, 6270], [((-x * y ^ 9 - 2 * x ^ 2 * y ^ 8) - x ^ 3 * y ^ 7) + x ^ 6 * y ^ 4, 3044], [((-(x ^ 3) * y ^ 6 - 2 * x ^ 4 * y ^ 5) - x ^ 5 * y ^ 4) + x ^ 8 * y, 7874], [((-(x ^ 3) * y ^ 7 - 2 * x ^ 4 * y ^ 6) - x ^ 5 * y ^ 5) + x ^ 8 * y ^ 2, 3058, 4640], [((-(x ^ 4) * y ^ 7 - 2 * x ^ 5 * y ^ 6) - x ^ 6 * y ^ 5) + x ^ 9 * y ^ 2, 1469], [((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + 2 * x ^ 5 * y + x ^ 6, 244], [((-x * y ^ 7 - 2 * x ^ 2 * y ^ 6) - x ^ 3 * y ^ 5) + 2 * x ^ 4 * y ^ 4 + 4 * x ^ 5 * y ^ 3 + 2 * x ^ 6 * y ^ 2, 4684], [(((-x * y ^ 9 - 2 * x ^ 2 * y ^ 8) - x ^ 3 * y ^ 7) + 2 * x ^ 4 * y ^ 6 + 5 * x ^ 5 * y ^ 5 + 4 * x ^ 6 * y ^ 4 + 2 * x ^ 7 * y ^ 3) - 2 * x ^ 9 * y, 4644], [((-x * y ^ 5 - 2 * x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) + 3 * x ^ 4 * y ^ 2 + 4 * x ^ 5 * y + x ^ 6, 1563], [(-(x ^ 2) * y ^ 4 - 2 * x ^ 3 * y ^ 3) + x ^ 5 * y, 1403], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) + x ^ 4 * y + x ^ 5, 524], [(-(x ^ 2) * y ^ 6 - 2 * x ^ 3 * y ^ 5) + 3 * x ^ 4 * y ^ 4 + 5 * x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 1482], [((-(x ^ 2) * y ^ 8 - 2 * x ^ 3 * y ^ 7) + 3 * x ^ 4 * y ^ 6 + 5 * x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4 + x ^ 7 * y ^ 3) - 2 * x ^ 9 * y, 1442], [-1 - x ^ -1 * y, 1830, 6514], [-(y ^ -2) - x * y ^ -3, 5266], [-(x ^ -1) * y ^ 2 - y, 3510, 5150], [-(x ^ -1) * y ^ 3 - y ^ 2, 1870, 1871], [-x - y, 61, 747, 983, 1080, 1661, 2322, 6899, 7375], [-x * y - x ^ 2, 223, 266, 1124, 1297, 1299, 1603, 2184, 2265, 2465, 2683, 4121, 4182, 4578, 5258, 5781, 6403, 6615], [-x * y - y ^ 2, 83, 109, 1387, 3265, 7067], [-x * y ^ 2 - x ^ 2 * y, 627, 684, 964, 2545, 2749, 2935, 2939, 3869, 4069, 5144, 5709, 5745, 6620, 6834, 6980, 7347], [-x * y ^ 2 - x ^ 3, 1301, 4481], [-x * y ^ 2 - y ^ 3, 1988], [-x * y ^ 3 - x ^ 2 * y ^ 2, 603, 923, 3600], [-x * y ^ 3 - x ^ 3 * y, 340, 6105], [-x * y ^ 4 - x ^ 2 * y ^ 3, 1938, 4759, 6350], [-x * y ^ 4 - x ^ 3 * y ^ 2, 2665, 3185], [-x * y ^ 4 - x ^ 5, 320, 3547], [-x * y ^ 4 - y ^ 5, 1347], [-x * y ^ 6 - y ^ 7, 3102], [-x * y ^ 7 - x ^ 2 * y ^ 6, 3084], [-x * y ^ 7 - y ^ 8, 3142], [-x * y ^ 8 - x ^ 2 * y ^ 7, 3124], [-(x ^ 2) - x ^ 3 * y ^ -1, 5070], [-(x ^ 2) * y - x ^ 3, 380, 1820, 2963, 3582, 5181, 6621], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 427, 1268, 1987, 2828, 3110, 4149, 4411, 4428, 4710, 5064, 5385], [-(x ^ 2) * y ^ 2 - x ^ 4, 341, 3521], [-(x ^ 2) * y ^ 2 - y ^ 4, 4462, 6061], [-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2, 429, 1551, 2163, 2802, 3150, 3151, 3462, 3789, 5061, 7950], [-(x ^ 2) * y ^ 3 - x ^ 4 * y, 5145], [-(x ^ 2) * y ^ 3 - y ^ 5, 2825], [-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3, 1269, 4679, 5058, 5349], [-(x ^ 2) * y ^ 5 - x ^ 3 * y ^ 4, 6344], [-(x ^ 3) * y - x ^ 4, 2203, 2668, 3188, 4771, 4788], [-(x ^ 3) * y ^ 2 - x ^ 4 * y, 2642, 7987], [-(x ^ 3) * y ^ 3 - x ^ 4 * y ^ 2, 2829, 7603], [-(x ^ 3) * y ^ 6 - x ^ 4 * y ^ 5, 3138, 4720], [-(x ^ 4) * y - x ^ 5, 4524, 6674], [-(x ^ 4) * y ^ 2 - x ^ 5 * y, 1858, 2669, 3440, 7963], [-(x ^ 4) * y ^ 3 - x ^ 5 * y ^ 2, 7900], [-(x ^ 4) * y ^ 4 - x ^ 5 * y ^ 3, 7940], [-(x ^ 5) * y ^ 2 - x ^ 6 * y, 269, 3100, 7901], [-(x ^ 6) * y ^ 2 - x ^ 7 * y, 6307], [(((-(x ^ 3) * y ^ 7 - x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3) - x ^ 8 * y ^ 2, 3123], [(((-(x ^ 3) * y ^ 8 - x ^ 5 * y ^ 6) - 3 * x ^ 6 * y ^ 5) - x ^ 7 * y ^ 4) + x ^ 10 * y, 3043], [(((((-x * y ^ 6 - x ^ 2 * y ^ 5) - 2 * x ^ 3 * y ^ 4) - 3 * x ^ 4 * y ^ 3) - 2 * x ^ 5 * y ^ 2) - 2 * x ^ 6 * y) - x ^ 7, 1843], [((((-x * y ^ 6 - x ^ 2 * y ^ 5) - 2 * x ^ 3 * y ^ 4) - 3 * x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2) - y ^ 7, 4702, 6301], [(((((-x * y ^ 8 - x ^ 2 * y ^ 7) - 2 * x ^ 3 * y ^ 6) - x ^ 4 * y ^ 5) - x ^ 5 * y ^ 4) + x ^ 6 * y ^ 3) - y ^ 9, 4662, 6261], [((-x * y ^ 5 - x ^ 2 * y ^ 4) - 2 * x ^ 3 * y ^ 3) + 3 * x ^ 5 * y + 2 * x ^ 6, 242], [(-x * y - x ^ 2) - y ^ 2, 1360, 4587], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 421, 3601], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 420], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y, 5225], [(-x * y ^ 3 - x ^ 4) - y ^ 4, 7707], [(-(x ^ 2) * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y, 260], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 2923], [(-(x ^ 3) * y ^ 2 - x ^ 4 * y) - x ^ 5, 4604], [(-(x ^ 3) * y ^ 5 - x ^ 4 * y ^ 4) - y ^ 8, 4742, 6341], [((((-(x ^ 2) * y ^ 6 - x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) - 2 * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) + y ^ 8, 1540], [((-x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 2185], [((-x * y ^ 4 - x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y, 1905], [((-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - x ^ 5 * y, 3029], [((((-x * y ^ 5 - x ^ 2 * y ^ 4) - x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - x ^ 5 * y) - x ^ 6, 2123], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 3 * y ^ 2, 4509], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 5, 4538], [((-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 5) - y ^ 5, 1320, 4547], [(-x * y ^ 4 - x ^ 2 * y ^ 3) + x ^ 4 * y + x ^ 5, 4444], [(-x * y ^ 8 - x ^ 2 * y ^ 7) + x ^ 3 * y ^ 6 + 3 * x ^ 4 * y ^ 5 + 2 * x ^ 5 * y ^ 4, 4724], [(-(x ^ 2) * y ^ 4 - x ^ 3 * y ^ 3) + x ^ 4 * y ^ 2 + 3 * x ^ 5 * y + 2 * x ^ 6, 3444], [(-(x ^ 2) * y ^ 6 - x ^ 3 * y ^ 5) + 2 * x ^ 4 * y ^ 4 + 2 * x ^ 5 * y ^ 3, 1484], [(((-(x ^ 2) * y ^ 8 - x ^ 3 * y ^ 7) + 2 * x ^ 4 * y ^ 6 + 2 * x ^ 5 * y ^ 5 + x ^ 6 * y ^ 4) - x ^ 8 * y ^ 2) - x ^ 9 * y, 1444], [(-x * y ^ 5 - x ^ 2 * y ^ 4) + 3 * x ^ 4 * y ^ 2 + 2 * x ^ 5 * y, 3749], [(-(x ^ 2) * y ^ 7 - x ^ 3 * y ^ 6) + 3 * x ^ 4 * y ^ 5 + 4 * x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, 1522], [-x * y ^ 2 + x ^ 3, 682, 3782, 5381], [-x * y ^ 3 + x ^ 2 * y ^ 2, 4542, 6141], [-x * y ^ 3 + x ^ 3 * y, 3909], [-x * y ^ 3 + x ^ 4, 1061, 1581, 4241, 4761], [-x * y ^ 4 + x ^ 4 * y, 5865, 6385, 6947], [-(x ^ 2) + y ^ 2, 1665], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2, 2145], [-(x ^ 2) * y ^ 3 + x ^ 5, 1400, 4618, 4627], [-(x ^ 2) * y ^ 7 + x ^ 4 * y ^ 5, 1524], [-(x ^ 3) + y ^ 3, 1063, 1583, 7455, 7975], [(-(x ^ 3) * y ^ 3 + x ^ 4 * y ^ 2) - x ^ 5 * y, 2843], [-x * y ^ 3 + x ^ 3 * y + x ^ 4, 200, 263, 402, 3418, 3427, 6655], [-x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 2947], [-x * y ^ 5 + x ^ 4 * y ^ 2 + x ^ 5 * y, 6667], [(-x * y ^ 5 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - y ^ 6, 1503, 7895], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 1040, 4267], [-(x ^ 3) * y ^ 6 + x ^ 5 * y ^ 4 + x ^ 7 * y ^ 2 + x ^ 8 * y, 3083], [-x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 1200, 4427], [-(x ^ 2) * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y + 2 * x ^ 5, 4258], [((-x * y ^ 7 + x ^ 3 * y ^ 5 + 2 * x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2) - x ^ 7 * y) - y ^ 8, 1463, 7855], [-x * y ^ 4 + x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + 3 * x ^ 4 * y, 4418], [-(x ^ 3) * y ^ 3 + 2 * x ^ 4 * y ^ 2, 4469], [-x * y ^ 4 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y, 3589], [-(x ^ -1) * y ^ 5 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 1220], [-x * y ^ 3 + 2 * x ^ 3 * y + 2 * x ^ 4, 362], [1, 63, 122, 754, 863, 1162, 2392, 3382, 3486, 4222, 4577, 4981, 5821, 6179, 6455, 7255], [x ^ -1, 1654, 4892, 4940], [x ^ -1 * y ^ -2, 1238, 7678], [x ^ -1 * y ^ -1, 4805, 5950], [x ^ -1 * y, 3439, 6799], [x ^ -1 * y ^ 5, 2822], [x, 205, 328, 456, 474, 492, 697, 779, 783, 820, 1066, 1107, 1148, 1231, 1289, 1353, 1435, 1625, 1887, 1992, 2051, 2092, 2219, 2420, 2830, 2871, 2912, 2994, 3076, 3199, 3446, 3506, 3651, 3774, 3815, 3897, 4143, 4184, 4204, 4266, 4471, 4576, 4635, 4799, 5499, 5538, 5907, 5989, 6071, 6112, 6153, 6235, 6276, 6358, 6402, 6441, 6564, 6728, 6862, 7175, 7221, 7261, 7339, 7384, 7466, 7554, 7630, 7712, 7755, 7876, 7917], [y, 0, 164, 623, 720, 1279, 1723, 1785, 2155, 2625, 2763, 2951, 3227, 3241, 3349, 3662, 3947, 4102, 4389, 4439, 5261, 5701, 5784, 7015, 7507], [x * y ^ -2, 2533, 2546, 3406], [x * y ^ -1, 286, 573, 586], [x * y, 415, 658, 905, 961, 1709, 1875, 1929, 2267, 2484, 2581, 2738, 2930, 3283, 3530, 3579, 3700, 4320, 4405, 4495, 4552, 4678, 4844, 5090, 5177, 5383, 5416, 5434, 6187, 6612, 6653, 6694, 6823, 7065, 7108, 7149, 7180], [x * y ^ 2, 698, 1477, 2280, 2385, 5587, 6024, 6114, 7714], [x * y ^ 3, 300, 2907, 3741, 5342], [x * y ^ 4, 1204, 3164, 5051, 6147], [x ^ 2, 372, 1205, 1952, 2380, 7181], [y ^ 2, 285, 572, 1683, 2216, 2580, 2952, 3309], [x ^ 2 * y ^ -2, 4406], [x ^ 2 * y ^ -1, 4827, 5870], [x ^ 2 * y, 303, 602, 5864, 6144, 6224, 6384, 6695, 6820, 7107, 7619, 7763], [x ^ 2 * y ^ 2, 1284, 1896, 4622, 5187, 6221, 6627], [x ^ 2 * y ^ 3, 324, 1324, 1404], [x ^ 2 * y ^ 4, 7723], [x ^ 3, 543, 762, 1572, 1816, 1980, 2305, 4686, 6821, 6935, 7979], [y ^ 3, 2896, 3611, 4502, 4537, 6101, 6139], [x ^ 3 * y, 1340, 1420, 1825, 1936, 3126, 3508, 4687, 6288, 6388, 6740, 7083, 7661], [x ^ 3 * y ^ 2, 298, 589, 1907, 3085], [x ^ 3 * y ^ 3, 7952], [x ^ 4, 1341, 1421, 1506, 1940, 3731, 3748, 4521, 4706, 6741, 7474], [y ^ 4, 1260, 1354, 3182, 7834], [x ^ 4 * y, 2658, 4240, 6145, 6225], [x ^ 4 * y ^ 5, 4745], [x ^ 5, 2922, 7827], [y ^ 5, 2804], [x ^ 5 * y, 1069, 1466, 1492, 2869, 6923], [x ^ 5 * y ^ 5, 4665], [x ^ 6 * y ^ 2, 1452, 1498, 3107], [x ^ 6 * y ^ 3, 1474], [((x * y ^ 4 - 2 * x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) + y ^ 5, 4404], [(x ^ 2 * y ^ 3 - 2 * x ^ 4 * y) - x ^ 5, 1562], [x ^ -1 * y ^ 4 - x ^ 2 * y, 1223, 7615], [x * y ^ 3 - x ^ 2 * y ^ 2, 3742, 5341], [x * y ^ 3 - x ^ 3 * y, 562], [x * y ^ 3 - x ^ 4, 1261, 4441, 4498], [x * y ^ 4 - x ^ 4 * y, 6065], [x ^ 2 * y ^ 2 - x ^ 4, 202, 2283], [x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2, 3025], [x ^ 2 * y ^ 3 - x ^ 5, 1240, 4458, 4467], [x ^ 3 - y ^ 3, 1263, 7655], [x ^ 3 * y - y ^ 4, 1060], [x ^ 3 * y ^ 2 - y ^ 5, 6025], [x ^ 4 * y - x ^ 5, 7667], [((((x ^ 2 * y ^ 6 - x ^ 3 * y ^ 5) - 3 * x ^ 4 * y ^ 4) - 4 * x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) + x ^ 7 * y, 4698], [((((x ^ 2 * y ^ 8 - x ^ 3 * y ^ 7) - 3 * x ^ 4 * y ^ 6) - 3 * x ^ 5 * y ^ 5) - 3 * x ^ 6 * y ^ 4) + 2 * x ^ 9 * y, 4658], [(((x ^ 2 * y ^ 7 - x ^ 3 * y ^ 6) - 2 * x ^ 4 * y ^ 5) - 3 * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3, 4738], [((x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 1564], [((((x ^ 2 * y ^ 8 - x ^ 3 * y ^ 7) - 2 * x ^ 4 * y ^ 6) - x ^ 5 * y ^ 5) - 2 * x ^ 6 * y ^ 4) + x ^ 9 * y, 1440, 4667], [(((x * y ^ 8 - x ^ 3 * y ^ 6) - 2 * x ^ 4 * y ^ 5) - x ^ 6 * y ^ 3) + y ^ 9, 1460], [(((x ^ 2 * y ^ 6 - x ^ 3 * y ^ 5) - 2 * x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3) + x ^ 7 * y, 1480, 4707], [(x * y ^ 7 - x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4, 4721], [(x * y ^ 8 - x ^ 3 * y ^ 6) - x ^ 4 * y ^ 5, 6345], [(x ^ 2 * y ^ 3 - x ^ 4 * y) - x ^ 5, 261, 1044, 3441], [(x ^ 2 * y ^ 4 - x ^ 4 * y ^ 2) - x ^ 5 * y, 5065], [(x ^ 3 * y - x ^ 4) - y ^ 4, 1580], [((x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y) - 2 * x ^ 5, 3738], [(((x ^ 2 * y ^ 7 - x ^ 3 * y ^ 6) - x ^ 4 * y ^ 5) - 2 * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3, 1520, 4747], [((x * y ^ 7 - x ^ 3 * y ^ 5) - x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 1541], [((x ^ 2 * y ^ 3 - x ^ 3 * y ^ 2) - x ^ 4 * y) - x ^ 5, 520, 3747], [((x * y ^ 3 - x ^ 3 * y) - x ^ 4) + y ^ 4, 360, 3587], [((x * y ^ 6 - x ^ 3 * y ^ 4) - x ^ 6 * y) + y ^ 7, 1500], [(x * y ^ 2 - x ^ 3) + y ^ 3, 3978], [(x * y ^ 3 - x ^ 3 * y) + y ^ 4, 540], [(x * y ^ 3 - x ^ 4) + y ^ 4, 1280, 4507], [1 + x ^ -1 * y, 6547], [1 + x * y ^ -1, 3222, 4821], [x ^ -1 * y ^ 5 + x * y ^ 3, 4422, 6021], [x + y, 287, 574, 615, 619, 656, 943, 984, 1025, 1082, 1230, 1271, 1312, 1394, 1517, 1641, 1805, 1846, 1969, 2062, 2133, 2215, 2256, 2297, 2338, 2502, 2584, 2666, 2705, 2789, 2953, 3200, 3218, 3262, 3323, 3364, 3405, 3487, 3610, 3862, 3938, 3977, 3979, 4020, 4061, 4062, 4553, 4594, 4758, 4800, 4861, 4882, 4923, 4964, 5128, 5210, 5251, 5415, 5461, 5497, 5579, 5661, 5702, 5743, 5948, 6030, 6482, 6523, 6892, 6933, 6974, 7220, 7234, 7302, 7335, 7343, 7425, 7548, 7589, 7670, 7671, 7835, 7999], [x + x ^ 2 * y ^ -1, 306, 6390], [x * y ^ -1 + x ^ 2 * y ^ -2, 3426], [x * y + x ^ 2, 377, 379, 419, 583, 2015, 2019, 2044, 3244, 3577, 3858, 4044, 4161, 5179, 6975], [x * y + y ^ 2, 44, 667, 980, 1120, 2323, 3485, 4347, 7787], [x * y ^ 2 + x ^ 2 * y, 220, 829, 962, 1149, 2016, 3804, 4145, 4589, 5785, 6699, 7387], [x * y ^ 2 + x ^ 3, 343, 6735], [x * y ^ 2 + y ^ 3, 707, 5498, 5949], [x * y ^ 3 + x ^ 2 * y ^ 2, 378, 483, 2563, 3625, 5178], [x * y ^ 3 + y ^ 4, 1307, 6306], [x * y ^ 4 + y ^ 5, 6346], [x ^ 2 + y ^ 2, 1303, 7695], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 4426], [x ^ 2 * y + x ^ 3, 221, 1308, 2243, 2585, 3401, 3628, 3964, 4124], [x ^ 2 * y ^ 2 + x ^ 3 * y, 564, 2549, 3425, 3989, 5025, 6787, 6827, 7163, 7323, 7660], [x ^ 2 * y ^ 2 + x ^ 4, 4601], [x ^ 2 * y ^ 2 + y ^ 4, 4262, 4782, 5861, 6381], [x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 284, 307, 1309, 1402, 2818, 3429, 3545, 4400], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3, 3509], [x ^ 3 * y + x ^ 4, 1588, 2148, 7994], [x ^ 3 * y ^ 2 + x ^ 4 * y, 3178, 3484, 4685, 4760, 6763], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 1865, 6389], [x ^ 4 * y + x ^ 5, 3451, 3468], [x ^ 4 * y ^ 2 + x ^ 5 * y, 2149, 7643, 7899], [x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 1532], [x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3, 1548], [x ^ 4 * y ^ 6 + x ^ 5 * y ^ 5, 3149], [x ^ 5 * y + x ^ 6, 3003], [x ^ 5 * y ^ 2 + x ^ 6 * y, 3096, 6643], [x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 1507], [(((x * y ^ 4 + x ^ 2 * y ^ 3) - 2 * x ^ 3 * y ^ 2) - 4 * x ^ 4 * y) - 2 * x ^ 5, 363], [((x * y ^ 4 + x ^ 2 * y ^ 3) - 2 * x ^ 4 * y) - 2 * x ^ 5, 4764], [(x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 4, 400, 3627], [(x * y ^ 4 + x ^ 3 * y ^ 2) - y ^ 5, 2865], [(x * y ^ 5 + x ^ 2 * y ^ 4) - x ^ 4 * y ^ 2, 4549], [(x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y, 2883], [(x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2, 4629], [(x ^ 2 * y ^ 5 + x ^ 3 * y ^ 4) - y ^ 7, 1543, 7935], [((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 4 * y) - 2 * x ^ 5, 4244], [((x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2) - x ^ 4 * y) - 2 * x ^ 5, 1042], [(((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - 2 * x ^ 4 * y) - x ^ 5, 1202], [(((((x * y ^ 8 + x ^ 2 * y ^ 7) - x ^ 4 * y ^ 5) - 2 * x ^ 5 * y ^ 4) - x ^ 6 * y ^ 3) - x ^ 7 * y ^ 2) + x ^ 8 * y, 1461, 4641], [(((((x * y ^ 9 + x ^ 2 * y ^ 8) - x ^ 4 * y ^ 6) - 2 * x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3) + x ^ 8 * y ^ 2, 6265], [((x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4, 683], [((x * y ^ 6 + x ^ 2 * y ^ 5) - x ^ 4 * y ^ 3) - x ^ 5 * y ^ 2, 1501, 4681], [((x * y ^ 7 + x ^ 2 * y ^ 6) - x ^ 4 * y ^ 4) - x ^ 5 * y ^ 3, 6305], [((x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - x ^ 5 * y, 3189], [((x ^ 4 * y ^ 6 + x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3, 7923], [((x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) + y ^ 5, 2945], [x * y + x ^ 2 + y ^ 2, 423, 640, 981, 2985, 3867, 4338, 6815], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 3498], [x * y ^ 4 + x ^ 5 + y ^ 5, 7747], [x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 1985], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 1883], [x ^ 3 * y ^ 5 + x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3, 4731], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y + x ^ 4, 3548, 4484], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + x ^ 4 * y, 2122], [x ^ 2 * y ^ 4 + x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y, 2803], [x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 2643], [((x * y ^ 7 + x ^ 2 * y ^ 6 + x ^ 3 * y ^ 5 + x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3) - x ^ 6 * y ^ 2) - x ^ 7 * y, 3105], [x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 1868], [x ^ -1 * y ^ 2 + x + 2y, 6507], [x + 2y, 82], [x ^ 4 * y + 2 * x ^ 5, 3724], [(x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5) - x ^ 6 * y ^ 3, 7947], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 509, 3785], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 280, 3505, 3507, 6707], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 3764], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 283], [x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + x ^ 5, 203], [x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 1589], [x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2, 3108, 4691], [x ^ 3 * y ^ 5 + 2 * x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3, 3082, 4748], [x ^ 4 * y ^ 3 + 2 * x ^ 5 * y ^ 2 + x ^ 6 * y, 1869], [x ^ 4 * y ^ 4 + 2 * x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 4705], [x ^ 4 * y ^ 5 + 2 * x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3, 3109, 7883], [(((((x * y ^ 9 + 2 * x ^ 2 * y ^ 8 + x ^ 3 * y ^ 7) - 3 * x ^ 4 * y ^ 6) - 6 * x ^ 5 * y ^ 5) - 4 * x ^ 6 * y ^ 4) - 2 * x ^ 7 * y ^ 3) - x ^ 8 * y ^ 2, 1523], [(x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4) - x ^ 8 * y, 3068], [(x ^ 3 * y ^ 7 + 2 * x ^ 4 * y ^ 6 + x ^ 5 * y ^ 5) - x ^ 8 * y ^ 2, 3042], [(x ^ 4 * y ^ 7 + 2 * x ^ 5 * y ^ 6 + x ^ 6 * y ^ 5) - x ^ 9 * y ^ 2, 3069, 7843], [x ^ 3 * y ^ 4 + 2 * x ^ 4 * y ^ 3 + x ^ 5 * y ^ 2 + x ^ 6 * y, 4708], [x ^ 3 * y ^ 5 + 2 * x ^ 4 * y ^ 4 + x ^ 5 * y ^ 3 + x ^ 6 * y ^ 2, 3148], [(x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3) - x ^ 8 * y, 4651], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2 + x ^ 5 * y + x ^ 6, 3163], [x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5 + x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3 + x ^ 7 * y ^ 2, 3122], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 3604], [x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 6723], [(x ^ 3 * y ^ 6 + 2 * x ^ 4 * y ^ 5 + 2 * x ^ 5 * y ^ 4 + x ^ 6 * y ^ 3) - x ^ 8 * y, 4668], [x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3 + 2 * x ^ 4 * y ^ 2 + x ^ 5 * y, 1842], [(x * y ^ 5 + 2 * x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2) - x ^ 5 * y, 1243], [x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y, 6803], [x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 6747], [((((((x * y ^ 10 + 3 * x ^ 2 * y ^ 9 + 4 * x ^ 3 * y ^ 8) - x ^ 4 * y ^ 7) - 9 * x ^ 5 * y ^ 6) - 8 * x ^ 6 * y ^ 5) - 4 * x ^ 7 * y ^ 4) - 2 * x ^ 8 * y ^ 3) + 2 * x ^ 9 * y ^ 2 + 2 * x ^ 10 * y, 1443], [(((x * y ^ 8 + 3 * x ^ 2 * y ^ 7 + 4 * x ^ 3 * y ^ 6) - x ^ 4 * y ^ 5) - 7 * x ^ 5 * y ^ 4) - 4 * x ^ 6 * y ^ 3, 1483], [(((x * y ^ 6 + 3 * x ^ 2 * y ^ 5 + 4 * x ^ 3 * y ^ 4 + x ^ 4 * y ^ 3) - 4 * x ^ 5 * y ^ 2) - 5 * x ^ 6 * y) - 2 * x ^ 7, 243], [((x ^ 3 * y ^ 7 + 4 * x ^ 4 * y ^ 6 + 2 * x ^ 5 * y ^ 5) - x ^ 6 * y ^ 4) - 2 * x ^ 8 * y ^ 2, 7867], [x * y ^ 5 + 4 * x ^ 2 * y ^ 4 + 5 * x ^ 3 * y ^ 3 + 4 * x ^ 4 * y ^ 2 + x ^ 5 * y, 3549], [x ^ 3 * y ^ 5 + 5 * x ^ 4 * y ^ 4 + 4 * x ^ 5 * y ^ 3 + 2 * x ^ 6 * y ^ 2 + x ^ 7 * y, 7907], [(x ^ 3 * y ^ 7 + 6 * x ^ 4 * y ^ 6 + 5 * x ^ 5 * y ^ 5) - x ^ 7 * y ^ 3, 4749], [((x ^ 3 * y ^ 8 + 7 * x ^ 4 * y ^ 7 + 8 * x ^ 5 * y ^ 6 + 3 * x ^ 6 * y ^ 5 + x ^ 7 * y ^ 4) - 3 * x ^ 8 * y ^ 3) - 2 * x ^ 9 * y ^ 2, 4669], [x ^ 3 * y ^ 6 + 7 * x ^ 4 * y ^ 5 + 9 * x ^ 5 * y ^ 4 + 4 * x ^ 6 * y ^ 3, 4709], [2 * x ^ 3 * y - y ^ 4, 1221, 4401], [2 * x * y ^ 3 + x ^ 2 * y ^ 2, 3531], [(2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 4, 541], [(((2 * x * y ^ 3 + x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4) + y ^ 4, 3578], [(((2 * x * y ^ 4 + x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - x ^ 4 * y) + y ^ 5, 1283], [((2 * x * y ^ 5 + x ^ 2 * y ^ 4) - x ^ 5 * y) + y ^ 6, 6266], [2 * x * y + x ^ 2 + y ^ 2, 1362, 6914], [2 * x * y ^ 8 + x ^ 2 * y ^ 7 + x ^ 5 * y ^ 4, 3145], [2 * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 1560, 4787], [2 * x * y ^ 4 + x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2 + y ^ 5, 1322], [(2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2) - x ^ 5, 2003], [2 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 1123], [2 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 1803, 3524], [(2 * x * y ^ 9 + 2 * x ^ 2 * y ^ 8 + x ^ 3 * y ^ 7 + 2 * x ^ 4 * y ^ 6 + x ^ 6 * y ^ 4) - x ^ 7 * y ^ 3, 3065], [2 * x ^ 3 * y ^ 2 + 2 * x ^ 4 * y + 2 * x ^ 5, 4778], [2 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y, 3629], [2 * x ^ 2 * y ^ 4 + 3 * x ^ 3 * y ^ 3 + x ^ 4 * y ^ 2, 1923], [2 * x ^ 2 * y ^ 3 + 3 * x ^ 3 * y ^ 2 + x ^ 4 * y + x ^ 5, 322], [2 * x * y ^ 4 + 3 * x ^ 2 * y ^ 3 + 2 * x ^ 3 * y ^ 2 + y ^ 5, 1963], [(((2 * x * y ^ 5 + 4 * x ^ 2 * y ^ 4 + 2 * x ^ 3 * y ^ 3) - x ^ 4 * y ^ 2) - 3 * x ^ 5 * y) - 2 * x ^ 6, 523], [3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 643], [3 * x ^ 4 * y ^ 3 + 5 * x ^ 5 * y ^ 2 + 2 * x ^ 6 * y, 3469]]) * x ^ 0 * y ^ 0
            end
        f48(x, y, v) = begin
                local s
                s = v * GetRoot(x * y)
                return ExpandRep(5, 40, [[(((-3x - y) - 4 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1872], [(-2x - y) - x ^ 2 * y ^ -1, 1912, 1947, 2061, 3473], [(((-2s + x) - s * x ^ -1 * y) - s * x * y ^ -1) + x ^ 2 * y ^ -1, 2041], [(((-2s + x) - s * x ^ -1 * y) - s * x * y ^ -1) + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1921], [-s, 165, 1027, 1355, 1596, 1640, 1803, 2702, 3032, 3324, 3597, 3718, 4079, 4105, 4514, 6306, 7842, 7909], [-x, 1361, 3466, 3511, 3876, 7920, 7963], [-y, 122, 286, 448, 489, 530, 774, 815, 856, 897, 938, 1224, 1266, 1308, 1557, 1762, 1926, 2047, 2170, 2373, 2575, 2617, 2658, 2820, 2863, 2948, 2989, 3233, 3402, 3810, 4013, 4174, 4297, 4419, 4629, 4920, 5166, 5447, 5490, 5652, 5895, 5933, 5974, 6102, 6185, 6224, 6271, 6398, 6806, 6927, 7089, 7128, 7292, 7331, 7454, 7536, 7659, 7701], [-s * x ^ -1 * y, 29, 3268, 4860, 4899, 4993, 5030], [((-s - 2 * s * x * y ^ -1) - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3, 325], [(-s - 2 * s * x * y ^ -1) - s * x ^ 2 * y ^ -2, 3640], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 2032, 3440, 3634], [(-s * x * y ^ -1 - 2 * s * x ^ 2 * y ^ -2) - s * x ^ 3 * y ^ -3, 241, 401, 565, 1840, 1875, 2000, 3724], [(((-s - 2x) - y) - s * x * y ^ -1) - x ^ 2 * y ^ -1, 1992], [-s - s * x * y ^ -1, 445, 1554, 1841, 1881, 1942, 1965, 2245, 2342, 3559, 3679, 3954, 4154, 4764, 6725, 6845, 7125, 7325], [-x - y, 1265, 1524, 1564, 1920, 2040, 2112, 2320, 2520, 3546, 3552, 3593, 3671, 3672, 3952, 4152, 4720, 4753, 4763], [-x - x ^ 2 * y ^ -1, 324, 1861, 1901, 1941, 1995, 2192, 2243, 3474, 3560, 3834, 6755, 7155], [-s * x * y ^ -1 - s * x ^ 2 * y ^ -2, 601, 965, 1880, 2035, 2120, 3472, 3632, 4004], [-s * x ^ 2 * y ^ -2 - s * x ^ 3 * y ^ -3, 3484], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 2165, 3723], [-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3, 3483], [s, 204, 1105, 1433, 1479, 1601, 1725, 2507, 2915, 3116, 3363, 4222, 4592, 5877, 6516, 7597, 7764], [x, 83, 247, 331, 372, 413, 579, 620, 661, 702, 743, 990, 1071, 1152, 1518, 1684, 1848, 1891, 1969, 2014, 2092, 2139, 2224, 2305, 2346, 2430, 2551, 2753, 2794, 3117, 3158, 3285, 3446, 3487, 3528, 3569, 3615, 3651, 3692, 3740, 3784, 3856, 3907, 3990, 4061, 4395, 4520, 4803, 5049, 5096, 5128, 5217, 5301, 5348, 5389, 5427, 5538, 5712, 5795, 5834, 6076, 6359, 6441, 6650, 6693, 6738, 6777, 6863, 6902, 6986, 7015, 7068, 7191, 7220, 7272, 7425, 7507, 7794], [y, 74, 1976, 2101, 2256, 2461, 3076, 3159, 3199, 3538, 3663, 3938, 4143, 4266, 4471, 4676, 4717, 4758, 4799, 5131, 5251, 5543, 5743, 6438, 6445, 6559, 6564, 6605, 7024, 7230, 7384, 7433, 7515, 7630, 7753, 7835], [s * x * y ^ -1, 1160, 4321, 5562, 5601, 6005, 6124], [((s - x) + 3 * s * x * y ^ -1 + 3 * s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3) - x ^ 2 * y ^ -1, 1867], [s + s * x ^ -1 * y, 35, 1075, 1275, 2641, 2841, 3045, 3273], [s + s * x * y ^ -1, 84, 353, 385, 625, 674, 705, 834, 841, 993, 1067, 1154, 1193, 1281, 1485, 1685, 2107, 2147, 2307, 2475, 2755, 2960, 3115, 3283, 3557, 3582, 3678, 3680, 3782, 3902, 4043, 4145, 4392, 7045, 7525, 7564, 7844, 7845, 7914, 7915], [x + y, 0, 41, 123, 125, 205, 287, 451, 475, 492, 507, 533, 779, 820, 827, 861, 902, 907, 943, 1073, 1107, 1230, 1235, 1271, 1273, 1312, 1435, 1445, 1558, 1599, 1600, 1723, 1763, 1764, 1856, 1896, 1928, 1929, 2051, 2052, 2056, 2102, 2174, 2379, 2382, 2502, 2584, 2622, 2625, 2666, 2667, 2830, 2871, 2912, 2952, 2953, 2994, 3043, 3085, 3112, 3241, 3364, 3404, 3405, 3556, 3585, 3662, 3676, 3815, 4020, 4142, 4184, 4185, 4225, 4305, 4307, 4430, 4433, 4553, 4594, 4634, 4635, 4841, 4882, 4923, 4964, 5005, 5169, 5456, 5497, 5661, 5907, 5948, 5989, 6112, 6194, 6235, 6276, 6317, 6399, 6484, 6485, 6664, 6710, 6744, 6795, 6810, 6824, 6870, 6933, 6950, 6984, 6993, 7097, 7115, 7138, 7144, 7190, 7193, 7302, 7343, 7350, 7464, 7465, 7466, 7548, 7595, 7670, 7671, 7673, 7712, 7876, 7917, 7958, 7999], [x + x ^ 2 * y ^ -1, 1204, 1849, 1892, 2361, 2472, 2761, 3873, 3960, 4320, 6985, 7594], [s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 1481, 1883, 3444], [s * x ^ 2 * y ^ -2 + s * x ^ 3 * y ^ -3, 2003], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 444, 3443, 3840], [s + 2 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2, 265, 314, 425, 554, 593, 641, 1121, 1907, 1952, 1987, 2027, 2275, 2760, 3462, 3523, 3622, 3643], [x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 764, 1955, 2161, 2272, 3513, 3720], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 3480], [s * x * y ^ -1 + 2 * s * x ^ 2 * y ^ -2 + 2 * s * x ^ 3 * y ^ -3 + s * x ^ 4 * y ^ -4, 1843], [((2s - x) + s * x ^ -1 * y + s * x * y ^ -1) - x ^ 2 * y ^ -1, 2045], [2x + y + x ^ 2 * y ^ -1, 85, 307, 355, 387, 547, 627, 707, 795, 995, 1195, 1683, 1902, 1923, 1982, 2043, 2142, 2182, 2302, 2752, 3284, 3465, 3785, 3825, 3905, 3993, 4033, 4353, 4394], [((((3s - x) + s * x ^ -1 * y + 3 * s * x * y ^ -1 + s * x ^ 2 * y ^ -2) - 2 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1925], [3x + y + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 267, 427, 595, 1862, 2022, 3625, 3753]]) * x ^ 0 * y ^ 0
            end
        f54(x, y) = begin
                return ExpandRep(5, 45, [[((((-8x - 2y) - 14 * x ^ 2 * y ^ -1) - 14 * x ^ 3 * y ^ -2) - 8 * x ^ 4 * y ^ -3) - 2 * x ^ 5 * y ^ -4, 1499], [(((((-6x - y) - 15 * x ^ 2 * y ^ -1) - 20 * x ^ 3 * y ^ -2) - 15 * x ^ 4 * y ^ -3) - 6 * x ^ 5 * y ^ -4) - x ^ 6 * y ^ -5, 1489], [((((-5x - y) - 10 * x ^ 2 * y ^ -1) - 10 * x ^ 3 * y ^ -2) - 5 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1504, 5674, 8014], [((((-5x - y) - 9 * x ^ 2 * y ^ -1) - 8 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1496], [(((-4x - y) - 7 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1620], [(((-4x - y) - 6 * x ^ 2 * y ^ -1) - 4 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1493, 1501, 1635, 5681, 5684, 5689, 5774, 8021, 8024, 8029], [((-4x - y) - 5 * x ^ 2 * y ^ -1) - 2 * x ^ 3 * y ^ -2, 5768], [(((-3x - y) - 4 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 139, 1049, 2849], [((-3x - y) - 3 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 364, 725, 1274, 1395, 1410, 1491, 1580, 1630, 1642, 1650, 2843, 5538, 5678, 5686, 5791, 5813, 5819, 8018, 8026, 8370, 8385], [((-2x - y) - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 146, 154, 1454, 1514, 1516, 5864, 6059], [(-2x - y) - x ^ 2 * y ^ -1, 371, 374, 379, 720, 740, 1041, 1064, 1268, 1417, 1425, 1447, 1467, 1575, 1595, 1655, 2866, 3579, 3700, 3970, 4045, 4151, 4770, 4785, 4839, 5009, 5022, 5452, 5558, 5625, 5635, 5766, 5836, 5857, 5879, 6037, 6044, 6053, 7388, 7674, 8380, 8392, 8400, 8550, 8565, 9691, 9694], [-x, 50, 101, 277, 425, 613, 789, 972, 1521, 1728, 2627, 3081, 3492, 3811, 3854, 4379, 4729, 5051, 5114, 5222, 5419, 5604, 5822, 6071, 6080, 6449, 7139, 8095, 8191, 8474, 8600, 9412, 9849], [-y, 640, 723, 1016, 1348, 1437, 1463, 1569, 1705, 2079, 2118, 2224, 2270, 2411, 2536, 2730, 2873, 3050, 3133, 3597, 3733, 3914, 4413, 4506, 4805, 5035, 5302, 5352, 5458, 5533, 5703, 6266, 6358, 6393, 6492, 6556, 6772, 6823, 6954, 7061, 7218, 7459, 7551, 7692, 8043, 8258, 8280, 8413, 8526, 8585, 8681, 8718, 8852, 9027, 9396, 9475, 9537, 9648], [(((-x - 4 * x ^ 2 * y ^ -1) - 6 * x ^ 3 * y ^ -2) - 4 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 1625, 7564], [((-x - 4 * x ^ 2 * y ^ -1) - 5 * x ^ 3 * y ^ -2) - 2 * x ^ 4 * y ^ -3, 2839, 5764], [((-x - 3 * x ^ 2 * y ^ -1) - 3 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 1400, 1640, 7571, 7574, 7579, 7969, 8375], [(-x - 2 * x ^ 2 * y ^ -1) - x ^ 3 * y ^ -2, 585, 1261, 1415, 1644, 2846, 2854, 3555, 3690, 3705, 3754, 3934, 4031, 4144, 4775, 4834, 5015, 5220, 5225, 5545, 5630, 5763, 5771, 5779, 5815, 5870, 5903, 6033, 7576, 7650, 7976, 7979, 7984, 8390, 8555, 9679, 9686], [(-(x ^ 2) * y ^ -1 - 2 * x ^ 3 * y ^ -2) - x ^ 4 * y ^ -3, 590, 1039, 1444, 3560, 3739, 3915, 3960, 4815, 4820, 4999, 5770, 5906, 6050, 7655], [(-(x ^ 3) * y ^ -2 - 2 * x ^ 4 * y ^ -3) - x ^ 5 * y ^ -4, 6035], [-x - y, 376, 627, 722, 1266, 1277, 1291, 1430, 1469, 1578, 1662, 1663, 3583, 3722, 3893, 4148, 4154, 4780, 4792, 4800, 5002, 5024, 5032, 5223, 5628, 5683, 5811, 5873, 7678, 8023, 8405, 8423, 8572, 8580, 9707], [-x - x ^ 2 * y ^ -1, 592, 609, 1062, 1269, 1441, 1641, 2851, 3570, 3720, 3759, 3788, 3790, 3873, 3939, 4034, 4141, 4334, 4790, 5564, 5566, 5645, 5776, 5777, 5799, 5877, 6042, 7117, 7394, 7566, 7589, 7665, 7973, 7981, 8570, 9419, 9689, 10042, 10045], [-(x ^ 2) * y ^ -1 - x ^ 3 * y ^ -2, 605, 1054, 1264, 1459, 1512, 3575, 3695, 3746, 3975, 4007, 5762, 5786, 5806, 6057, 7670], [-(x ^ 3) * y ^ -2 - x ^ 4 * y ^ -3, 3920, 5854], [(-x - y) - x ^ 2 * y ^ -1, 151], [x, 464, 552, 1067, 1192, 1789, 1837, 1886, 1921, 1964, 2024, 2025, 2162, 2431, 2756, 2884, 2930, 3203, 3309, 3390, 3543, 3622, 3681, 3753, 3949, 3997, 4046, 4193, 4330, 4666, 4878, 5200, 5571, 5641, 5742, 5798, 5871, 5968, 6017, 6217, 6574, 6624, 6666, 6910, 6995, 7080, 7174, 7317, 7351, 7480, 7603, 7635, 7727, 7777, 7941, 8000, 8104, 8882, 8944, 8974, 9054, 9138, 9204, 9255, 9335, 9556, 9598, 9685, 9748, 9957, 10021, 10041], [y, 0, 184, 226, 321, 395, 497, 690, 848, 874, 909, 1097, 1150, 1236, 1273, 1380, 1653, 2301, 2347, 2485, 2577, 2669, 2803, 2993, 3175, 3272, 3370, 3459, 4050, 4096, 4166, 4245, 4280, 4464, 4567, 4602, 4687, 4854, 4935, 4970, 5164, 5378, 5939, 6121, 6167, 6300, 6713, 6857, 7271, 7403, 7823, 7869, 7919, 8147, 8336, 8444, 8738, 8790, 9112, 9296, 9802, 9893, 9940, 10124], [x + y, 46, 92, 141, 170, 276, 370, 382, 390, 414, 644, 727, 728, 729, 736, 782, 966, 1078, 1196, 1288, 1334, 1426, 1461, 1472, 1584, 1601, 1610, 1656, 1748, 1794, 1840, 2163, 2393, 2439, 2623, 2761, 2853, 2877, 2899, 2945, 3083, 3313, 3359, 3405, 3446, 3451, 3497, 3586, 3589, 3635, 3696, 3719, 3727, 3910, 3954, 3966, 4000, 4049, 4142, 4162, 4418, 4507, 4510, 4694, 4740, 4778, 4786, 4832, 4846, 4849, 5016, 5062, 5227, 5384, 5430, 5448, 5451, 5476, 5568, 5614, 5631, 5693, 5712, 5713, 5752, 5802, 5818, 5918, 5936, 5982, 6028, 6305, 6351, 6397, 6581, 6627, 6719, 6903, 7087, 7179, 7363, 7383, 7409, 7501, 7639, 7681, 7684, 7731, 7961, 8007, 8033, 8052, 8053, 8099, 8192, 8284, 8376, 8399, 8422, 8558, 8566, 8606, 8744, 8928, 9066, 9158, 9250, 9342, 9526, 9572, 9618, 9700, 9710, 9756, 9848, 9986], [x + x ^ 2 * y ^ -1, 380, 739, 1605, 1637, 1898, 1900, 2860, 2863, 2870, 3430, 3760, 3769, 3896, 3945, 3987, 4026, 4155, 4643, 4645, 4825, 4845, 5004, 5221, 5231, 5563, 5567, 5636, 5644, 5788, 5795, 5829, 5859, 5898, 5907, 5932, 7118, 7595, 7975, 7987, 7995, 9697, 9702], [x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 155, 589, 1040, 1509, 3757, 3980, 4013, 4816, 5010, 5224, 5824, 5917, 7985], [x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6041], [x + y + x ^ 2 * y ^ -1, 1583], [x + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 135, 365, 724, 1035, 1260, 1280, 1440, 1445, 1492, 1590, 1622, 1647, 2857, 2859, 2865, 3559, 3709, 3765, 3925, 4140, 4145, 5551, 5629, 5767, 5782, 5784, 5790, 5922, 7570, 7582, 7590, 7654, 7965, 7980, 9690, 9695], [x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 140, 2855, 3750, 3964, 4995, 5780, 5805, 5810, 5850, 5915, 7580, 7970, 9680], [x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 5900], [x + 2 * x ^ 2 * y ^ -1 + 2 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 6038], [x + 3 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1265, 2835, 2850, 3694, 5690, 5760, 5775, 7560, 7575, 8030], [x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + 3 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 2840, 5765, 7565], [x + 4 * x ^ 2 * y ^ -1 + 6 * x ^ 3 * y ^ -2 + 4 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1505, 5675, 8015], [x + 5 * x ^ 2 * y ^ -1 + 10 * x ^ 3 * y ^ -2 + 10 * x ^ 4 * y ^ -3 + 5 * x ^ 5 * y ^ -4 + x ^ 6 * y ^ -5, 1490], [2x + y + x ^ 2 * y ^ -1, 157, 165, 360, 375, 591, 616, 721, 731, 734, 1284, 1403, 1411, 1527, 1528, 1576, 1582, 1597, 1626, 1649, 1651, 3563, 3717, 3946, 3989, 4781, 4784, 4789, 4823, 4829, 5228, 5234, 5548, 5633, 5673, 5705, 5773, 5902, 5909, 5924, 7658, 8013, 8045, 8386, 8561, 8564, 8569, 9705], [2x + y + 2 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 1045, 1409, 1589, 3569, 3929, 7664], [3x + y + 3 * x ^ 2 * y ^ -1 + x ^ 3 * y ^ -2, 150, 593, 1406, 1414, 1520, 1628, 1631, 1636, 3704, 3923, 3974, 4774, 5639, 5680, 5692, 5700, 8020, 8032, 8040, 8381, 8384, 8389, 8554], [3x + y + 4 * x ^ 2 * y ^ -1 + 3 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 599], [4x + y + 6 * x ^ 2 * y ^ -1 + 4 * x ^ 3 * y ^ -2 + x ^ 4 * y ^ -3, 1399, 1495, 1507, 1515, 1639, 5670, 5685, 8010, 8025, 8374], [5x + y + 10 * x ^ 2 * y ^ -1 + 10 * x ^ 3 * y ^ -2 + 5 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1500, 1624], [5x + y + 11 * x ^ 2 * y ^ -1 + 11 * x ^ 3 * y ^ -2 + 5 * x ^ 4 * y ^ -3 + x ^ 5 * y ^ -4, 1485], [7x + 2y + 10 * x ^ 2 * y ^ -1 + 7 * x ^ 3 * y ^ -2 + 2 * x ^ 4 * y ^ -3, 1634]]) * x ^ 0 * y ^ 0
            end
        f56(x, y) = begin
                return ExpandRep(5, 45, [[((-4 * x * y ^ 2 - 4 * x ^ 2 * y) - x ^ 3) - y ^ 3, 1533, 3783], [(-4 * x * y ^ 2 - 2 * x ^ 2 * y) - 2 * y ^ 3, 5535], [(-4 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - 2 * y ^ 4, 3915], [((-3 * x * y ^ 2 - 3 * x ^ 2 * y) - x ^ 3) - y ^ 3, 1549, 3292, 3799, 5542, 7853, 7921, 9653, 10013], [((-3 * x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - x ^ 3 * y) - y ^ 4, 3922, 5947], [((-3 * x * y ^ 4 - 3 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2) - y ^ 5, 6030], [(-3 * x * y - 2 * x ^ 2) - y ^ 2, 1713], [(-3 * x * y ^ 2 - 2 * x ^ 2 * y) - y ^ 3, 1858, 5583, 7654], [(-3 * x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - y ^ 4, 9990], [(-3 * x * y - x ^ 2) - 2 * y ^ 2, 9244], [((-2 * x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3) - y ^ 3, 7651], [-2 * x ^ 2 * y - x ^ 3, 1534], [(-2 * x * y - x ^ 2) - y ^ 2, 541, 551, 922, 991, 1001, 1238, 1596, 1729, 2656, 2836, 2846, 3287, 3291, 4726, 5267, 5541, 5646, 5683, 7665, 7696, 7706, 7787, 7934, 8025, 8911, 8921, 9228, 9657, 9823, 10017], [(-2 * x * y ^ 2 - x ^ 2 * y) - y ^ 3, 955, 1260, 1267, 2655, 3285, 3510, 3517, 3921, 5137, 5140, 5599, 5680, 5828, 5946, 7518, 7534, 7661, 7663, 7924, 7931, 7933, 7966, 7981, 8011, 8014, 8021, 8023, 9003, 9019, 9820, 10095], [(-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 4006, 4016, 5725, 5940, 7660, 7930, 7965, 8020, 9997, 10081, 10084, 10091, 10093], [(-2 * x * y ^ 4 - x ^ 2 * y ^ 3) - y ^ 5, 10090], [(((-2 * x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) - x ^ 4) - y ^ 4, 6031], [(-2 * x * y ^ 3 + x ^ 3 * y) - y ^ 4, 6034], [-1, 95, 510, 789, 1064, 1167, 2349, 2545, 2820, 3230, 3364, 3778, 4371, 4559, 5395, 5712, 6076, 6359, 6401, 8295, 8476, 8563, 9487, 9852], [-x, 370, 733, 971, 1008, 1634, 1648, 2308, 2395, 2883, 3029, 3064, 3864, 4779, 4787, 4908, 5787, 6630, 6918, 6921, 6932, 6953, 7774, 9753, 9980], [-y, 49, 663, 824, 1023, 1843, 2207, 2751, 3307, 4468, 4608, 4758, 4761, 5203, 5426, 5685, 6168, 6497, 7042, 7230, 7361, 7490, 7554, 7728, 8107, 8156, 8213, 8354, 8667, 8943, 9039, 9104, 9527, 9825], [-x * y, 912, 951, 1568, 1782, 2251, 2983, 2986, 3242, 3263, 4972, 5466, 5649, 8098, 9276, 9655], [-x * y ^ 2, 1357], [-(x ^ 2), 3444], [-(y ^ 2), 1176, 3927, 5143, 5958, 9051], [-(x ^ 2) * y, 1588, 5634], [((-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 3 * x ^ 3 * y) - x ^ 4, 908, 1447], [(-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y, 910], [((-x * y ^ 3 - 3 * x ^ 2 * y ^ 2) - 2 * x ^ 3 * y) - x ^ 4, 1440], [(-x * y ^ 2 - 2 * x ^ 2 * y) - x ^ 3, 3784, 3828, 3844, 4032, 6008, 7763, 9632, 10048], [(-x * y ^ 3 - 2 * x ^ 2 * y ^ 2) - x ^ 3 * y, 6053, 7523, 8068, 9008, 10045], [(-x * y ^ 4 - 2 * x ^ 2 * y ^ 3) - x ^ 3 * y ^ 2, 8065], [(-(x ^ 2) * y ^ 2 - 2 * x ^ 3 * y) - x ^ 4, 2933, 4028], [-x - y, 283, 418, 554, 1004, 1005, 1569, 2072, 2073, 2660, 2849, 3063, 3079, 4232, 4233, 5054, 5656, 5695, 7709, 7710, 8924, 8925, 9835, 10024], [-x * y - x ^ 2, 730, 1416, 1466, 1599, 1626, 1633, 1689, 1714, 1869, 2755, 2937, 2947, 3016, 3026, 3288, 3894, 3900, 4039, 4276, 5268, 5679, 5783, 6012, 6617, 6618, 6619, 6898, 7313, 7765, 7767, 7788, 7851, 7857, 8015, 8039, 9229, 9642, 9645, 9699, 9733, 9819, 9860, 9869, 9914, 9966, 9969, 10040, 10064, 10068], [-x * y - y ^ 2, 280, 415, 811, 821, 958, 994, 1266, 1866, 2745, 2752, 3516, 4048, 4465, 4729, 4738, 5001, 5041, 5136, 5146, 5288, 5618, 5673, 5681, 5832, 6668, 7171, 7537, 7544, 7576, 7632, 7664, 7683, 7686, 7699, 7708, 7808, 7935, 7953, 7956, 8024, 8043, 8914, 8923, 9022, 9029, 9061, 9091, 9101, 9283, 9286, 9696, 9813, 9821], [-x * y ^ 2 - x ^ 2 * y, 903, 1180, 1446, 1592, 1630, 1682, 1778, 1862, 2250, 2928, 2980, 3293, 3782, 3883, 3887, 4034, 4275, 5005, 5506, 5584, 5642, 6057, 6895, 7519, 7607, 7628, 7749, 7976, 8060, 8084, 8088, 9004, 9639, 9688, 9692, 9730, 9856, 9902, 9906, 9923, 9962, 9991, 10085, 10109], [-x * y ^ 2 - y ^ 3, 1170, 1177, 3917, 3919, 4019, 4735, 4995, 5130, 5728, 5731, 5942, 6044, 6063, 7705, 8920, 9045, 9052, 9280, 9999, 10094, 10113], [-x * y ^ 3 - x ^ 2 * y ^ 2, 7972], [-(x ^ 2) * y - x ^ 3, 3829, 7843, 7936, 9098, 10054], [-(x ^ 2) * y ^ 2 - x ^ 3 * y, 2935, 4958, 4960, 5497, 5985, 8074, 9683], [(-x * y - x ^ 2) - y ^ 2, 5051], [(-x * y ^ 2 - x ^ 2 * y) - x ^ 3, 9866], [(-x * y ^ 2 - x ^ 2 * y) - y ^ 3, 5002], [(-x * y ^ 3 - x ^ 2 * y ^ 2) - y ^ 4, 1855], [(-(x ^ 2) * y ^ 2 - x ^ 3 * y) - x ^ 4, 5490], [(-x * y ^ 3 - x ^ 2 * y ^ 2) + x ^ 3 * y + x ^ 4, 7928], [1, 560, 1254, 1744, 2075, 2766, 3087, 5026, 5060, 5165, 5577, 8054, 9259], [x ^ -1 * y, 3136], [x, 0, 138, 181, 322, 460, 598, 874, 1499, 1975, 2024, 2025, 2119, 2163, 2485, 2577, 3497, 3681, 3727, 4050, 4096, 4142, 4188, 4418, 4510, 4644, 4872, 5250, 5335, 5547, 5936, 6212, 6259, 6305, 6443, 6765, 6811, 6849, 7006, 7086, 7273, 7409, 7450, 7862, 7915, 8376, 8415, 8514, 8596, 8744, 8882, 8974, 9137, 9204, 9327, 9410, 9571, 9618, 9875], [y, 276, 368, 414, 736, 832, 1191, 1293, 1296, 1380, 1426, 1472, 1610, 1702, 1886, 2393, 2616, 2677, 2712, 2715, 2853, 2899, 2945, 3299, 3313, 3543, 3546, 3820, 3911, 3957, 4049, 4234, 4280, 4743, 4828, 4831, 4924, 5087, 5108, 5303, 5522, 5614, 5752, 5844, 6028, 6074, 6533, 6535, 6627, 6673, 6676, 7113, 7129, 7179, 7317, 7593, 7642, 7685, 7713, 7823, 7961, 8007, 8238, 8254, 8928, 9066, 9112, 9296, 9374, 9388, 9716, 9756, 9940, 10078, 10124], [x * y, 227, 686, 1097, 1328, 1711, 1915, 2437, 3161, 3392, 3584, 3626, 3785, 3998, 4327, 4691, 4964, 5269, 5879, 6120, 6577, 6711, 7789, 8695, 8779, 8828, 9795, 10028], [x * y ^ 2, 5451, 5581, 5987, 9958], [x * y ^ 3, 3880, 9685], [x ^ 2, 1216, 5764, 7294], [y ^ 2, 5973, 7980], [x ^ 2 * y, 1759, 3826, 5806, 7666], [x ^ 2 * y ^ 2, 1665, 5715], [((x * y ^ 2 - x ^ 2 * y) - x ^ 3) + y ^ 3, 8029], [((x * y ^ 3 - x ^ 2 * y ^ 2) - x ^ 3 * y) + y ^ 4, 10099], [x + y, 92, 184, 552, 562, 690, 966, 1012, 1058, 1104, 1244, 1374, 1518, 1564, 1656, 1737, 1794, 1932, 1978, 2071, 2117, 2301, 2304, 2439, 2680, 2847, 2857, 2991, 3037, 3083, 3175, 3290, 3321, 3405, 3451, 3589, 3635, 3773, 3814, 3859, 3865, 3901, 4231, 4326, 4648, 4694, 4786, 4878, 5016, 5062, 5151, 5154, 5246, 5338, 5521, 5550, 5560, 5568, 5571, 5798, 5845, 5890, 5982, 6025, 6121, 6213, 6581, 6719, 6857, 6903, 6949, 6995, 7087, 7170, 7271, 7455, 7575, 7777, 7869, 8099, 8422, 8468, 8606, 8698, 8790, 9158, 9250, 9252, 9342, 9434, 9572, 9802, 9894, 9986, 10032], [x * y + x ^ 2, 918, 1218, 1219, 1234, 1421, 1461, 2253, 2254, 2939, 3852, 4277, 4278, 5266, 5511, 5537, 5539, 5763, 5779, 6023, 6891, 7293, 7309, 7786, 9106, 9726, 9867, 9870, 9877], [x * y + y ^ 2, 270, 277, 405, 412, 543, 1273, 1367, 1871, 2070, 2295, 2610, 2617, 2702, 2703, 2704, 2838, 3259, 3296, 3523, 3809, 3854, 3940, 3951, 4230, 4645, 4727, 4728, 4731, 4825, 5147, 5284, 5546, 5607, 5741, 5745, 5834, 5843, 5954, 5955, 5968, 5976, 6014, 6072, 7159, 7542, 7564, 7635, 7668, 7671, 7672, 7804, 7859, 7938, 7990, 7995, 9027, 9234, 9366, 9373], [x * y ^ 2 + x ^ 2 * y, 550, 818, 820, 1401, 1531, 1710, 1758, 1774, 2663, 2845, 3781, 3876, 4043, 4951, 4961, 5048, 5050, 5265, 5507, 5641, 5677, 5809, 6042, 6068, 7163, 7528, 7568, 7656, 7785, 7846, 7974, 7982, 9013, 9053, 9278, 9817, 9919, 9951, 9961, 10041], [x * y ^ 2 + y ^ 3, 1270, 1851, 3295, 3520, 3926, 4027, 4041, 5545, 5732, 5944, 7622, 9370], [x * y ^ 3 + x ^ 2 * y ^ 2, 1395, 1530, 1672, 3780, 5445, 5452, 5580, 6041, 7650, 8061, 9945], [x * y ^ 3 + y ^ 4, 3925, 5950], [x ^ 2 * y + x ^ 3, 998, 3023, 3025, 5503, 5989, 7744, 7929, 7937, 8012, 8033], [x ^ 2 * y ^ 2 + x ^ 3 * y, 1405, 4007, 5455, 9865, 10082, 10103], [x * y ^ 3 + x ^ 2 * y ^ 2 + x ^ 3 * y, 1402], [x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3, 548, 1000, 2843, 2926, 2936, 3848, 3879, 5499, 6004, 6885, 6892, 7743, 7834, 7836, 9720, 9727, 9857, 9858, 9859, 10037, 10058], [x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + x ^ 3 * y, 1450, 1585, 3870, 6039, 6043, 6049, 7657, 7927, 7973, 8057, 8078, 9952, 9955, 10035, 10042], [x * y ^ 4 + 2 * x ^ 2 * y ^ 3 + x ^ 3 * y ^ 2, 4013, 4015, 6040, 8055, 8062], [x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 9863], [x * y ^ 2 + 3 * x ^ 2 * y + 2 * x ^ 3, 1453, 5988], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 5635], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + x ^ 4, 7830], [x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, 4024, 7837], [2 * x ^ 2 * y + x ^ 3, 9994], [2 * x * y + x ^ 2 + y ^ 2, 914, 1557, 1601, 1733, 2252, 2302, 2657, 2658, 3286, 3298, 3807, 5538, 5548, 5965, 7529, 9014, 9248], [2 * x * y ^ 2 + x ^ 2 * y + y ^ 3, 1581, 3928, 4017, 4732, 5603, 5631, 5670, 5808, 5824, 5941, 5951, 5953, 6048, 6055, 7538, 7624, 9023, 9633, 9681, 9691, 9810, 10003], [2 * x * y ^ 3 + x ^ 2 * y ^ 2 + y ^ 4, 10000], [2 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 3803], [2 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3, 7759], [2 * x ^ 2 * y ^ 2 + 3 * x ^ 3 * y + x ^ 4, 4009], [2 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y, 3877], [3 * x * y ^ 3 + 2 * x ^ 2 * y ^ 2 + y ^ 4, 1575, 5625], [3 * x * y ^ 2 + 2 * x ^ 2 * y + x ^ 3 + y ^ 3, 7516, 9001], [3 * x * y ^ 2 + 3 * x ^ 2 * y + x ^ 3 + y ^ 3, 901, 911, 1553, 7526, 7833, 7849, 9011], [3 * x * y ^ 3 + 3 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 1582, 1845, 5632, 9675], [3 * x * y ^ 3 + 5 * x ^ 2 * y ^ 2 + 2 * x ^ 3 * y + y ^ 4, 6033], [3 * x * y ^ 3 + 6 * x ^ 2 * y ^ 2 + 4 * x ^ 3 * y + x ^ 4 + y ^ 4, 4008], [4 * x * y ^ 2 + 4 * x ^ 2 * y + x ^ 3 + y ^ 3, 9649, 9993, 10009], [4 * x * y ^ 3 + 4 * x ^ 2 * y ^ 2 + x ^ 3 * y + y ^ 4, 1852, 9682]]) * x ^ 0 * y ^ 0
            end
        rep = [[f1, x], [f1, y], [f6, y, x, 1], [f6, x, y, -1], [f6, y, x, -1], [f6, x, y, 1], [f7, x, y], [f7, y, x], [f9, x, y], [f9, y, x], [f11, x, y, -1], [f11, x, y, 1], [f14, y, x], [f14, x, y], [f16, y, x], [f16, x, y], [f19, x, y, 1], [f19, y, x, 1], [f19, x, y, -1], [f19, y, x, -1], [f21, x, y], [f21, y, x], [f23, x, y], [f23, y, x], [f25, x, y], [f26, x, y], [f27, x, y, -1], [f27, y, x, 1], [f27, x, y, 1], [f27, y, x, -1], [f31, x, y, 1], [f31, y, x, 1], [f31, x, y, -1], [f31, y, x, -1], [f35, x, y, -1], [f35, x, y, 1], [f37, x, y], [f37, y, x], nothing, nothing, nothing, [f42, x, y, 1], [f42, y, x, 1], [f42, x, y, -1], [f42, y, x, -1], [f46, x, y], [f46, y, x], [f48, x, y, -1], [f48, x, y, 1], nothing, nothing, nothing, nothing, [f54, x, y], [f54, y, x], [f56, x, y], [f56, y, x], nothing, nothing]
        if rep[i] !== nothing
            return ApplyFunc((rep[i])[1], (rep[i])[2:length(rep[i])]) + 0 * x * y
        else
            return false
        end
    end)
chevieset(:G31, :Representation, function (i,)
        local r, f
        r = (chevieget(:G31, :HeckeRepresentation))(map((j->begin
                            [1 // 1, -1 // 1]
                        end), 1:5), [], i)
        if r != false
            return r
        end
        f = (j->begin
                    (chevieget(:G31, :Representation))(j)
                end)
        if i == 39
            return map(KroneckerProduct, f(9), f(11))
        elseif i == 40
            return -(f(39))
        elseif i == 41
            return map((x->begin
                            Matrix(SPerm(x))
                        end), [[2, 1, 6, 7, 8, 3, 4, 5, -14, -15, 12, 11, 18, -9, -10, -20, -21, 13, 22, -16, -17, 19, -25, 33, -23, 34, 35, 36, 31, -32, 29, -30, 24, 26, 27, 28], [-2, -1, -6, -5, -4, -3, 8, 7, 10, 9, 13, -18, 11, -15, -14, 19, 23, -12, 16, 22, 25, 20, 17, 26, 21, 24, -29, 30, -27, 28, -35, 36, -34, -33, -31, 32], [3, 6, 1, 9, 10, 2, 14, 15, 4, 5, 16, 20, -19, 7, 8, 11, 21, 22, -13, 12, 17, 18, 25, -28, 23, 30, 29, -24, 27, 26, 35, 34, 36, 32, 31, 33], [4, 8, 9, 1, 7, 15, 5, 2, 3, 14, 17, 20, 24, 10, 6, 21, 11, 27, 28, 12, 16, 29, 26, 13, 30, 23, 18, 19, 22, 25, 36, 34, 35, 32, 33, 31], [5, 8, 11, 7, 1, 12, 4, 2, 17, 16, 3, 6, 18, 21, 20, 10, 9, 13, 23, 15, 14, -25, 19, 27, -22, 28, 24, 26, -30, -29, 32, 31, 35, 36, 33, 34]])
        elseif i == 50
            return map(KroneckerProduct, f(3), f(15))
        elseif i == 51
            return -(f(50))
        elseif i == 52
            return conj(f(50))
        elseif i == 53
            return -(f(52))
        elseif i == 58
            return map(KroneckerProduct, f(3), f(25))
        elseif i == 59
            return conj(f(58))
        end
    end)
chevieset(:G31, :Invariants, [function (x, y, z, t)
            return 168 * t ^ 2 * x ^ 2 * y ^ 2 * z ^ 2 + 14 * t ^ 4 * x ^ 4 + 14 * t ^ 4 * y ^ 4 + 14 * t ^ 4 * z ^ 4 + 14 * x ^ 4 * y ^ 4 + 14 * x ^ 4 * z ^ 4 + 14 * y ^ 4 * z ^ 4 + t ^ 8 + x ^ 8 + y ^ 8 + z ^ 8
        end, function (x, y, z, t)
            return ((((((((((((((792 * t ^ 2 * x ^ 2 * y ^ 2 * z ^ 6 + 792 * t ^ 2 * x ^ 2 * y ^ 6 * z ^ 2 + 792 * t ^ 2 * x ^ 6 * y ^ 2 * z ^ 2 + 330 * t ^ 4 * x ^ 4 * y ^ 4 + 330 * t ^ 4 * x ^ 4 * z ^ 4 + 330 * t ^ 4 * y ^ 4 * z ^ 4 + 330 * x ^ 4 * y ^ 4 * z ^ 4) - 33 * t ^ 4 * x ^ 8) - 33 * t ^ 4 * y ^ 8) - 33 * t ^ 4 * z ^ 8) - 33 * x ^ 4 * y ^ 8) - 33 * x ^ 4 * z ^ 8) - 33 * y ^ 4 * z ^ 8) + 792 * t ^ 6 * x ^ 2 * y ^ 2 * z ^ 2) - 33 * t ^ 8 * x ^ 4) - 33 * t ^ 8 * y ^ 4) - 33 * t ^ 8 * z ^ 4) - 33 * x ^ 8 * y ^ 4) - 33 * x ^ 8 * z ^ 4) - 33 * y ^ 8 * z ^ 4) + t ^ 12 + x ^ 12 + y ^ 12 + z ^ 12
        end, function (x, y, z, t)
            return (((((((((((((((((((((((-(t ^ 2) * x ^ 2 * y ^ 2 * z ^ 14 + t ^ 2 * x ^ 2 * y ^ 6 * z ^ 10 + t ^ 2 * x ^ 2 * y ^ 10 * z ^ 6) - t ^ 2 * x ^ 2 * y ^ 14 * z ^ 2) + t ^ 2 * x ^ 6 * y ^ 2 * z ^ 10 + 14 * t ^ 2 * x ^ 6 * y ^ 6 * z ^ 6 + t ^ 2 * x ^ 6 * y ^ 10 * z ^ 2 + t ^ 2 * x ^ 10 * y ^ 2 * z ^ 6 + t ^ 2 * x ^ 10 * y ^ 6 * z ^ 2) - t ^ 2 * x ^ 14 * y ^ 2 * z ^ 2) - 13 * t ^ 4 * x ^ 4 * y ^ 4 * z ^ 8) - 13 * t ^ 4 * x ^ 4 * y ^ 8 * z ^ 4) + t ^ 4 * x ^ 4 * y ^ 12 + t ^ 4 * x ^ 4 * z ^ 12 + t ^ 4 * y ^ 4 * z ^ 12 + x ^ 4 * y ^ 4 * z ^ 12) - 13 * t ^ 4 * x ^ 8 * y ^ 4 * z ^ 4) - 2 * t ^ 4 * x ^ 8 * y ^ 8) - 2 * t ^ 4 * x ^ 8 * z ^ 8) - 2 * t ^ 4 * y ^ 8 * z ^ 8) - 2 * x ^ 4 * y ^ 8 * z ^ 8) + t ^ 4 * x ^ 12 * y ^ 4 + t ^ 4 * x ^ 12 * z ^ 4 + t ^ 4 * y ^ 12 * z ^ 4 + x ^ 4 * y ^ 12 * z ^ 4 + t ^ 6 * x ^ 2 * y ^ 2 * z ^ 10 + 14 * t ^ 6 * x ^ 2 * y ^ 6 * z ^ 6 + t ^ 6 * x ^ 2 * y ^ 10 * z ^ 2 + 14 * t ^ 6 * x ^ 6 * y ^ 2 * z ^ 6 + 14 * t ^ 6 * x ^ 6 * y ^ 6 * z ^ 2 + t ^ 6 * x ^ 10 * y ^ 2 * z ^ 2) - 13 * t ^ 8 * x ^ 4 * y ^ 4 * z ^ 4) - 2 * t ^ 8 * x ^ 4 * y ^ 8) - 2 * t ^ 8 * x ^ 4 * z ^ 8) - 2 * t ^ 8 * y ^ 4 * z ^ 8) - 2 * x ^ 8 * y ^ 4 * z ^ 8) - 2 * t ^ 8 * x ^ 8 * y ^ 4) - 2 * t ^ 8 * x ^ 8 * z ^ 4) - 2 * t ^ 8 * y ^ 8 * z ^ 4) - 2 * x ^ 8 * y ^ 8 * z ^ 4) + t ^ 10 * x ^ 2 * y ^ 2 * z ^ 6 + t ^ 10 * x ^ 2 * y ^ 6 * z ^ 2 + t ^ 10 * x ^ 6 * y ^ 2 * z ^ 2 + t ^ 12 * x ^ 4 * y ^ 4 + t ^ 12 * x ^ 4 * z ^ 4 + t ^ 12 * y ^ 4 * z ^ 4 + x ^ 12 * y ^ 4 * z ^ 4) - t ^ 14 * x ^ 2 * y ^ 2 * z ^ 2
        end, function (x, y, z, t)
            return (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((t ^ 2 * x ^ 2 * y ^ 2 * z ^ 18 - 12 * t ^ 2 * x ^ 2 * y ^ 6 * z ^ 14) + 22 * t ^ 2 * x ^ 2 * y ^ 10 * z ^ 10) - 12 * t ^ 2 * x ^ 2 * y ^ 14 * z ^ 6) + t ^ 2 * x ^ 2 * y ^ 18 * z ^ 2) - 12 * t ^ 2 * x ^ 6 * y ^ 2 * z ^ 14) - 52 * t ^ 2 * x ^ 6 * y ^ 6 * z ^ 10) - 52 * t ^ 2 * x ^ 6 * y ^ 10 * z ^ 6) - 12 * t ^ 2 * x ^ 6 * y ^ 14 * z ^ 2) + 22 * t ^ 2 * x ^ 10 * y ^ 2 * z ^ 10) - 52 * t ^ 2 * x ^ 10 * y ^ 6 * z ^ 6) + 22 * t ^ 2 * x ^ 10 * y ^ 10 * z ^ 2) - 12 * t ^ 2 * x ^ 14 * y ^ 2 * z ^ 6) - 12 * t ^ 2 * x ^ 14 * y ^ 6 * z ^ 2) + t ^ 2 * x ^ 18 * y ^ 2 * z ^ 2 + 76 * t ^ 4 * x ^ 4 * y ^ 4 * z ^ 12 + 36 * t ^ 4 * x ^ 4 * y ^ 8 * z ^ 8 + 76 * t ^ 4 * x ^ 4 * y ^ 12 * z ^ 4 + 2 * t ^ 4 * x ^ 4 * y ^ 16 + 2 * t ^ 4 * x ^ 4 * z ^ 16 + 2 * t ^ 4 * y ^ 4 * z ^ 16 + 2 * x ^ 4 * y ^ 4 * z ^ 16 + 36 * t ^ 4 * x ^ 8 * y ^ 4 * z ^ 8 + 36 * t ^ 4 * x ^ 8 * y ^ 8 * z ^ 4) - 2 * t ^ 4 * x ^ 8 * y ^ 12) - 2 * t ^ 4 * x ^ 8 * z ^ 12) - 2 * t ^ 4 * y ^ 8 * z ^ 12) - 2 * x ^ 4 * y ^ 8 * z ^ 12) + 76 * t ^ 4 * x ^ 12 * y ^ 4 * z ^ 4) - 2 * t ^ 4 * x ^ 12 * y ^ 8) - 2 * t ^ 4 * x ^ 12 * z ^ 8) - 2 * t ^ 4 * y ^ 12 * z ^ 8) - 2 * x ^ 4 * y ^ 12 * z ^ 8) + 2 * t ^ 4 * x ^ 16 * y ^ 4 + 2 * t ^ 4 * x ^ 16 * z ^ 4 + 2 * t ^ 4 * y ^ 16 * z ^ 4 + 2 * x ^ 4 * y ^ 16 * z ^ 4) - 12 * t ^ 6 * x ^ 2 * y ^ 2 * z ^ 14) - 52 * t ^ 6 * x ^ 2 * y ^ 6 * z ^ 10) - 52 * t ^ 6 * x ^ 2 * y ^ 10 * z ^ 6) - 12 * t ^ 6 * x ^ 2 * y ^ 14 * z ^ 2) - 52 * t ^ 6 * x ^ 6 * y ^ 2 * z ^ 10) - 8 * t ^ 6 * x ^ 6 * y ^ 6 * z ^ 6) - 52 * t ^ 6 * x ^ 6 * y ^ 10 * z ^ 2) - 52 * t ^ 6 * x ^ 10 * y ^ 2 * z ^ 6) - 52 * t ^ 6 * x ^ 10 * y ^ 6 * z ^ 2) - 12 * t ^ 6 * x ^ 14 * y ^ 2 * z ^ 2) + 36 * t ^ 8 * x ^ 4 * y ^ 4 * z ^ 8 + 36 * t ^ 8 * x ^ 4 * y ^ 8 * z ^ 4) - 2 * t ^ 8 * x ^ 4 * y ^ 12) - 2 * t ^ 8 * x ^ 4 * z ^ 12) - 2 * t ^ 8 * y ^ 4 * z ^ 12) - 2 * x ^ 8 * y ^ 4 * z ^ 12) + 36 * t ^ 8 * x ^ 8 * y ^ 4 * z ^ 4 + 36 * t ^ 8 * x ^ 8 * y ^ 8 + 36 * t ^ 8 * x ^ 8 * z ^ 8 + 36 * t ^ 8 * y ^ 8 * z ^ 8 + 36 * x ^ 8 * y ^ 8 * z ^ 8) - 2 * t ^ 8 * x ^ 12 * y ^ 4) - 2 * t ^ 8 * x ^ 12 * z ^ 4) - 2 * t ^ 8 * y ^ 12 * z ^ 4) - 2 * x ^ 8 * y ^ 12 * z ^ 4) + 22 * t ^ 10 * x ^ 2 * y ^ 2 * z ^ 10) - 52 * t ^ 10 * x ^ 2 * y ^ 6 * z ^ 6) + 22 * t ^ 10 * x ^ 2 * y ^ 10 * z ^ 2) - 52 * t ^ 10 * x ^ 6 * y ^ 2 * z ^ 6) - 52 * t ^ 10 * x ^ 6 * y ^ 6 * z ^ 2) + 22 * t ^ 10 * x ^ 10 * y ^ 2 * z ^ 2 + 76 * t ^ 12 * x ^ 4 * y ^ 4 * z ^ 4) - 2 * t ^ 12 * x ^ 4 * y ^ 8) - 2 * t ^ 12 * x ^ 4 * z ^ 8) - 2 * t ^ 12 * y ^ 4 * z ^ 8) - 2 * x ^ 12 * y ^ 4 * z ^ 8) - 2 * t ^ 12 * x ^ 8 * y ^ 4) - 2 * t ^ 12 * x ^ 8 * z ^ 4) - 2 * t ^ 12 * y ^ 8 * z ^ 4) - 2 * x ^ 12 * y ^ 8 * z ^ 4) - 12 * t ^ 14 * x ^ 2 * y ^ 2 * z ^ 6) - 12 * t ^ 14 * x ^ 2 * y ^ 6 * z ^ 2) - 12 * t ^ 14 * x ^ 6 * y ^ 2 * z ^ 2) + 2 * t ^ 16 * x ^ 4 * y ^ 4 + 2 * t ^ 16 * x ^ 4 * z ^ 4 + 2 * t ^ 16 * y ^ 4 * z ^ 4 + 2 * x ^ 16 * y ^ 4 * z ^ 4 + t ^ 18 * x ^ 2 * y ^ 2 * z ^ 2
        end])
chevieset(:G31, :BasicDerivations, function ()
        return function (x, y, z, t)
                return [[8x, 12 * t * y, 25920z + 88 // 5 * x * y, 24t - 1 // 135 * y ^ 2], [12y, 18 * t * x ^ 2 - 97200 * z ^ 2, -46656t + 12 * y ^ 2 + 72 // 5 * x ^ 3, -42 * x * z - 1 // 90 * x ^ 2 * y], [25920z + 20 * x * y, ((12 * t * y ^ 2 - 19440 * x * z ^ 2) + 18 * t * x ^ 3) - 46656 * t ^ 2, -264384 // 5 * t * x + 20736 * y * z + 148 // 5 * x * y ^ 2 + 72 // 5 * x ^ 4, ((144 // 5 * t * y - 18 * x ^ 2 * z) - 1 // 135 * y ^ 3) - 1 // 90 * x ^ 3 * y], [24t, -42 * t * x * z - 60 * y * z ^ 2, -48 // 5 * x ^ 2 * z, 1 // 135 * x * y * z + 1 // 54 * t * x ^ 2 + 20 * z ^ 2]]
            end
    end)
chevieset(:G31, :Discriminant, function ()
        return function (x, y, z, t)
                return (((((((((((((((-3 * t * x * y ^ 4 * z ^ 2 + 43740000 * x * y * z ^ 5 + 48114000 * t * x ^ 2 * z ^ 4 + 61560 * t * x ^ 3 * y * z ^ 3 + 16200 * t * y ^ 3 * z ^ 3 + 6 * t * x ^ 4 * y ^ 2 * z ^ 2) - 3 * t * x ^ 7 * z ^ 2) + 22680 * t ^ 2 * x * y ^ 2 * z ^ 2) - 34992000 * t ^ 2 * y * z ^ 3) + 32400 * x ^ 2 * y ^ 2 * z ^ 4 + 23976 * t ^ 2 * x ^ 4 * z ^ 2) - 62985600 * t ^ 3 * x * z ^ 2) - 15552 * t ^ 3 * x ^ 2 * y * z) - 2 * t ^ 3 * x ^ 3 * y ^ 2) + 4 * x ^ 3 * y ^ 3 * z ^ 3 + t ^ 3 * y ^ 4 + t ^ 3 * x ^ 6) - 7776 * t ^ 4 * y ^ 2) - 7776 * t ^ 4 * x ^ 3) + 15116544 * t ^ 5) - 2 * y ^ 5 * z ^ 3) - 1296 * x ^ 5 * z ^ 4) + 15746400000 * z ^ 6) - 2 * x ^ 6 * y * z ^ 3
            end
    end)
