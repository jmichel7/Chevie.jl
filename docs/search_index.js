var documenterSearchIndex = {"docs":
[{"location":"index.html#Chevie","page":"Chevie","title":"Chevie","text":"","category":"section"},{"location":"index.html","page":"Chevie","title":"Chevie","text":"Chevie","category":"page"},{"location":"index.html#Chevie","page":"Chevie","title":"Chevie","text":"This is my attempt to port the Chevie package from GAP3 to Julia. I started this  project at the end of  2018 and it is still  in flux so some function names or interfaces may still change. Pull requests and issues are welcome.\n\nI  have implemented the  GAP functionality (infrastructure)  needed to make Chevie  work.  I  have  already  registered  most of this infrastructure as separate  packages; the  following packages  are loaded  and re-exported so that  their functionality is automatically available when you use Chevie. In other words, Chevie is a meta-package for the following packages:\n\n(univariate) LaurentPolynomials (and rational fractions)\n(multivariate) PuiseuxPolynomials (and rational fractions when there are no fractional exponents)\nCyclotomicNumbers(elements of cyclotomic fields)\nModuleElts (elements of a free module over some ring)\nCombinat (combinatorics and some basic number theory)\nPermGroups (permutations, groups, permutations groups. It contains the modules Perms and Groups which could be separate packages)\nSignedPerms (signed permutations)\nMatInt (Integer matrices and lattices)\nCycPols (cyclotomic polynomials)\nGenLinearAlgebra (linear algebra on any field/ring)\nFinitePosets (finite posets)\nFiniteFields (finite fields)\nGroupPresentations (presentations of groups, and groups defined by generators and relations)\nUsingMerge (Automatically compose several packages)\n\nHave  a look at the  documentation of the above  packages to see how to use their   features.  \n\nI  have implemented  some other  infrastructure which  currently resides in Chevie but may eventually become separate packages:\n\nfactorizing polynomials over finite fields (module FFfac)\nfactorizing polynomials over the rationals (module Fact)\nNumber fields which are subfields of the Cyclotomics (module Nf)\n\nFor permutation groups I have often replaced GAP's sophisticated algorithms with  naive  but  easy-to-write  methods  suitable  only  for  small groups (sufficient  for the rest of  the package but perhaps  not for your needs). Otherwise  the infrastructure code  is often competitive  with GAP, despite using  much less code (often  100 lines of Julia  replace 1000 lines of C); and I am sure it could be optimised better than I did. Comments on code and design  are welcome. For functions that are too inefficient or difficult to implement (such as character tables of arbitrary groups), Chevie uses the GAP  package  as  an  extension.  This  means  that if you have the GAP package  installed,  Chevie  will  automatically  call GAP to implement these functions. \n\nFunctions  in the  Chevie.jl package  are often  10 times faster than the equivalent functions in GAP3/Chevie (after the maddeningly long compilation time on the first run ‚Äì- Julia's TTFP).\n\nThe  Chevie  package  currently  contains  about  95%  of the GAP3 Chevie functionality.  If you  are a  user of  GAP3/Chevie, the gap function can help  you to  find the  equivalent functionality  in Chevie.jl  to a Gap3 function:  it takes a string and  gives you Julia translations of functions in Gap3 that match that string.\n\njulia> gap(\"words\")\nCharRepresentationWords  =>  traces_words_mats\nCoxeterWords(W[,l])      =>  word.(Ref(W),elements(W[,l]))\nGarsideWords             =>  elements\n\nYou can then access online help for the functions you have found.\n\nThe  port to Julia is not complete in the sense that 80% of the code is the data library from Chevie, which was automatically ported by a transpiler so its  code is \"strange\".  When the need  to maintain the  GAP3 and Julia versions  simultaneously subsides,  I will  do a  proper translation of the data library, which should give an additional speed boost.\n\nInstalling\n\nThis is a registered package that can be installed/upgraded in the standard way.  For Julia newbies,  we will remind  you what this  is. To install, do this at the REPL command line:\n\nenter package mode with ]\ndo the command\n\n(@v1.10) pkg> add Chevie\n\nexit package mode with backspace and then do\n\njulia> using Chevie\n\nand you are set up. For first help, type \"?Chevie\".\n\nTo update later to the latest version, do\n\n(@v1.10) pkg> update\n\nChevie.jl requires julia 1.10 or later. \n\n\n\n\n\n","category":"module"},{"location":"index.html","page":"Chevie","title":"Chevie","text":"Chevie uses its rich total infrastructure to provide extensions to several of its infrastructure packages.","category":"page"},{"location":"index.html#Extensions-to-Laurent-and-Puiseux-polynomials","page":"Chevie","title":"Extensions to Laurent and Puiseux polynomials","text":"","category":"section"},{"location":"index.html","page":"Chevie","title":"Chevie","text":"FFfac.factor(::Pol{FFE{p}}, Any) where p\nFact.factor(::Pol{T}) where T<:Union{Integer, Rational{<:Integer}}\nfactor(::Mvp{T, N}) where {T, N}","category":"page"},{"location":"index.html#Primes.factor-Union{Tuple{p}, Tuple{Pol{FFE{p}}, Any}} where p","page":"Chevie","title":"Primes.factor","text":"factor(f::Pol{FFE{p}}[, F])\n\nGiven  f a polynomial  over a finite  field of characteristic p, factor f,  by default over the  field of its coefficients,  or if specified over the field F. The result is a Primes.Factorization{Pol{FFE{p}}}.\n\njulia> @Pol q\nPol{Int64}: q\n\njulia> f=q^3*(q^4-1)^2*Z(3)^0\nPol{FFE{3}}: q¬π¬π+q‚Å∑+q¬≥\n\njulia> factor(f)\n(q¬≤+1)¬≤ * (q+1)¬≤ * (q-1)¬≤ * q¬≥\n\njulia> factor(f,GF(9))\n(q+1)¬≤ * (q-1)¬≤ * (q+Z‚Çâ¬≤)¬≤ * (q+Z‚Çâ‚Å∂)¬≤ * q¬≥\n\n\n\n\n\n","category":"method"},{"location":"index.html#Primes.factor-Union{Tuple{Pol{T}}, Tuple{T}} where T<:Union{Integer, Rational}","page":"Chevie","title":"Primes.factor","text":"factor(f::Pol{<:Union{Integer,Rational{<:Integer}}})\n\nFactor f over the rationals. The result is a Primes.Factorization{typeof(f)}.\n\njulia> factor(Pol(:q)^24-1)\n(q-1) * (q¬≤-q+1) * (q‚Å¥-q¬≤+1) * (q‚Å∏-q‚Å¥+1) * (q‚Å¥+1) * (q¬≤+1) * (q+1) * (q¬≤+q+1)\n\n\n\n\n\n","category":"method"},{"location":"index.html#Primes.factor-Union{Tuple{Mvp{T, N}}, Tuple{N}, Tuple{T}} where {T, N}","page":"Chevie","title":"Primes.factor","text":"factor(p::Mvp)\n\np  should be of degree <=2 thus  represent a quadratic form. The function returns  a list  of two  linear forms  of which  p is the product if such forms exist, otherwise it returns [p].\n\njulia> @Mvp x,y\n\njulia> factor(x^2-y^2+x+3y-2)\n2-element Vector{Mvp{Int64, Int64}}:\n x-y+2\n x+y-1\n\njulia> factor(x^2+x+1)\n2-element Vector{Mvp{Cyc{Int64}, Int64}}:\n x-Œ∂‚ÇÉ\n x-Œ∂‚ÇÉ¬≤\n\njulia> factor(x*y-1)\n1-element Vector{Mvp{Int64, Int64}}:\n xy-1\n\n\n\n\n\n","category":"method"},{"location":"index.html#Arithmetic-and-finite-fields","page":"Chevie","title":"Arithmetic and finite fields","text":"","category":"section"},{"location":"index.html","page":"Chevie","title":"Chevie","text":"LaurentPolynomials.valuation(::Integer,::Integer)\nFiniteFields.FFE{p}(Cyc)where p","category":"page"},{"location":"index.html#LaurentPolynomials.valuation-Tuple{Integer, Integer}","page":"Chevie","title":"LaurentPolynomials.valuation","text":"valuation(c::Union{Integer,Rational{<:Integer},p::Integer)  p-adic  valuation of c (largest  power of p which  divides c; for a Rational, valuation of the numerator minus that of the denominator).\n\njulia> valuation.(24,(2,3,5))\n(3, 1, 0)\n\n\n\n\n\n","category":"method"},{"location":"index.html#FiniteFields.FFE-Union{Tuple{Any}, Tuple{p}} where p","page":"Chevie","title":"FiniteFields.FFE","text":"FFE{p}(z::Cyc)  where z is  a p-integral cyclotomic  number (that is, z  times some number prime  to p is a  cyclotomic integer), returns the reduction  of z mod.  p, an element  of some extension  ùîΩ_{p ≥} of the prime field ùîΩ‚Çö.\n\njulia> FFE{3}(E(7))\nZ‚Çá‚ÇÇ‚Çâ¬π‚Å∞‚Å¥\n\n\n\n\n\n","category":"method"},{"location":"index.html#Extensions-to-groups","page":"Chevie","title":"Extensions to groups","text":"","category":"section"},{"location":"index.html","page":"Chevie","title":"Chevie","text":"abelian_gens\nabelian_invariants\nCombinat.blocks(::Group,::Integer)","category":"page"},{"location":"index.html#Chevie.Tools.abelian_gens","page":"Chevie","title":"Chevie.Tools.abelian_gens","text":"abelian_gens(A)\n\nA  should be an abelian group or the list of its generators. Such a group has  a unique decomposition up to isomorphism as a product of cyclic groups C(n‚ÇÅ)√ó‚Ä¶√óC(n‚Çñ)  where C(n·µ¢)  is a  cyclic group  of order  n·µ¢ and n·µ¢ divides  n·µ¢‚Çä‚ÇÅ. The function returns a list  of generators for each of the C(n·µ¢).\n\njulia> abelian_gens([Perm(1,2),Perm(3,4,5),Perm(6,7)])\n2-element Vector{Perm{Int16}}:\n (6,7)\n (1,2)(3,5,4)(6,7)\n\n\n\n\n\n","category":"function"},{"location":"index.html#Chevie.Tools.abelian_invariants","page":"Chevie","title":"Chevie.Tools.abelian_invariants","text":"abelian_invariants(G::Group )\n\nG  should be an abelian group. Such a group has a unique decomposition up to  isomorphism as a product of cyclic groups C(n‚ÇÅ)√ó‚Ä¶√óC(n‚Çñ) where C(n·µ¢) is  a cyclic  group of  order n·µ¢  and n·µ¢  divides n·µ¢‚Çä‚ÇÅ.  The function returns the list n‚ÇÅ,‚Ä¶,n‚Çñ.\n\njulia> abelian_invariants(Group(Perm(1,2),Perm(3,4,5),Perm(6,7)))\n2-element Vector{Int64}:\n 2\n 6\n\n\n\n\n\n","category":"function"},{"location":"index.html#Combinat.blocks-Tuple{Group, Integer}","page":"Chevie","title":"Combinat.blocks","text":"blocks(G::Group,p::Integer)\n\nLet  p be a prime. This function returns the partition of the irreducible characters  of G  in p-blocks,  represented by  the list  of indices of irreducibles characters in each block.\n\njulia> W=coxsym(5)\nùîñ ‚ÇÖ\n\njulia> blocks(W,2)\n2-element Vector{Vector{Int64}}:\n [1, 3, 4, 5, 7]\n [2, 6]\n\njulia> blocks(W,3)\n3-element Vector{Vector{Int64}}:\n [1, 5, 6]\n [2, 3, 7]\n [4]\n\njulia> blocks(W,7)\n7-element Vector{Vector{Int64}}:\n [1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [7]\n\n\n\n\n\n","category":"method"},{"location":"index.html#Extensions-to-linear-algebra","page":"Chevie","title":"Extensions to linear algebra","text":"","category":"section"},{"location":"index.html","page":"Chevie","title":"Chevie","text":"eigmat","category":"page"},{"location":"index.html#Chevie.Tools2.eigmat","page":"Chevie","title":"Chevie.Tools2.eigmat","text":"eigmat(m::Matrix) eigenvalues of finite order of m, as a Vector{Root1}\n\n\n\n\n\n","category":"function"},{"location":"index.html#Useful-macros","page":"Chevie","title":"Useful macros","text":"","category":"section"},{"location":"index.html","page":"Chevie","title":"Chevie","text":"@forward","category":"page"},{"location":"index.html#Chevie.Util.@forward","page":"Chevie","title":"Chevie.Util.@forward","text":"@forward T.f f1,f2,...\n\nis a macro which delegates definitions. The above generates \n\nf1(a::T,args...)=f1(a.f,args...)\nf2(a::T,args...)=f2(a.f,args...)\n...\n\n\n\n\n\n","category":"macro"},{"location":"semisimple.html#Reductive-groups,-semisimple-elements","page":"Reductive groups, semisimple elements","title":"Reductive groups, semisimple elements","text":"","category":"section"},{"location":"semisimple.html","page":"Reductive groups, semisimple elements","title":"Reductive groups, semisimple elements","text":"Pages=[\"semisimple.md\"]","category":"page"},{"location":"semisimple.html","page":"Reductive groups, semisimple elements","title":"Reductive groups, semisimple elements","text":"Semisimple\nSubTorus\nfundamental_group\nintermediate_group\nquasi_isolated_reps(::FiniteCoxeterGroup)\nisisolated\ntorsion_subgroup\nalgebraic_center\nweightinfo\nweights\ncoweights\ncentralizer(::FiniteCoxeterGroup,::SemisimpleElement)\nsemisimple_centralizer_representatives\nstructure_rational_points_connected_centre","category":"page"},{"location":"semisimple.html#Chevie.Semisimple","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple","text":"Algebraic groups and semi-simple elements\n\nLet  us fix an  algebraically closed field  K and let  ùêÜ be a connected reductive  algebraic group over K. Let ùêì be a maximal torus of ùêÜ, let X(ùêì)  be the  character group  of ùêì  (resp. Y(ùêì)  the dual lattice of one-parameter  subgroups  of  ùêì)  and  Œ¶  (resp  Œ¶^) the roots (resp. coroots) of ùêÜ with respect to ùêì.\n\nThen  ùêÜ is  determined up  to isomorphism  by the  root datum (X(ùêì),Œ¶, Y(ùêì),Œ¶^).  In algebraic terms, this consists  in giving a free ‚Ñ§-lattice X=X(ùêì) of dimension the rank of ùêì (which is also called the rank of ùêÜ),  and a root system Œ¶ ‚äÇ X,  and similarly giving the dual roots Œ¶^‚äÇ Y=Y(ùêì).\n\nThis  is obtained  by a  slight generalisation  of our  setup for a Coxeter group W. This time we assume that the canonical basis of the vector space V  on which W  acts is a  ‚Ñ§-basis of X,  and Œ¶ is  specified by a matrix  simpleroots(W) whose rows are the  simple roots expressed in this basis  of X. Similarly  Œ¶^ is described  by a matrix simplecoroots(W) whose  rows are the simple  coroots in the basis  of Y dual to the chosen basis of X. The duality pairing between X and Y is the canonical one, that  is  the  pairing  between  vectors  x‚àà  X  and  y‚àà  Y is given by transpose(x)*y. Thus, we must have the relation simplecoroots(W)*permutedims(simpleroots(W))=cartan(W).\n\nWe  get this by using the function rootdatum, whose arguments are the two matrices simpleroots(W) and simplecoroots(W) described above. The roots need not generate V, so the matrices need not be square. For example, the root datum of the linear group of rank 3 can be obtained as:\n\njulia> W=rootdatum([-1 1 0;0 -1 1],[-1 1 0;0 -1 1])\nA‚ÇÇŒ¶‚ÇÅ\n\njulia> reflrep(W,W(1))\n3√ó3 Matrix{Int64}:\n 0  1  0\n 1  0  0\n 0  0  1\n\nhere  the  Weyl  group  is  the  symmetric  group  on  3  letters acting by permutation of the basis of X. The dimension of X, size(simpleroots(W),2),  is the rank and  the dimension of the subspace generated   by   the   roots,   size(simpleroots(W),1),   is  called  the semi-simple rank. In the example the rank is 3 and the semisimple rank is\n\n\n\nThe  default form  W=coxgroup(:A,2) defines  the adjoint  algebraic group (the group in its isogeny class with a trivial centre). In this case Œ¶ is a   basis  of  X,   so  simpleroots(W)  is   the  identity  matrix  and simplecoroots(W) is the Cartan matrix cartan(W) of the root system.\n\nThe   form  coxgroup(:A,2,sc=true)   constructs  the   semisimple  simply connected  algebraic  group,  where  simpleroots(W)  is the transposed of cartan(W) and simplecoroots(W) is the identity matrix.\n\nAn  extreme form of root data can  be specified more conveniently: when W is  the trivial coxgroup() (in this case ùêÜ is a torus), the root datum has  no roots, thus  is entirely determined  by the rank  r. The function torus(r)  constructs  such  a  root  datum  (it could be also obtained by giving two 0√ór matrices to rootdatum).\n\nFinally,  the rootdatum function also understands some familiar names for the  algebraic groups for which it gives the results that could be obtained by giving the appropriate simpleroots(W) and simplecoroots(W) matrices:\n\njulia> rootdatum(:gl,3)   # same as the previous example\ngl‚ÇÉ\n\nThe types of root data which are understood are  :gl, :pgl, :sl, :slmod, :tgl :sp, :csp, :psp, :so, :pso, :cso, :halfspin,    :gpin, :spin, :E6, :E6sc, :CE6, :E7, :E7sc, :CE7, :E8, :F4, :G2.\n\nSemisimple elements\n\nWe  construct semi-simple elements in two ways. The first way is for finite order  elements of ùêì, which over an algebraically closed field K are in bijection  with elements  of Y‚äó  ‚Ñö /‚Ñ§  whose denominator  is prime to the characteristic of K. These are represented as a vector of Rationals r such  that 0‚â§r<1. The function ss  constructs such a semisimple element from a vector of Rationals.\n\nMore generally a torus ùêì over a field K is isomorphic to (KÀ£)^n where n  is the dimension  of ùêì, so  a vector of  elements of KÀ£  is a more general representation which is produced by the function SemisimpleElement;  in  this  setting  the  result  of  ss is naturally interpreted  as a  Vector{Root1}, so  it can  also be obtained by calling SemisimpleElement which such a vector.\n\njulia> G=rootdatum(:sl,4)\nsl‚ÇÑ\n\njulia> ss(G,[1//3,1//4,3//4,2//3])\nSemisimpleElement{Root1}: <Œ∂‚ÇÉ,Œ∂‚ÇÑ,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÉ¬≤>\n\njulia> SemisimpleElement(G,[E(3),E(4),E(4,3),E(3,2)])\nSemisimpleElement{Root1}: <Œ∂‚ÇÉ,Œ∂‚ÇÑ,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÉ¬≤>\n\njulia> L=reflection_subgroup(G,[1,3])\nA‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÅ√óA‚ÇÅŒ¶‚ÇÅ\n\njulia> C=algebraic_center(L)\n(Z0 = SubTorus(A‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÅ√óA‚ÇÅŒ¶‚ÇÅ,[1 2 1]), AZ = Group(SemisimpleElement{Root1}[<1,1,-1>]), descAZ = [[1, 2]], ZD = Group(SemisimpleElement{Root1}[<-1,1,1>, <1,1,-1>]))\n\njulia> T=torsion_subgroup(C.Z0,3)\nGroup(SemisimpleElement{Root1}[<Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤,Œ∂‚ÇÉ>])\n\njulia> e=sort(elements(T))\n3-element Vector{SemisimpleElement{Root1}}:\n <1,1,1>\n <Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤,Œ∂‚ÇÉ>\n <Œ∂‚ÇÉ¬≤,Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤>\n\nIn  the above, the Levi subgroup  L of SL‚ÇÑ consisting of block-diagonal matrices  of shape  2√ó2 is  constructed. The  function algebraic_center returns  a named tuple with : the  neutral component Z‚Å∞ of the center Z of L, represented by a basis of Y(Z‚Å∞), a complement subtorus S of ùêì to  Z‚Å∞  represented  similarly  by  a  basis  of  Y(S), and semi-simple elements  representing the classes of Z modulo  Z‚Å∞ , chosen in S. The classes  Z/Z‚Å∞ also biject to the fundamental  group as given by the field .descAZ,  see algebraic_center for  an explanation. Finally the semi-simple elements of order 3 in Z‚Å∞ are computed.\n\njulia> e[3]^G(2)\nSemisimpleElement{Root1}: <Œ∂‚ÇÉ¬≤,1,Œ∂‚ÇÉ¬≤>\n\njulia> orbit(G,e[3])\n6-element Vector{SemisimpleElement{Root1}}:\n <Œ∂‚ÇÉ¬≤,Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤>\n <Œ∂‚ÇÉ¬≤,1,Œ∂‚ÇÉ¬≤>\n <Œ∂‚ÇÉ,1,Œ∂‚ÇÉ¬≤>\n <Œ∂‚ÇÉ¬≤,1,Œ∂‚ÇÉ>\n <Œ∂‚ÇÉ,1,Œ∂‚ÇÉ>\n <Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤,Œ∂‚ÇÉ>\n\nHere  is the same  computation as above  performed with semisimple elements whose  coefficients are in the  finite field FF(4), representing elements of sl‚ÇÑ(ùîΩ‚ÇÑ).\n\njulia> G=rootdatum(:sl,4)\nsl‚ÇÑ\n\njulia> s=SemisimpleElement(G,Z(4).^[1,2,1])\nSemisimpleElement{FFE{2}}: <Z‚ÇÑ,Z‚ÇÑ¬≤,Z‚ÇÑ>\n\njulia> s^G(2)\nSemisimpleElement{FFE{2}}: <Z‚ÇÑ,1,Z‚ÇÑ>\n\njulia> orbit(G,s)\n6-element Vector{SemisimpleElement{FFE{2}}}:\n <Z‚ÇÑ,Z‚ÇÑ¬≤,Z‚ÇÑ>\n <Z‚ÇÑ,1,Z‚ÇÑ>\n <Z‚ÇÑ¬≤,1,Z‚ÇÑ>\n <Z‚ÇÑ,1,Z‚ÇÑ¬≤>\n <Z‚ÇÑ¬≤,1,Z‚ÇÑ¬≤>\n <Z‚ÇÑ¬≤,Z‚ÇÑ,Z‚ÇÑ¬≤>\n\nWe can compute the centralizer C_ùêÜ (s) of a semisimple element in ùêÜ:\n\njulia> G=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> s=ss(G,[0,1//2,0])\nSemisimpleElement{Root1}: <1,-1,1>\n\njulia> centralizer(G,s)\nA‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=(A‚ÇÅA‚ÇÅ)Œ¶‚ÇÇ\n\nThe  result is an  ExtendedReflectionGroup; the reflection  group part is the Weyl group of C_ùêÜ ‚Å∞(s) and the extended part are representatives of C_ùêÜ  (s)  modulo  C_ùêÜ‚Å∞(s)  taken  as  diagram  automorphisms of the reflection  part.  Here  it  is  printed  as  a  coset  C_ùêÜ ‚Å∞(s)œï which generates C_ùêÜ (s).\n\n\n\n\n\n","category":"module"},{"location":"semisimple.html#Chevie.Semisimple.SubTorus","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.SubTorus","text":"SubTorus(W,Y::Matrix{<:Integer})\n\nThe  function  returns  the  subtorus  ùêí  of  the  maximal torus ùêì of the reductive  group represented by the Weyl group  W such that Y(ùêí) is the (pure)  sublattice of  Y(ùêì) generated  by the  (integral) vectors  Y. A basis  of Y(ùêí) in  Hermite normal form  (for easy memebership testing) is computed  and stored in the field S.gens of the returned SubTorus struct. A  basis of Y(ùêì) adapted to Y(ùêí) is  also computed. This means a set of integral   vectors,  stored  in  S.complement,   is  computed  such  that M=vcat(S.gens,S.complement)   is   a   basis   of   Y(ùêì)  (equivalently M‚ààGL(Z^{rank(W)}).  An  error  is  raised  if  Y does not define a pure sublattice.\n\njulia> W=coxgroup(:A,4)\nA‚ÇÑ\n\njulia> SubTorus(W,[1 2 3 4;2 3 4 1;3 4 1 1])\nSubTorus(A‚ÇÑ,[1 0 3 -13; 0 1 2 7; 0 0 4 -3])\n\njulia> SubTorus(W,[1 2 3 4;2 3 4 1;3 4 1 2])\nERROR: not a pure sublattice\nStacktrace:\n [1] error(::String) at ./error.jl:33\n [2] Chevie.Weyl.SubTorus(::FiniteCoxeterGroup{Perm{Int16},Int64}, ::Matrix{Int64}) at /home/jmichel/julia/Chevie.jl/src/Weyl.jl:1082\n [3] top-level scope at REPL[25]:1\n\n\n\n\n\n","category":"type"},{"location":"semisimple.html#Chevie.Semisimple.fundamental_group","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.fundamental_group","text":"fundamental_group(W)\n\nThis  function returns the fundamental group of the algebraic group defined by  the Coxeter  group struct  W. This  group is  returned as  a group of diagram  automorphisms  of  the  corresponding  affine Weyl group, which is represented  as a group of permutations of the set of simple roots enriched by the lowest root of each irreducible component. The definition we take of the  fundamental group of a (not necessarily semisimple) reductive group is (P‚à© Y(ùêì))/Q where P is the coweight lattice (the dual lattice in Y(ùêì)‚äó ‚Ñö of the  root  lattice)  and  Q  is  the  coroot  latice. The bijection between elements  of P/Q and  diagram automorphisms is  explained in the context of non-irreducible groups for example in ¬ß3.B Bonnaf√©2005.\n\njulia> W=coxgroup(:A,3) # the adjoint group\nA‚ÇÉ\n\njulia> fundamental_group(W) # the 12th root is the lowest one\nGroup((1,12,3,2))\n\njulia> W=rootdatum(:sl,4) # the semisimple simply connected group\nsl‚ÇÑ\n\njulia> fundamental_group(W)\nGroup(Perm{Int16}[])\n\n\n\n\n\n","category":"function"},{"location":"semisimple.html#Chevie.Semisimple.intermediate_group","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.intermediate_group","text":"intermediate_group(W, indices)\n\nThis  computes  a  rootdatum  representing  a  semisimple algebraic group intermediate  between  the  adjoint  group  ‚Äì-  obtained  by  a  call like rootdatum(:pgl,4)‚Äì-  and  the  simply  connected  semi-simple  group ‚Äì- obtained  by  a  call  like  rootdatum(:sl,4).  The group is specified by specifying  a subset  of the  minuscule weights,  which are weights whose scalar  product  with  every  coroot  is  in  -1,0,1 (the weights are the elements  of the weight  lattice, the lattice  in X(ùêì)‚äó ‚Ñö dual to the coroot  lattice). The non-trivial characters of the (algebraic) center of a semi-simple  simply  connected  algebraic  group  are in bijection with the minuscule  weights; this set is  also in bijection with  P/Q where P is the  weight lattice and Q is the root lattice. If W is irreducible, the minuscule  weights are part of the basis of the weight lattice given by the fundamental  weights, which is the dual basis of the simple coroots. They can  thus be specified by an index in the Dynkin diagram. The constructed group  has lattice X(ùêì) generated by the  sum of the root lattice and the weights  with the given  indices. If W  is not irreducible, a minuscule weight is a sum of minuscule weights in different components. An element of indices is thus itself a list, interpreted as representing the sum of the corresponding weights.\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> fundamental_group(intermediate_group(W,Int[])) # adjoint\nGroup((1,12,3,2))\n\njulia> fundamental_group(intermediate_group(W,Int[2])) # intermediate\nGroup((1,3)(2,12))\n\n\n\n\n\n","category":"function"},{"location":"semisimple.html#Chevie.Semisimple.quasi_isolated_reps-Tuple{FiniteCoxeterGroup}","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.quasi_isolated_reps","text":"quasi_isolated_reps(W,p=0)\n\nW  should be a Weyl  group corresponding to an  algebraic group ùêÜ over an algebraically  closed field  of characteristic  0. This  function returns a list  of  semisimple  elements  for  ùêÜ,  which  are  representatives of the ùêÜ-orbits  of quasi-isolated  semisimple elements.  It follows the algorithm given  in  Bonnafe2005.  If  a  second  argument p is given,  it  gives  representatives  of  those quasi-isolated elements which exist in characteristic p.\n\njulia> W=coxgroup(:E,6);l=quasi_isolated_reps(W)\n5-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <1,-1,1,1,1,1>\n <1,1,1,Œ∂‚ÇÉ,1,1>\n <Œ∂‚ÇÉ,1,1,1,1,Œ∂‚ÇÉ>\n <1,Œ∂‚ÇÜ,Œ∂‚ÇÜ,1,Œ∂‚ÇÜ,1>\n\njulia> map(s->isisolated(W,s),l)\n5-element Vector{Bool}:\n 1\n 1\n 1\n 0\n 0\n\njulia> W=rootdatum(:E6sc);l=quasi_isolated_reps(W)\n7-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <-1,1,1,-1,1,-1>\n <Œ∂‚ÇÉ,1,Œ∂‚ÇÉ¬≤,1,Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤>\n <Œ∂‚ÇÉ¬≤,1,Œ∂‚ÇÉ,1,Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤>\n <Œ∂‚ÇÉ¬≤,1,Œ∂‚ÇÉ,1,Œ∂‚ÇÉ¬≤,Œ∂‚ÇÉ>\n <Œ∂‚ÇÜ‚Åµ,1,Œ∂‚ÇÉ¬≤,1,Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤>\n <Œ∂‚ÇÉ¬≤,1,Œ∂‚ÇÉ,1,Œ∂‚ÇÉ¬≤,Œ∂‚ÇÜ‚Åµ>\n\njulia> map(s->isisolated(W,s),l)\n7-element Vector{Bool}:\n 1\n 1\n 1\n 1\n 1\n 1\n 1\n\njulia> Semisimple.quasi_isolated_reps(W,3)\n2-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <-1,1,1,-1,1,-1>\n\n\n\n\n\n","category":"method"},{"location":"semisimple.html#Chevie.Semisimple.isisolated","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.isisolated","text":"isisolated(WF::Spets,t::SemisimpleElement{Root1})\n\nWF  should be  a Coxeter  coset representing  an algebraic  coset ùêÜ ‚ãÖœÉ, where  ùêÜ is a connected  reductive group (represented by W=Group(WF)), and  œÉ  is  a  quasi-central  automorphism  of  ùêÜ defined by WF. The element  t should be a semisimple element of ùêÜ. The function returns a boolean describing whether tœÉ is isolated, that is whether the Weyl group of C_ùêÜ (tœÉ)‚Å∞ is not in any proper parabolic subgroup of W^œÉ.\n\njulia> WF=rootdatum(:u,6)\nu‚ÇÜ\n\njulia> l=quasi_isolated_reps(WF)\n4-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <Œ∂‚ÇÑ,Œ∂‚ÇÑ,Œ∂‚ÇÑ,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÑ¬≥>\n <Œ∂‚ÇÑ,Œ∂‚ÇÑ,1,1,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÑ¬≥>\n <Œ∂‚ÇÑ,1,1,1,1,Œ∂‚ÇÑ¬≥>\n\njulia> isisolated.(Ref(WF),l)\n4-element BitVector:\n 1\n 1\n 1\n 0\n\n\n\n\n\n","category":"function"},{"location":"semisimple.html#Chevie.Semisimple.torsion_subgroup","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.torsion_subgroup","text":"torsion_subgroup(S::SubTorus,n)\n\nThis  function  returns  the  subgroup  of  semi-simple  elements  of order dividing n in the subtorus S.\n\njulia> G=rootdatum(:sl,4)\nsl‚ÇÑ\n\njulia> L=reflection_subgroup(G,[1,3])\nA‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÅ√óA‚ÇÅŒ¶‚ÇÅ\n\njulia> C=algebraic_center(L)\n(Z0 = SubTorus(A‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÅ√óA‚ÇÅŒ¶‚ÇÅ,[1 2 1]), AZ = Group(SemisimpleElement{Root1}[<1,1,-1>]), descAZ = [[1, 2]], ZD = Group(SemisimpleElement{Root1}[<-1,1,1>, <1,1,-1>]))\n\njulia> T=torsion_subgroup(C.Z0,3)\nGroup(SemisimpleElement{Root1}[<Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤,Œ∂‚ÇÉ>])\n\njulia> sort(elements(T))\n3-element Vector{SemisimpleElement{Root1}}:\n <1,1,1>\n <Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤,Œ∂‚ÇÉ>\n <Œ∂‚ÇÉ¬≤,Œ∂‚ÇÉ,Œ∂‚ÇÉ¬≤>\n\n\n\n\n\n","category":"function"},{"location":"semisimple.html#Chevie.Semisimple.algebraic_center","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.algebraic_center","text":"algebraic_center(W)\n\nW  should  be  a  Weyl  group,  or  an extended Weyl group. This function returns  a description  of the  center Z of  the algebraic  group ùêÜ defined by W as a named tuple with the following fields:\n\nZ0: the neutral component Z‚Å∞ of Z as a subtorus of ùêì.\n\nAZ: representatives in Z of A(Z):=Z/Z‚Å∞ given as a group of semisimple elements.\n\nZD:  center of the derived subgroup of ùêÜ given as a group of semisimple elements.\n\ndescAZ:  if W  is not  an extended  Weyl group,  describes A(Z)  as a quotient  of the center  pi of the  simply connected covering  of ùêÜ (an incarnation of the fundamental group). It contains a list of elements given as  words  in  the  generators  of  pi  which  generate the kernel of the quotient map.\n\njulia> G=rootdatum(:sl,4)\nsl‚ÇÑ\n\njulia> L=reflection_subgroup(G,[1,3])\nA‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÅ√óA‚ÇÅ\n\nulia> C=algebraic_center(L)\n(Z0 = SubTorus(A‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÅ√óA‚ÇÅŒ¶‚ÇÅ,[1 2 1]), AZ = Group(SemisimpleElement{Root1}[<1,1,-1>]), descAZ = [[1, 2]], ZD = Group(SemisimpleElement{Root1}[<-1,1,1>, <1,1,-1>]))\n\njulia> G=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> s=ss(G,[0,1//2,0])\nSemisimpleElement{Root1}: <1,-1,1>\n\njulia> C=centralizer(G,s)\nA‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=(A‚ÇÅA‚ÇÅ)Œ¶‚ÇÇ\n\njulia> algebraic_center(C)\n(Z0 = SubTorus(A‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÅ√óA‚ÇÅŒ¶‚ÇÅ,Matrix{Int64}(undef, 0, 3)), AZ = Group(SemisimpleElement{Root1}[<1,-1,1>]))\n\n\n\n\n\n","category":"function"},{"location":"semisimple.html#Chevie.Semisimple.weightinfo","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.weightinfo","text":"weightinfo(W)\n\nW  is a  Coxeter group  record describing  an algebraic  group ùêÜ, or a IypeIrred. The function is independent of the isogeny type of ùêÜ(so just depends  on refltype(W), that is  on the root system).  It returns a dict with the following keys:\n\n:minusculeWeights the minuscule weights, described as their position  in  the  list  of  fundamental  weights.  For non-irreducible groups, a weight  is the sum of at most one weight in each irreducible component. It  is represented as  the list of  its components. For consistency, in the  case  of  an  irreducible  system,  a  weight  is represented as a one-element list.\n:minusculeCoweights the minuscule coweights, represented in the same manner as the minuscule weights\n:decompositions for each coweight, its decomposition in terms of the generators  of the adjoint fundamental group  (given by the list of the exponents  of the generators). Together with  the next field it enables to work out the group structure of the adjoint fundamental group.\n:moduli the list of orders of the generators of the fundamental group.\n:AdjointFundamentalGroup the list of generators of the adjoint fundamental group, given as permutations of the extended root basis.\n:CenterSimplyConnected A list of semisimple elements generating the center of the universal covering of  ùêÜ\n:chosenAdaptedBasis A basis  of the  weight lattice  adapted to the root lattice. In the basis of the fundamental weights, the root lattice is  given  by  C=transpose(cartan(W)).  The  property  specifying the :chosenAdaptedBasis is that the Hermite normal form of C*chosenAdaptedBasis  is almost in Smith  normal form (it is diagonal but  the diagonal entries may be  permuted compared to the Smith normal form; the non-trivial entries are in the positions corresponding to the generators of the fundamental group as indicated by :decompositions).\n\njulia> weightinfo(coxgroup(:A,2)*coxgroup(:B,2))\nDict{Symbol, Array} with 8 entries:\n  :moduli                  => [3, 2]\n  :minusculeWeights        => [[1, 3], [1], [2, 3], [2], [3]]\n  :decompositions          => [[2, 1], [2, 0], [1, 1], [1, 0], [0, 1]]\n  :highestroot             => [5, 7]\n  :chosenAdaptedBasis      => [1 -1 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1]\n  :minusculeCoweights      => [[1, 4], [1], [2, 4], [2], [4]]\n  :CenterSimplyConnected   => Vector{Rational{Int64}}[[1//3, 2//3, 0, 0], [0, 0‚Ä¶\n  :AdjointFundamentalGroup => [(1,12,2), (4,14)]\n\n\n\n\n\n","category":"function"},{"location":"semisimple.html#Chevie.Semisimple.weights","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.weights","text":"weights(W) simple weights in the basis of X(T)\n\n\n\n\n\n","category":"function"},{"location":"semisimple.html#Chevie.Semisimple.coweights","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.coweights","text":"coweights(W) simple coweights in the basis of Y(T)\n\n\n\n\n\n","category":"function"},{"location":"semisimple.html#PermGroups.Groups.centralizer-Tuple{FiniteCoxeterGroup, SemisimpleElement}","page":"Reductive groups, semisimple elements","title":"PermGroups.Groups.centralizer","text":"centralizer(W,s::SemisimpleElement)\n\nW  should  be  a  Weyl  group  or  an extended reflection group and s a semisimple  element of the  algebraic group G  corresponding to W. This function  returns the  Weyl group  of C_G(s),  which describes  it. The stabilizer  is an extended reflection group, with the reflection group part equal to the Weyl group of C_G‚Å∞(s), and the diagram automorphism part being those induced by C_G(s).\n\njulia> G=coxgroup(:A,3)\nA‚ÇÉ\njulia> s=ss(G,[0,1//2,0])\nSemisimpleElement{Root1}: <1,-1,1>\njulia> centralizer(G,s)\nA‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=(A‚ÇÅA‚ÇÅ)Œ¶‚ÇÇ\n\n\n\n\n\n","category":"method"},{"location":"semisimple.html#Chevie.Semisimple.semisimple_centralizer_representatives","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.semisimple_centralizer_representatives","text":"semisimple_centralizer_representatives(W [,p]) or sscentralizer_reps\n\nW  should be a Weyl group corresponding  to an algebraic group ùêÜ. This function  returns a list describing representatives  ùêá of ùêÜ-orbits of reductive  subgroups  of  ùêÜ  which  are  the  identity component of the centralizer of a semisimple element. Each group ùêá is specified by a list h   of  reflection  indices  in  W   such  that  ùêá  corresponds  to reflection_subgroup(W,h).  If a  second argument  p is  given, only the list of the centralizers which occur in characteristic p is returned.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> sscentralizer_reps(W)\n6-element Vector{Vector{Int64}}:\n []\n [1]\n [2]\n [1, 2]\n [1, 5]\n [2, 6]\n\njulia> reflection_subgroup.(Ref(W),sscentralizer_reps(W))\n6-element Vector{FiniteCoxeterSubGroup{Perm{Int16},Int64}}:\n G‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅ¬≤\n G‚ÇÇ‚Çç‚ÇÅ‚Çé=A‚ÇÅŒ¶‚ÇÅ\n G‚ÇÇ‚Çç‚ÇÇ‚Çé=AÃÉ‚ÇÅŒ¶‚ÇÅ\n G‚ÇÇ\n G‚ÇÇ‚Çç‚ÇÅ‚ÇÖ‚Çé=A‚ÇÇ\n G‚ÇÇ‚Çç‚ÇÇ‚ÇÜ‚Çé=AÃÉ‚ÇÅ√óA‚ÇÅ\n\njulia> sscentralizer_reps(W,2)\n5-element Vector{Vector{Int64}}:\n []\n [1]\n [2]\n [1, 2]\n [1, 5]\n\n\n\n\n\n","category":"function"},{"location":"semisimple.html#Chevie.Semisimple.structure_rational_points_connected_centre","page":"Reductive groups, semisimple elements","title":"Chevie.Semisimple.structure_rational_points_connected_centre","text":"structure_rational_points_connected_centre(W,q)\n\nW  should be  a Coxeter  group or  a Coxeter  coset representing a finite reductive  group ùêÜ ^F, and q should  be the prime power associated to the  isogeny F. The function returns the abelian invariants of the finite abelian group Z‚Å∞ùêÜ ^F where Z‚Å∞ùêÜ is the connected center of ùêÜ.\n\nIn  the following example one determines the structure of ùêì(ùîΩ‚ÇÉ) where ùêì runs over all the maximal tori of SL‚ÇÑ.\n\njulia> l=twistings(rootdatum(:sl,4),Int[])\n5-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅ¬≥\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ¬≤\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÉ\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÇŒ¶‚ÇÑ\n\njulia> structure_rational_points_connected_centre.(l,3)\n5-element Vector{Vector{Int64}}:\n [2, 2, 2]\n [2, 8]\n [4, 8]\n [26]\n [40]\n\n\n\n\n\n","category":"function"},{"location":"ucl.html#Unipotent-classes-of-reductive-groups","page":"Unipotent classes of reductive groups","title":"Unipotent classes of reductive groups","text":"","category":"section"},{"location":"ucl.html","page":"Unipotent classes of reductive groups","title":"Unipotent classes of reductive groups","text":"Pages=[\"ucl.md\"]","category":"page"},{"location":"ucl.html","page":"Unipotent classes of reductive groups","title":"Unipotent classes of reductive groups","text":"Ucl\nUnipotentClasses\nUnipotentClass\nICCTable\nXTable\nGreenTable\nUnipotentValues\ninduced_linear_form\nspecial_pieces\ndistinguished_parabolics","category":"page"},{"location":"ucl.html#Chevie.Ucl","page":"Unipotent classes of reductive groups","title":"Chevie.Ucl","text":"This  module gives information  about the unipotent  conjugacy classes of a connected  reductive group ùêÜ over an  algebraically closed field k, and various  invariants attached to them, like the Springer correspondence. The unipotent classes depend on the characteristic of k; their classification differs when the characteristic is not good (that is, when it divides one of  the  coefficients  of  the  highest  root  of  one  of  the irreducible components). In good characteristic, the unipotent classes are in bijection with nilpotent orbits on the Lie algebra ùî§ of ùêÜ.\n\nWe  give  the  following  information  for  a unipotent element u of each class:\n\nthe centralizer C_ùêÜ (u), that we describe by the reductive part of C_ùêÜ  (u)^0, by the  group of components  A(u)=C_ùêÜ (u)C_ùêÜ (u)^0, and by the dimension of its radical.\nin good characteristic, the  Dynkin-Richardson  diagram.\nthe Springer correspondence,  attaching characters of  the Weyl group or relative Weyl groups to each character of A(u).\n\nThe  Dynkin-Richarson diagram is  attached to a  nilpotent element e of the  Lie algebra  ùî§. By  the Jacobson-Morozov  theorem there  exists an ùî∞ùî©‚ÇÇ subalgebra of ùî§ containing e as the element beginpmatrix0100  endpmatrix.  Let  ùêí  be  the  torus beginpmatrixh00h^-1 endpmatrix of SL‚ÇÇ and let ùêì be  a  maximal  torus  containing  ùêí,  so  that ùêí is the image of a one-parameter   subgroup  œÉ  Y(ùêì).  Consider  the  root  decomposition ùî§=_Œ±Œ¶ùî§_Œ±  given by ùêì and the  root system Œ¶; then Œ±œÉŒ± defines  a linear form  on Œ¶, determined  by its value  on simple roots Œ†.  It is possible to choose a  system of simple roots such that œÉŒ± 0  for Œ±Œ†,  and then  œÉŒ±012 for  any Œ±Œ†. The Dynkin diagram  of  Œ†  decorated  by  these  values  012  is  called the Dynkin-Richardson  diagram  of  e,  and  in  good  characteristic  is a complete  invariant  of  the  ùî§-orbit  of  e. The Dynkin-Richardson diagrams thus classify unipotent classes of ùêÜ in good characteristic.\n\nAnother classification of unipotent classes was given by Bala and Carter. A standard  parabolic subgroup ùêè  of ùêÜ associated  to the subset I‚äÇŒ† of the simple roots is distinguished if the linear form œÉ taking the value 2 on Œ±‚àà I and 0 on other simple roots satisfies 2n‚ÇÄ+semisimplerank(ùêÜ)=n‚ÇÇ,  where n·µ¢ is the number of roots in Œ¶ where œÉ  takes the value i.  Given a distinguished parabolic  ùêè, there is a unique  unipotent class which is dense in the unipotent radical of ùêè. For this  class, the linear form described  by the Dynkin-Richardson diagram is equal  to  œÉ.  Such  unipotent  classes  are  called distinguished. The theorem  of Bala-Carter says that every unipotent class is distinguished in the  smallest Levi subgroup ùêã  which contains it, and  that such pairs of ùêã  and the distinguished  parabolic ùêè of  ùêã taken up to ùêÜ-conjugacy are in bijection with unipotent classes of ùêÜ.\n\nLet  ‚Ñ¨ be  the variety  of all  Borel subgroups  and let  ‚Ñ¨·µ§ be the subvariety  of Borel subgroups  containing the unipotent  element u. Then dim C_ùêÜ(u)=rank ùêÜ + 2 dim ‚Ñ¨_u and in good characteristic this dimension can  be computed from  linear form œÉ  associated to the Dynkin-Richardson diagram:  the dimension of the class of u is the number of roots Œ± such that œÉŒ±01.\n\nWe   now  describe  the  Springer  correspondence.  Indecomposable  locally constant  ùêÜ-equivariant  sheaves  on  a  unipotent  class C, called local  systems, are  parameterised by  irreducible characters of A(u) for  u‚àà C. The ordinary Springer  correspondence is a bijection between irreducible  characters of the Weyl  group and a large  subset of the local systems  containing all trivial  local systems (those  parameterised by the trivial  character  of  A(u)  for  each  u).  More  generally,  the generalised  Springer correspondence  associates to  each local  system a (unique  up to ùêÜ-conjugacy) cuspidal datum,  a Levi subgroup ùêã of ùêÜ  and a cuspidal local system on  an unipotent class of ùêã, and a character of the relative Weyl group W_ùêÜ (ùêã)=N_ùêÜ (ùêã)ùêã. There are only few  cuspidal local  systems (at  most one  in each dimension for classical groups).  The ordinary  Springer correspondence  is the  special case where ùêã  is a maximal torus, the cuspidal  local system the trivial system of the identity element, and W_ùêÜ (ùêã)=W, the Weyl group.\n\nThe  Springer correspondence gives information on the character values of a finite  reductive groups  as follows:  assume that  k is  the algebraic closure  of a finite field ùîΩ_q and that F is the Frobenius attached to  an ùîΩ_q-structure of  ùêÜ. Let C  be an F-stable unipotent class  and let u C^F; we call C the geometric class of u and the ùêÜ^F-classes inside C^F are parameterised by the F-conjugacy classes  of A(u), denoted H¬π(FA(u)) (most  of the time we can find u C such that F acts trivially on A(u) and H¬π(FA(u)) is then just the conjugacy classes). To an F-stable character œÜ of A(u) we  associate  the  characteristic  function  of  the corresponding local system (actually associated to an extension œÜ of œÜ to A(u)F); it  is a class function  Y_uœÜ on ùêÜ^F which  can be normalized so that:  Y_uœÜ(u‚ÇÅ)=œÜ(cF) if u‚ÇÅ is geometrically conjugate to u and  its ùêÜ^F-class is parameterised by the F-conjugacy class cF of  A(u), otherwise Y_uœÜ(u‚ÇÅ)=0. If  the pair uœÜ corresponds via  the Springer correspondence to the character œá of W_ùêÜ(ùêã), then Y_uœÜ  is also  denoted Y·µ™.  There is  another important class of functions  indexed by local  systems: to a  local system on  class C is attached  an intersection cohomology complex, which is a complex of sheaves supported on the closure C. To such a complex of sheaves is associated its  characteristic  function,  a  class  function of ùêÜ^F obtained by taking  the alternating trace of the Frobenius  acting on the stalks of the cohomology  sheaves. If Y_œà  is the characteristic  function of a local system,  the  characteristic  function  of  the  corresponding intersection cohomology  complex is  denoted by  X_œà. This  function is supported on C,  and Lusztig has shown that X_œà=_œá P_œàœá Y·µ™ where P_œàœá are  integer polynomials in q and  Y·µ™ are attached to local systems on classes lying in C.\n\nLusztig   and  Shoji  have  given  an   algorithm  to  compute  the  matrix P_œàœá,  which is implemented in Chevie. The relation to characters of ùêÜ(ùîΩ_q),    considering   for    simplicity   the    ordinary   Springer correspondence,  is that the  restriction to the  unipotent elements of the almost  character R_œá is equal to  q^b·µ™ X·µ™, where b·µ™ is dim ‚Ñ¨·µ§  for an element u of  the class C such that  the support of œá is C.  The restrictions of the Deligne-Lusztig characters R_w for w‚àà W  on the  unipotents are  called the  Green functions  and can  also be computed  by Chevie.  The values  of all  unipotent characters on unipotent elements  can also be  computed in principle  by applying Lusztig's Fourier transform  matrix (see the  section on the  Fourier matrix) but  there is a difficulty  in that the  X·µ™ must first  be multiplied by  some roots of unity  which are not known  in all cases (and  when known may depend on the congruence class of q modulo some small primes).\n\nFinally,  we describe  how unipotent  classes of  ùêÜ are  parameterised in various   quasisimple  groups.   In  classical   types,  the   classes  are parametrised by partitions corresponding to the Jordan form in the standard representation. Thus,\n\nfor A‚Çô we have partitions of n+1.\nfor  B_n we have partitions of 2n+1  where even parts occur an even number  of times. In characteristic  2, types B and  C are isogenous so have the same classification; thus see the next paragraph.\nfor  C_n we  have partitions  of 2n  where odd  parts occur an even number  of times. In characteristic 2,  there are 2·µè classes attached to  a partition where  k is the  number of even  parts which occur an even number of times.\nfor  D_n we have partitions of 2n  where even parts occur an even number  of times,  excepted there  are two  classes when  all parts are even.  In characteristic 2, we have  partitions of 2n where odd parts occur  an  even  number  of  times,  excepted  there are 2·µè+Œ¥ classes attached  to a partition  where k is  the number of  even parts which occur an even number of times, and Œ¥ is 2 when all parts are even and 0 otherwise.\n\nIn  exceptional  groups,  the  names  of  the  classes are derived from the Bala-Carter classification. The name for a class parametrised by (ùêã,ùêè) is of  the form l(p)  where l is  the name of  ùêã and (p) is present if there  is more than one distinguished  parabolic in ùêã and describes which one  it  is.  Before  the  classification  of  Bala-Carter  was universally adopted,  Shoji and Mizuno used a  different scheme where sometimes a class was  parametrised by a reductive  subgroup of maximal rank  which was not a Levi.  These  older  labels  can  be  obtained  instead  by giving the IO property  :shoji=>true or  :mizuno=>true. In  a bad characteristic p, there  are extra classes. Each of them is associated to a class c in good characteristic and is named (c)‚Çö.\n\nWe illustrate the above descriptions on some examples:\n\njulia> UnipotentClasses(rootdatum(:sl,4))\nUnipotentClasses(sl‚ÇÑ)\n1111<211<22<31<4\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇu   ‚îÇD-R d‚Ñ¨ ·µ§ B-C   C_ùêÜ(u) A‚ÇÉ(Œ¶‚ÇÅ¬≥) A‚ÇÅ(A‚ÇÅ√óA‚ÇÅŒ¶‚ÇÅ)/-1 .(A‚ÇÉ)/Œ∂‚ÇÑ .(A‚ÇÉ)/Œ∂‚ÇÑ¬≥‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ4   ‚îÇ222    0 222    q¬≥.Z‚ÇÑ     1:4           -1:2    Œ∂‚ÇÑ:Id    Œ∂‚ÇÑ¬≥:Id‚îÇ\n‚îÇ31  ‚îÇ202    1 22.    q‚Å¥.Œ¶‚ÇÅ   Id:31                                  ‚îÇ\n‚îÇ22  ‚îÇ020    2 2.2 q‚Å¥.A‚ÇÅ.Z‚ÇÇ    2:22          11:11                   ‚îÇ\n‚îÇ211 ‚îÇ101    3 2..  q‚Åµ.A‚ÇÅŒ¶‚ÇÅ  Id:211                                  ‚îÇ\n‚îÇ1111‚îÇ000    6 ...       A‚ÇÉ Id:1111                                  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThe first column of the table gives the name of the unipotent class, here a partition  describing  the  Jordan  form.  The  partial  order on unipotent classes  given by  Zariski closure  is given  before the  table. The column D-R,   which   is   only   shown   in   good  characteristic,  gives  the Dynkin-Richardson  diagram  for  each  class;  the  column  dBu gives the dimension  of the variety  ‚Ñ¨ ·µ§. The  column B-C gives the Bala-Carter classification of u, that is in the case of sl‚ÇÑ it shows u as a regular  unipotent  in  a  Levi  subgroup  by  giving the Dynkin-Richardson diagram  of a regular unipotent (all  2's) for the entries corresponding to the  Levi and . for the entries  which not corresponding to the Levi. The column C(u) describes the group C_ùêÜ(u): a power q·µà describes that the  unipotent  radical  of  C_ùêÜ(u)  has  dimension  d (thus q·µà rational  points); then follows a description  of the reductive part of the neutral  component of C_ùêÜ(u), given by the name of its root datum. Then if  C_ùêÜ(u) is not connected, the description of A(u) is given using a  different vocabulary: a cyclic group of order  4 is given as Z4, and a symmetric group on 3 points would be given as S3.\n\nFor  instance, the first class 4  has C_ùêÜ(u)^0 unipotent of dimension 3 and A(u) equal to Z4, the cyclic group of order 4. The class 22 has  C_G(u) with unipotent radical of  dimension 4, reductive part of type  A1 and A(u) is  Z2, that is the  cyclic group of order 2. The other  classes have C_ùêÜ(u) connected. For  the class 31 the reductive part of C_G(u) is a torus of rank 1.\n\nThen  there is one column for each Springer series, giving for each class the  pairs  'a:b'  where  'a'  is  the  name  of  the character of A(u) describing  the local system involved and 'b'  is the name of the character of  the (relative) Weyl group corresponding by the Springer correspondence. At  the top of the  column is written the  name of the relative Weyl group, and  in brackets the  name of the  Levi affording a  cuspidal local system; next,  separated  by  a  /  is  a  description  of  the central character associated  to the  Springer series  (omitted if  this central character is trivial):   all  local  systems  in  a  given  Springer  series  have  same restriction  to the center of  ùêÜ. To find what  the picture becomes for another algebraic group in the same isogeny class, for instance the adjoint group,  one  simply  discards  the  Springer series whose central character becomes  trivial on the center of ùêÜ;  and each group A(u) has to be quotiented  by the common  kernel of the  remaining characters. Here is the table for the adjoint group:\n\njulia> UnipotentClasses(coxgroup(:A,3))\nUnipotentClasses(A‚ÇÉ)\n1111<211<22<31<4\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇu   ‚îÇD-R d‚Ñ¨ ·µ§ B-C  C_ùêÜ(u) A‚ÇÉ(Œ¶‚ÇÅ¬≥)‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ4   ‚îÇ222    0 222      q¬≥    Id:4‚îÇ\n‚îÇ31  ‚îÇ202    1 22.   q‚Å¥.Œ¶‚ÇÅ   Id:31‚îÇ\n‚îÇ22  ‚îÇ020    2 2.2   q‚Å¥.A‚ÇÅ   Id:22‚îÇ\n‚îÇ211 ‚îÇ101    3 2.. q‚Åµ.A‚ÇÅŒ¶‚ÇÅ  Id:211‚îÇ\n‚îÇ1111‚îÇ000    6 ...      A‚ÇÉ Id:1111‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nHere is another example:\n\njulia> UnipotentClasses(coxgroup(:G,2))\nUnipotentClasses(G‚ÇÇ)\n1<A‚ÇÅ<AÃÉ‚ÇÅ<G‚ÇÇ(a‚ÇÅ)<G‚ÇÇ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇu     ‚îÇD-R d‚Ñ¨ ·µ§ B-C C_ùêÜ(u)         G‚ÇÇ(Œ¶‚ÇÅ¬≤)  .(G‚ÇÇ)‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇG‚ÇÇ    ‚îÇ 22    0  22     q¬≤         Id:œÜ‚ÇÅ‚Äö‚ÇÄ       ‚îÇ\n‚îÇG‚ÇÇ(a‚ÇÅ)‚îÇ 20    1  20  q‚Å¥.S‚ÇÉ 21:œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ 3:œÜ‚ÇÇ‚Äö‚ÇÅ 111:Id‚îÇ\n‚îÇAÃÉ‚ÇÅ    ‚îÇ 01    2  .2  q¬≥.A‚ÇÅ         Id:œÜ‚ÇÇ‚Äö‚ÇÇ       ‚îÇ\n‚îÇA‚ÇÅ    ‚îÇ 10    3  2.  q‚Åµ.A‚ÇÅ        Id:œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ       ‚îÇ\n‚îÇ1     ‚îÇ 00    6  ..     G‚ÇÇ         Id:œÜ‚ÇÅ‚Äö‚ÇÜ       ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nwhich illustrates that on class G‚ÇÇ(a‚ÇÅ) there are two local systems in the principal  series of  the Springer  correspondence, and  a further cuspidal local system. It also illustrates how we display in general the Bala-Carter classification.  If a class is attached to (ùêã,ùêè) then the simple roots in the  complement of ùêã have  a .. Those in  ùêã have a 0  or a 2, the 2s  characterizing  ùêè.  So,  from  the  B-C  column, we see that that G‚ÇÇ(a‚ÇÅ)  is not in  a proper Levi,  in which case  the Bala-Carter diagram coincides with the Dynkin-Richardson diagram.\n\nThe  characteristics 2 and  3 are not  good for G2.  To get the unipotent classes  and the Springer correspondence in bad characteristic, one gives a second argument to the function UnipotentClasses:\n\njulia> UnipotentClasses(coxgroup(:G,2),3)\nUnipotentClasses(G‚ÇÇ,3)\n1<A‚ÇÅ,(AÃÉ‚ÇÅ)‚ÇÉ<AÃÉ‚ÇÅ<G‚ÇÇ(a‚ÇÅ)<G‚ÇÇ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇu     ‚îÇd‚Ñ¨ ·µ§ B-C C_ùêÜ(u)  G‚ÇÇ(Œ¶‚ÇÅ¬≤) .(G‚ÇÇ) .(G‚ÇÇ)  .(G‚ÇÇ)‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇG‚ÇÇ    ‚îÇ   0  22  q¬≤.Z‚ÇÉ   1:œÜ‚ÇÅ‚Äö‚ÇÄ       Œ∂‚ÇÉ:Id Œ∂‚ÇÉ¬≤:Id‚îÇ\n‚îÇG‚ÇÇ(a‚ÇÅ)‚îÇ   1  20  q‚Å¥.Z‚ÇÇ   2:œÜ‚ÇÇ‚Äö‚ÇÅ 11:Id             ‚îÇ\n‚îÇAÃÉ‚ÇÅ    ‚îÇ   2  .2     q‚Å∂  Id:œÜ‚ÇÇ‚Äö‚ÇÇ                   ‚îÇ\n‚îÇA‚ÇÅ    ‚îÇ   3  2.  q‚Åµ.A‚ÇÅ Id:œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ                   ‚îÇ\n‚îÇ(AÃÉ‚ÇÅ)‚ÇÉ ‚îÇ   3  ??  q‚Åµ.A‚ÇÅ Id:œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ                   ‚îÇ\n‚îÇ1     ‚îÇ   6  ..     G‚ÇÇ  Id:œÜ‚ÇÅ‚Äö‚ÇÜ                   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThe  function ICCTable gives the  transition matrix between the functions X·µ™  and Y_œà.\n\njulia> uc=UnipotentClasses(coxgroup(:G,2));\njulia> t=ICCTable(uc;q=Pol(:q))\nCoefficients of X·µ™ on Y·µ© for series L=G‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅ¬≤ W_G(L)=G‚ÇÇ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇX\\Y   ‚îÇG‚ÇÇ G‚ÇÇ(a‚ÇÅ)‚ÅΩ¬≤¬π‚Åæ G‚ÇÇ(a‚ÇÅ) AÃÉ‚ÇÅ A‚ÇÅ  1‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇXœÜ‚ÇÅ‚Äö‚ÇÄ ‚îÇ 1          .      1  1  1  1‚îÇ\n‚îÇXœÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ‚îÇ .          1      .  1  . q¬≤‚îÇ\n‚îÇXœÜ‚ÇÇ‚Äö‚ÇÅ ‚îÇ .          .      1  1  1 Œ¶‚Çà‚îÇ\n‚îÇXœÜ‚ÇÇ‚Äö‚ÇÇ ‚îÇ .          .      .  1  1 Œ¶‚ÇÑ‚îÇ\n‚îÇXœÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ‚îÇ .          .      .  .  1  1‚îÇ\n‚îÇXœÜ‚ÇÅ‚Äö‚ÇÜ ‚îÇ .          .      .  .  .  1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nAn example which illustrates how to get the shoji names of classes\n\njulia> uc=UnipotentClasses(coxgroup(:F,4));\n\njulia> uc.classes[10:end]\n7-element Vector{UnipotentClass}:\n UnipotentClass(C‚ÇÉ(a‚ÇÅ))\n UnipotentClass(F‚ÇÑ(a‚ÇÉ))\n UnipotentClass(C‚ÇÉ)\n UnipotentClass(B‚ÇÉ)\n UnipotentClass(F‚ÇÑ(a‚ÇÇ))\n UnipotentClass(F‚ÇÑ(a‚ÇÅ))\n UnipotentClass(F‚ÇÑ)\n\njulia> xdisplay(uc.classes[10:end],shoji=true)\n7-element Vector{UnipotentClass}:\n UnipotentClass(A‚ÇÅ+B‚ÇÇ)\n UnipotentClass(A‚ÇÉ+AÃÉ‚ÇÅ)\n UnipotentClass(C‚ÇÉ)\n UnipotentClass(B‚ÇÉ)\n UnipotentClass(C‚ÇÉ+A‚ÇÅ)\n UnipotentClass(B‚ÇÑ)\n UnipotentClass(F‚ÇÑ)\n\nHere  the row labels  and the column  labels show the  two ways of indexing local systems: the row labels give the character of the relative Weyl group and  the column labels give the class and the name of the local system as a character  of A(u): for instance, G2(a1) is the trivial local system of the  class G2(a1), while  G2(a1)(21) is the  local system on that class corresponding to the 2-dimensional character of A(u)=A‚ÇÇ.\n\nThe  data on unipotent classes for  arbitrary reductive groups are obtained as  follows. The  data for  a quasi-simple  simply connected group ùîæ have been entered by hand for each type. In such a group to each Springer series is  attached a character of A(Z), the  group of components of the center. For  any reductive group ùîæ'  of the same type  with center Z' the group A(Z') is a quotient of the group A(Z). The Springer series for ùîæ' are those  such  that  the  corresponding  character  of A(Z) factors through A(Z')   (for  computing  A(Z')   see  algebraic_center).  The geometric  unipotent classes of  ùîæ and ùîæ'  are in bijection.  For u a unipotent  element  of  ùîæ'  (which  we  can  consider also as a unipotent element  of ùîæ) the group  A‚ÇÅ=A(u) in ùîæ' is  a quotient of A=A(u) in ùîæ  that we can  compute as follows:  the Springer correspondence for ùîæ' tells us which characters of A survive in ùîæ'. Then A' is the quotient of A by the common kernel of these characters.\n\n\n\n\n\n","category":"module"},{"location":"ucl.html#Chevie.Ucl.UnipotentClasses","page":"Unipotent classes of reductive groups","title":"Chevie.Ucl.UnipotentClasses","text":"UnipotentClasses(W[,p])\n\nW  should  be  a  CoxeterGroup  record  for a Weyl group or RootDatum describing a reductive algebraic group ùêÜ. The function returns a record containing   information   about   the   unipotent   classes  of  ùêÜ  in characteristic   p  (if   omitted,  p   is  assumed   to  be  any  good characteristic for ùêÜ). This contains the following fields:\n\ngroup: a pointer to W\n\np: the characteristic of the field for which the unipotent classes were computed. It is 0 for any good characteristic.\n\norderclasses:  a list describing the Hasse diagram of the partial order induced   on   unipotent   classes   by   the  closure  relation.  That  is .orderclasses[i]  is the list of j such that C‚±º C·µ¢  and  there  is no  class  C‚Çñ  such  that C‚±º C‚Çñ C·µ¢.\n\nclasses:  a  list  of  records  holding information for each unipotent class (see below).\n\nspringerseries:  a list of records, each  of which describes a Springer series  of ùêÜ.\n\nThe  records  describing  individual  unipotent  classes have the following fields:\n\nname: the name of the unipotent class.\n\nparameter:  a parameter  describing the  class (for  example, a partition describing the Jordan form, for classical groups).\n\nAu: the group A(u).\n\ndynkin:  present in good characteristic; contains the Dynkin-Richardson diagram,  given  as  a  list  of  0,1,2  describing  the coefficient on the corresponding simple root.\n\nred:  the reductive part of C_ùêÜ(u).\n\ndimBu:  the dimension of the variety ùìë·µ§.\n\nThe  records for classes contain additional  fields for certain groups: for instance,  the names given to classes by Mizuno in E‚ÇÜ, E‚Çá, E‚Çà or by Shoji in F‚ÇÑ. See the help for UnipotentClass for more details.\n\nThe  records  describing  individual  Springer  series  have  the following fields:\n\nlevi:the  indices of the  reflections corresponding to  the Levi subgroup ùêã  where  lives  the  cuspidal  local  system Œπ from which the Springer series is induced.\n\nrelgroup: The relative Weyl group N_ùêÜ(ùêãŒπ)ùêã. The first series is the principal series for which .levi=[] and .relgroup=W.\n\nlocsys:  a  list  of  length  nconjugacy_classes(.relgroup), holding in i-th  position a  pair describing  which local  system corresponds to the i-th  character of  N_ùêÜ(ùêãŒπ). The  first element  of the  pair is the index  of the concerned unipotent class u, and the second is the index of the corresponding character of A(u).\n\nZ:  the central character associated  to the Springer series, specified by its value on the generators of the center.\n\njulia> W=rootdatum(:sl,4)\nsl‚ÇÑ\n\njulia> uc=UnipotentClasses(W);\n\njulia> uc.classes\n5-element Vector{UnipotentClass}:\n UnipotentClass(1111)\n UnipotentClass(211)\n UnipotentClass(22)\n UnipotentClass(31)\n UnipotentClass(4)\n\nThe  show  function  for  unipotent  classes  accepts  all the options of showtable  and  of  charnames.  Giving  the  option  mizuno  (resp. shoji)  uses  the  names  given  by  Mizuno  (resp.  Shoji) for unipotent classes.  Moreover,  there  is  also  an  option  fourier which gives the Springer  correspondence tensored with the  sign character of each relative Weyl  group,  which  is  the  correspondence obtained via a Fourier-Deligne transform  (here  we  assume  that  p  is  very  good, so that there is a nondegenerate  invariant bilinear form on the Lie algebra, and also one can identify nilpotent orbits with unipotent classes).\n\nHere is how to display the non-cuspidal part of the Springer correspondence of  the unipotent  classes of  E‚ÇÜ using  the notations  of Mizuno for the classes  and those  of Frame  for the  characters of  the Weyl group and of Spaltenstein  for the characters  of G‚ÇÇ (this  is convenient for checking our data with the original paper of Spaltenstein):\n\njulia> uc=UnipotentClasses(rootdatum(:E6sc));\n\njulia> xdisplay(uc;cols=[5,6,7],spaltenstein=true,frame=true,mizuno=true,\n      order=false)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇu     ‚îÇ             E‚ÇÜ(Œ¶‚ÇÅ‚Å∂) G‚ÇÇ(A‚ÇÇ√óA‚ÇÇŒ¶‚ÇÅ¬≤)/Œ∂‚ÇÉ G‚ÇÇ(A‚ÇÇ√óA‚ÇÇŒ¶‚ÇÅ¬≤)/Œ∂‚ÇÉ¬≤‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇE‚ÇÜ    ‚îÇ                1:1‚Çö            Œ∂‚ÇÉ:1            Œ∂‚ÇÉ¬≤:1‚îÇ\n‚îÇE‚ÇÜ(a‚ÇÅ)‚îÇ                1:6‚Çö           Œ∂‚ÇÉ:Œµ‚Çó           Œ∂‚ÇÉ¬≤:Œµ‚Çó‚îÇ\n‚îÇD‚ÇÖ    ‚îÇ              Id:20‚Çö                                 ‚îÇ\n‚îÇA‚ÇÖ+A‚ÇÅ ‚îÇ        -1:15‚Çö 1:30‚Çö           Œ∂‚ÇÉ:Œ∏‚Ä≤           Œ∂‚ÇÉ¬≤:Œ∏‚Ä≤‚îÇ\n‚îÇA‚ÇÖ    ‚îÇ              1:15_q           Œ∂‚ÇÉ:Œ∏‚Ä≥           Œ∂‚ÇÉ¬≤:Œ∏‚Ä≥‚îÇ\n‚îÇD‚ÇÖ(a‚ÇÅ)‚îÇ              Id:64‚Çö                                 ‚îÇ\n‚îÇA‚ÇÑ+A‚ÇÅ ‚îÇ              Id:60‚Çö                                 ‚îÇ\n‚îÇD‚ÇÑ    ‚îÇ              Id:24‚Çö                                 ‚îÇ\n‚îÇA‚ÇÑ    ‚îÇ              Id:81‚Çö                                 ‚îÇ\n‚îÇD‚ÇÑ(a‚ÇÅ)‚îÇ111:20‚Çõ 3:80‚Çõ 21:90‚Çõ                                 ‚îÇ\n‚îÇA‚ÇÉ+A‚ÇÅ ‚îÇ              Id:60‚Çõ                                 ‚îÇ\n‚îÇ2A‚ÇÇ+A‚ÇÅ‚îÇ               1:10‚Çõ          Œ∂‚ÇÉ:Œµ_c          Œ∂‚ÇÉ¬≤:Œµ_c‚îÇ\n‚îÇA‚ÇÉ    ‚îÇ             Id:81‚Çö‚Ä≤                                 ‚îÇ\n‚îÇA‚ÇÇ+2A‚ÇÅ‚îÇ             Id:60‚Çö‚Ä≤                                 ‚îÇ\n‚îÇ2A‚ÇÇ   ‚îÇ              1:24‚Çö‚Ä≤            Œ∂‚ÇÉ:Œµ            Œ∂‚ÇÉ¬≤:Œµ‚îÇ\n‚îÇA‚ÇÇ+A‚ÇÅ ‚îÇ             Id:64‚Çö‚Ä≤                                 ‚îÇ\n‚îÇA‚ÇÇ    ‚îÇ      11:15‚Çö‚Ä≤ 2:30‚Çö‚Ä≤                                 ‚îÇ\n‚îÇ3A‚ÇÅ   ‚îÇ            Id:15_q‚Ä≤                                 ‚îÇ\n‚îÇ2A‚ÇÅ   ‚îÇ             Id:20‚Çö‚Ä≤                                 ‚îÇ\n‚îÇA‚ÇÅ    ‚îÇ              Id:6‚Çö‚Ä≤                                 ‚îÇ\n‚îÇ1     ‚îÇ              Id:1‚Çö‚Ä≤                                 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"type"},{"location":"ucl.html#Chevie.Ucl.UnipotentClass","page":"Unipotent classes of reductive groups","title":"Chevie.Ucl.UnipotentClass","text":"A struct UnipotentClass representing the class C of a unipotent element u  of the reductive  group ùêÜ with  Weyl group W,  contains always the following information\n\n.name  The name of C\n.parameter A parameter describing C. Sometimes the same as .name; a partition describing the Jordan form, for classical groups.\n.dimBu The dimension of the variety of Borel subgroups containing u.\n\nFor some types there is a field .mizuno or .shoji giving alternate names used in the literature.\n\nA  UnipotentClass contains also some of  the following information (all of it for some types and some characteristics but sometimes much less)\n\n.dynkin the Dynkin-Richardson diagram of C (a vector giving a weight 0, 1 or 2 to the simple roots).\n.dimred the dimension of the reductive part of C_G(u).\n.red a CoxeterCoset recording the type of the reductive part of C_G(u), with the twisting induced by the Frobenius if any.\n.Au the group A_G(u)=C_G(u)/C^0_G(u).\n.balacarter encodes the Bala-Carter classification of C, which says that u is distinguished in a Levi L (the Richardson class in a parabolic P_L) as a vector listing the indices of the simple roots in L, with those not in P_L negated.\n.rep a list of indices for roots such that if U=UnipotentGroup(W) then prod(U,u.rep) is a representative of C.\n.dimunip the dimension of the unipotent part of C_G(u).\n.AuAction an ExtendedCoxeterGroup recording the action of A_G(u) on red.\n\n\n\n\n\n","category":"type"},{"location":"ucl.html#Chevie.Ucl.ICCTable","page":"Unipotent classes of reductive groups","title":"Chevie.Ucl.ICCTable","text":"ICCTable(uc,seriesNo=1;q=Pol())\n\nThis function gives the table of decompositions of the functions X_Œπ in terms  of the functions Y_Œπ. Here Œπ is a ùêÜ-equivariant local system on  the  class  C  of  a  unipotent  element  u. Such a local system is parametrised  by the pair  (u,œï) of u  and a character  of the group of components   A(u)   of   C_ùêÜ   (u).   The  function  Y_Œπ  is  the characteristic   function  of  this   local  system  and   X_Œπ  is  the characteristic   function  of  the  corresponding  intersection  cohomology complex  on CÃÑ. The  Springer correspondence says  that the local systems can  also be  indexed by  characters of  a relative  Weyl group.  Since the coefficient of X·µ™ on Y·µ© is 0 if œá and œÜ are not characters of the same  relative Weyl group (are not in  the same Springer series), the table is  for one  Springer series,  specified by  the argument  'seriesNo' (this defaults  to 'seriesNo=1' which is the principal series). The decomposition multiplicities  are graded,  and are  given as  polynomials in one variable (specified by the argument q; if not given Pol() is assumed).\n\njulia> uc=UnipotentClasses(coxgroup(:A,3));t=ICCTable(uc)\nCoefficients of X·µ™ on Y·µ© for series L=A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅ¬≥ W_G(L)=A‚ÇÉ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇX\\Y  ‚îÇ4 31 22 211 1111‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇX4   ‚îÇ1  1  1   1    1‚îÇ\n‚îÇX31  ‚îÇ.  1  1  Œ¶‚ÇÇ   Œ¶‚ÇÉ‚îÇ\n‚îÇX22  ‚îÇ.  .  1   1   Œ¶‚ÇÑ‚îÇ\n‚îÇX211 ‚îÇ.  .  .   1   Œ¶‚ÇÉ‚îÇ\n‚îÇX1111‚îÇ.  .  .   .    1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nIn  the  above  the  multiplicities  are  given  as  products of cyclotomic polynomials  to display them  more compactly. However  the format of such a table can be controlled more precisely.\n\nFor  instance,  one  can  ask  to  not  display  the entries as products of cyclotomic polynomials and not display the zeroes as '.'\n\njulia> xdisplay(t;cycpol=false,dotzero=false)\nCoefficients of X·µ™ on Y·µ© for A3\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇX\\Y  ‚îÇ4 31 22 211   1111‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇX4   ‚îÇ1  1  1   1      1‚îÇ\n‚îÇX31  ‚îÇ0  1  1 q+1 q¬≤+q+1‚îÇ\n‚îÇX22  ‚îÇ0  0  1   1   q¬≤+1‚îÇ\n‚îÇX211 ‚îÇ0  0  0   1 q¬≤+q+1‚îÇ\n‚îÇX1111‚îÇ0  0  0   0      1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nSince  show  uses  the  function  showtable,  all  the  options of this function  are  also  available.  We  can  use  this to restrict the entries displayed  to a  given sublist  of the  rows and  columns (here the indices correspond  to the number  in Chevie of  the corresponding character of the relative Weyl group of the given Springer series):\n\njulia> uc=UnipotentClasses(coxgroup(:F,4));\njulia> t=ICCTable(uc);\njulia> sh=[13,24,22,18,14,9,11,19];\njulia> xdisplay(t,rows=sh,cols=sh)\nCoefficients of X·µ™ on Y·µ© for series L=F‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÅ‚Å¥ W_G(L)=F‚ÇÑ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇX\\Y    ‚îÇA‚ÇÅ+AÃÉ‚ÇÅ A‚ÇÇ AÃÉ‚ÇÇ A‚ÇÇ+AÃÉ‚ÇÅ AÃÉ‚ÇÇ+A‚ÇÅ B‚ÇÇ‚ÅΩ¬π¬π‚Åæ B‚ÇÇ C‚ÇÉ(a‚ÇÅ)‚ÅΩ¬π¬π‚Åæ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇXœÜ‚Çâ‚Äö‚ÇÅ‚ÇÄ ‚îÇ    1  .  .     .     .      .  .          .‚îÇ\n‚îÇXœÜ‚Ä≥‚Çà‚Äö‚Çâ ‚îÇ    1  1  .     .     .      .  .          .‚îÇ\n‚îÇXœÜ‚Ä≤‚Çà‚Äö‚Çâ ‚îÇ    1  .  1     .     .      .  .          .‚îÇ\n‚îÇXœÜ‚Ä≥‚ÇÑ‚Äö‚Çá ‚îÇ    1  1  .     1     .      .  .          .‚îÇ\n‚îÇXœÜ‚Ä≤‚ÇÜ‚Äö‚ÇÜ ‚îÇ   Œ¶‚ÇÑ  1  1     1     1      .  .          .‚îÇ\n‚îÇXœÜ‚ÇÑ‚Äö‚Çà  ‚îÇ   q¬≤  .  .     .     .      1  .          .‚îÇ\n‚îÇXœÜ‚Ä≥‚Çâ‚Äö‚ÇÜ ‚îÇ   Œ¶‚ÇÑ Œ¶‚ÇÑ  .     1     .      .  1          .‚îÇ\n‚îÇXœÜ‚Ä≤‚ÇÑ‚Äö‚Çá ‚îÇ   q¬≤  . Œ¶‚ÇÑ     .     1      .  .          1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThe  √¨o option rowlocsys=true  will display local  systems also for the row labels.\n\nThe   function  'ICCTable'  returns  an   object  with  various  pieces  of information which can help further computations.\n\n.scalar:  this contains the table of  multiplicities P·µ™·µ© of the X·µ™ on the  Y·µ©.  One  should  pay  attention  that  by default, the table is not displayed  in the same order as the  stored |.scalar|, which is in order in Chevie  of  the  characters  in  the  relative  Weyl  group;  the  table is transposed,  then lines  and rows  are sorted  by dimBu,class  no,index of character in A(u) while displayed.\n\n.group: The group W.\n\n.relgroup: The relative Weyl group for the Springer series.\n\n.series: The index of the Springer series given for W.\n\n.dimBu: The list of dim‚Ñ¨·µ§ for each local system (u,œÜ) in the series.\n\n:L:  The matrix of (unnormalized) scalar products of the functions Y·µ© with  themselves,  that  is  the  (œÜœá)  entry  is _gùêÜ(ùîΩ_q) Y·µ©(g) Y·µ™(g). This is thus a symmetric, block-diagonal matrix where the diagonal blocks  correspond to geometric unipotent conjugacy classes. This matrix is obtained as a by-product of Lusztig's algorithm to compute P·µ©·µ™.\n\n\n\n\n\n","category":"type"},{"location":"ucl.html#Chevie.Ucl.XTable","page":"Unipotent classes of reductive groups","title":"Chevie.Ucl.XTable","text":"XTable(uc;classes=false)\n\nThis  function presents  in a  different way  the information obtained from ICCTable. Let X_uœï=q^12(codim C-dim Z(ùêã ))X_uœï where C is the  class of u and Z(ùêã ) is the center of Levi subgroup on which lives the cuspidal local system attached to the local system (u,œï).\n\nThen  XTable(uc) gives the decomposition of the functions X_uœï on local   systems.  t=XTable(uc,classes==true)  gives  the  values  of  the functions   X_uœï   on   unipotent   classes.   A   side  effect  of classes=true  is  to  compute  the  cardinal  of  the unipotent conjugacy classes,  available in t.cardClass; in this case displaying t will show the  cardinal  of  the  centralizers  of  unipotent  elements, available in t.centClass.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> XTable(UnipotentClasses(W))\nValues of character sheaves XÃÉ·µ™ on local systems œÜ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇXÃÉ·µ™|œÜ      ‚îÇ   1 A‚ÇÅ AÃÉ‚ÇÅ G‚ÇÇ(a‚ÇÅ)‚ÅΩ¬π¬π¬π‚Åæ G‚ÇÇ(a‚ÇÅ)‚ÅΩ¬≤¬π‚Åæ G‚ÇÇ(a‚ÇÅ) G‚ÇÇ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇX_œÜ‚ÇÅ‚Äö‚ÇÄ^G‚ÇÇ ‚îÇ   1  1  1           .          .      1  1‚îÇ\n‚îÇX_œÜ‚ÇÅ‚Äö‚ÇÜ^G‚ÇÇ ‚îÇ  q‚Å∂  .  .           .          .      .  .‚îÇ\n‚îÇX_œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ^G‚ÇÇ‚îÇ  q¬≥  .  q           .          q      .  .‚îÇ\n‚îÇX_œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ^G‚ÇÇ‚îÇ  q¬≥ q¬≥  .           .          .      .  .‚îÇ\n‚îÇX_œÜ‚ÇÇ‚Äö‚ÇÅ^G‚ÇÇ ‚îÇ qŒ¶‚Çà  q  q           .          .      q  .‚îÇ\n‚îÇX_œÜ‚ÇÇ‚Äö‚ÇÇ^G‚ÇÇ ‚îÇq¬≤Œ¶‚ÇÑ q¬≤ q¬≤           .          .      .  .‚îÇ\n‚îÇX_Id^.    ‚îÇ   .  .  .          q¬≤          .      .  .‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThe functions XÃÉ in the first column are decorated by putting as an exponent the relative groups W_ùêÜ (ùêã).\n\njulia> t=XTable(UnipotentClasses(W);classes=true)\nValues of character sheaves XÃÉ·µ™ on unipotent classes\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇXÃÉ·µ™|class  ‚îÇ           1     A‚ÇÅ     AÃÉ‚ÇÅ G‚ÇÇ(a‚ÇÅ) G‚ÇÇ(a‚ÇÅ)‚Çç‚ÇÇ‚ÇÅ‚Çé G‚ÇÇ(a‚ÇÅ)‚Çç‚ÇÉ‚Çé G‚ÇÇ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇX_œÜ‚ÇÅ‚Äö‚ÇÄ^G‚ÇÇ ‚îÇ           1      1      1      1          1         1  1‚îÇ\n‚îÇX_œÜ‚ÇÅ‚Äö‚ÇÜ^G‚ÇÇ ‚îÇ          q‚Å∂      .      .      .          .         .  .‚îÇ\n‚îÇX_œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ^G‚ÇÇ‚îÇ          q¬≥      .      q     2q          .        -q  .‚îÇ\n‚îÇX_œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ^G‚ÇÇ‚îÇ          q¬≥     q¬≥      .      .          .         .  .‚îÇ\n‚îÇX_œÜ‚ÇÇ‚Äö‚ÇÅ^G‚ÇÇ ‚îÇ         qŒ¶‚Çà      q      q      q          q         q  .‚îÇ\n‚îÇX_œÜ‚ÇÇ‚Äö‚ÇÇ^G‚ÇÇ ‚îÇ        q¬≤Œ¶‚ÇÑ     q¬≤     q¬≤      .          .         .  .‚îÇ\n‚îÇX_Id^.    ‚îÇ           .      .      .     q¬≤        -q¬≤        q¬≤  .‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ|C_ùêÜ(u)|  ‚îÇq‚Å∂Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤Œ¶‚ÇÉŒ¶‚ÇÜ q‚Å∂Œ¶‚ÇÅŒ¶‚ÇÇ q‚Å¥Œ¶‚ÇÅŒ¶‚ÇÇ    6q‚Å¥        2q‚Å¥       3q‚Å¥ q¬≤‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> XTable(UnipotentClasses(W,2))\nValues of character sheaves XÃÉ·µ™ on local systems œÜ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇXÃÉ·µ™|œÜ      ‚îÇ   1 A‚ÇÅ AÃÉ‚ÇÅ G‚ÇÇ(a‚ÇÅ)‚ÅΩ¬π¬π¬π‚Åæ G‚ÇÇ(a‚ÇÅ)‚ÅΩ¬≤¬π‚Åæ G‚ÇÇ(a‚ÇÅ) G‚ÇÇ‚ÅΩ¬π¬π‚Åæ G‚ÇÇ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇX_œÜ‚ÇÅ‚Äö‚ÇÄ^G‚ÇÇ ‚îÇ   1  1  1           .          .      1      .  1‚îÇ\n‚îÇX_œÜ‚ÇÅ‚Äö‚ÇÜ^G‚ÇÇ ‚îÇ  q‚Å∂  .  .           .          .      .      .  .‚îÇ\n‚îÇX_œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ^G‚ÇÇ‚îÇ  q¬≥  .  q           .          q      .      .  .‚îÇ\n‚îÇX_œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ^G‚ÇÇ‚îÇ  q¬≥ q¬≥  .           .          .      .      .  .‚îÇ\n‚îÇX_œÜ‚ÇÇ‚Äö‚ÇÅ^G‚ÇÇ ‚îÇ qŒ¶‚Çà  q  q           .          .      q      .  .‚îÇ\n‚îÇX_œÜ‚ÇÇ‚Äö‚ÇÇ^G‚ÇÇ ‚îÇq¬≤Œ¶‚ÇÑ q¬≤ q¬≤           .          .      .      .  .‚îÇ\n‚îÇX_Id^.    ‚îÇ   .  .  .          q¬≤          .      .      .  .‚îÇ\n‚îÇX_Id^.    ‚îÇ   .  .  .           .          .      .      q  .‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> XTable(UnipotentClasses(rootdatum(:sl,4)))\nValues of character sheaves XÃÉ·µ™ on local systems œÜ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇXÃÉ·µ™|œÜ    ‚îÇ1111 211 22‚ÅΩ¬π¬π‚Åæ 22 31 4 4^(Œ∂‚ÇÑ) 4‚ÅΩ‚Åª¬π‚Åæ 4^(Œ∂‚ÇÑ¬≥)‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇX‚ÇÅ‚ÇÅ‚ÇÅ‚ÇÅ^A‚ÇÉ‚îÇ  q‚Å∂   .      .  .  . .      .     .       .‚îÇ\n‚îÇX‚ÇÇ‚ÇÅ‚ÇÅ^A‚ÇÉ ‚îÇq¬≥Œ¶‚ÇÉ  q¬≥      .  .  . .      .     .       .‚îÇ\n‚îÇX‚ÇÇ‚ÇÇ^A‚ÇÉ  ‚îÇq¬≤Œ¶‚ÇÑ  q¬≤      . q¬≤  . .      .     .       .‚îÇ\n‚îÇX‚ÇÉ‚ÇÅ^A‚ÇÉ  ‚îÇ qŒ¶‚ÇÉ qŒ¶‚ÇÇ      .  q  q .      .     .       .‚îÇ\n‚îÇX‚ÇÑ^A‚ÇÉ   ‚îÇ   1   1      .  1  1 1      .     .       .‚îÇ\n‚îÇX‚ÇÅ‚ÇÅ^A‚ÇÅ  ‚îÇ   .   .     q¬≥  .  . .      .     .       .‚îÇ\n‚îÇX‚ÇÇ^A‚ÇÅ   ‚îÇ   .   .     q¬≤  .  . .      .     q       .‚îÇ\n‚îÇX_Id^.  ‚îÇ   .   .      .  .  . .   q¬≥‚ÅÑ‚ÇÇ     .       .‚îÇ\n‚îÇX_Id^.  ‚îÇ   .   .      .  .  . .      .     .    q¬≥‚ÅÑ‚ÇÇ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"type"},{"location":"ucl.html#Chevie.Ucl.GreenTable","page":"Unipotent classes of reductive groups","title":"Chevie.Ucl.GreenTable","text":"GreenTable(uc;classes=false)\n\nKeeping the same notations as in the description of 'XTable', this function returns a table of the functions Q_wF, attached to elements wF W_ùêÜ (ùêã)F where W_ùêÜ (ùêã) are the relative weyl groups attached to cuspidal local  systems.  These  functions  are  defined  by Q_wF=_uœï œï(wF) X_uœï. An point to note is that in the principal Springer series, when ùêì  is  a  maximal  torus,  the  function  Q_wF  coincides  with the Deligne-Lusztig  character R^ùêÜ  _ùêì_W(1). As  for 'XTable', by default the  table  gives  the  values  of  the  functions  on  local  systems.  If classes=true  is  given,  then  it  gives  the  values  of  the functions Q_wF on conjugacy classes.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> GreenTable(UnipotentClasses(W))\nValues of Green functions Q_wF on local systems œÜ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇQ·¥µ_wF|œÜ   ‚îÇ        1     A‚ÇÅ       AÃÉ‚ÇÅ G‚ÇÇ(a‚ÇÅ)‚ÅΩ¬π¬π¬π‚Åæ G‚ÇÇ(a‚ÇÅ)‚ÅΩ¬≤¬π‚Åæ G‚ÇÇ(a‚ÇÅ) G‚ÇÇ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇQ_A‚ÇÄ^G‚ÇÇ   ‚îÇ  Œ¶‚ÇÇ¬≤Œ¶‚ÇÉŒ¶‚ÇÜ   Œ¶‚ÇÇŒ¶‚ÇÉ (2q+1)Œ¶‚ÇÇ           .          q   2q+1  1‚îÇ\n‚îÇQ_AÃÉ‚ÇÅ^G‚ÇÇ   ‚îÇ-Œ¶‚ÇÅŒ¶‚ÇÇŒ¶‚ÇÉŒ¶‚ÇÜ  -Œ¶‚ÇÅŒ¶‚ÇÉ       Œ¶‚ÇÇ           .          q      1  1‚îÇ\n‚îÇQ_A‚ÇÅ^G‚ÇÇ   ‚îÇ-Œ¶‚ÇÅŒ¶‚ÇÇŒ¶‚ÇÉŒ¶‚ÇÜ   Œ¶‚ÇÇŒ¶‚ÇÜ      -Œ¶‚ÇÅ           .         -q      1  1‚îÇ\n‚îÇQ_G‚ÇÇ^G‚ÇÇ   ‚îÇ Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤Œ¶‚ÇÉ -Œ¶‚ÇÅŒ¶‚ÇÇ¬≤    -Œ¶‚ÇÅŒ¶‚ÇÇ           .         -q     Œ¶‚ÇÇ  1‚îÇ\n‚îÇQ_A‚ÇÇ^G‚ÇÇ   ‚îÇ Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤Œ¶‚ÇÜ  Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ    -Œ¶‚ÇÅŒ¶‚ÇÇ           .          q    -Œ¶‚ÇÅ  1‚îÇ\n‚îÇQ_A‚ÇÅ+AÃÉ‚ÇÅ^G‚ÇÇ‚îÇ  Œ¶‚ÇÅ¬≤Œ¶‚ÇÉŒ¶‚ÇÜ  -Œ¶‚ÇÅŒ¶‚ÇÜ (2q-1)Œ¶‚ÇÅ           .         -q  -2q+1  1‚îÇ\n‚îÇQ_^.      ‚îÇ        .      .        .          q¬≤          .      .  .‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThe  functions Q_wF depend only on the conjugacy class of wF, so in the  first column the indices of 'Q' are the names of the conjugacy classes of W_ùêÜ(ùêã). The exponents are the names of the groups W_ùêÜ(ùêã).\n\njulia> GreenTable(UnipotentClasses(W);classes=true)\nValues of Green functions Q_wF on unipotent classes\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇQ·¥µ_wF|class‚îÇ        1     A‚ÇÅ       AÃÉ‚ÇÅ G‚ÇÇ(a‚ÇÅ) G‚ÇÇ(a‚ÇÅ)‚Çç‚ÇÇ‚ÇÅ‚Çé G‚ÇÇ(a‚ÇÅ)‚Çç‚ÇÉ‚Çé G‚ÇÇ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇQ_A‚ÇÄ^G‚ÇÇ    ‚îÇ  Œ¶‚ÇÇ¬≤Œ¶‚ÇÉŒ¶‚ÇÜ   Œ¶‚ÇÇŒ¶‚ÇÉ (2q+1)Œ¶‚ÇÇ   4q+1       2q+1        Œ¶‚ÇÇ  1‚îÇ\n‚îÇQ_AÃÉ‚ÇÅ^G‚ÇÇ    ‚îÇ-Œ¶‚ÇÅŒ¶‚ÇÇŒ¶‚ÇÉŒ¶‚ÇÜ  -Œ¶‚ÇÅŒ¶‚ÇÉ       Œ¶‚ÇÇ   2q+1          1       -Œ¶‚ÇÅ  1‚îÇ\n‚îÇQ_A‚ÇÅ^G‚ÇÇ    ‚îÇ-Œ¶‚ÇÅŒ¶‚ÇÇŒ¶‚ÇÉŒ¶‚ÇÜ   Œ¶‚ÇÇŒ¶‚ÇÜ      -Œ¶‚ÇÅ  -2q+1          1        Œ¶‚ÇÇ  1‚îÇ\n‚îÇQ_G‚ÇÇ^G‚ÇÇ    ‚îÇ Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤Œ¶‚ÇÉ -Œ¶‚ÇÅŒ¶‚ÇÇ¬≤    -Œ¶‚ÇÅŒ¶‚ÇÇ    -Œ¶‚ÇÅ         Œ¶‚ÇÇ      2q+1  1‚îÇ\n‚îÇQ_A‚ÇÇ^G‚ÇÇ    ‚îÇ Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤Œ¶‚ÇÜ  Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ    -Œ¶‚ÇÅŒ¶‚ÇÇ     Œ¶‚ÇÇ        -Œ¶‚ÇÅ     -2q+1  1‚îÇ\n‚îÇQ_A‚ÇÅ+AÃÉ‚ÇÅ^G‚ÇÇ ‚îÇ  Œ¶‚ÇÅ¬≤Œ¶‚ÇÉŒ¶‚ÇÜ  -Œ¶‚ÇÅŒ¶‚ÇÜ (2q-1)Œ¶‚ÇÅ  -4q+1      -2q+1       -Œ¶‚ÇÅ  1‚îÇ\n‚îÇQ_^.       ‚îÇ        .      .        .     q¬≤        -q¬≤        q¬≤  .‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> GreenTable(UnipotentClasses(rootdatum(:sl,4)))\nValues of Green functions Q_wF on local systems œÜ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇQ·¥µ_wF|œÜ ‚îÇ     1111          211 22‚ÅΩ¬π¬π‚Åæ       22   31 4 4^(Œ∂‚ÇÑ) 4‚ÅΩ‚Åª¬π‚Åæ 4^(Œ∂‚ÇÑ¬≥)‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇQ‚ÇÅ‚ÇÅ‚ÇÅ‚ÇÅ^A‚ÇÉ‚îÇ  Œ¶‚ÇÇ¬≤Œ¶‚ÇÉŒ¶‚ÇÑ (3q¬≤+2q+1)Œ¶‚ÇÇ      . (2q+1)Œ¶‚ÇÇ 3q+1 1      .     .       .‚îÇ\n‚îÇQ‚ÇÇ‚ÇÅ‚ÇÅ^A‚ÇÉ ‚îÇ-Œ¶‚ÇÅŒ¶‚ÇÇŒ¶‚ÇÉŒ¶‚ÇÑ   -q¬≥+q¬≤+q+1      .       Œ¶‚ÇÇ   Œ¶‚ÇÇ 1      .     .       .‚îÇ\n‚îÇQ‚ÇÇ‚ÇÇ^A‚ÇÉ  ‚îÇ  Œ¶‚ÇÅ¬≤Œ¶‚ÇÉŒ¶‚ÇÑ        -Œ¶‚ÇÅŒ¶‚ÇÑ      .  2q¬≤-q+1  -Œ¶‚ÇÅ 1      .     .       .‚îÇ\n‚îÇQ‚ÇÉ‚ÇÅ^A‚ÇÉ  ‚îÇ Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤Œ¶‚ÇÑ        -Œ¶‚ÇÅŒ¶‚ÇÇ      .    -Œ¶‚ÇÅŒ¶‚ÇÇ    1 1      .     .       .‚îÇ\n‚îÇQ‚ÇÑ^A‚ÇÉ   ‚îÇ -Œ¶‚ÇÅ¬≥Œ¶‚ÇÇŒ¶‚ÇÉ        Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ      .      -Œ¶‚ÇÅ  -Œ¶‚ÇÅ 1      .     .       .‚îÇ\n‚îÇQ‚ÇÅ‚ÇÅ^A‚ÇÅ  ‚îÇ        .            .   q¬≤Œ¶‚ÇÇ        .    . .      .     q       .‚îÇ\n‚îÇQ‚ÇÇ^A‚ÇÅ   ‚îÇ        .            .  -q¬≤Œ¶‚ÇÅ        .    . .      .     q       .‚îÇ\n‚îÇQ_^.    ‚îÇ        .            .      .        .    . .   q¬≥‚ÅÑ‚ÇÇ     .       .‚îÇ\n‚îÇQ_^.    ‚îÇ        .            .      .        .    . .      .     .    q¬≥‚ÅÑ‚ÇÇ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"type"},{"location":"ucl.html#Chevie.Ucl.UnipotentValues","page":"Unipotent classes of reductive groups","title":"Chevie.Ucl.UnipotentValues","text":"UnipotentValues(uc,classes=false)\n\nThis  function returns  a table  of the  values of  unipotent characters on local systems (by default) or on unipotent classes (if classes=true).\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> UnipotentValues(UnipotentClasses(W);classes=true)\nValues of unipotent characters for G‚ÇÇ on unipotent classes\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ       ‚îÇ        1          A‚ÇÅ     AÃÉ‚ÇÅ   G‚ÇÇ(a‚ÇÅ) G‚ÇÇ(a‚ÇÅ)‚Çç‚ÇÇ‚ÇÅ‚Çé G‚ÇÇ(a‚ÇÅ)‚Çç‚ÇÉ‚Çé G‚ÇÇ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÄ   ‚îÇ        1           1      1        1          1         1  1‚îÇ\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÜ   ‚îÇ       q‚Å∂           .      .        .          .         .  .‚îÇ\n‚îÇœÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ  ‚îÇ  qŒ¶‚ÇÉŒ¶‚ÇÜ/3    -qŒ¶‚ÇÅŒ¶‚ÇÇ/3      q (q+5)q/3     -qŒ¶‚ÇÅ/3     qŒ¶‚ÇÅ/3  .‚îÇ\n‚îÇœÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ  ‚îÇ  qŒ¶‚ÇÉŒ¶‚ÇÜ/3  (2q¬≤+1)q/3      .    qŒ¶‚ÇÅ/3     -qŒ¶‚ÇÅ/3  (q+2)q/3  .‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÅ   ‚îÇ qŒ¶‚ÇÇ¬≤Œ¶‚ÇÉ/6 (2q+1)qŒ¶‚ÇÇ/6  qŒ¶‚ÇÇ/2 (q+5)q/6     -qŒ¶‚ÇÅ/6     qŒ¶‚ÇÅ/6  .‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÇ   ‚îÇ qŒ¶‚ÇÇ¬≤Œ¶‚ÇÜ/2       qŒ¶‚ÇÇ/2  qŒ¶‚ÇÇ/2   -qŒ¶‚ÇÅ/2      qŒ¶‚ÇÇ/2    -qŒ¶‚ÇÅ/2  .‚îÇ\n‚îÇG‚ÇÇ[-1] ‚îÇ qŒ¶‚ÇÅ¬≤Œ¶‚ÇÉ/2      -qŒ¶‚ÇÅ/2 -qŒ¶‚ÇÅ/2   -qŒ¶‚ÇÅ/2      qŒ¶‚ÇÇ/2    -qŒ¶‚ÇÅ/2  .‚îÇ\n‚îÇG‚ÇÇ[1]  ‚îÇ qŒ¶‚ÇÅ¬≤Œ¶‚ÇÜ/6 (2q-1)qŒ¶‚ÇÅ/6 -qŒ¶‚ÇÅ/2 (q+5)q/6     -qŒ¶‚ÇÅ/6     qŒ¶‚ÇÅ/6  .‚îÇ\n‚îÇG‚ÇÇ[Œ∂‚ÇÉ] ‚îÇqŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤/3    -qŒ¶‚ÇÅŒ¶‚ÇÇ/3      .    qŒ¶‚ÇÅ/3     -qŒ¶‚ÇÅ/3  (q+2)q/3  .‚îÇ\n‚îÇG‚ÇÇ[Œ∂‚ÇÉ¬≤]‚îÇqŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤/3    -qŒ¶‚ÇÅŒ¶‚ÇÇ/3      .    qŒ¶‚ÇÅ/3     -qŒ¶‚ÇÅ/3  (q+2)q/3  .‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> UnipotentValues(UnipotentClasses(W,3);classes=true)\nValues of unipotent characters for G‚ÇÇ on unipotent classes\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ       ‚îÇ        1          A‚ÇÅ         AÃÉ‚ÇÅ G‚ÇÇ(a‚ÇÅ) G‚ÇÇ(a‚ÇÅ)‚Çç‚ÇÇ‚Çé    G‚ÇÇ       G‚ÇÇ_(Œ∂‚ÇÉ)‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÄ   ‚îÇ        1           1          1      1         1     1             1‚îÇ\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÜ   ‚îÇ       q‚Å∂           .          .      .         .     .             .‚îÇ\n‚îÇœÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ  ‚îÇ  qŒ¶‚ÇÉŒ¶‚ÇÜ/3    -qŒ¶‚ÇÅŒ¶‚ÇÇ/3        q/3  qŒ¶‚ÇÇ/3    -qŒ¶‚ÇÅ/3 -2q/3           q/3‚îÇ\n‚îÇœÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ  ‚îÇ  qŒ¶‚ÇÉŒ¶‚ÇÜ/3  (2q¬≤+1)q/3        q/3  qŒ¶‚ÇÇ/3    -qŒ¶‚ÇÅ/3 -2q/3           q/3‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÅ   ‚îÇ qŒ¶‚ÇÇ¬≤Œ¶‚ÇÉ/6 (2q+1)qŒ¶‚ÇÇ/6  (3q+1)q/6  qŒ¶‚ÇÇ/6    -qŒ¶‚ÇÅ/6  2q/3          -q/3‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÇ   ‚îÇ qŒ¶‚ÇÇ¬≤Œ¶‚ÇÜ/2       qŒ¶‚ÇÇ/2      qŒ¶‚ÇÇ/2 -qŒ¶‚ÇÅ/2     qŒ¶‚ÇÇ/2     .             .‚îÇ\n‚îÇG‚ÇÇ[-1] ‚îÇ qŒ¶‚ÇÅ¬≤Œ¶‚ÇÉ/2      -qŒ¶‚ÇÅ/2     -qŒ¶‚ÇÅ/2 -qŒ¶‚ÇÅ/2     qŒ¶‚ÇÇ/2     .             .‚îÇ\n‚îÇG‚ÇÇ[1]  ‚îÇ qŒ¶‚ÇÅ¬≤Œ¶‚ÇÜ/6 (2q-1)qŒ¶‚ÇÅ/6 (-3q+1)q/6  qŒ¶‚ÇÇ/6    -qŒ¶‚ÇÅ/6  2q/3          -q/3‚îÇ\n‚îÇG‚ÇÇ[Œ∂‚ÇÉ] ‚îÇqŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤/3    -qŒ¶‚ÇÅŒ¶‚ÇÇ/3        q/3  qŒ¶‚ÇÇ/3    -qŒ¶‚ÇÅ/3   q/3 (-Œ∂‚ÇÉ+2Œ∂‚ÇÉ¬≤)q/3‚îÇ\n‚îÇG‚ÇÇ[Œ∂‚ÇÉ¬≤]‚îÇqŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤/3    -qŒ¶‚ÇÅŒ¶‚ÇÇ/3        q/3  qŒ¶‚ÇÇ/3    -qŒ¶‚ÇÅ/3   q/3  (2Œ∂‚ÇÉ-Œ∂‚ÇÉ¬≤)q/3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ       ‚îÇ     G‚ÇÇ_(Œ∂‚ÇÉ¬≤)       (AÃÉ‚ÇÅ)‚ÇÉ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÄ   ‚îÇ            1           1‚îÇ\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÜ   ‚îÇ            .           .‚îÇ\n‚îÇœÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ  ‚îÇ          q/3  (2q¬≤+1)q/3‚îÇ\n‚îÇœÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ  ‚îÇ          q/3    -qŒ¶‚ÇÅŒ¶‚ÇÇ/3‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÅ   ‚îÇ         -q/3 (2q+1)qŒ¶‚ÇÇ/6‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÇ   ‚îÇ            .       qŒ¶‚ÇÇ/2‚îÇ\n‚îÇG‚ÇÇ[-1] ‚îÇ            .      -qŒ¶‚ÇÅ/2‚îÇ\n‚îÇG‚ÇÇ[1]  ‚îÇ         -q/3 (2q-1)qŒ¶‚ÇÅ/6‚îÇ\n‚îÇG‚ÇÇ[Œ∂‚ÇÉ] ‚îÇ (2Œ∂‚ÇÉ-Œ∂‚ÇÉ¬≤)q/3    -qŒ¶‚ÇÅŒ¶‚ÇÇ/3‚îÇ\n‚îÇG‚ÇÇ[Œ∂‚ÇÉ¬≤]‚îÇ(-Œ∂‚ÇÉ+2Œ∂‚ÇÉ¬≤)q/3    -qŒ¶‚ÇÅŒ¶‚ÇÇ/3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"function"},{"location":"ucl.html#Chevie.Ucl.induced_linear_form","page":"Unipotent classes of reductive groups","title":"Chevie.Ucl.induced_linear_form","text":"induced_linear_form(W, H, h)\n\nThis routine can be used to find the unipotent class in the reductive group with  Weyl group W which contains a  given unipotent class of a reductive subgroup of maximum rank represented by the reflection subgroup H of W.\n\nThe  argument h is a linear form on  the roots of H, given by its value on  the simple roots; this  linear form is extended  to the roots of W by 0  on the orthogonal of the roots  of H; and finally the resulting form is  conjugated by an element of W so that it takes positive values on the simple roots. If the initial form describes a Dynkin-Richardson diagram for H, the result will describe a Dynkin-Richardson diagram for W.\n\njulia> W=coxgroup(:F,4)\nF‚ÇÑ\n\njulia> H=reflection_subgroup(W,[1,3])\nF‚ÇÑ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÅ√óAÃÉ‚ÇÅŒ¶‚ÇÅ¬≤\n\njulia> induced_linear_form(W,H,[2,2])\n4-element Vector{Int64}:\n 0\n 1\n 0\n 0\n\njulia> uc=UnipotentClasses(W);\n\njulia> uc.classes[4].dynkin\n4-element Vector{Int64}:\n 0\n 1\n 0\n 0\n\njulia> uc.classes[4]\nUnipotentClass(A‚ÇÅ+AÃÉ‚ÇÅ)\n\nThe  example above shows that the class containing the regular class of the Levi subgroup of type A‚ÇÅ√óAÃÉ‚ÇÅ is the class A‚ÇÅ+AÃÉ‚ÇÅ.\n\n\n\n\n\n","category":"function"},{"location":"ucl.html#Chevie.Ucl.special_pieces","page":"Unipotent classes of reductive groups","title":"Chevie.Ucl.special_pieces","text":"'special_pieces(<uc>)'\n\nThe special pieces form a partition of the unipotent variety of a reductive group   ùêÜ   which   was   first   defined   in   Spaltenstein1982  chap. III  as the fibres  of d^2, where  d is a \"duality map\". Another definition is as the set of classes in the Zariski closure of a  special class  and not  in the  Zariski closure  of any  smaller special class,  where a  special class  is the  support of  the image  of a special character by the Springer correspondence.\n\nEach  piece is a union of unipotent  conjugacy classes so is represented in Chevie  as a  list of  class numbers.  Thus the  list of  special pieces is returned  as  a  list  of  lists  of  class  numbers. The list is sorted by increasing  piece dimension, while each piece is sorted by decreasing class dimension, so that the special class is listed first.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> special_pieces(UnipotentClasses(W))\n3-element Vector{Vector{Int64}}:\n [1]\n [4, 3, 2]\n [5]\n\njulia> special_pieces(UnipotentClasses(W,3))\n3-element Vector{Vector{Int64}}:\n [1]\n [4, 3, 2, 6]\n [5]\n\nThe   example  above  shows  that  the  special  pieces  are  different  in characteristic 3.\n\n\n\n\n\n","category":"function"},{"location":"ucl.html#Chevie.Ucl.distinguished_parabolics","page":"Unipotent classes of reductive groups","title":"Chevie.Ucl.distinguished_parabolics","text":"distinguished_parabolics(W)\n\nthe  list of distinguished standard parabolic subgroups of W as defined by Richardson,  each  given  as  a  list of the corresponding indices. The distinguished  unipotent  conjugacy  classes  of  W  consist of the dense unipotent  orbit in  the unipotent  radical of  such a  parabolic subgroup. Their  Dynkin-Richardson  diagram  contains  a  0  at  the  indices  of the parabolic subgroup, otherwise a 2.\n\njulia> W=coxgroup(:F,4)\nF‚ÇÑ\n\njulia> distinguished_parabolics(W)\n4-element Vector{Vector{Int64}}:\n []\n [3]\n [1, 3]\n [1, 3, 4]\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Classes/characters-of-reflection-groups","page":"Classes/characters of reflection groups","title":"Classes/characters of reflection groups","text":"","category":"section"},{"location":"chars.html","page":"Classes/characters of reflection groups","title":"Classes/characters of reflection groups","text":"Pages=[\"chars.md\"]","category":"page"},{"location":"chars.html","page":"Classes/characters of reflection groups","title":"Classes/characters of reflection groups","text":"Chars\nCharTable\non_chars\ncharinfo\ncharnames(io::IO, W::Union{Coset, Group})\nclassnames\nclassinfo\nfakedegree\nfakedegrees\nrepresentation(::Union{Chars.Hastype,FiniteCoxeterGroup},::Integer)\nrepresentations(::Union{Spets, FiniteCoxeterGroup, PermRootGroup})\ninduction_table\nj_induction_table\nJ_induction_table\nschur_functor\ndetPerm\nconjPerm","category":"page"},{"location":"chars.html#Chevie.Chars","page":"Classes/characters of reflection groups","title":"Chevie.Chars","text":"Characters and conjugacy classes of complex reflection groups.\n\nThe  CharTable of a finite complex reflection group W is computed using the  decomposition of W in irreducible  groups (see refltype). For each irreducible  group the character  table is either  computed using recursive formulas  for the infinite series,  or read into the  system from a library file  for the  exceptional types.  Thus, character  tables can  be obtained quickly  even for very large groups  (e.g., E‚Çà). Similar remarks apply for conjugacy classes.\n\nThe  conjugacy  classes  and  irreducible  characters of irreducible finite complex reflection groups have canonical labelings by certain combinatorial objects;  these labelings are used in the  tables we give. For the classes, these  are partitions or partition tuples  for the infinite series, or, for exceptional  Coxeter  groups,  Carter's  admissible  diagrams Carter1972; for other  primitive  complex  reflection  groups  we  just  use  words  in the generators  to specify  the classes.  For the  characters, these  are again partitions  or partition tuples for the infinite series, and for the others they  are pairs  of two  integers (d,e)  where d  is the  degree of the character  and  e  is  the  smallest  symmetric  power  of the reflection representation  containing  the  given  character  as  a  constituent  (the b-invariant of the character). This information is given by the functions classinfo  and  charinfo.  When  you  display  the character table, the canonical labelings for classes and characters are displayed.\n\nA  typical example  is coxgroup(:A,n),  the symmetric  group ùîñ‚Çô‚Çä‚ÇÅ where classes  and characters are  parameterized by partitions  of n+1 (this is also the case for coxsym(n+1)).\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> CharTable(W)\nCharTable(A‚ÇÉ)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ    ‚îÇ1111 211 22 31  4‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1111‚îÇ   1  -1  1  1 -1‚îÇ\n‚îÇ211 ‚îÇ   3  -1 -1  .  1‚îÇ\n‚îÇ22  ‚îÇ   2   .  2 -1  .‚îÇ\n‚îÇ31  ‚îÇ   3   1 -1  . -1‚îÇ\n‚îÇ4   ‚îÇ   1   1  1  1  1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> ct=CharTable(W)\nCharTable(G‚ÇÇ)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ     ‚îÇA‚ÇÄ AÃÉ‚ÇÅ A‚ÇÅ G‚ÇÇ A‚ÇÇ A‚ÇÅ+AÃÉ‚ÇÅ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÄ ‚îÇ 1  1  1  1  1     1‚îÇ\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÜ ‚îÇ 1 -1 -1  1  1     1‚îÇ\n‚îÇœÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ‚îÇ 1  1 -1 -1  1    -1‚îÇ\n‚îÇœÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ‚îÇ 1 -1  1 -1  1    -1‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÅ ‚îÇ 2  .  .  1 -1    -2‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÇ ‚îÇ 2  .  . -1 -1     2‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> ct.charnames\n6-element Vector{String}:\n \"\\phi_{1,0}\"\n \"\\phi_{1,6}\"\n \"\\phi_{1,3}'\"\n \"\\phi_{1,3}''\"\n \"\\phi_{2,1}\"\n \"\\phi_{2,2}\"\n\njulia> ct.classnames\n6-element Vector{String}:\n \"A_0\"\n \"\\tilde A_1\"\n \"A_1\"\n \"G_2\"\n \"A_2\"\n \"A_1+\\tilde A_1\"\n\nReflection  groups  have  fake  degrees  (see fakedegrees), whose valuation and degree give two integers b,B for each irreducible character of  W. For  spetsial groups  (which include  finite Coxeter  groups), the valuation  and degree of the generic degrees  of the Hecke algebra give two more integers a,A (for Coxeter groups see Carter1985, Ch.11 for more details). These integers are also used in the  operations of  truncated induction,  see j_induction_table and J_induction_table.\n\nIwahori-Hecke  algebras and  cyclotomic Hecke  algebras also have character tables, see the corresponding chapters.\n\nWe  now describe for each type our conventions for labeling the classes and characters.\n\nType  A‚Çô  (n‚â•0).  In  this  case  we  have  W ‚âÖ ùîñ‚Çô‚Çä‚ÇÅ. The classes and characters  are labelled by partitions of  n+1. The partition labelling a class  is the cycle type of the  elements in that class; the representative in  '.classtext' is  the concatenation  of the  words corresponding to each part,  where the word for a part  i is  the  product of i-1 consecutive generators  (starting  one  higher  than  the  last  generator used for the previous  parts). The partition labelling a character describes the type of the  Young  subgroup  such  that  the  trivial  character induced from this subgroup  contains that character with multiplicity 1 and such that every other character occurring in this induced character has a higher a-value. Thus,  the sign  character is  labelled by  the partition  (1‚Åø‚Å∫¬π) and the trivial character by the partition (n+1). The character of the reflection representation of W is labelled by (n,1).\n\nType  B‚Çô  (n‚â•2).  In  this  case  W=W(B‚Çô) is isomorphic to the wreath product  of the cyclic  group of order  2 with the  symmetric group ùîñ‚Çô. Hence  the classes and characters are  parameterized by pairs of partitions such  that the total sum of their  parts equals n. The pair corresponding to  a class describes the signed cycle type for the elements in that class, as in Carter1972. We use the convention that if (Œª,Œº) is such a pair then Œª corresponds to the positive and Œº to the negative cycles.  Thus, (1‚Åø,-) and  (-,1‚Åø) label respectively  the trivial class and  the  class  of  the  longest  element.\n\nThe  pair  corresponding  to  an  irreducible  character  is determined via Clifford  theory, as  follows. We  have a  semidirect product decomposition W(B‚Çô)=N  ‚ãä  ùîñ‚Çô  where  N  is  the standard n-dimensional ùîΩ‚ÇÇ‚Åø-vector space.  For a,b ‚â• 0 such that  n=a+b let Œ∑_ab be the irreducible character  of N  which takes  value 1  on the  first a standard basis vectors  and value -1 on the last b standard basis vectors of N. Then the  inertia subgroup of Œ∑_ab has the form T_ab=N(ùîñ_a  ùîñ_b) and  we  can  extend  Œ∑_ab  trivially  to  an  irreducible character Œ∑_ab  of T_ab. Let Œ± and Œ≤ be partitions of a and b, respectively.  We take the tensor  product of the corresponding irreducible characters  of ùîñ_a and ùîñ_b and  regard this as an irreducible character of  T_ab. Multiplying this character  with Œ∑_ab and inducing to  W(B‚Çô) yields  an irreducible  character œá=  œá_(Œ±Œ≤) of W(B‚Çô). This defines the correspondence between irreducible characters and pairs of partitions as above.\n\nFor example, the pair ((n),-) labels the trivial character and (-,(1‚Åø)) labels  the  sign  character.  The  character  of  the  natural  reflection representation is labeled by ((n-1),(1)).\n\nType  D‚Çô (n‚â•4). In this case W=W(D‚Çô) can be embedded as a subgroup of index  2 into the Coxeter  group W(B‚Çô). The intersection  of a class of W(B‚Çô) with W(D‚Çô) is either empty or a single class in W(D‚Çô) or splits up  into two classes in  W(D‚Çô). This also leads  to a parameterization of the  classes of W(D‚Çô) by pairs of  partitions (Œª,Œº) as before but where the  number of parts of Œº is even and where there are two classes of this type  if Œº is empty and all parts of  Œª are even. In the latter case we denote  the two classes in W(D‚Çô) by (Œª,+) and (Œª,-), where we use the convention  that  the  class  labeled  by (Œª,+) contains a representative which  can be written  as a word  in {s‚ÇÅ,s‚ÇÉ,‚Ä¶,s‚Çô} and  (Œª,-) contains a representative which can be written as a word in {s‚ÇÇ,s‚ÇÉ, ‚Ä¶,s‚Çô}.\n\nBy  Clifford theory the restriction of  an irreducible character of W(B‚Çô) to  W(D‚Çô)  is  either  irreducible  or  splits  up  into  two irreducible components.  Let (Œ±,Œ≤) be  a pair of  partitions with total  sum of parts equal to n. If Œ±!=Œ≤ then the restrictions of the irreducible characters of  W(B‚Çô) labeled  by (Œ±,Œ≤)  and (Œ≤,Œ±)  are irreducible and equal. If Œ±=Œ≤  then the restriction of the character labeled by (Œ±,Œ±) splits into two  irreducible components  which we  denote by  (Œ±,+) and (Œ±,-). Note that  this can only happen if n is  even. In order to fix the notation we use  a  result  of  Stembridge1989  which describes the value  of the  difference of  these two  characters on  a class of the form (Œª,+)  in terms of the character values of the symmetric group ùîñ_{n/2}. Recall  that it is implicit  in the notation (Œª,+)  that all parts of Œª are even. Let Œª' be the partition of n/2 obtained by dividing each part by  2. Then the value of œá_{(Œ±,-)}-œá_{(Œ±,+)} on an element in the class (Œª,+) is given by 2^{k(Œª)} times the value of the irreducible character of  ùîñ_{n/2} labeled by Œ± on the class of cycle type Œª'. (Here, k(Œª) denotes the number of non-zero parts of Œª.)\n\nThe  labels for the trivial, the  sign and the natural reflection character are the same as for W(B‚Çô), since these characters are restrictions of the corresponding characters of W(B‚Çô).\n\nThe groups G(d,1,n). They  are isomorphic to the wreath product of the cyclic group of order d with  the  symmetric  group  ùîñ‚Çô.  Hence  the  classes  and characters are parameterized  by d-tuples of partitions such that the total sum of their parts  equals n. The words chosen  as representatives of the classes are, when d>2, computed in a slightly different way than for B‚Çô, in order to agree  with the words on which Ram  and Halverson compute the characters of the  Hecke algebra. First the parts of the d partitions are merged in one big  partition and sorted in  increasing order. Then, to  a part i coming from  the j-th partition is  associated the word (l+1‚Ä¶1‚Ä¶ l+1) ≤‚Åª¬πl+2‚Ä¶l+i where l is the highest generator used to express the previous part.\n\nThe  d-tuple corresponding to an  irreducible character is determined via Clifford  theory in  a similar  way than  for the  B‚Çô case.  The identity character  has the first  partition with one  part equal n  and the other ones  empty. The character of the  reflection representations has the first two  partitions with one part  equal respectively to n-1  and to 1, and the other partitions empty.\n\nThe groups G(de,e,n). They  are normal  subgroups of  index e  in G(de,1,n).  The quotient is cyclic,  generated by the image g  of the first generator of G(de,1,n). The  classes are parameterized as the  classes of G(de,e,n) with an extra information for a component of a class which splits.\n\nAccording  to  Hugues1985,  a  class  C of G(de,1,n) parameterized  by a de-partition (S‚ÇÄS_de-1) is in G(de,e,n) if e  divides ·µ¢ i _p S·µ¢p. It  splits in d classes for the largest d  dividing e and all parts of all  S·µ¢ and such that S·µ¢ is empty if d  does not divide i. If w is in C then 'g‚Å± w g‚Åª‚Å±' for 'i in 0:d-1' are  representatives of the classes of G(de,e,n) which meet C. They are described by appending the integer i to the label for C.\n\nThe  characters are described by Clifford theory. We make g act on labels for  characters of G(de,1,n)  . The action  of g permutes circularly by d  the partitions in the de-tuple.  A character has same restriction to G(de,e,n)  as its transform by g.  The number of irreducible components of its restriction is equal to the order k of its stabilizer under powers of  g.  We  encode  a  character  of  G(de,e,n)  by first, choosing the smallest  for lexicographical order label  of a character whose restriction contains  it; then this label is periodic with a motive repeated k times; we  represent the  character by  one of  these motives,  to which we append E(k)‚Å± for 'i in 0:k-1' to describe which component of the restriction we choose.\n\nTypes G‚ÇÇ and F‚ÇÑ. The matrices of character values and the orderings and labelings  of  the  irreducible  characters  are  exactly  the  same  as in Carter1985,  p.412/413:  in  type  G‚ÇÇ  the  character œÜ‚ÇÅ,‚ÇÉ'  takes the value -1 on the reflection associated to the long simple root;  in type F‚ÇÑ, the characters œÜ‚ÇÅ,‚ÇÅ‚ÇÇ', œÜ‚ÇÇ,‚ÇÑ', œÜ‚ÇÑ,‚Çá', œÜ‚Çà,‚Çâ' and œÜ‚Çâ,‚ÇÜ' occur in the induced of the identity from the A‚ÇÇ corresponding to the  short  simple  roots;  the  pairs  (œÜ‚ÇÇ,‚ÇÅ‚ÇÜ',  œÜ‚ÇÇ,‚ÇÑ‚Ä≥)  and (œÜ‚Çà,‚ÇÉ', œÜ‚Çà,‚Çâ‚Ä≥)  are  related  by  tensoring  by  sign; and finally œÜ‚ÇÜ,‚ÇÜ‚Ä≥ is the exterior  square of the  reflection representation. Note,  however, that we put  the long root at  the left of the  Dynkin diagrams to be in accordance with the conventions in Lusztig1985, (4.8) and (4.10).\n\nThe classes are labeled by Carter's admissible diagrams Carter1972.  A character  is labeled  by a pair (d,b) where  d denotes the  degree and b  the corresponding b-invariant. If there  are several characters with the same  pair (d,b) we attach a prime to them, as in Carter1985.\n\nTypes  E‚ÇÜ,E‚Çá,E‚Çà. The character  tables are obtained  by specialization of those  of the Hecke algebra. The classes are labeled by Carter's admissible diagrams Carter1972. A character is labeled by the pair (d,b)  where  d  denotes  the  degree  and  b  is  the  corresponding b-invariant.  For  these  types,  this  gives  a  unique  labeling of the characters.\n\nNon-crystallographic  types I‚ÇÇ(m), H‚ÇÉ, H‚ÇÑ. In these cases we do not have  canonical  labelings  for  the  classes.  We  label  them  by reduced expressions.\n\nEach  character for  type H‚ÇÉ  is uniquely  determined by the pair (d,b) where  d is the degree and  b the corresponding b-invariant. For type H‚ÇÑ  there are just  two characters (those  of degree 30)  for which the corresponding  pairs are  the same.  These two  characters are nevertheless distinguished  by  their  fake  degrees:  the  character œÜ‚ÇÉ‚ÇÄ,‚ÇÅ‚ÇÄ' has fake degree  q¬π‚Å∞+q¬π¬≤+ higher terms, while œÜ‚ÇÉ‚ÇÄ,‚ÇÅ‚ÇÄ‚Ä≥ has fake degree q¬π‚Å∞+q¬π‚Å¥+ higher  terms. The characters in the table for type H‚ÇÑ are ordered in the same way as in Alvis and Lusztig1982.\n\nFinally,  the characters  of degree 2  for type  I‚ÇÇ(m) are  ordered as follows.  The matrix representations affording the characters of degree 2 are given by: œÅ_j  s‚ÇÅs‚ÇÇ  beginpmatrixzeta_m^j00zeta_m^-jendpmatrix  s‚ÇÅbeginpmatrix0110endpmatrix where  1 ‚â§ j ‚â§  ‚åä(m-1)/2‚åã. The reflection representation is  œÅ‚ÇÅ. The  characters in  the table  are ordered by listing first the characters of degree 1 and then œÅ‚ÇÅ,œÅ‚ÇÇ,‚Ä¶.\n\nPrimitive complex reflection groups G‚ÇÑ to G‚ÇÉ‚ÇÑ. The  groups G‚ÇÇ‚ÇÉ=H‚ÇÉ, G‚ÇÇ‚Çà=F‚ÇÑ, G‚ÇÉ‚ÇÄ=H‚ÇÑ are exceptional Coxeter groups and have  been  explained  above.  Similarly  for  the  other groups labels for characters  consist primarily  of the  pair (d,b)  where d  denotes the degree  and b is the corresponding  b-invariant. This is sufficient for G‚ÇÑ,  G‚ÇÅ‚ÇÇ, G‚ÇÇ‚ÇÇ and G‚ÇÇ‚ÇÑ. For other  groups there are pairs or triples of  characters which  have the  same (d,b)  value. We  disambiguate these according  to  the  conventions  of Malle2000 for G‚ÇÇ‚Çá, G‚ÇÇ‚Çâ, G‚ÇÉ‚ÇÅ, G‚ÇÉ‚ÇÉ and G‚ÇÉ‚ÇÑ:\n\nFor G‚ÇÇ‚Çá:\n\nThe  fake degree  of œÜ‚ÇÉ,‚ÇÖ'  (resp. œÜ‚ÇÉ,‚ÇÇ‚ÇÄ',  œÜ‚Çà,‚Çâ‚Ä≥) has smaller degree that  of  œÜ‚ÇÉ,‚ÇÖ‚Ä≥  (resp.  œÜ‚ÇÉ,‚ÇÇ‚ÇÄ‚Ä≥,  œÜ‚Çà,‚Çâ'). The characters œÜ‚ÇÖ,‚ÇÅ‚ÇÖ' and œÜ‚ÇÖ,‚ÇÜ' occur with multiplicity 1 in the induced from the trivial character of  the parabolic subgroup  of type A‚ÇÇ  generated by the  first and third generator  (it is asserted mistakenly in Malle2000 that œÜ‚ÇÖ,‚ÇÜ‚Ä≥ does not occur in this induced; it occurs with multiplicity 2).\n\nFor G‚ÇÇ‚Çâ:\n\nThe  character  œÜ‚ÇÜ,‚ÇÅ‚ÇÄ‚Ä¥  is  the  exterior  square  of œÜ‚ÇÑ,‚ÇÅ; its complex conjugate  is œÜ‚ÇÜ,‚ÇÅ‚ÇÄ‚Åó. The  character œÜ‚ÇÅ‚ÇÖ,‚ÇÑ‚Ä≥ occurs  in œÜ‚ÇÑ,‚ÇÅ‚äóœÜ‚ÇÑ,‚ÇÉ; the character  œÜ‚ÇÅ‚ÇÖ,‚ÇÅ‚ÇÇ‚Ä≥  is  tensored  by  the  sign  character from œÜ‚ÇÅ‚ÇÖ,‚ÇÑ‚Ä≥. Finally  œÜ‚ÇÜ,‚ÇÅ‚ÇÄ' occurs in  the induced from  the trivial character of the standard parabolic subgroup of type A‚ÇÉ generated by the first, second and fourth generators.\n\nFor G‚ÇÉ‚ÇÅ:\n\nThe  characters œÜ‚ÇÅ‚ÇÖ,‚Çà', œÜ‚ÇÅ‚ÇÖ,‚ÇÇ‚ÇÄ' and œÜ‚ÇÑ‚ÇÖ,‚Çà‚Ä≥ occur in œÜ‚ÇÑ,‚ÇÅ‚äóœÜ‚ÇÇ‚ÇÄ,‚Çá; the character   œÜ‚ÇÇ‚ÇÄ,‚ÇÅ‚ÇÉ'  is  complex  conjugate  of  œÜ‚ÇÇ‚ÇÄ,‚Çá;  the  character œÜ‚ÇÑ‚ÇÖ,‚ÇÅ‚ÇÇ'  is tensored by sign of œÜ‚ÇÑ‚ÇÖ,‚Çà'. The two terms of maximal degree of  the fakedegree of œÜ‚ÇÉ‚ÇÄ,‚ÇÅ‚ÇÄ' are  q‚Åµ‚Å∞+q‚Å¥‚Å∂ while for œÜ‚ÇÉ‚ÇÄ,‚ÇÅ‚ÇÄ‚Ä≥ they are q‚Åµ‚Å∞+2q‚Å¥‚Å∂.\n\nFor G‚ÇÉ‚ÇÉ:\n\nThe two terms of maximal degree of the fakedegree of œÜ‚ÇÅ‚ÇÄ,‚Çà' are q¬≤‚Å∏+q¬≤‚Å∂ while  for œÜ‚ÇÅ‚ÇÄ,‚Çà‚Ä≥ they are q¬≤‚Å∏+q¬≤‚Å¥. The  terms of maximal degree of the fakedegree   of  œÜ‚ÇÑ‚ÇÄ,‚ÇÖ'  are  q¬≥¬π+q¬≤‚Åπ   while  for  œÜ‚ÇÑ‚ÇÄ,‚ÇÖ‚Ä≥  they  are q¬≥¬π+2q¬≤‚Åπ.  The character  œÜ‚ÇÅ‚ÇÄ,‚ÇÅ‚Çá' is  tensored by  sign of œÜ‚ÇÅ‚ÇÄ,‚Çà' and œÜ‚ÇÑ‚ÇÄ,‚ÇÅ‚ÇÑ' is tensored by sign of œÜ‚ÇÑ‚ÇÄ,‚ÇÖ'.\n\nFor G‚ÇÉ‚ÇÑ:\n\nThe  character œÜ‚ÇÇ‚ÇÄ,‚ÇÉ‚ÇÉ' occurs in œÜ‚ÇÜ,‚ÇÅ‚äóœÜ‚ÇÅ‚ÇÖ,‚ÇÅ‚ÇÑ. The character œÜ‚Çá‚ÇÄ,‚Çâ' is rational.  The character  œÜ‚Çá‚ÇÄ,‚Çâ‚Ä≥ occurs  in œÜ‚ÇÜ,‚ÇÅ‚äóœÜ‚ÇÅ‚ÇÖ,‚ÇÅ‚ÇÑ.  The character œÜ‚Çá‚ÇÄ,‚ÇÑ‚ÇÖ'   is  rational.The   character  œÜ‚Çá‚ÇÄ,‚ÇÑ‚ÇÖ‚Ä≥   is  tensored  by  the determinant  character of  œÜ‚Çá‚ÇÄ,‚Çâ‚Ä≥. The  character œÜ‚ÇÖ‚ÇÜ‚ÇÄ,‚ÇÅ‚Çà' is rational. The character œÜ‚ÇÖ‚ÇÜ‚ÇÄ,‚ÇÅ‚Çà‚Ä¥ occurs in œÜ‚ÇÜ,‚ÇÅ‚äóœÜ‚ÇÉ‚ÇÉ‚ÇÜ,‚ÇÅ‚Çá. The character œÜ‚ÇÇ‚Çà‚ÇÄ,‚ÇÅ‚ÇÇ' occurs    in   œÜ‚ÇÜ,‚ÇÅ‚äóœÜ‚ÇÉ‚ÇÉ‚ÇÜ,‚ÇÅ‚Çá.   The   character   œÜ‚ÇÇ‚Çà‚ÇÄ,‚ÇÉ‚ÇÄ‚Ä≥   occurs   in œÜ‚ÇÜ,‚ÇÅ‚äóœÜ‚ÇÉ‚ÇÉ‚ÇÜ,‚ÇÅ‚Çá.  The  character  œÜ‚ÇÖ‚ÇÑ‚ÇÄ,‚ÇÇ‚ÇÅ'  occurs  in œÜ‚ÇÜ,‚ÇÅ‚äóœÜ‚ÇÅ‚ÇÄ‚ÇÖ,‚ÇÇ‚ÇÄ. The character  œÜ‚ÇÅ‚ÇÄ‚ÇÖ,‚Çà' is  complex conjugate  of œÜ‚ÇÅ‚ÇÄ‚ÇÖ,‚ÇÑ,  and œÜ‚Çà‚ÇÑ‚ÇÄ,‚ÇÅ‚ÇÉ' is complex  conjugate  of  œÜ‚Çà‚ÇÑ‚ÇÄ,‚ÇÅ‚ÇÅ.  The  character  œÜ‚Çà‚ÇÑ‚ÇÄ,‚ÇÇ‚ÇÉ'  is  complex conjugate  of  œÜ‚Çà‚ÇÑ‚ÇÄ,‚ÇÅ‚Çâ.  Finally  œÜ‚ÇÅ‚ÇÇ‚ÇÄ,‚ÇÇ‚ÇÅ'  occurs  in induced from the trivial character of the standard parabolic subgroup of type A‚ÇÖ generated by the generators of G‚ÇÉ‚ÇÑ with the third one omitted.\n\nFor  the groups G‚ÇÖ and G‚Çá we  adopt the following conventions. For G‚ÇÖ they are compatible with those of MalleRouquier2003 and BroueMalleMichel2014.\n\nFor G‚ÇÖ:\n\nWe  let W=complex_reflection_group(5),  so the  generators are  W(1) and W(2).\n\nThe  character œÜ‚ÇÅ,‚ÇÑ' (resp. œÜ‚ÇÅ,‚ÇÅ‚ÇÇ', œÜ‚ÇÇ,‚ÇÉ') takes the value 1 (resp. Œ∂‚ÇÉ,  -Œ∂‚ÇÉ)  on  W(1).  The  character  œÜ‚ÇÅ,‚Çà‚Ä≥ is complex conjugate to œÜ‚ÇÅ,‚ÇÅ‚ÇÜ,  and the character  œÜ‚ÇÅ,‚Çà' is complex  conjugate to œÜ‚ÇÅ,‚ÇÑ' . The character  œÜ‚ÇÇ,‚ÇÖ‚Ä≥ is complex conjugate to  œÜ‚ÇÇ,‚ÇÅ; œÜ‚ÇÇ,‚ÇÖ' takes the value -1 on W(1). The character œÜ‚ÇÇ,‚Çá' is complex conjugate to œÜ‚ÇÇ,‚ÇÖ'.\n\nFor G‚Çá:\n\nWe  let W=complex_reflection_group(7),  so the  generators are W(1), W(2) and W(3).\n\nThe  characters  œÜ‚ÇÅ,‚ÇÑ'  and  œÜ‚ÇÅ,‚ÇÅ‚ÇÄ'  take  the value 1 on W(2). The character  œÜ‚ÇÅ,‚Çà‚Ä≥ is complex  conjugate to œÜ‚ÇÅ,‚ÇÅ‚ÇÜ  and œÜ‚ÇÅ,‚Çà' is complex conjugate  to œÜ‚ÇÅ,‚ÇÑ'. The characters œÜ‚ÇÅ,‚ÇÅ‚ÇÇ'  and œÜ‚ÇÅ,‚ÇÅ‚Çà' take the value Œ∂‚ÇÉ  on W(2). The character œÜ‚ÇÅ,‚ÇÅ‚ÇÑ‚Ä≥ is complex conjugate to œÜ‚ÇÅ,‚ÇÇ‚ÇÇ and œÜ‚ÇÅ,‚ÇÅ‚ÇÑ'  is complex conjugate to œÜ‚ÇÅ,‚ÇÅ‚ÇÄ'. The character œÜ‚ÇÇ,‚ÇÉ' takes the value  -Œ∂‚ÇÉ on  W(2) and  œÜ‚ÇÇ,‚ÇÅ‚ÇÉ' takes  the value  -1 on W(2). The characters  œÜ‚ÇÇ,‚ÇÅ‚ÇÅ‚Ä≥, œÜ‚ÇÇ,‚ÇÖ‚Ä≥, œÜ‚ÇÇ,‚Çá‚Ä¥ and  œÜ‚ÇÇ,‚ÇÅ are Galois conjugate, as well  as  the  characters  œÜ‚ÇÇ,‚Çá',  œÜ‚ÇÇ,‚ÇÅ‚ÇÉ',  œÜ‚ÇÇ,‚ÇÅ‚ÇÅ'  and  œÜ‚ÇÇ,‚ÇÖ'. The character  œÜ‚ÇÇ,‚Çâ' is complex  conjugate to œÜ‚ÇÇ,‚ÇÅ‚ÇÖ  and œÜ‚ÇÇ,‚Çâ‚Ä¥ is complex conjugate to œÜ‚ÇÇ,‚ÇÉ'.\n\nFinally,  for the remaining groups G‚ÇÜ, G‚Çà  to G‚ÇÅ‚ÇÅ, G‚ÇÅ‚ÇÉ to G‚ÇÇ‚ÇÅ, G‚ÇÇ‚ÇÖ, G‚ÇÇ‚ÇÜ,  G‚ÇÉ‚ÇÇ and G‚ÇÉ‚ÇÉ there are only  pairs of characters with same value (d,b).  We give labels uniformly to these characters by applying in order the following rules :\n\nIf the two characters have  different fake degrees, label œÜ_{d,b}' the  one  whose  fake  degree  is  minimal  for  the  lexicographic  order of  polynomials (starting with the highest term).\nFor the not yet labeled pairs, if only one of the two characters has the  property   that  in  its   Galois  orbit  at   least  one  character  is  distinguished by its (d,b)-invariant, label it œÜ_{d,b}'.\nFor the not yet labeled pairs,  if the minimum of the (d,b)-value (for  the  lexicographic  order  (d,b))  in  the  Galois  orbits  of the two  character  is different, label œÜ_{d,b}' the character with the minimal  minimum.\nWe define now a new invariant  for characters: consider all the pairs of  irreducible   characters  œá  and  œà  uniquely  determined  by  their  (d,b)-invariant such that œÜ occurs with non-zero multiplicity m in  œá‚äóœà.  We define  t(œÜ) to  be the  minimal (for  lexicographic order)  possible list (d(œá),b(œá),d(œà),b(œà),m).\n\nFor  the not  yet labeled  pairs, if  the t-invariants are different, label œÜ_{d,b}' the character with the minimal t-invariant.\n\nAfter  applying  the  last  rule  all  the  pairs  will be labelled for the considered  groups. The labelling obtained  is compatible for G‚ÇÇ‚ÇÖ, G‚ÇÇ‚ÇÜ, G‚ÇÉ‚ÇÇ  and G‚ÇÉ‚ÇÉ  with that  of Malle2000  and for G‚Çà with that described in MalleRouquier2003.\n\nWe  should  emphasize  that  for  all  groups  with  a  few exceptions, the parameters  for characters do  not depend on  any non-canonical choice. The exceptions  are G(de,e,n) with e>1, and G‚ÇÖ, G‚Çá, G‚ÇÇ‚Çá, G‚ÇÇ‚Çà, G‚ÇÇ‚Çâ and  G‚ÇÉ‚ÇÑ, groups  which admit  outer automorphisms  preserving the set of reflections,  so choices  of a  particular value  on a particular generator must be made for characters which are not invariant by these automorphisms.\n\nLabels  for the classes. For the exceptional complex reflection groups, the labels  for the classes represent the  decomposition of a representative of the  class as a product of generators, with the additional conventions that 'z'  represents the generator  of the center  and for well-generated groups 'c'  represents a Coxeter element  (a product of the  generators which is a regular element for the highest reflection degree).\n\n\n\n\n\n","category":"module"},{"location":"chars.html#Chevie.Chars.CharTable","page":"Classes/characters of reflection groups","title":"Chevie.Chars.CharTable","text":"CharTable is a structure to hold character tables of groups and Hecke  algebras\n\n\n\n\n\n","category":"type"},{"location":"chars.html#Chevie.Chars.on_chars","page":"Classes/characters of reflection groups","title":"Chevie.Chars.on_chars","text":"on_chars(G,aut)\n\naut  is an automorphism of  the group G (for  a permutation group, this could  be  given  as  a  permutation  normalizing  G).  The result is the permutation of the indices of the irreducible characters induced by aut.\n\njulia> WF=rootdatum(\"3D4\")\n¬≥D‚ÇÑ\n\njulia> on_chars(Group(WF),WF.phi)\n(1,2,7)(8,9,12)\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.charinfo","page":"Classes/characters of reflection groups","title":"Chevie.Chars.charinfo","text":"charinfo(W)\n\nreturns   information  about  the  irreducible  characters  of  the  finite reflection group or Spets W. The result is an object with various entries describing  properties of  the irreducible  characters of  W. This object prints  at the  Repl or  in Pluto  or Jupyter  as a table synthesizing most information.\n\nA  field not in the table is  .charparams: it contains parameters for the irreducible  characters.  A  parameter  is  a  list  with one item for each irreducible  component of W (as given  by refltype). For an irreducible W see the helpstring for Chars for what are the parameters.\n\njulia> charinfo(coxgroup(:G,2)).charparams\n6-element Vector{Vector{Vector{Int64}}}:\n [[1, 0]]\n [[1, 6]]\n [[1, 3, 1]]\n [[1, 3, 2]]\n [[2, 1]]\n [[2, 2]]\n\njulia> charinfo(coxgroup(:G,2))\n‚îå‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇn0‚îÇ name ext b B a A spaltenstein lusztig              symbol‚îÇ\n‚îú‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1 ‚îÇ œÜ‚ÇÅ‚Äö‚ÇÄ  Id 0 0 0 0            1       1       (0,0,0,0,0,2)‚îÇ\n‚îÇ2 ‚îÇ œÜ‚ÇÅ‚Äö‚ÇÜ det 6 6 6 6            Œµ       Œµ (01,01,01,01,01,12)‚îÇ\n‚îÇ3 ‚îÇœÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ     3 3 1 5           Œµ‚Çó      Œµ‚Ä≤            (0,0,1+)‚îÇ\n‚îÇ4 ‚îÇœÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ     3 3 1 5          Œµ_c      Œµ‚Ä≥            (0,0,1-)‚îÇ\n‚îÇ5 ‚îÇ œÜ‚ÇÇ‚Äö‚ÇÅ  Œõ¬π 1 5 1 5           Œ∏‚Ä≤      Œ∏‚Ä≤       (0,0,0,0,1,1)‚îÇ\n‚îÇ6 ‚îÇ œÜ‚ÇÇ‚Äö‚ÇÇ     2 4 1 5           Œ∏‚Ä≥      Œ∏‚Ä≥       (0,0,0,1,0,1)‚îÇ\n‚îî‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nIn  the table printed  at the Repl,  the columns reflect  various fields of charinfo.  The  column  name  reflects  the  field .charnames, a name computed  from .charparams. This  is the same  as charnames(io,W) where here io being the Repl has the property :limit true.\n\nThe   column   ext   shows   the   exterior   powers  of  the  reflection representation.  It corresponds  to the  field .extrefl  which is present only  if W  is irreducible.  Otherwise, only  two items  are shown in the column:  Id corresponds to the field  .positionId and shows the trivial character.  det  corresponds  to  the  field .positionDet and shows the determinant  character (for Coxeter groups the sign character). When W is irreducible,  the characters marked  Œõ‚Å± are the  i-th exterior power of the  reflection  representation.  They  are  irreducible  by  a  theorem of Steinberg.\n\nThe  column  b  shows  the  field  .b  listing  for  each character the valuation  of the fake degree, and the column B shows the field .B, the degree of the fake degree.\n\nThe  columns a and  A only appear  for Spetsial groups. They correspond then  to the fields  .a and .A,  and contain respectively the valuation and the degree of the generic degree of the character (in the one-parameter Hecke algebra hecke(W,Pol()) for W).\n\nFor  irreducible  groups,  the  table  shows  sometimes additional columns, corresponding to a field of the same name.\n\nfor  F‚ÇÑ, the column kondo gives the labeling of the characters given by Kondo, also used in Lusztig1985, (4.10).\n\nfor  E‚ÇÜ, E‚Çá, E‚Çà the  column frame gives the  labeling of the characters given   by  Frame,   also  used   in  Lusztig1985,   (4.11),  (4.12),  and (4.13).\n\nfor  G‚ÇÇ the  column spaltenstein  gives the  labeling of the characters given by Spaltenstein.\n\nfor G(de,e,2) even e and d>1, the column malle gives the parameters for the characters used in Malle1996.\n\nIf  W  is  irreducible  spetsial  and  imprimitive,  the  column 'symbol(corresponding  to the field.charSymbols`) shows the  symbol attached to the corresponding unipotent caracter.\n\nIf  W  isa  Spets,  the  column  restr.  (corresponding  to  the  field .charRestrictions)  gives the  number of  the corresponding  character of Group(W).\n\nFinally,  the  field  .hgal  contains  the  permutation of the characters resulting  from a Galois  action on the  characters of H=hecke(W,Pol()^e) where  e is the order of  the center of W. H  splits by taking v an e-th root of Pol(), and .hgal records the permutation effected by the Galois action v->E(e)*v (charinfo does not have the key :hgal if this permutation   is  trivial).  .hgal*conj,  where  conj  is  the  complex conjugaison, is the Opdam involution.\n\njulia> charinfo(complex_reflection_group(24))\n‚îå‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇn0‚îÇ name ext  b  B  a  A‚îÇ\n‚îú‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1 ‚îÇ œÜ‚ÇÅ‚Äö‚ÇÄ  Id  0  0  0  0‚îÇ\n‚îÇ2 ‚îÇœÜ‚ÇÅ‚Äö‚ÇÇ‚ÇÅ det 21 21 21 21‚îÇ\n‚îÇ3 ‚îÇ œÜ‚ÇÉ‚Äö‚Çà      8 18  8 20‚îÇ\n‚îÇ4 ‚îÇ œÜ‚ÇÉ‚Äö‚ÇÅ  Œõ¬π  1 11  1 13‚îÇ\n‚îÇ5 ‚îÇœÜ‚ÇÉ‚Äö‚ÇÅ‚ÇÄ  Œõ¬≤ 10 20  8 20‚îÇ\n‚îÇ6 ‚îÇ œÜ‚ÇÉ‚Äö‚ÇÉ      3 13  1 13‚îÇ\n‚îÇ7 ‚îÇ œÜ‚ÇÜ‚Äö‚ÇÇ      2 12  1 13‚îÇ\n‚îÇ8 ‚îÇ œÜ‚ÇÜ‚Äö‚Çâ      9 19  8 20‚îÇ\n‚îÇ9 ‚îÇ œÜ‚Çá‚Äö‚ÇÜ      6 18  6 18‚îÇ\n‚îÇ10‚îÇ œÜ‚Çá‚Äö‚ÇÉ      3 15  3 15‚îÇ\n‚îÇ11‚îÇ œÜ‚Çà‚Äö‚ÇÑ      4 16  4 17‚îÇ\n‚îÇ12‚îÇ œÜ‚Çà‚Äö‚ÇÖ      5 17  4 17‚îÇ\n‚îî‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\nhgal=(11,12)\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.charnames-Tuple{IO, Union{Coset, Group}}","page":"Classes/characters of reflection groups","title":"Chevie.Chars.charnames","text":"charnames(ComplexReflectionGroup or Spets;options...) charnames(io::IO,ComplexReflectionGroup or Spets)\n\nreturns  the list of character names for the reflection group or Spets W. The  options may imply  alternative names in  certain cases, or a different formatting of names in general. They can be specified by IO attributes if giving an IO as argument.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> charnames(W;limit=true)\n6-element Vector{String}:\n \"œÜ‚ÇÅ‚Äö‚ÇÄ\"\n \"œÜ‚ÇÅ‚Äö‚ÇÜ\"\n \"œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ\"\n \"œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ\"\n \"œÜ‚ÇÇ‚Äö‚ÇÅ\"\n \"œÜ‚ÇÇ‚Äö‚ÇÇ\"\n\njulia> charnames(W;TeX=true)\n6-element Vector{String}:\n \"\\phi_{1,0}\"\n \"\\phi_{1,6}\"\n \"\\phi_{1,3}'\"\n \"\\phi_{1,3}''\"\n \"\\phi_{2,1}\"\n \"\\phi_{2,2}\"\n\njulia> charnames(W;spaltenstein=true,limit=true)\n6-element Vector{String}:\n \"1\"\n \"Œµ\"\n \"Œµ‚Çó\"\n \"Œµ_c\"\n \"Œ∏‚Ä≤\"\n \"Œ∏‚Ä≥\"\n\njulia> charnames(W;spaltenstein=true,TeX=true)\n6-element Vector{String}:\n \"1\"\n \"\\varepsilon\"\n \"\\varepsilon_l\"\n \"\\varepsilon_c\"\n \"\\theta'\"\n \"\\theta''\"\n\nThe  last two  commands show  the character  names used by Spaltenstein and Lusztig when describing the Springer correspondence.\n\n\n\n\n\n","category":"method"},{"location":"chars.html#Chevie.Chars.classnames","page":"Classes/characters of reflection groups","title":"Chevie.Chars.classnames","text":"classnames(W;options...) classnames(io::IO,W)\n\nreturns  the  list  of  class  names  for the reflection group W. The optional  options are IOContext attributes which can give alternative names in  certain cases, or a different formatting  of names in general. They can be specified by giving an IO as argument.\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.classinfo","page":"Classes/characters of reflection groups","title":"Chevie.Chars.classinfo","text":"classinfo(W)\n\nreturns  information about the  conjugacy classes of  the finite reflection group or Spets W. The result is an object with various entries describing properties  of the conjugacy classes of W. This object prints at the Repl or in Pluto or Jupyter as a table synthesizing most information.\n\nA  field not in the table  is .classparams, containing parameters for the conjugacy  classes. Each parameter is a vector  which has one item for each irreducible   component  of  W.  For  what  are  the  parameters  for  an irreducible W, see the helpstring of Chars.\n\njulia> classinfo(coxgroup(:A,2))\n‚îå‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇn0‚îÇname length order word‚îÇ\n‚îú‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1 ‚îÇ 111      1     1    .‚îÇ\n‚îÇ2 ‚îÇ  21      3     2    1‚îÇ\n‚îÇ3 ‚îÇ   3      2     3   12‚îÇ\n‚îî‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThe table contains the columns:\n\nname, corresponding to the field .classnames:  strings describing the conjugacy classes, made out of the information in :classparams.\nlength, corresponding to the field .classes, is the number of elements in the conjugacy class.\norder, corresponding to the field .orders, is the order of elements in the conjugacy class.\nword, corresponding to the field .classtext, describes a word in the  generators for the  representatives of each  conjugacy class. Each word is a list of integers where the generator W(i) is represented by the  integer  i.  For  finite  Coxeter  groups,  it  is  the  same as word.(Ref(W),classreps(W)),   and  each  such  representative  is  of minimal  length in its conjugacy class and  is a \"very good\" element in the sense of GeckMichel1997.\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.fakedegree","page":"Classes/characters of reflection groups","title":"Chevie.Chars.fakedegree","text":"fakedegree(W, œÜ, q=Pol())\n\nreturns the fake degree (see fakedegrees for a definition) of the character  of parameter œÜ (see  charinfo(W).charparams) of the reflection group W, evaluated at q .\n\njulia> fakedegree(coxgroup(:A,2),[[2,1]],Pol(:q))\nPol{Cyc{Int64}}: q¬≤+q\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.fakedegrees","page":"Classes/characters of reflection groups","title":"Chevie.Chars.fakedegrees","text":"fakedegrees(W, q=Pol())\n\nreturns  a list holding the fake degrees of the reflection group W on the vector  space V, evaluated at q. These are the graded multiplicities of the  irreducible characters of W in the quotient SV/I where SV is the symmetric  algebra of V and I is the ideal generated by the homogeneous invariants  of  positive  degree  in  SV.  The  ordering  of  the  result corresponds to the ordering of the characters in charinfo(W).\n\njulia> fakedegrees(coxgroup(:A,2),Pol(:q))\n3-element Vector{Pol{Int64}}:\n q¬≥\n q¬≤+q\n 1\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.representation-Tuple{Union{Spets, FiniteCoxeterGroup, PermRootGroup}, Integer}","page":"Classes/characters of reflection groups","title":"Chevie.Chars.representation","text":"representation(W,i)\n\nreturns,   for  the  i-th  irreducible   representation  of  the  complex reflection  group or Spets W, a list of matrices images of the generating reflections  of W in a model of the representation (for Spets, the result is  a NamedTuple with fields gens,  a representation of Group(W), and F,  the matrix for W.phi in the representation). This function is based on  the  classification,  and  is  not  yet fully implemented for G‚ÇÉ‚ÇÑ; 78 representations  are  missing  out  of  169,  that  is,  representations of dimension ‚â•140, except half of those of dimensions 315, 420 and 840.\n\njulia> representation(complex_reflection_group(24),3)\n3-element Vector{Matrix{Cyc{Int64}}}:\n [1 0 0; -1 -1 0; -1 0 -1]\n [-1 0 -1; 0 -1 (1-‚àö-7)/2; 0 0 1]\n [-1 -1 0; 0 1 0; 0 (1+‚àö-7)/2 -1]\n\n\n\n\n\n","category":"method"},{"location":"chars.html#Chevie.Chars.representations-Tuple{Union{Spets, FiniteCoxeterGroup, PermRootGroup}}","page":"Classes/characters of reflection groups","title":"Chevie.Chars.representations","text":"representations(W)\n\nreturns  the list  of representations  of the  complex reflection  group or Spets W (see representation).\n\njulia> representations(coxgroup(:B,2))\n5-element Vector{Vector{Matrix{Int64}}}:\n [[1;;], [-1;;]]\n [[1 0; -1 -1], [1 2; 0 -1]]\n [[-1;;], [-1;;]]\n [[1;;], [1;;]]\n [[-1;;], [1;;]]\n\n\n\n\n\n","category":"method"},{"location":"chars.html#Chevie.Chars.induction_table","page":"Classes/characters of reflection groups","title":"Chevie.Chars.induction_table","text":"induction_table(u,g)\n\nreturns   an  object  describing  the   decomposition  of  the  irreducible characters  of the subgroup  u induced to  the group g.  At the repl or IJulia  or Pluto,  a table  is displayed  where the  rows correspond to the characters  of the parent group, and the  columns to those of the subgroup. The  returned  object  has  a  field  scalar  which  is  a  Matrix{Int} containing  the  induction  table,  and  the  other fields contain labeling information taken from the character tables of u and g when it exists.\n\njulia> g=Group([Perm(1,2),Perm(2,3),Perm(3,4)])\nGroup([(1,2),(2,3),(3,4)])\n\njulia> u=Group( [ Perm(1,2), Perm(3,4) ])\nGroup([(1,2),(3,4)])\n\njulia> induction_table(u,g)  #     needs \"using GAP\"\nInduction table from Group((1,2),(3,4)) to Group((1,2),(2,3),(3,4))\n‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   ‚îÇX.1 X.2 X.3 X.4‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇX.1‚îÇ  .   1   .   .‚îÇ\n‚îÇX.2‚îÇ  .   1   1   1‚îÇ\n‚îÇX.3‚îÇ  1   1   .   .‚îÇ\n‚îÇX.4‚îÇ  1   .   1   1‚îÇ\n‚îÇX.5‚îÇ  1   .   .   .‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> g=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> u=reflection_subgroup(g,[1,6])\nG‚ÇÇ‚Çç‚ÇÅ‚ÇÖ‚Çé=A‚ÇÇ\n\njulia> t=induction_table(u,g)\nInduction table from G‚ÇÇ‚Çç‚ÇÅ‚ÇÖ‚Çé=A‚ÇÇ to G‚ÇÇ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ     ‚îÇ111 21 3‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÄ ‚îÇ  .  . 1‚îÇ\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÜ ‚îÇ  1  . .‚îÇ\n‚îÇœÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ‚îÇ  1  . .‚îÇ\n‚îÇœÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ‚îÇ  .  . 1‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÅ ‚îÇ  .  1 .‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÇ ‚îÇ  .  1 .‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nIO attributes can be transmitted to the table format method\n\njulia> xdisplay(t;rows=[5],cols=[3,2])\nInduction table from G‚ÇÇ‚Çç‚ÇÅ‚ÇÖ‚Çé=A‚ÇÇ to G‚ÇÇ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ     ‚îÇ3 21‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÅ ‚îÇ.  1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nIt is also possible to TeX induction tables with xdisplay(t;TeX=true).\n\ninduction_table also works for spets (reflection cosets).\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.j_induction_table","page":"Classes/characters of reflection groups","title":"Chevie.Chars.j_induction_table","text":"j_induction_table(H, W)\n\ncomputes  the decomposition  into irreducible  characters of the reflection group  W  of  the  j-induced  of  the  irreducible  characters  of  the reflection  subgroup  H.  The  j-induced  of  œÜ  is  the  sum  of the irreducible  components of the induced of  œÜ which have same b-function (see charinfo) as œÜ. What is returned is an InductionTable struct.\n\njulia> W=coxgroup(:D,4)\nD‚ÇÑ\n\njulia> H=reflection_subgroup(W,[1,3])\nD‚ÇÑ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÇŒ¶‚ÇÅ¬≤\n\njulia> j_induction_table(H,W)\nj-induction table from D‚ÇÑ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÇŒ¶‚ÇÅ¬≤ to D‚ÇÑ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ     ‚îÇ111 21 3‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ11+  ‚îÇ  .  . .‚îÇ\n‚îÇ11-  ‚îÇ  .  . .‚îÇ\n‚îÇ1.111‚îÇ  .  . .‚îÇ\n‚îÇ.1111‚îÇ  .  . .‚îÇ\n‚îÇ11.2 ‚îÇ  .  . .‚îÇ\n‚îÇ1.21 ‚îÇ  1  . .‚îÇ\n‚îÇ.211 ‚îÇ  .  . .‚îÇ\n‚îÇ2+   ‚îÇ  .  . .‚îÇ\n‚îÇ2-   ‚îÇ  .  . .‚îÇ\n‚îÇ.22  ‚îÇ  .  . .‚îÇ\n‚îÇ1.3  ‚îÇ  .  1 .‚îÇ\n‚îÇ.31  ‚îÇ  .  . .‚îÇ\n‚îÇ.4   ‚îÇ  .  . 1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.J_induction_table","page":"Classes/characters of reflection groups","title":"Chevie.Chars.J_induction_table","text":"J_induction_table(H, W)\n\ncomputes  the decomposition  into irreducible  characters of the reflection group  W  of  the  J-induced  of  the  irreducible  characters  of  the reflection  subgroup  H.  The  J-induced  of  œÜ  is  the  sum  of the irreducible  components of the induced of  œÜ which have same a-function (see charinfo) as œÜ. What is returned is an InductionTable struct.\n\njulia> W=coxgroup(:D,4)\nD‚ÇÑ\n\njulia> H=reflection_subgroup(W,[1,3])\nD‚ÇÑ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÇŒ¶‚ÇÅ¬≤\n\njulia> J_induction_table(H,W)\nJ-induction table from D‚ÇÑ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÇŒ¶‚ÇÅ¬≤ to D‚ÇÑ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ     ‚îÇ111 21 3‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ11+  ‚îÇ  .  . .‚îÇ\n‚îÇ11-  ‚îÇ  .  . .‚îÇ\n‚îÇ1.111‚îÇ  .  . .‚îÇ\n‚îÇ.1111‚îÇ  .  . .‚îÇ\n‚îÇ11.2 ‚îÇ  1  . .‚îÇ\n‚îÇ1.21 ‚îÇ  1  . .‚îÇ\n‚îÇ.211 ‚îÇ  .  . .‚îÇ\n‚îÇ2+   ‚îÇ  .  . .‚îÇ\n‚îÇ2-   ‚îÇ  .  . .‚îÇ\n‚îÇ.22  ‚îÇ  .  . .‚îÇ\n‚îÇ1.3  ‚îÇ  .  1 .‚îÇ\n‚îÇ.31  ‚îÇ  .  . .‚îÇ\n‚îÇ.4   ‚îÇ  .  . 1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.schur_functor","page":"Classes/characters of reflection groups","title":"Chevie.Chars.schur_functor","text":"schur_functor(mat,l)\n\nmat  should be  a square  matrix and  l a  partition. The result is the Schur  functor  of  the  matrix  mat  corresponding to partition l; for example,   if  l==[n]  it  returns  the   n-th  symmetric  power  and  if l==[1,1,1] it returns the 3rd exterior power. The current algorithm (from Littlewood)  is rather inefficient so it is  quite slow for partitions of n where n>6.\n\njulia> m=cartan(:A,3)\n3√ó3 Matrix{Int64}:\n  2  -1   0\n -1   2  -1\n  0  -1   2\n\njulia> schur_functor(m,[2,2])\n6√ó6 Matrix{Rational{Int64}}:\n   9   -6    4  3//2   -2    1\n -12   16  -16  -4      8   -4\n   4   -8   16   2     -8    4\n  12  -16   16  10    -16   12\n  -4    8  -16  -4     16  -12\n   1   -2    4  3//2   -6    9\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.detPerm","page":"Classes/characters of reflection groups","title":"Chevie.Chars.detPerm","text":"detPerm(W)\n\nreturn  the permutation of the characters of the reflection group W which is effected when tensoring by the determinant character (for Coxeter groups this is the sign character).\n\njulia> W=coxgroup(:D,4)\nD‚ÇÑ\n\njulia> detPerm(W)\n(1,8)(2,9)(3,11)(4,13)(7,12)\n\n\n\n\n\n","category":"function"},{"location":"chars.html#Chevie.Chars.conjPerm","page":"Classes/characters of reflection groups","title":"Chevie.Chars.conjPerm","text":"conjPerm(W)\n\nreturn  the permutation of the characters of the group W which is effected when taking the complex conjugate of the character table.\n\njulia> W=complex_reflection_group(4)\nG‚ÇÑ\n\njulia> conjPerm(W)\n(2,3)(5,6)\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Symbols","page":"Symbols","title":"Symbols","text":"","category":"section"},{"location":"symbols.html","page":"Symbols","title":"Symbols","text":"Pages=[\"symbols.md\"]","category":"page"},{"location":"symbols.html","page":"Symbols","title":"Symbols","text":"Symbols\nshiftŒ≤\nŒ≤set\npartŒ≤\nsymbols\nranksymbol\ndefectsymbol\nsymbol_partition_tuple\nstring_partition_tuple\nfegsymbol\ndegree_fegsymbol\nvaluation_fegsymbol\ngendeg_symbol\ndegree_gendeg_symbol\nvaluation_gendeg_symbol\nEnnolaSymbol\nstringsymbol\nXSP","category":"page"},{"location":"symbols.html#Chevie.Symbols","page":"Symbols","title":"Chevie.Symbols","text":"The  combinatorial objects  in this  module are  partitions, Œ≤-sets and symbols.\n\nA  partition is a  non-increasing list of  positive integers p‚ÇÅ‚â•p‚ÇÇ‚â•‚Ä¶p‚Çô‚â•0, represented as a Vector{Int}, which is normalized if it has no trailing zeroes.\n\nA  Œ≤-set is a strictly increasing Vector of nonnegative integers, up to shift,  the  equivalence  relation  generated  by the elementary shifts [b‚ÇÅ,‚Ä¶,b‚Çô]‚àº[0,1+b‚ÇÅ,‚Ä¶,1+b‚Çô].  An equivalence  class has  exactly one member which does not contain 0: it is called a normalized Œ≤-set.\n\nTo  a  normalized  partition  p‚ÇÅ‚â•p‚ÇÇ‚â•‚Ä¶p‚Çô>0  is  associated  a Œ≤-set, whose normalized  representative  is  p‚Çô,p‚Çô‚Çã‚ÇÅ+1,‚Ä¶,p‚ÇÅ+n-1.  Conversely,  to each Œ≤-set  b‚ÇÅ<b‚ÇÇ<‚Ä¶<b‚Çô is  associated the  partition b‚Çô-n+1‚â•‚Ä¶‚â•b‚ÇÇ-1‚â•b‚ÇÅ, which may   have  some   trailing  zeros   if  starting   from  a  non-normalized representative.\n\nAs   a  generalisation  of  Œ≤-sets,  Lusztig1977  has introduced  2-symbols  and  more  general  e-symbols were introduced in Malle1995.  An e-symbol is  a vector S=[S‚ÇÅ,‚Ä¶,S‚Çë] of Œ≤-sets, taken modulo the equivalence relation generated by the simultaneous elementary  shift of all Œ≤-sets, and by  cyclic permutations of S; in the particular  case where e=2, S is thus  an unordered pair of Œ≤-sets. S is  a normalized symbol  if 0 is  not in the  intersection of the S·µ¢; equivalent  normalized symbols  are equivalent  by cyclic  permutation. The content  of  S  is  mod(c,e)  where  c=sum(length.(S));  it  is  an invariant  of the symbol, as well as  the rank, defined for an e-symbol as  sum(sum,S)-div((c-1)*(c-e+1),2*e). Invariant by  shift but not cyclic permutation is the shape s.-minimum(s) where s=length.(S).\n\nWhen  e=2 we  choose representatives  of the  symbols [S‚ÇÅ,S‚ÇÇ] such that length(S‚ÇÅ)‚â•length(S‚ÇÇ),  so the shape is [d,0] for some d‚â•0 called the defect  of the  symbol; the  content is  equal to mod(d,2). For symbols [S‚ÇÅ,S‚ÇÇ] with length(S‚ÇÅ)==length(S‚ÇÇ) we choose representatives such that P‚ÇÅ‚â§P‚ÇÇ  lexicographically where  P‚ÇÅ,P‚ÇÇ are  the partitions associated to S‚ÇÅ,S‚ÇÇ.\n\nPartitions  and  pairs  of  partitions  parametrize  characters of the Weyl groups  of classical types, and tuples of partitions parametrize characters of  imprimitive complex reflection  groups. 2-Symbols parametrize unipotent characters  of  classical  Chevalley  groups,  and more general e-symbols parametrize   unipotent  characters  of   Spetses  associated  to  spetsial imprimitive complex reflection groups. The rank of a symbol is equal to the semi-simple rank of the corresponding Chevalley group or Spets.\n\nSymbols of rank n and defect 0 parametrize characters of the Weyl group of  type  D‚Çô,  and  symbols  of  rank  n  and  defect  divisible by 4 parameterize  unipotent characters of split  orthogonal groups of dimension 2n.  Symbols of  rank n  and defect‚â°2  (mod 4) parameterize unipotent characters  of non-split  orthogonal groups  of dimension  2n. Symbols of rank  n and defect 1  parametrize characters of the  Weyl group of type B‚Çô,  and  symbols  of  rank  n  and  odd  defect  parametrize unipotent characters  of symplectic groups of dimension  2n or orthogonal groups of dimension 2n+1.\n\ne-symbols  of rank n and  content 1 parameterize unipotent characters of  G(e,1,n). Those of  content 0 parameterize  unipotent characters of G(e,e,n).  The  principal  series  (in  bijection  with characters of the reflection  group)  is  parametrized  by  symbols  of shape [1,0,‚Ä¶,0] for G(e,1,n) and [0,‚Ä¶,0] for G(e,e,n).\n\nFinally, in this module we also provides a function XSP which returns the \"symbols\"  (pairs of lists of  increasing positive integers satisfying some conditions)  X^œÅ-ss_nd defined by Lusztig and Spaltenstein which parametrize  local  systems  on  unipotent  classes for classical reductive groups.\n\n\n\n\n\n","category":"module"},{"location":"symbols.html#Chevie.Symbols.shiftŒ≤","page":"Symbols","title":"Chevie.Symbols.shiftŒ≤","text":"shiftŒ≤( Œ≤, n) shift the Œ≤-set Œ≤ by n\n\njulia> shiftŒ≤([2,3],2)\n4-element Vector{Int64}:\n 0\n 1\n 4\n 5\n\njulia> shiftŒ≤([0,1,4,5],-2)\n2-element Vector{Int64}:\n 2\n 3\n\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.Œ≤set","page":"Symbols","title":"Chevie.Symbols.Œ≤set","text":"Œ≤set(p) normalized Œ≤-set of partition p\n\njulia> Œ≤set([3,3,1])\n3-element Vector{Int64}:\n 1\n 4\n 5\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.partŒ≤","page":"Symbols","title":"Chevie.Symbols.partŒ≤","text":"partŒ≤(Œ≤) partition defined by Œ≤-set Œ≤\n\njulia> partŒ≤([0,4,5])\n2-element Vector{Int64}:\n 3\n 3\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.symbols","page":"Symbols","title":"Chevie.Symbols.symbols","text":"symbols(e,r,c=1,def=0) \n\nThe list of e-symbols of rank r, content c and Malle-defect def\n\nAn e-symbol is a symbol of length e. The content of an e-symbol S is sum(length,S)%e. The symbols for unipotent  characters of:\n\nG(d,1,r) are symbols(d,r)\nG(e,e,r) are symbols(e,r,0).\nG(e,e,r).s‚ÇÅ·µó where s‚ÇÅ is the first generator of G(e,1,r) and t|e are symbols(e,r,0,t)\n\njulia> stringsymbol.(symbols(3,2)) # unipotent characters of G(3,1,2)\n14-element Vector{String}:\n \"(12,0,0)\"\n \"(02,1,0)\"\n \"(02,0,1)\"\n \"(012,12,01)\"\n \"(01,1,1)\"\n \"(012,01,12)\"\n \"(2,,)\"\n \"(01,2,0)\"\n \"(01,0,2)\"\n \"(1,012,012)\"\n \"(,02,01)\"\n \"(,01,02)\"\n \"(0,,012)\"\n \"(0,012,)\"\n\njulia> stringsymbol.(symbols(3,3,0)) # unipotent characters of G(3,3,3)\n12-element Vector{String}:\n \"(1+)\"\n \"(1E(3))\"\n \"(1E(3,2))\"\n \"(01,12,02)\"\n \"(01,02,12)\"\n \"(012,012,123)\"\n \"(0,1,2)\"\n \"(0,2,1)\"\n \"(01,01,13)\"\n \"(0,0,3)\"\n \"(012,,)\"\n \"(012,012,)\"\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.ranksymbol","page":"Symbols","title":"Chevie.Symbols.ranksymbol","text":"ranksymbol(S) rank of symbol S.\n\njulia> ranksymbol([[1,5,6],[1,2]])\n11\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.defectsymbol","page":"Symbols","title":"Chevie.Symbols.defectsymbol","text":"`defectsymbol(s)'\n\nFor an e-symbol [S‚ÇÅ,S‚ÇÇ,‚Ä¶,S‚Çë] returns length(S‚ÇÅ)-length(S‚ÇÇ).\n\njulia> defectsymbol([[1,5,6],[1,2]])\n1\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.symbol_partition_tuple","page":"Symbols","title":"Chevie.Symbols.symbol_partition_tuple","text":"symbol_partition_tuple(p, s) symbol of shape s for partition tuple p.\n\nIn  the general case, s is a Vector{Int}  of same length as p and the i-th  element of the result is the Œ≤-set for p·µ¢ shifted to be of length s·µ¢ (the minimal integer which makes this possible is added to s).\n\nWhen  s is  a positive  integer it  is interpreted  as [s,0,0,‚Ä¶]  and a negative  integer is interpreted  as [0,-s,-s,‚Ä¶] so  when p is a double partition  one gets the  symbol of defect  s associated to  p; as other uses  the  unipotent  symbol  for  a  character  of the principal series of G(e,1,r)   parameterized   by   an   e-tuple   p   of  partitions  is symbol_partition_tuple(p,1) and for G(e,e,r) the similar computation is symbol_partition_tuple(p,0)  (the function handles coded periodic p for G(e,e,r)).\n\njulia> symbol_partition_tuple([[2,1],[1]],1)\n2-element Vector{Vector{Int64}}:\n [1, 3]\n [1]\n\njulia> symbol_partition_tuple([[2,1],[1]],0)\n2-element Vector{Vector{Int64}}:\n [1, 3]\n [0, 2]\n\njulia> symbol_partition_tuple([[2,1],[1]],-1)\n2-element Vector{Vector{Int64}}:\n [1, 3]\n [0, 1, 3]\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.string_partition_tuple","page":"Symbols","title":"Chevie.Symbols.string_partition_tuple","text":"string_partition_tuple(tuple)\n\nconverts  the partition tuple tuple to  a string where the partitions are separated by a dot.\n\njulia> d=partition_tuples(3,2)\n10-element Vector{Vector{Vector{Int64}}}:\n [[1, 1, 1], []]\n [[1, 1], [1]]\n [[1], [1, 1]]\n [[], [1, 1, 1]]\n [[2, 1], []]\n [[1], [2]]\n [[2], [1]]\n [[], [2, 1]]\n [[3], []]\n [[], [3]]\n\njulia> string_partition_tuple.(d)\n10-element Vector{String}:\n \"111.\"\n \"11.1\"\n \"1.11\"\n \".111\"\n \"21.\"\n \"1.2\"\n \"2.1\"\n \".21\"\n \"3.\"\n \".3\"\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.fegsymbol","page":"Symbols","title":"Chevie.Symbols.fegsymbol","text":"fegsymbol(S,p=0)\n\nreturns as  a CycPol the  fake degree of  the character of symbol S.\n\njulia> fegsymbol([[1,5,6],[1,2]])\nq¬π‚Å∂Œ¶‚ÇÖŒ¶‚ÇáŒ¶‚ÇàŒ¶‚ÇâŒ¶‚ÇÅ‚ÇÄŒ¶‚ÇÅ‚ÇÅŒ¶‚ÇÅ‚ÇÑŒ¶‚ÇÅ‚ÇÜŒ¶‚ÇÅ‚ÇàŒ¶‚ÇÇ‚ÇÄŒ¶‚ÇÇ‚ÇÇ\n\nIf S is an e-symbol, when given a second argument p dividing e, and a  first  argument  of  shape  (0,‚Ä¶,0)  representing  the  restriction of the character to G(e,e,r), works for the coset G(e,e,r).s‚ÇÅ·µñ.\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.degree_fegsymbol","page":"Symbols","title":"Chevie.Symbols.degree_fegsymbol","text":"degree_fegsymbol(s)\n\nthe  degree  of  the  fake  degree  of  the  character parameterized by the symbol s.\n\njulia> degree_fegsymbol([[1,5,6],[1,2]])\n88\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.valuation_fegsymbol","page":"Symbols","title":"Chevie.Symbols.valuation_fegsymbol","text":"valuation_fegsymbol(s)\n\nthe  valuation of  the fake  degree of  the character  parameterized by the symbol s.\n\njulia> valuation_fegsymbol([[1,5,6],[1,2]])\n16\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.gendeg_symbol","page":"Symbols","title":"Chevie.Symbols.gendeg_symbol","text":"gendeg_symbol(S)\n\nreturns  as  a  CycPol  the  generic  degree  of  the unipotent character parameterized by S.\n\njulia> gendeg_symbol([[1,2],[1,5,6]])\nq¬π¬≥Œ¶‚ÇÖŒ¶‚ÇÜŒ¶‚ÇáŒ¶‚Çà¬≤Œ¶‚ÇâŒ¶‚ÇÅ‚ÇÄŒ¶‚ÇÅ‚ÇÅŒ¶‚ÇÅ‚ÇÑŒ¶‚ÇÅ‚ÇÜŒ¶‚ÇÅ‚ÇàŒ¶‚ÇÇ‚ÇÄŒ¶‚ÇÇ‚ÇÇ/2\n\nfor an e-symbol of rank r, content c and Malle-defect d the Spets is\n\nG(e,1,r) (c==1, d==0)\nG(e,e,r) (c==0, d==0)\n¬≤G(e,e,r) (c==0, d==1) (e,r even. This includes ¬≤D‚Çô, ¬≤B‚ÇÇ, ¬≤G‚ÇÇ)\n\nsee 3.9 and 6.4 Malle1995.\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.degree_gendeg_symbol","page":"Symbols","title":"Chevie.Symbols.degree_gendeg_symbol","text":"degree_gendeg_symbol(S)\n\nthe  degree of the generic degree  of the unipotent character parameterized by the symbol S.\n\njulia> degree_gendeg_symbol([[1,5,6],[1,2]])\n91\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.valuation_gendeg_symbol","page":"Symbols","title":"Chevie.Symbols.valuation_gendeg_symbol","text":"valuation_gendeg_symbol(S)\n\nthe   valuation  of   the  generic   degree  of   the  unipotent  character parameterized by the symbol S.\n\njulia> valuation_gendeg_symbol([[1,5,6],[1,2]])\n13\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.EnnolaSymbol","page":"Symbols","title":"Chevie.Symbols.EnnolaSymbol","text":"EnnolaSymbol(S)\n\nEnnola of e-symbol S (of content 1 or 0) The order of Ennola (order of  center of  reflection group)  is computed  automatically: it is e for content 1 and gcd(e,rank(S)) for content 0.\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.stringsymbol","page":"Symbols","title":"Chevie.Symbols.stringsymbol","text":"stringsymbol(io=stdout,S) string for symbol S [taking io in account].\n\njulia> stringsymbol.(rio(),symbols(3,3,0))\n12-element Vector{String}:\n \"(1+)\"\n \"(1Œ∂‚ÇÉ)\"\n \"(1Œ∂‚ÇÉ¬≤)\"\n \"(01,12,02)\"\n \"(01,02,12)\"\n \"(012,012,123)\"\n \"(0,1,2)\"\n \"(0,2,1)\"\n \"(01,01,13)\"\n \"(0,0,3)\"\n \"(012,,)\"\n \"(012,012,)\"\n\n\n\n\n\n","category":"function"},{"location":"symbols.html#Chevie.Symbols.XSP","page":"Symbols","title":"Chevie.Symbols.XSP","text":"XSP(œÅ,s,n,even=false)\n\nreturns  the  union  of  the Lusztig-Spaltenstein 1985 X^œÅ-ss_nd  for  all  d  even  when  even=true,  all  d odd otherwise;  these symbols parametrize local  systems on unipotent conjugacy classes  for classical groups. In Lusztig2004, 13.2 the notation  is ^œÅ X^s_nd.  The result is  a list of  lists, each one corresponding  to a similarity class (which correspond to a given conjugacy class for the support). If s==0, only positive defects are considered.\n\nXSP(2,1,n) gives L-S symbols for Sp‚ÇÇ‚Çô\nXSP(4,2,n) gives L-S symbols for Sp‚ÇÇ‚Çô in char.2\nXSP(2,0,n) gives L-S symbols for SO‚ÇÇ‚Çô‚Çä‚ÇÅ [defect odd]\nXSP(2,0,n,true) gives L-S symbols for SO‚ÇÇ‚Çô [defect even]\nXSP(4,0,n,true) gives L-S symbols for SO‚ÇÇ‚Çô in char 2\n\neach item is a NamedTuple giving some information on the local system. It has fields\n\nsymbol the Lusztig-Spaltenstein symbol\ndimBu for the support u of the local system\nAu describes the character  of A(u) for the  local system as a list: true->sgn, false->Id\nsp  parameter (double partition) of the generalized Springer  correspondent (a character of the relative Weyl group)\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Finite-reflection-groups","page":"Finite reflection groups","title":"Finite reflection groups","text":"","category":"section"},{"location":"permroot.html","page":"Finite reflection groups","title":"Finite reflection groups","text":"Pages=[\"permroot.md\"]","category":"page"},{"location":"permroot.html","page":"Finite reflection groups","title":"Finite reflection groups","text":"PermRoot\nasreflection\nreflectionMatrix\nPermRootGroup\ncomplex_reflection_group\nPRG\nTypeIrred\nTypeIrred(::PermRootGroup)\nrefltype\nrank\nsemisimplerank\nnumber_of_reflections\nnumber_of_hyperplanes\ncoxeter_number\nroots(::PermRoot.PRG)\nroots(::PermRoot.PRG,::Any)\ncoroots\ncoroot\nsimpleroots\nsimplecoroots\nbaseX\nindependent_roots\ncartan(::PermRootGroup)\ncartan(::PermRootGroup,i,j)\nrefls\nunique_refls\nReflection\nreflections\nreflection_length(::PermRootGroup,::Perm)\nsimple_reps\nsimple_conjugating\ndiagram\nhyperplane_orbits\nbraid_relations\nreflection_representation(::PermRootGroup,w)\nreflection_representation(::PRG)\nreflection_representation(::PRG,::Integer)\nreflection_character\nYMatrix\nPermX\nPermY\nreflection_eigenvalues\ndegrees(::ComplexReflectionGroup)\ncodegrees\ninvariants\ndiscriminant\ninvariant_form\nbipartite_decomposition\ncatalan(::Group,::Any)\ngeneric_order\ntorus_order\nreflection_subgroup(::PRG,::AbstractVector)\ninclusion\ninclusiongens\nrestriction\naction\nstandard_parabolic(::PermRootGroup,::Any)\nparabolic_reps\nparabolic_closure\nisparabolic","category":"page"},{"location":"permroot.html#Chevie.PermRoot","page":"Finite reflection groups","title":"Chevie.PermRoot","text":"Let  V be a vector  space over a subfield  K of the complex numbers (in Julia  the elements  of K  will be  usually represented by Rationals or Cycs).\n\nA complex reflection is an element s‚àà GL(V) of finite order whose fixed point  set is  a hyperplane,  the reflecting  hyperplane H‚Çõ of s.\n\nMost  of the  time we  abbreviate \"complex  reflection\" to reflection; in some  literature \"reflection\" is reserved for  s of order 2 and otherwise pseudo-reflection is used.\n\nA  reflection s has a unique eigenvalue Œ∂‚Çõ not equal to 1, which is a root  of  unity;  if  K  is  a  subfield  of  the  real  numbers, Œ∂‚Çõ is necessarily  equal to -1 and s is of  order 2. An eigenvector r‚àà V of s  for the eigenvalue  Œ∂‚Çõ is called  a root of  s and a linear form r·µõ  on V of  kernel H‚Çõ is  called a coroot  of s. Usually r and r·µõ  are scaled so that r·µõ(r)=1-Œ∂; then s is the map on V defined by s(x)=x-r·µõ(x)r.  Such roots and  coroots for s  are unique up to scaling the root and inversely scaling the coroot.\n\nA  finite  complex  reflection  group  W  is  a finite group generated by complex  reflections.  Since  whenever  W  contains  a  reflection s it contains  its powers, W is always  generated by reflections s such that Œ∂‚Çõ==E(d)  where d is the  order of s; we  can also assume that s is not  a  power  of  another  reflection  of  W  with  larger order. Such a reflection is called a distinguished reflection of W; it is a canonical generator  of the cyclic subgroup of  W centralizing H‚Çõ. The generators of  the  complex  reflection  groups  we construct are always distinguished reflections; the set of distinguished reflections are in bijection with the reflecting  hyperplanes.  In  a  real  reflection group all reflections are distinguished.\n\nIt  is much  more efficient  to compute  with permutation  groups than with matrix  groups; hence we use for computing with a finite complex reflection group  W a permutation representation on  a W-invariant set of root and coroot vectors for reflections of W; that is, a set R of pairs (r,r·µõ)‚àà V√óV·µõ  invariant by W and such that every distinguished reflection in W is determined by some pair in R (see reflectionMatrix). Using a W-invariant set implies that there are several pairs determining the same reflection,  which differ  by roots  of unity.  This generalizes  the usual construction  for Coxeter groups (the case K=‚Ñù) where to each reflection of W is associated two roots, one positive and one negative.\n\nA  complex reflection group  is irreducible if  the representation V is irreducible.  For irreducible complex reflection groups, there are at least as  many roots for a given distinguished reflection as the lcm of the order of the reflection and of the order of the center of W.\n\nThe  following  methods  are  always  defined for finite complex reflection groups:\n\ngens(W): the (distinguished) reflections which generate W, given as permutations of the roots. reflrep(W) gives them as matrices.\nroots(W): the list of roots of W.\ncoroots(W): the list of coroots, in the same order as the roots.\nrefls(W):  a list of  distinguished reflections of  W, as permutations. This list is of same length as the roots, and its i-th element is the distinguished   reflection  for  the  i-th  root,  so  it  will  have repetitions. unique_refls(W) returns a sublist of 1:length(roots(W)) such that the distinguished reflections around the corresponding  roots reach one time  only each distinguished reflection of W.\n\nThe  lists  roots,  coroots  and  refls  starts with the ones for the reflections  gens(W);  these  are  called  simple roots and coroots and simple reflections.\n\nsimpleroots(W):  the simple roots as a matrix.\nsimplecoroots(W):  the simple coroots as a matrix.\nreflections(W) gives a list without repetitions of all reflections of W   (not   only   the   distinguished   ones),  as  objects  of  type Reflection,  starting  with  the  distinguished  reflections. These objects contain more information on each reflection.\n\nThe  finite irreducible complex  reflection groups have  been classified by Shephard and Todd, see ShephardTodd1954. They consist of one  infinite family G(de,e,r) depending  on 3 parameters (which includes the infinite families of Weyl groups), and 34 exceptional groups which have been given by Shephard and Todd names which range from G‚ÇÑ to G‚ÇÉ‚Çá. These exceptional   groups   include   the   exceptional   Weyl   groups,   e.g., coxgroup(:E,8) is the same as G‚ÇÉ‚Çá.\n\nWe provide functions to build any finite reflection group, either by giving a  list of simple roots and simple coroots (see PRG), or in terms of  the  classification  (see  complex_reflection_group).  In the context  e.g. of  Weyl groups,  one wants  to describe  the particular root system chosen in term of the traditional classification of crystallographic root systems. This is done via calls to the function coxeter_group (see the module Weyl). There is not yet a general  theory on  how to  construct a  nice set  of roots  for a non-real reflection  group;  the  roots  chosen  here  where  obtained case-by-case; however, they satisfy several important properties:\n\nThe simple reflections  satisfy braid relations  which present the braid group associated to W (see diagram).\nThe field  of definition  of W  is the  field K generated by the traces  of the elements of W acting on  V. It is a theorem that W may be realized as a reflection group over K.\nThe Cartan matrix r·µõ(r') where r and r' runs over the simple roots and  coroots has entries in  the ring ‚Ñ§‚Çñ of  integers of K, and the other  roots (resp. coroots) are  linear combinations with coefficients in ‚Ñ§‚Çñ of a linearly independent subset of them.\n\nIt  turns out that all representations of W are defined over the field of definition K (see. Benard1976 and D.~Bessis' thesis). This  has been known for a  long time in the case  K=‚Ñö, the case of Weyl groups, whose representations are all integral.\n\njulia> W=complex_reflection_group(4)\nG‚ÇÑ\n\njulia> gens(W) # as permutations of the 24 roots\n2-element Vector{Perm{Int16}}:\n (1,3,9)(2,4,7)(5,10,18)(6,11,16)(8,12,19)(13,15,20)(14,17,21)(22,23,24)\n (1,5,13)(2,6,10)(3,7,14)(4,8,15)(9,16,22)(11,12,17)(18,19,23)(20,21,24)\n\njulia> length(unique(refls(W)))\n4\n\njulia> length(refls(W)) # 24=4*(number of roots of unity in ‚Ñö (Œ∂‚ÇÉ))\n24\n\njulia> reflrep(W) # the generators as matrices\n2-element Vector{Matrix{Cyc{Rational{Int64}}}}:\n [1 0; 0 Œ∂‚ÇÉ]\n [‚àö-3/3 -Œ∂‚ÇÉ¬≤‚àö-3/3; (-3+‚àö-3)/3 -Œ∂‚ÇÉ‚àö-3/3]\n\nFor  almost  all  irreducible  complex  reflection  groups,  the generating matrices  for W we give have coefficients in the field of definition K. Further,  the set of matrices for all elements of W is globally invariant under  the  Galois  group  of  K/‚Ñö,  thus  the  Galois  action  induces automorphisms  of W. The exceptions are G‚ÇÇ‚ÇÇ, G‚ÇÇ‚Çá where the matrices are in  a  degree  two  extension  of  K  (this  is needed to have a globally invariant  model, see MarinMichel2010) and some dihedral  groups, as well as  H‚ÇÉ and H‚ÇÑ, where  the matrices given (the usual   Coxeter  reflection  representation  over  K)  are  not  globally invariant (but one can get invariant ones by chevieget(:H4,:InvariantModel)).\n\njulia> braid_relations(W) # as tuples of equal words in the generators\n1-element Vector{Tuple{Vector{Int64}, Vector{Int64}}}:\n ([1, 2, 1], [2, 1, 2])\n\njulia> diagram(W) # the same in pictures\n‚ë¢ ‚Äî‚Äî‚ë¢ G‚ÇÑ\n1   2\n\njulia> cartan(W)\n2√ó2 Matrix{Cyc{Rational{Int64}}}:\n Œ∂‚ÇÉ¬≤‚àö-3     Œ∂‚ÇÉ¬≤\n   -Œ∂‚ÇÉ¬≤  Œ∂‚ÇÉ¬≤‚àö-3\n\njulia> simpleroots(W)\n2√ó2 Matrix{Cyc{Rational{Int64}}}:\n    0  Œ∂‚ÇÉ¬≤‚àö-3\n 2Œ∂‚ÇÉ¬≤     Œ∂‚ÇÉ¬≤\n\njulia> simplecoroots(W)\n2√ó2 Matrix{Cyc{Rational{Int64}}}:\n     0      1\n ‚àö-3/3  ‚àö-3/3\n\nLet SV be the symmetric algebra of V. The invariants of W in SV are called the polynomial invariants of W. If n=dim V, they are generated as   a  polynomial  ring  by   n  homogeneous  algebraically  independent polynomials f‚ÇÅ,‚Ä¶,f‚Çô. The polynomials f·µ¢ are not uniquely determined but their  degrees are. The f·µ¢ are called  the basic invariants of W, and their  degrees the reflection  degrees of W;  the function degrees(W) returns these invariants.\n\nLet  I be the  ideal generated by  the homogeneous invariants of positive degree  in SV. Then SV/I is isomorphic to the regular representation of W  as a  W-module. It  is thus  a graded  (by the degree of elements of SV)  version of the  regular representation of  W. The polynomial which gives  the graded  multiplicity of  a character  œÜ of  W in  the graded module   SV/I  is  called   the  fake  degree   of  œÜ.  The  function fakedegrees returns these polynomials.\n\njulia> degrees(W)\n2-element Vector{Int64}:\n 4\n 6\n\njulia> fakedegrees(W,Pol(:x))\n7-element Vector{Pol{Int64}}:\n 1\n x‚Å¥\n x‚Å∏\n x‚Å∑+x‚Åµ\n x‚Åµ+x¬≥\n x¬≥+x\n x‚Å∂+x‚Å¥+x¬≤\n\n\n\n\n\n","category":"module"},{"location":"permroot.html#Chevie.PermRoot.asreflection","page":"Finite reflection groups","title":"Chevie.PermRoot.asreflection","text":"asreflection(s::Matrix [,r::AbstractVector])\n\ns  should be is a square  matrix, and if given r  should be a vector of length  size(s,1).  The  function  determines  if  s is the matrix of a complex  reflection  (resp.  if  r  is  given  if  it  is the matrix of a reflection  of root r; the point of  giving r is to specify exactly the desired root and coroot, which otherwise are determined only up to a scalar and  its  inverse).  The  function  returns  nothing  if  s if is not a reflection  (resp. not a reflection with root r), and otherwise returns a named tuple with four fields:\n\n.root:   the root of the reflection s (equal to r if given)\n\n.coroot:  the coroot of s\n\n.eigenvalue:  the non-trivial eigenvalue of s\n\n.isunitary: a boolean which is true if and only if s is unitary   with  respect to the usual scalar product  (then s is determined by the   root and the eigenvalue as reflectionMatrix(.root,.eigenvalue))\n\njulia> asreflection([-1 0 0;1 1 0;0 0 1])\n(root = [2, 0, 0], coroot = Rational{Int64}[1, -1//2, 0], eig = -1, isunitary = false)\n\njulia> asreflection([-1 0 0;1 1 0;0 0 1],[1,0,0])\n(root = [1, 0, 0], coroot = Rational{Int64}[2, -1, 0], eig = -1, isunitary = false)\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.reflectionMatrix","page":"Finite reflection groups","title":"Chevie.PermRoot.reflectionMatrix","text":"reflectionMatrix(root,  coroot) the matrix of the reflection with a given root and coroot.\n\nA (complex) reflection is a finite order element s of GL(V), the linear group of a vector space over a subfield of the complex numbers, whose fixed points  form  a  hyperplane  H  (the  reflecting hyperplane of s); an eigenvector  r for  the non-trivial  eigenvalue Œ∂  (a root of unity) is called  a root of s. If we choose  a linear form r·µõ defining H such that r·µõ(r)=1-Œ∂ (a coroot of s) then s is given by x‚Ü¶ x-r·µõ(x)r.\n\nA  way  of  specifying  s  is  by  giving  a root and a coroot, which are uniquely determined by s up to multiplication of the root by a scalar and of  the coroot by the inverse scalar. The function reflectionMatrix gives the  matrix of the  corresponding reflection in  the standard basis of V, where  the root and the coroot are  vectors given in the standard bases of V and V·µõ, so the pairing r·µõ(r) is obtained as transpose(root)*coroot.\n\njulia> r=reflectionMatrix([1,0,0],[2,-1,0])\n3√ó3 Matrix{Int64}:\n -1  0  0\n  1  1  0\n  0  0  1\n\njulia> r==reflrep(coxgroup(:A,3),1)\ntrue\n\njulia> r*[2,-1,0]\n3-element Vector{Int64}:\n -2\n  1\n  0\n\njulia> [1 0 0]*r\n1√ó3 Matrix{Int64}:\n -1  0  0\n\nAs  we see in the last lines, in  Julia a matrix operates from the right on the  vector space V  of row vectors  and from the  left on the dual space V·µõ of column vectors.\n\n\n\n\n\nreflectionMatrix(r, Œ∂=-1)\n\nreturns the matrix of the unitary complex reflection determined by the root r and the eigenvalue Œ∂, that is, when the vector space and its dual are identified  via the scalar product  <x,y>=transpose(x)*y; the coroot r·µõ is then equal to the linear form x->(1-Œ∂)<x,r>/<r,r>.\n\njulia> reflectionMatrix([1,0,-E(3,2)])\n3√ó3 Matrix{Cyc{Rational{Int64}}}:\n  0  0  Œ∂‚ÇÉ¬≤\n  0  1    0\n Œ∂‚ÇÉ  0    0\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.PermRootGroup","page":"Finite reflection groups","title":"Chevie.PermRoot.PermRootGroup","text":"PermRootGroup   is  the  type  of  reflection  groups  represented  as  a permutation group on a set of roots.\n\n\n\n\n\n","category":"type"},{"location":"permroot.html#Chevie.ComplexR.complex_reflection_group","page":"Finite reflection groups","title":"Chevie.ComplexR.complex_reflection_group","text":"complex_reflection_group(STnumber) or crg(STnumber)\n\ncomplex_reflection_group(p,q,r) or crg(p,q,r)\n\nThe  first form of complex_reflection_group  returns the complex reflection group which has Shephard-Todd number STnumber, see Shephard-Todd1954.   The   second   form   returns   the imprimitive complex reflection group G(p,q,r).\n\njulia> G=complex_reflection_group(4)\nG‚ÇÑ\n\njulia> degrees(G)\n2-element Vector{Int64}:\n 4\n 6\n\njulia> length(G)\n24\n\njulia> W*coxgroup(:A,2) # how to make a non-irreducible group\nG‚ÇÑ√óA‚ÇÇ\n\njulia> complex_reflection_group(1,1,3) # another way to enter A‚ÇÇ\ngl‚ÇÉ\n\njulia> crg(4) # there is also a short alias\nG‚ÇÑ\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.PRG","page":"Finite reflection groups","title":"Chevie.PermRoot.PRG","text":"PRG(roots,coroots) complex reflection group with given roots and coroots\n\n\n\n\n\n","category":"type"},{"location":"permroot.html#Chevie.PermRoot.TypeIrred","page":"Finite reflection groups","title":"Chevie.PermRoot.TypeIrred","text":"a TypeIrred object classifies an irreducible finite complex reflection group. It has the properties:\n\n.rank  the semisimplerank of the group\n.series which takes one of the values :A,:B,:D,:E,:F,:G,:H,:I for an    irreducible Coxeter group, and is :ST for other groups.\n.ST for a primitive group with .series==:ST, holding the Shepard-Todd number\n.p and .q for an imprimitive group with .series==:ST, holding .p=de and .q=e for G(de,e,r).\n\n\n\n\n\n","category":"type"},{"location":"permroot.html#Chevie.PermRoot.TypeIrred-Tuple{PermRootGroup}","page":"Finite reflection groups","title":"Chevie.PermRoot.TypeIrred","text":"TypeIrred(W::PermRootGroup)\n\nW  must be an irreducible finite complex reflection group, generated by distinguished  reflections  S.  TypeIrred  classifies  W  (returns  a TypeIrred object) by computing:\n\nr=semisimplerank(W)\ns=length(W)/factorial(r)\nD=all distinguished reflections of W=W-orbit of S, which gives\no=the maximum order of a reflection=max_s So(s) and\nh=the Coxeter number=(_s Do(s))r\n\n(r,s,o)  are sufficient  to determine  a G_deer  excepted for the ambiguity  between G_2ee2 and I‚ÇÇ(4e),  which is resolved by h (excepted   for   e=1,   where   the   two   solutions  are  isomorphic). G_deer has s=(de) ≥e, o=max(2d), h=ed(r-1)+d-Œ¥_d1\n\n(r,s,o)  are also sufficient  to distinguish primitive  groups except for the tuples (which are resolved by h):\n\n(G‚Çâ, G‚ÇÇ‚ÇÑ‚Äö‚ÇÜ‚Äö‚ÇÇ)\n(G‚ÇÅ‚ÇÇ, G‚ÇÅ‚ÇÇ‚Äö‚ÇÜ‚Äö‚ÇÇ, I‚ÇÇ(24))\n(G‚ÇÅ‚ÇÉ, G‚ÇÇ‚ÇÑ‚Äö‚ÇÅ‚ÇÇ‚Äö‚ÇÇ, I‚ÇÇ(48))\n(G‚ÇÇ‚ÇÇ, G‚ÇÜ‚ÇÄ‚Äö‚ÇÉ‚ÇÄ‚Äö‚ÇÇ, I‚ÇÇ(120))\n(G‚Çá, G‚ÇÅ‚ÇÑ, G‚ÇÇ‚ÇÑ‚Äö‚Çà‚Äö‚ÇÇ)\n(G‚Çà, G‚ÇÅ‚ÇÇ‚Äö‚ÇÉ‚Äö‚ÇÇ)\n(G‚ÇÅ‚ÇÖ, G‚ÇÑ‚Çà‚Äö‚ÇÅ‚ÇÜ‚Äö‚ÇÇ)\n(G‚ÇÅ‚Çá, G‚ÇÅ‚ÇÇ‚ÇÄ‚Äö‚ÇÇ‚ÇÑ‚Äö‚ÇÇ)\n(G‚ÇÇ‚ÇÅ, G‚ÇÅ‚ÇÇ‚ÇÄ‚Äö‚ÇÑ‚ÇÄ‚Äö‚ÇÇ)\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.refltype","page":"Finite reflection groups","title":"Chevie.PermRoot.refltype","text":"refltype(W::ComplexReflectionGroup) or reflection_type(W)\n\nreturns the Vector{TypeIrred} which classifies W. An TypeIrred object classifies  an  irreducible  complex  reflection  group.  A general complex reflection group is classified by a Vector of such objects, which is used for  displaying W at the repl. Each  TypeIrred in the refltype has an additional  property .indices which tells the  index in gens(W) of each standard  generator of  the irreducible  component. In  the REPL display of W,  these  indices  are  omitted  when  they  are  the expected ones (the component is in order at the expected indices).\n\njulia> W=coxgroup(:D,3)\nA‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚ÇÇ‚Çé\n\njulia> t=refltype(W)[1]\nA‚ÇÉ\n\njulia> t.indices\n3-element Vector{Int64}:\n 1\n 3\n 2\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.rank","page":"Finite reflection groups","title":"Chevie.PermRoot.rank","text":"rank(W::ComplexReflectionGroup)\n\nreturns  the rank of  W, which is  the dimension of  the space where it acts.\n\njulia> rank(complex_reflection_group(31))\n4\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.semisimplerank","page":"Finite reflection groups","title":"Chevie.PermRoot.semisimplerank","text":"semisimpleRank(W::ComplexReflectionGroup)\n\nreturns  the semisimple rank of W, which  is the dimension of the space where  it effectively acts. If W is  a reflection group on the space V, and  V‚ÇÅ is the subspace generated by roots(W), then semisimplerank(W) is the dimension of V‚ÇÅ. The reflection group W is called essential if V‚ÇÅ=V.\n\njulia> W=reflection_subgroup(coxgroup(:A,3),[1,3])\nA‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÅ√óA‚ÇÅŒ¶‚ÇÅ\n\njulia> semisimplerank(W)\n2\n\njulia> rank(W)\n3\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.number_of_reflections","page":"Finite reflection groups","title":"Chevie.PermRoot.number_of_reflections","text":"number_of_reflections(W::ComplexReflectionGroup) or nref(W)\n\nthe number of reflections of W\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.number_of_hyperplanes","page":"Finite reflection groups","title":"Chevie.PermRoot.number_of_hyperplanes","text":"number_of_hyperplanes(W::ComplexReflectionGroup) or nhyp(W)\n\nThe number of reflecting hyperplanes of W\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.coxeter_number","page":"Finite reflection groups","title":"Chevie.PermRoot.coxeter_number","text":"coxeter_number(W::PermRootGroup,i) or coxnum\n\nGordon  and  Griffeth  GG2012  have defined the Coxeter number  of an irreducible  character œÜ of  a complex reflection group as the scalar by which the central element ‚àë_{s in reflections(W)}(1-s) acts on  the representation of character œÜ.  The function coxnum returns the Coxeter number of the i-th irreducible character of W.\n\n\n\n\n\ncoxeter_number(W::PermRootGroup) or coxnum\n\nGordon  and  Griffeth  GG2012  have defined the Coxeter number of an irreducible complex reflection group as the Coxeter number of its reflection character. It is also given by the formula (nref(W)+nhyp(W))/rank(W);  for a well-generated group it is equal to the highest  reflection degree. For a non-irreducible group, the Coxeter number is the sum of those of its irreducible components.\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.roots-Tuple{PRG}","page":"Finite reflection groups","title":"Chevie.PermRoot.roots","text":"roots(W::PermRootGroup) the roots of W\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.roots-Tuple{PRG, Any}","page":"Finite reflection groups","title":"Chevie.PermRoot.roots","text":"roots(W::PermRootGroup,i) same as roots(W)[i]\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.coroots","page":"Finite reflection groups","title":"Chevie.PermRoot.coroots","text":"coroots(W) the list of coroots of W (listed in the same order as the roots)\n\n\n\n\n\ncoroots(W,i) same as but better than coroots(W)[i]\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.coroot","page":"Finite reflection groups","title":"Chevie.PermRoot.coroot","text":"coroot(r,Œª=-1)\n\nthe coroot for a unitary reflection of root r and eigenvalue Œª.\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.simpleroots","page":"Finite reflection groups","title":"Chevie.PermRoot.simpleroots","text":"simpleroots(W::ComplexReflectionGroup)  the  simple  roots  of W (those corresponding to gens(W)) as the rows of a matrix.\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.simplecoroots","page":"Finite reflection groups","title":"Chevie.PermRoot.simplecoroots","text":"simplecoroots(W::ComplexReflectionGroup) the simple coroots of W (those corresponding to gens(W)) as the rows of a matrix.\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.baseX","page":"Finite reflection groups","title":"Chevie.PermRoot.baseX","text":"baseX(W::ComplexReflectionGroup)\n\nreturns  as the rows of a matrix a  particular basis of the space V where W acts: the first semisimplerank(W) rows contain the coordinates on the basis of V of a basis of the root lattice (given by simpleroots(W)[independent_roots(W)]) and the last rank(W)-semisimplerank(W) ones contain the same for the orthogonal of the coroots.\n\nWhen W represents a rootdatum for a reductive group, the first lines are the same as simpleroots(W).\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.independent_roots","page":"Finite reflection groups","title":"Chevie.PermRoot.independent_roots","text":"independent_roots(W::ComplexReflectionGroup)\n\nA vector of indices of length semisimplerank(W) such that simpleroots(W)[independent_roots(W)]  is  a  basis  of  the  vector space spanned by the roots of W.\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.cartan-Tuple{PermRootGroup}","page":"Finite reflection groups","title":"Chevie.PermRoot.cartan","text":"cartan(W::PermRootGroup)    Cartan matrix of W.\n\nLet  s‚ÇÅ,‚Ä¶,s‚Çô be reflections with associated  roots r·µ¢ and coroots c·µ¢. The  matrix C with  entries C·µ¢,‚±º=c·µ¢(r‚±º) is  called a Cartan matrix of s‚ÇÅ,‚Ä¶,s‚Çô.  Since a reflection determines up to scalar a root and a coroot, C  is uniquely  determined by  s‚ÇÅ,‚Ä¶,s‚Çô up  to conjugation by a diagonal matrix.\n\nIf s‚ÇÅ,‚Ä¶,s‚Çô generate a reflection group W, then C up to conjugation by a  diagonal matrix is an invariant of the reflection representation of W. If invertible, the matrix C determines this representation since then the r·µ¢  form a basis in  which the matrix for  s·µ¢ differs from the identity only  on  the  i-th  row,  where  the  corresponding  row of C has been subtracted.\n\nIn general cartan(W)==simplecoroots(W)*permutedims(simpleroots(W)).\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> cartan(W)\n3√ó3 Matrix{Int64}:\n  2  -1   0\n -1   2  -1\n  0  -1   2\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.cartan-Tuple{PermRootGroup, Any, Any}","page":"Finite reflection groups","title":"Chevie.PermRoot.cartan","text":"cartan(W::PermRootGroup,i,j) the  cartan coefficient c·µ¢(r‚±º), the value of the linear form given by the i-th coroot c·µ¢ on the j-th root r·µ¢ of W\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.refls","page":"Finite reflection groups","title":"Chevie.PermRoot.refls","text":"refls(W::ComplexReflectionGroup)\n\na  list of same length as W.roots giving the corresponding element of W representing  a distinguished reflection.  In particular this  list is much longer  than unique(refls(W))  since in  general there  are several roots corresponding to a reflection.\n\n\n\n\n\nrefls(W::ComplexReflectionGroup,i)\n\nthe  element of W representing  the distinguished reflection around the i-th root of W (i can be an index or a vector of indices)\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.unique_refls","page":"Finite reflection groups","title":"Chevie.PermRoot.unique_refls","text":"unique_refls(W::ComplexReflectionGroup) A  sublist of 1:length(roots(W)) such  that the distinguished reflections around  the  corresponding  roots  reach  one  time only each distinguished reflection of W.\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.ComplexR.Reflection","page":"Finite reflection groups","title":"Chevie.ComplexR.Reflection","text":"Reflection is a struct representing a reflection in a reflection group.\n\njulia> W=crg(8);\n\njulia> r=reflections(W)[7] # shows (r.W,r.rootno,r.eigen)\nReflection(G‚Çà,1,-1)\n\njulia> r.rootno # r is a reflection for the first root\n1\n\njulia> r.eigen # the non-trival eigenvalue, as a Root1\nRoot1: -1\n\njulia> r.W # the group of which r is a reflection\nG‚Çà\n\njulia> r==Reflection(W,1,-1) # specify r with .rootno and .eigen\ntrue\n\njulia> Reflection(W,1) # specify with .rootno gets the distinguished reflection\nReflection(G‚Çà,1,Œ∂‚ÇÑ)\n\njulia> root(r)\n2-element Vector{Cyc{Rational{Int64}}}:\n  0\n Œ∂‚ÇÑ\n\njulia> coroot(r)\n2-element Vector{Cyc{Int64}}:\n    0\n -2Œ∂‚ÇÑ\n\njulia> Matrix(r)\n2√ó2 Matrix{Cyc{Rational{Int64}}}:\n 1   0\n 0  -1\n\njulia> hyperplane(r) # the fixed hyperplane, as a rowspace\n1√ó2 Matrix{Cyc{Rational{Int64}}}:\n 1  0\n\njulia> hyperplane(r)*Matrix(r)==hyperplane(r)\ntrue\n\njulia> isdistinguished(r) # r is not distinguished\nfalse\n\njulia> exponent(r) # which power of a distinguished reflection it is\n2\n\njulia> Perm(r)\n(1,8)(2,9)(3,16)(4,15)(5,17)(6,18)(7,19)(10,22)(11,21)(12,23)\n\njulia> hyperplane_orbit(r) # r is in the first hyperplane orbit\n1\n\njulia> position_class(r) # the index of the conjugacy class of r in W \n15\n\njulia> simple_rep(r) # smallest root index affording a conjugate reflection\n1\n\njulia> word(r) # a word in the generators of r.W for r\n2-element Vector{Int64}:\n 1\n 1\n\n\n\n\n\n","category":"type"},{"location":"permroot.html#Chevie.ComplexR.reflections","page":"Finite reflection groups","title":"Chevie.ComplexR.reflections","text":"reflections(W)   a  Vector{Reflection}   of  all   reflections  of  the reflection   group   W   (including   the   non-distinguished  ones;  see Reflection).  reflections(W)[1:nhyp(W)]  are  the distinguished reflections.\n\njulia> W=crg(4)\nG‚ÇÑ\n\njulia> reflections(W)\n8-element Vector{Reflection{PRG{Cyc{Rational{Int64}}, Int16}}}:\n Reflection(G‚ÇÑ,1,Œ∂‚ÇÉ)\n Reflection(G‚ÇÑ,2,Œ∂‚ÇÉ)\n Reflection(G‚ÇÑ,4,Œ∂‚ÇÉ)\n Reflection(G‚ÇÑ,5,Œ∂‚ÇÉ)\n Reflection(G‚ÇÑ,1,Œ∂‚ÇÉ¬≤)\n Reflection(G‚ÇÑ,2,Œ∂‚ÇÉ¬≤)\n Reflection(G‚ÇÑ,4,Œ∂‚ÇÉ¬≤)\n Reflection(G‚ÇÑ,5,Œ∂‚ÇÉ¬≤)\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#PermGroups.Perms.reflection_length-Tuple{PermRootGroup, Perm}","page":"Finite reflection groups","title":"PermGroups.Perms.reflection_length","text":"reflection_length(W::PermRootGroup,w::Perm) or reflength\n\nThis  function returns the  number of eigenvalues  of w in the reflection representation  which are not equal to 1.  For a finite Coxeter group, this is  equal to the  reflection length of  w, that is  the minimum number of reflections  of which w  is a product.  This also holds  in general for a well-generated  complex reflection group if  w divides for the reflection length a Coxeter element.\n\njulia> W=coxgroup(:A,4)\nA‚ÇÑ\n\njulia> reflength(W,longest(W))\n2\n\njulia> reflength(W,W(1,2,3,4))\n4\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.simple_reps","page":"Finite reflection groups","title":"Chevie.PermRoot.simple_reps","text":"simple_reps(W)\n\nfor  each root, the index  of the first simple  root conjugate to it (it is the index of a generator of W).\n\n\n\n\n\nsimple_reps(W,i)\n\nthe  smallest index of a root in the  same W-orbit as the i-th root (it is the index of a generator of W).\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.simple_conjugating","page":"Finite reflection groups","title":"Chevie.PermRoot.simple_conjugating","text":"simple_conjugating(W::ComplexReflectionGroup)\n\nFor each index i of a root, an element w‚àà W such that action(W,simple_reps(W,i),w)==i. \n\n\n\n\n\nsimple_conjugating(W,i)\n\nan element w‚àà W such that action(W,simple_reps(W,i),w)==i. In particular W(simple_reps(W,i))^simple_conjugating(W,i)==refls(W,i).\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.Diagrams.diagram","page":"Finite reflection groups","title":"Chevie.Diagrams.diagram","text":"diagram(W)  prints  a  diagram  describing  a  presentation of the finite reflection group or spets W\n\njulia> diagram(coxgroup(:E,8))\n    O 2\n    Ôø®\nO‚ÄîO‚ÄîO‚ÄîO‚ÄîO‚ÄîO‚ÄîO E‚Çà\n1 3 4 5 6 7 8\n\njulia> diagram(crg(33))\n    3 ‚ë°       G‚ÇÉ‚ÇÉ\n     /^\\\n‚ë° ‚Äî‚Äî‚ë° ‚Äî‚Äî‚ë° ‚Äî‚Äî‚ë° \n1   2   4   5     423423=342342\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.ComplexR.hyperplane_orbits","page":"Finite reflection groups","title":"Chevie.ComplexR.hyperplane_orbits","text":"hyperplane_orbits(W::ComplexReflectionGroup)\n\nreturns  a  list  of  named  tuples,  one  for each hyperplane orbit of the reflection  group W. If o is the named tuple for such an orbit, and s is  the first  element of  gens(W) whose  hyperplane is  in the orbit, it contains the following fields\n\n.s:     index of s in gens(W)\n\n.order: order of s\n\n.cl_s:  for i in 1:order-1, position_class(W,W(s)^i)\n\n.N_s:    size of hyperplane orbit\n\n.det_s:  for i in 1:order-1, position in CharTable(W) of det‚Çõ‚Å±, where    det‚Çõ is the linear character taking the value det(reflrep(W,s)) on s    and 1 on non-conjugate reflections.\n\njulia> W=coxgroup(:B,2)\nB‚ÇÇ\n\njulia> hyperplane_orbits(W)\n2-element Vector{@NamedTuple{s::Int64, cl_s::Vector{Int64}, order::Int64, N_s::Int64, det_s::Vector{Int64}}}:\n (s = 1, cl_s = [2], order = 2, N_s = 2, det_s = [5])\n (s = 2, cl_s = [4], order = 2, N_s = 2, det_s = [1])\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.CoxGroups.braid_relations","page":"Finite reflection groups","title":"Chevie.CoxGroups.braid_relations","text":"braid_relations(W)\n\nthis  function returns the  relations which present  the braid group of the reflection group W. These are homogeneous (both sides of the same length) relations  between generators in bijection  with the generating reflections of  W. A presentation  of W is  obtained by adding relations specifying the order of the generators.\n\njulia> W=complex_reflection_group(29)\nG‚ÇÇ‚Çâ\n\njulia> braid_relations(W)\n7-element Vector{Tuple{Vector{Int64}, Vector{Int64}}}:\n ([1, 2, 1], [2, 1, 2])\n ([2, 4, 2], [4, 2, 4])\n ([3, 4, 3], [4, 3, 4])\n ([2, 3, 2, 3], [3, 2, 3, 2])\n ([1, 3], [3, 1])\n ([1, 4], [4, 1])\n ([4, 3, 2, 4, 3, 2], [3, 2, 4, 3, 2, 4])\n\neach  relation  is  represented  as  a  pair  of lists, specifying that the product  of the  generators according  to the  indices on  the left side is equal  to the product according to the  indices on the right side. See also diagram.\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.reflection_representation-Tuple{PermRootGroup, Any}","page":"Finite reflection groups","title":"Chevie.PermRoot.reflection_representation","text":"reflection_representation(W::ComplexReflectionGroup,w) or reflrep(W,w)\n\nLet  V be the space on  which W acts as a  reflection group and let w‚àà W,  represented  as  a  permutation  of  the roots. The function reflrep returns  the matrix of w acting on  V (from the right on the elements of  V seen as  row vectors by  our conventions in  Chevie). This is the linear  transformation of V which acts trivially on the orthogonal of the coroots  and has same effect as w on the simple roots. The function makes sense  more generally for a permutation of  the roots induced by an element of  GL(V) which stabilizes the roots (thus in particular normalizes W); thus  it works for reflection cosets.  For a rootdatum corresponding to a coset WœÉ we get the action of WœÉ on X(ùêì).\n\njulia> W=reflection_subgroup(rootdatum(\"E7sc\"),1:6)\nE‚Çá‚Çç‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çé=E‚ÇÜŒ¶‚ÇÅ\n\njulia> reflrep(W,longest(W))\n7√ó7 Matrix{Int64}:\n  0   0   0   0   0  -1  2\n  0  -1   0   0   0   0  2\n  0   0   0   0  -1   0  3\n  0   0   0  -1   0   0  4\n  0   0  -1   0   0   0  3\n -1   0   0   0   0   0  2\n  0   0   0   0   0   0  1\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.reflection_representation-Tuple{PRG}","page":"Finite reflection groups","title":"Chevie.PermRoot.reflection_representation","text":"reflection_representation(W::ComplexReflectionGroup) or reflrep(W)\n\nreturns  reflrep.(Ref(W),gens(W)),  that  is  the  generators  of  W as matrices.\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.reflection_representation-Tuple{PRG, Integer}","page":"Finite reflection groups","title":"Chevie.PermRoot.reflection_representation","text":"reflection_representation(W,i::Integer)  or reflrep(W,i)\n\nthe matrix for the distinguished reflection around the i-th root of W.\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.reflection_character","page":"Finite reflection groups","title":"Chevie.PermRoot.reflection_character","text":"reflection_character(W::ComplexReflectionGroup,w) or reflchar\n\nReturns  the trace  of the  element w  of W  as an  endomorphism of the vector space V on which W acts.\n\njulia> W=coxgroup(:B,3)\nB‚ÇÉ\n\njulia> reflchar(W,longest(W))\n-3\n\n\n\n\n\nreflection_character(W::ComplexReflectionGroup) or reflchar\n\nReturns  the reflection  character of  W. When  W is irreducible, it is CharTable(W).irr[charinfo(W).extRefl[2]].\n\njulia> reflchar(coxgroup(:A,3))\n5-element Vector{Int64}:\n  3\n  1\n -1\n  0\n -1\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.YMatrix","page":"Finite reflection groups","title":"Chevie.PermRoot.YMatrix","text":"YMatrix(W,w)\n\nLet  W be a finite reflection group on  the space V and let w‚àà W. The function  YMatrix returns the  matrix of w  acting on the  dual V* of V.  This is the linear transformation of V* which acts trivially on the orthogonal  of the roots and has same  effect as w on the simple coroots. The function makes sense more generally for an element of the normalizer of W  in the whole permutation group of the coroots. The resulting matrix is the  transposed  of  the  matrix  reflrep(W,w),  which,  according to our conventions  acts on the right (on the row vectors representing elements of the  dual of V). For  a rootdatum corresponding to  a coset WœÉ we get the action of WœÉ on Y(ùêì).\n\njulia> W=reflection_subgroup(rootdatum(\"E7sc\"),1:6)\nE‚Çá‚Çç‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çé=E‚ÇÜŒ¶‚ÇÅ\n\njulia> YMatrix(W,longest(W))\n7√ó7 transpose(::Matrix{Int64}) with eltype Int64:\n  0   0   0   0   0  -1  0\n  0  -1   0   0   0   0  0\n  0   0   0   0  -1   0  0\n  0   0   0  -1   0   0  0\n  0   0  -1   0   0   0  0\n -1   0   0   0   0   0  0\n  2   2   3   4   3   2  1\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.PermX","page":"Finite reflection groups","title":"Chevie.PermRoot.PermX","text":"PermX(W::ComplexReflectionGroup,M::AbstractMatrix)\n\nLet M be an invertible linear map of the reflection representation of W which  preserves the set  of roots of  parent(W), and normalizes W (for the  action of  matrices on  the right).  PermX returns the corresponding permutation  of the roots of parent(W);  it returns nothing if M does not normalize the set of roots of parent(W).\n\njulia> W=reflection_subgroup(rootdatum(\"E7sc\"),1:6)\nE‚Çá‚Çç‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çé=E‚ÇÜŒ¶‚ÇÅ\n\njulia> PermX(W,reflrep(W,longest(W)))==longest(W)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.PermY","page":"Finite reflection groups","title":"Chevie.PermRoot.PermY","text":"PermY(W::ComplexReflectionGroup,M::AbstractMatrix)\n\nLet  M  be  an  invertible  linear  map  on  the  dual  of the reflection representation  of W which  preserves the set  of coroots of parent(W), and  normalizes  W  (for  the  action  of matrices on the right). PermY returns  the corresponding  permutation of  the coroots  of parent(W); it returns  nothing  if  M  does  not  normalize  the  set  of  coroots of parent(W).\n\njulia> W=reflection_subgroup(rootdatum(\"E7sc\"),1:6)\nE‚Çá‚Çç‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çé=E‚ÇÜŒ¶‚ÇÅ\n\njulia> PermY(W,YMatrix(W,longest(W)))==longest(W)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.reflection_eigenvalues","page":"Finite reflection groups","title":"Chevie.PermRoot.reflection_eigenvalues","text":"reflection_eigenvalues(W) or refleigen(W)\n\nLet W be a reflection group on the vector space V. reflection_eigenvalues(W) returns for each conjugacy class representative x  of W (see classreps)  the eigenvalues of x  on V, as a list of Root1.\n\njulia> refleigen(coxgroup(:B,2))\n5-element Vector{Vector{Root1}}:\n [1, 1]\n [-1, 1]\n [-1, -1]\n [-1, 1]\n [Œ∂‚ÇÑ¬≥, Œ∂‚ÇÑ]\n\n\n\n\n\nrefleigen(W,i) faster than refleigen(W)[i]\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.ComplexR.degrees-Tuple{Union{FiniteCoxeterGroup, PermRootGroup}}","page":"Finite reflection groups","title":"Chevie.ComplexR.degrees","text":"degrees(W::ComplexReflectionGroup)\n\nreturns  a list  holding the  degrees of  W as  a reflection group on the vector  space V on which  it acts. These are  the degrees d‚ÇÅ,‚Ä¶,d‚Çô where n  is the dimension of  V of the basic  invariants of W in SV. They reflect  various properties  of W;  in particular,  their product  is the cardinality of W.\n\njulia> W=complex_reflection_group(30)\nH‚ÇÑ\n\njulia> degrees(W)\n4-element Vector{Int64}:\n  2\n 12\n 20\n 30\n\njulia> length(W)\n14400\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.ComplexR.codegrees","page":"Finite reflection groups","title":"Chevie.ComplexR.codegrees","text":"codegrees(W::ComplexReflectionGroup)\n\nreturns  the vector of codegrees of W  as a reflection group on the space V  of reflrep(W).  These are  one less  than the  degrees of  the basic derivations of W on SV‚äó V^vee.\n\njulia> W=complex_reflection_group(4)\nG‚ÇÑ\n\njulia> codegrees(W)\n2-element Vector{Int64}:\n 0\n 2\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.invariants","page":"Finite reflection groups","title":"Chevie.PermRoot.invariants","text":"invariants(W::ComplexReflectionGroup)\n\nreturns  the fundamental invariants of W in its reflection representation V.  That is, returns  a set of  algebraically independent elements of the symmetric  algebra  of  the  dual  of  V which generate the W-invariant polynomial  functions on V. Each such invariant function is returned as a function:  if e‚ÇÅ,‚Ä¶,e‚Çô is a basis of V and f is the function, then the value  of the polynomial  function on a‚ÇÅe‚ÇÅ+‚Ä¶+a‚Çôe‚Çô  is obtained by calling f(a‚ÇÅ,‚Ä¶,a‚Çô). This function depends on the classification, and is dependent on the exact reflection representation of W. So for the moment it is only implemented   when  the  reflection   representation  for  the  irreducible components has the same Cartan matrix as the one provided by Chevie for the corresponding  irreducible  group.  The  polynomials  are invariant for the natural   action  of   the  group   elements  as   matrices;  that  is,  if m==reflrep(W,w)  for some  w in  W, then  an invariant  f satisfies f(a‚ÇÅ,‚Ä¶,a‚Çô)=f(v‚ÇÅ,‚Ä¶,v‚Çô)   where  [v‚ÇÅ,‚Ä¶,v‚Çô]=[a‚ÇÅ,‚Ä¶,a‚Çô]√óm.  This  action  is implemented on Mvps by the function ^.\n\njulia> W=coxgroup(:A,2)\nA‚ÇÇ\n\njulia> @Mvp x,y,z\n\njulia> i=invariants(W);\n\njulia> map(f->f(x,y),i)\n2-element Vector{Mvp{Int64, Int64}}:\n -2x¬≤+2xy-2y¬≤\n 6x¬≤y-6xy¬≤\n\njulia> W=complex_reflection_group(24)\nG‚ÇÇ‚ÇÑ\n\njulia> p=invariants(W)[1](x,y,z)\nMvp{Rational{Int64}}: (14//1)x‚Å¥+(-12//1)x¬≤y¬≤+(-42//1)x¬≤yz+(21//2)x¬≤z¬≤+(18//7)y‚Å¥+(-6//1)y¬≥z+(-9//2)y¬≤z¬≤+(-21//8)z‚Å¥\n\njulia> map(v->^(v,reflrep(W,1);vars=[:x,:y,:z]),(x,y,z))\n((1//2)x+(3‚àö-7/14)y, (-‚àö-7/2)x+(-1//2)y, z)\n\njulia> p^reflrep(W,1)-p\nMvp{Cyc{Rational{Int64}}}: 0\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#LaurentPolynomials.discriminant","page":"Finite reflection groups","title":"LaurentPolynomials.discriminant","text":"discriminant(W)\n\nreturns  the  discriminant  of  the  complex  reflection  group  W,  as a polynomial in the fundamental invariants. The discriminant is the invariant obtained  by  taking  the  product  of  the  linear  forms  describing  the reflecting   hyperplanes  of  W,   each  raised  to   the  order  of  the corresponding  reflection. The discriminant  is returned as  a function f such  that  the  discriminant  in  the  variables  a‚ÇÅ,‚Ä¶,a‚Çô is obtained by calling f(a‚ÇÅ,‚Ä¶,a‚Çô). For the moment, this function is implemented only for the exceptional complex reflection groups G‚ÇÑ to G‚ÇÉ‚ÇÉ.\n\njulia> W=complex_reflection_group(4);@Mvp x,y\n\njulia> discriminant(W)(x,y)\nMvp{Int64}: x¬≥-y¬≤\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.invariant_form","page":"Finite reflection groups","title":"Chevie.PermRoot.invariant_form","text":"invariant_form(W::ComplexReflectionGroup)\n\nThis  function  returns  the  matrix  F  (defined  up  to a scalar) of an Hermitian form invariant under the action of the reflection group W. That is, if M is the matrix of an element of W, then M*F*M'=F.\n\njulia> W=complex_reflection_group(4)\nG‚ÇÑ\n\njulia> invariant_form(W)\n2√ó2 Matrix{Int64}:\n 1  0\n 0  2\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.bipartite_decomposition","page":"Finite reflection groups","title":"Chevie.PermRoot.bipartite_decomposition","text":"bipartite_decomposition(W)\n\nReturns  a bipartite decomposition [L,R] of the indices of the generators of  the  reflection  group  W,  such  that reflection_subgroup(W,L) and reflection_subgroup(W,R) are abelian subgroups, and W=reflection_subgroup(W,   vcat(L,R)).   Gives   an   error  if  no  such decomposition is possible.\n\njulia> bipartite_decomposition(coxgroup(:E,8))\n([1, 4, 6, 8], [3, 2, 5, 7])\n\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Combinat.catalan-Tuple{Group, Any}","page":"Finite reflection groups","title":"Combinat.catalan","text":"catalan(W::ComplexReflectionGroup)\n\nreturns the Catalan Number of the irreducible complex reflection group W. For well-generated groups, this number is equal to the number of simples in the  dual Braid  monoid. For  other groups  it was  defined by  Gordon and Griffeth2012.  For Weyl groups, it also counts the number of antichains of roots.\n\njulia> catalan(coxgroup(:A,7))\n1430\n\ncatalan(W,i)\n\nreturns   the  i-th  Fuss-Catalan  Number   of  the  irreducible  complex reflection  group W. For  well-generated groups, this  number is equal to the  number of chains  s‚ÇÅ,‚Ä¶,s·µ¢ of simples  in the dual  monoid where s‚±º divides  s‚±º‚Çä‚ÇÅ. For these groups, it is also equal to ‚àè‚±º(ih+d‚±º)/d‚±º where the  product runs over the reflection degrees  of W, and where h is the Coxeter  number of W. For non-well generated groups, the definition is in Gordon and Griffeth2012.\n\njulia> catalan(complex_reflection_group(7),2)\n16\n\ncatalan(W;q=1), resp. catalan(W,i;q=1)\n\nfor  q  a  variable  (like  Pol()  or an Mvp) returns the q-Catalan number  (resp.  the  i-th  q-Fuss  Catalan  number)  of  W. Again the definitions in general are in Gordon and Griffeth2012.\n\njulia> catalan(complex_reflection_group(7),2;q=Pol())\nPol{Int64}: q‚Å∑¬≤+2q‚Å∂‚Å∞+3q‚Å¥‚Å∏+4q¬≥‚Å∂+3q¬≤‚Å¥+2q¬π¬≤+1\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.generic_order","page":"Finite reflection groups","title":"Chevie.PermRoot.generic_order","text":"generic_order(W,q=Pol())\n\nreturns  the generic  order of  W as  a polynomial  in q (the \"compact\" order  of the  Spets). This  is q^N‚ÇïŒ†·µ¢(q^d·µ¢-1)  where d·µ¢  are the reflection  degrees and  N‚Çï the  number of  reflecting hyperplanes. For a Weyl  group, it is the order  of the associated semisimple finite reductive group over the field with q elements.\n\njulia> PermRoot.generic_order(complex_reflection_group(4),Pol(:q))\nPol{Int64}: q¬π‚Å¥-q¬π‚Å∞-q‚Å∏+q‚Å¥\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.torus_order","page":"Finite reflection groups","title":"Chevie.PermRoot.torus_order","text":"torus_order(W::ComplexReflectionGroup,i,q=Pol())\n\nreturns  as a  polynomial in  q the  toric order  of the i-th conjugacy class  of W. This is the characteristic  polynomial of an element of that class  on  the  reflection  representation  of  W.  It is the same as the generic  order of the reflection subcoset torus(W,i) of W determined by the trivial subgroup and a representative of the i-th conjugacy class.\n\njulia> W=complex_reflection_group(4)\n\njulia> torus_order.(Ref(W),1:nconjugacy_classes(W),Pol(:q))\n7-element Vector{Pol{Cyc{Int64}}}:\n q¬≤-2q+1\n q¬≤+2q+1\n q¬≤+1\n q¬≤-Œ∂‚ÇÉq+Œ∂‚ÇÉ¬≤\n q¬≤+Œ∂‚ÇÉq+Œ∂‚ÇÉ¬≤\n q¬≤+Œ∂‚ÇÉ¬≤q+Œ∂‚ÇÉ\n q¬≤-Œ∂‚ÇÉ¬≤q+Œ∂‚ÇÉ\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.reflection_subgroup-Tuple{PRG, AbstractVector}","page":"Finite reflection groups","title":"Chevie.PermRoot.reflection_subgroup","text":"reflection_subgroup(W,r)\n\nreturns  the  reflection  subgroup  of  the  complex  reflection  group W generated by refls(W,r).\n\nA  reflection subgroup H of  W is a permutation  subgroup with the same additional  information as  W, and  some new  one added which express the relationship with the parent W:\n\ninclusion(H):   the indices of the roots of H in the roots of W\n\nparent(H):  is set to W.\n\nrestriction(H):  a list of length length(roots(W)) with non-zero entries    in positions inclusion(H) bound to eachindex(roots(H)).\n\nA  reflection  group  which  is  not  a  subgroup  actually  also  has this information, set to the trivial values: inclusion(W)==restriction(W)==eachindex(roots(W)),   and   parent()==W. This  allows a lot of code to be  written in the same way for parent groups or reflection subgroups.\n\nreflection_subgroup(R) where R is itself a reflection subgroup returns a  reflection subgroup of the parent of R.\n\njulia> W=coxgroup(:F,4)\nF‚ÇÑ\n\njulia> H=reflection_subgroup(W,[1,2,11,20])\nF‚ÇÑ‚Çç‚Çâ‚Äö‚ÇÇ‚Äö‚ÇÅ‚Äö‚ÇÅ‚ÇÜ‚Çé=D‚ÇÑ‚Çç‚ÇÉ‚ÇÇ‚ÇÅ‚ÇÑ‚Çé\n\njulia> [restriction(H)]\n1-element Vector{Vector{Int64}}:\n [1, 2, 0, 0, 5, 0, 0, 0, 3, 0  ‚Ä¶  0, 16, 0, 19, 0, 21, 0, 22, 23, 24]\n\njulia> reflection_subgroup(H,[1,2,3])\nF‚ÇÑ‚Çç‚Çâ‚ÇÅ‚ÇÇ‚Çé=A‚ÇÉ‚Çç‚ÇÉ‚ÇÅ‚ÇÇ‚ÇéŒ¶‚ÇÅ\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.inclusion","page":"Finite reflection groups","title":"Chevie.PermRoot.inclusion","text":"inclusion(W::ComplexReflectionGroup)\n\nthe indices of the roots of W in the roots of parent(W).\n\ninclusion(W::PermRootGroup,i::Integer) inclusion(W::PermRootGroup,v::AbstractVector{<:Integer})\n\nsame as inclusion(W)[i] or inclusion(W)[v] (but more efficient).\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.inclusiongens","page":"Finite reflection groups","title":"Chevie.PermRoot.inclusiongens","text":"inclusion(W::ComplexReflectionGroup)\n\nthe indices of simpleroots(W) in the roots of parent(W).\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.restriction","page":"Finite reflection groups","title":"Chevie.PermRoot.restriction","text":"restriction(W::PermRootGroup)\n\nA  list for each root of parent(W), which  holds 0 if the root is not a root of W and i if the root is the i-th root of W.\n\nrestriction(W::PermRootGroup,i::Integer) restriction(W::PermRootGroup,v::AbstractVector{<:Integer})\n\nsame as restriction(W)[i] or restriction(W)[v] (but more efficient).\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.action","page":"Finite reflection groups","title":"Chevie.PermRoot.action","text":"action(W::ComplexReflectionGroup,i::Integer,p::Perm)\n\nThe elements of a PermRootGroup permute the roots of parent(W), that is are  permutations on  eachindex(roots(parent(W))). The  function action translates  this action of p‚ààW to eachindex(roots(W)). For a reflection subgroup we have action(W,i,p)==restriction(W,inclusion(W,i)^p) and for a parent  group action(W,i,p)==i^p. The first formula is always valid since for a parent group restriction(W)==inclusion(W)==eachindex(roots(W)).\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.Weyl.standard_parabolic-Tuple{PermRootGroup, Any}","page":"Finite reflection groups","title":"Chevie.Weyl.standard_parabolic","text":"standard_parabolic(W::PermRootGroup, H)\n\nLet  H be a  reflection subgroup of  W. Returns an  element w‚àà W such that  H^w is a standard  parabolic subgroup of W  (or nothing if H is not parabolic or not conjugate to a standard parabolic).\n\n\n\n\n\n","category":"method"},{"location":"permroot.html#Chevie.PermRoot.parabolic_reps","page":"Finite reflection groups","title":"Chevie.PermRoot.parabolic_reps","text":"parabolic_reps(W)\n\nFor  a Coxeter group or finite complex reflection group W, returns a list of  indices  of  roots  of  W  describing  representatives  of  orbits of parabolic  subgroups  under  conjugation  by  W. For Coxeter groups, each orbit  has a representative which is a standard parabolic subgroup, that is whose indices is a subset of eachindex(gens(W)). This may not be the case in general.\n\njulia> parabolic_reps(coxgroup(:A,4))\n7-element Vector{Vector{Int64}}:\n []\n [1]\n [1, 2]\n [1, 3]\n [1, 2, 3]\n [1, 2, 4]\n [1, 2, 3, 4]\n\njulia> parabolic_reps(complex_reflection_group(3,3,3))\n7-element Vector{Vector{Int64}}:\n []\n [1]\n [1, 2]\n [1, 3]\n [1, 9]\n [2, 3]\n [1, 2, 3]\n\nparabolic_reps(W,r)\n\nIf  a second  argument r  is given,  returns only  representatives of the parabolic subgroups of semisimple rank r.\n\njulia> parabolic_reps(coxgroup(:A,4),2)\n2-element Vector{Vector{Int64}}:\n [1, 2]\n [1, 3]\n\njulia> parabolic_reps(complex_reflection_group(3,3,3),2)\n4-element Vector{Vector{Int64}}:\n [1, 2]\n [1, 3]\n [1, 9]\n [2, 3]\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.parabolic_closure","page":"Finite reflection groups","title":"Chevie.PermRoot.parabolic_closure","text":"parabolic_closure(W,I)\n\nI  should be a  list of indices  of reflections of  W. Returns J such that  reflection_subgroup(W,J) is the smallest  parabolic subgroup of W containing reflection_subgroup(W,I).\n\njulia> W=complex_reflection_group(7)\nG‚Çá\n\njulia> parabolic_closure(W,[1])\n1-element Vector{Int64}:\n 1\n\njulia> parabolic_closure(W,[1,2])\n3-element Vector{Int64}:\n 1\n 2\n 3\n\n\n\n\n\n","category":"function"},{"location":"permroot.html#Chevie.PermRoot.isparabolic","page":"Finite reflection groups","title":"Chevie.PermRoot.isparabolic","text":"isparabolic(W)\n\nwhether the reflection subgroup W is a parabolic subgroup of parent(W).\n\njulia> W=complex_reflection_group(7)\nG‚Çá\n\njulia> isparabolic(reflection_subgroup(W,[1,2]))\nfalse\n\njulia> isparabolic(reflection_subgroup(W,[1]))\ntrue\n\n\n\n\n\n","category":"function"},{"location":"ct.html#Classtypes","page":"Classtypes","title":"Classtypes","text":"","category":"section"},{"location":"ct.html","page":"Classtypes","title":"Classtypes","text":"closed_subsystems\nClassTypes","category":"page"},{"location":"ct.html#Chevie.Gt.closed_subsystems","page":"Classtypes","title":"Chevie.Gt.closed_subsystems","text":"closed_subsystems(W) \n\nW  should  be  a  Weyl  group.  The  function returns the Poset of closed subsystems  of the root system of W. Each closed subsystem is represented by  the list of indices of its simple roots.  If W is the Weyl group of a reductive  group  ùêÜ,  then  closed  subsystem  correspond  to reductive subgroups of maximal rank. And all such groups are obtained this way, apart from  some  exceptions  in  characteristics  2  and 3 (see Malle-Testerman 2011 Proposition 13.4).\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> closed_subsystems(W)\n1 2<1 4<4<‚àÖ\n1 2<1 5<1<‚àÖ\n1 2<2 6<6<‚àÖ\n1 2<3 5<5<‚àÖ\n1 4<1\n1 5<6\n1 5<5\n2 6<2<‚àÖ\n3 5<3<‚àÖ\n\n\n\n\n\n","category":"function"},{"location":"ct.html#Chevie.Gt.ClassTypes","page":"Classtypes","title":"Chevie.Gt.ClassTypes","text":"ClassTypes(G[,p])\n\nG  should be a root  datum or a twisted  root datum representing a finite reductive  group ùêÜ ^F and  p should be a  prime. The function returns the class types of G in characteristic p (in good characteristic if p is  omitted). Two elements  of ùêÜ ^F  have the same  class type if their centralizers  are  conjugate.  If  su  is  the Jordan decomposition of an element  x, the class type of x is  determined by the class type of its semisimple part s and the unipotent class of u in C_ùêÜ (s).\n\nThe   function  ClassTypes  is  presently  only  implemented  for  simply connected  groups, where  C_ùêÜ (s)  is connected.  This section is a bit experimental and may change in the future.\n\nClassTypes  returns a  struct which  contains a  list of classtypes for semisimple  elements,  which  are  represented  by  subspets  and contain additionnaly information on the unipotent classes of C_ùêÜ (s).\n\nLet us give some examples:\n\njulia> t=ClassTypes(rootdatum(:sl,3))\nClassTypes(A‚ÇÇ,good characteristic)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇC_G(s)    ‚îÇ |C_G(s)|‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇA‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅ¬≤  ‚îÇ      Œ¶‚ÇÅ¬≤‚îÇ\n‚îÇA‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ ‚îÇ     Œ¶‚ÇÅŒ¶‚ÇÇ‚îÇ\n‚îÇA‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÉ   ‚îÇ       Œ¶‚ÇÉ‚îÇ\n‚îÇA‚ÇÇ‚Çç‚ÇÅ‚Çé=A‚ÇÅŒ¶‚ÇÅ‚îÇ   qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ‚îÇ\n‚îÇA‚ÇÇ        ‚îÇq¬≥Œ¶‚ÇÅ¬≤Œ¶‚ÇÇŒ¶‚ÇÉ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nBy   default,  only  information  about  semisimple  centralizer  types  is returned:   the type, and its generic order.\n\njulia> xdisplay(t;unip=true)\nClassTypes(A‚ÇÇ,good characteristic)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇC_G(s)    ‚îÇ    u |C_G(su)|‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇA‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅ¬≤  ‚îÇ    1       Œ¶‚ÇÅ¬≤‚îÇ\n‚îÇA‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ ‚îÇ    1      Œ¶‚ÇÅŒ¶‚ÇÇ‚îÇ\n‚îÇA‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÉ   ‚îÇ    1        Œ¶‚ÇÉ‚îÇ\n‚îÇA‚ÇÇ‚Çç‚ÇÅ‚Çé=A‚ÇÅŒ¶‚ÇÅ‚îÇ   11    qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ‚îÇ\n‚îÇ          ‚îÇ    2       qŒ¶‚ÇÅ‚îÇ\n‚îÇA‚ÇÇ        ‚îÇ  111 q¬≥Œ¶‚ÇÅ¬≤Œ¶‚ÇÇŒ¶‚ÇÉ‚îÇ\n‚îÇ          ‚îÇ   21      q¬≥Œ¶‚ÇÅ‚îÇ\n‚îÇ          ‚îÇ    3       3q¬≤‚îÇ\n‚îÇ          ‚îÇ 3_Œ∂‚ÇÉ       3q¬≤‚îÇ\n‚îÇ          ‚îÇ3_Œ∂‚ÇÉ¬≤       3q¬≤‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nHere  we  have  displayed  information  on  unipotent  classes,  with their centralizer.\n\njulia> xdisplay(t;nClasses=true)\nClassTypes(A‚ÇÇ,good characteristic)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇC_G(s)    ‚îÇ       nClasses  |C_G(s)|‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇA‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅ¬≤  ‚îÇ(q¬≤-5q+2q‚ÇÉ+4)/6       Œ¶‚ÇÅ¬≤‚îÇ\n‚îÇA‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ ‚îÇ       (q¬≤-q)/2      Œ¶‚ÇÅŒ¶‚ÇÇ‚îÇ\n‚îÇA‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÉ   ‚îÇ  (q¬≤+q-q‚ÇÉ+1)/3        Œ¶‚ÇÉ‚îÇ\n‚îÇA‚ÇÇ‚Çç‚ÇÅ‚Çé=A‚ÇÅŒ¶‚ÇÅ‚îÇ       (q-q‚ÇÉ-1)    qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ‚îÇ\n‚îÇA‚ÇÇ        ‚îÇ             q‚ÇÉ q¬≥Œ¶‚ÇÅ¬≤Œ¶‚ÇÇŒ¶‚ÇÉ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nHere  we have added information on how many semisimple conjugacy classes of ùêÜ  ^F have a given type. The  answer in general involves variables of the form q‚Çê which represent gcd(q-1,a).\n\nFinally an example in bad characteristic:\n\njulia> t=ClassTypes(coxgroup(:G,2),2);xdisplay(t;nClasses=true)\nClassTypes(G‚ÇÇ,char. 2)\nClassTypes(G‚ÇÇ,char. 2)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇC_G(s)    ‚îÇ         nClasses     |C_G(s)|‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅ¬≤  ‚îÇ(q¬≤-8q+2q‚ÇÉ+10)/12          Œ¶‚ÇÅ¬≤‚îÇ\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ ‚îÇ        (q¬≤-2q)/4         Œ¶‚ÇÅŒ¶‚ÇÇ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ ‚îÇ        (q¬≤-2q)/4         Œ¶‚ÇÅŒ¶‚ÇÇ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÜ   ‚îÇ    (q¬≤-q-q‚ÇÉ+1)/6           Œ¶‚ÇÜ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÉ   ‚îÇ    (q¬≤+q-q‚ÇÉ+1)/6           Œ¶‚ÇÉ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÇ¬≤  ‚îÇ (q¬≤-4q+2q‚ÇÉ-2)/12          Œ¶‚ÇÇ¬≤‚îÇ\n‚îÇG‚ÇÇ‚Çç‚ÇÅ‚Çé=A‚ÇÅŒ¶‚ÇÅ‚îÇ       (q-q‚ÇÉ-1)/2       qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚ÇÅ‚Çé=A‚ÇÅŒ¶‚ÇÇ‚îÇ       (q-q‚ÇÉ+1)/2       qŒ¶‚ÇÅŒ¶‚ÇÇ¬≤‚îÇ\n‚îÇG‚ÇÇ‚Çç‚ÇÇ‚Çé=AÃÉ‚ÇÅŒ¶‚ÇÅ‚îÇ          (q-2)/2       qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚ÇÇ‚Çé=AÃÉ‚ÇÅŒ¶‚ÇÇ‚îÇ              q/2       qŒ¶‚ÇÅŒ¶‚ÇÇ¬≤‚îÇ\n‚îÇG‚ÇÇ        ‚îÇ                1 q‚Å∂Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤Œ¶‚ÇÉŒ¶‚ÇÜ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚ÇÅ‚ÇÖ‚Çé=A‚ÇÇ ‚îÇ         (q‚ÇÉ-1)/2    q¬≥Œ¶‚ÇÅ¬≤Œ¶‚ÇÇŒ¶‚ÇÉ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚ÇÅ‚ÇÖ‚Çé=¬≤A‚ÇÇ‚îÇ         (q‚ÇÉ-1)/2    q¬≥Œ¶‚ÇÅŒ¶‚ÇÇ¬≤Œ¶‚ÇÜ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nWe  notice that if q is  a power of 2 such  that q‚â°2 (mod 3), so that q‚ÇÉ=1,  some class types do not exist. We can see what happens by giving a specific value to q‚ÇÉ:\n\njulia> xdisplay(t(;q_3=1);nClasses=true)\nClassTypes(G‚ÇÇ,char. 2) q‚ÇÉ=1\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇC_G(s)    ‚îÇ     nClasses     |C_G(s)|‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅ¬≤  ‚îÇ(q¬≤-8q+12)/12          Œ¶‚ÇÅ¬≤‚îÇ\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ ‚îÇ    (q¬≤-2q)/4         Œ¶‚ÇÅŒ¶‚ÇÇ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ ‚îÇ    (q¬≤-2q)/4         Œ¶‚ÇÅŒ¶‚ÇÇ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÜ   ‚îÇ     (q¬≤-q)/6           Œ¶‚ÇÜ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÉ   ‚îÇ     (q¬≤+q)/6           Œ¶‚ÇÉ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÇ¬≤  ‚îÇ   (q¬≤-4q)/12          Œ¶‚ÇÇ¬≤‚îÇ\n‚îÇG‚ÇÇ‚Çç‚ÇÅ‚Çé=A‚ÇÅŒ¶‚ÇÅ‚îÇ      (q-2)/2       qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚ÇÅ‚Çé=A‚ÇÅŒ¶‚ÇÇ‚îÇ          q/2       qŒ¶‚ÇÅŒ¶‚ÇÇ¬≤‚îÇ\n‚îÇG‚ÇÇ‚Çç‚ÇÇ‚Çé=AÃÉ‚ÇÅŒ¶‚ÇÅ‚îÇ      (q-2)/2       qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ‚îÇ\n‚îÇG‚ÇÇ‚Çç‚ÇÇ‚Çé=AÃÉ‚ÇÅŒ¶‚ÇÇ‚îÇ          q/2       qŒ¶‚ÇÅŒ¶‚ÇÇ¬≤‚îÇ\n‚îÇG‚ÇÇ        ‚îÇ            1 q‚Å∂Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤Œ¶‚ÇÉŒ¶‚ÇÜ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"type"},{"location":"urad.html#Unipotent-Elements","page":"Unipotent Elements","title":"Unipotent Elements","text":"","category":"section"},{"location":"urad.html","page":"Unipotent Elements","title":"Unipotent Elements","text":"Pages=[\"urad.md\"]","category":"page"},{"location":"urad.html","page":"Unipotent Elements","title":"Unipotent Elements","text":"Urad\nUnipotentGroup\nUrad.reorder\nUrad.abelianpart\nUrad.decompose","category":"page"},{"location":"urad.html#Chevie.Urad","page":"Unipotent Elements","title":"Chevie.Urad","text":"This  module contains  functions for  computing with  unipotent elements of reductive  groups; specifically to  compute with elements  of the unipotent radical of a Borel subgroup of a connected algebraic reductive group; these functions  were initially written by Olivier Dudas in GAP3, partly inspired by older C code of Jean Michel.\n\nThe  unipotent radical of a  Borel subgroup is the  product in any order of the root subgroups associated to the positive roots. We fix an order, which gives a canonical form to display elements and to compare them.\n\nThe  computations use the Steinberg relations between root subgroups, which come from the choice of a Chevalley basis of the Lie algebra. The reference we  follow is Carter1972, chapters 4 to 6.\n\nWe  start with  a root  datum specified  by a  Weyl group  W and  build a struct  UnipotentGroup  which  contains  information  about  the  maximal unipotent  subgroup  of  the  corresponding  reductive  group,  that is the unipotent radical of the Borel subgroup determined by the positive roots.\n\njulia> W=coxgroup(:E,6)\nE‚ÇÜ\n\njulia> U=UnipotentGroup(W)\nUnipotentGroup(E‚ÇÜ)\n\nNow, if Œ±=roots(W,2), we construct the element u_Œ±(4) of the root subgroup u_Œ±:\n\njulia> U(2=>4)\nu2(4)\n\nIf we do not specify the coefficient we make by default u_Œ±(1), so we have also:\n\njulia> U(2)^4\nu2(4)\n\nWe can make more complicated elements:\n\njulia> U(2=>4)*U(4=>5)\nu2(4)u4(5)\n\njulia> U(2=>4,4=>5)\nu2(4)u4(5)\n\nIf the roots are not in order the element is normalized:\n\njulia> U(4=>5,2=>4)\nu2(4)u4(5)u8(-20)\n\nIt is possible to display the decomposition of the roots in simple roots instead of their index:\n\njulia> xdisplay(U(4=>5,2=>4);root=true)\nu‚ÇÄ‚ÇÅ‚ÇÄ‚ÇÄ‚ÇÄ‚ÇÄ(4)u‚ÇÄ‚ÇÄ‚ÇÄ‚ÇÅ‚ÇÄ‚ÇÄ(5)u‚ÇÄ‚ÇÅ‚ÇÄ‚ÇÅ‚ÇÄ‚ÇÄ(-20)\n\nThe coefficients in the root subgroups can be elements of arbitrary rings. Here is an example using Mvp's:\n\njulia> W=coxgroup(:E,8);U=UnipotentGroup(W)\nUnipotentGroup(E‚Çà)\n\njulia> u=U(map(i->i=>Z(2)*Mvp(Symbol(\"x\",Char(i+0x2080))),1:8)...)\nu1(x‚ÇÅ)u2(x‚ÇÇ)u3(x‚ÇÉ)u4(x‚ÇÑ)u5(x‚ÇÖ)u6(x‚ÇÜ)u7(x‚Çá)u8(x‚Çà)\n\njulia> cut(xrepr(u^16;limit=true,root=true),before=\"u\",width=60)\nu‚ÇÇ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇÅ‚ÇÄ(x‚ÇÅ¬≤x‚ÇÇ¬≤x‚ÇÉ¬≥x‚ÇÑ‚Å¥x‚ÇÖ¬≥x‚ÇÜ¬≤x‚Çá)\nu‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇÅ‚ÇÅ(x‚ÇÅx‚ÇÇ¬≤x‚ÇÉ¬≥x‚ÇÑ‚Å¥x‚ÇÖ¬≥x‚ÇÜ¬≤x‚Çáx‚Çà)\nu‚ÇÅ‚ÇÇ‚ÇÇ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇÇ‚ÇÅ(x‚ÇÅx‚ÇÇ¬≤x‚ÇÉ¬≤x‚ÇÑ‚Å¥x‚ÇÖ¬≥x‚ÇÜ¬≤x‚Çá¬≤x‚Çà)\nu‚ÇÅ‚ÇÇ‚ÇÇ‚ÇÉ‚ÇÉ‚ÇÉ‚ÇÇ‚ÇÅ(x‚ÇÅx‚ÇÇ¬≤x‚ÇÉ¬≤x‚ÇÑ¬≥x‚ÇÖ¬≥x‚ÇÜ¬≥x‚Çá¬≤x‚Çà)\nu‚ÇÇ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇÅ‚ÇÅ(x‚ÇÅ¬≤x‚ÇÇ¬≤x‚ÇÉ¬≥x‚ÇÑ‚Å¥x‚ÇÖ¬≥x‚ÇÜ¬≤x‚Çáx‚Çà)\nu‚ÇÅ‚ÇÇ‚ÇÇ‚ÇÑ‚ÇÉ‚ÇÉ‚ÇÇ‚ÇÅ(x‚ÇÅx‚ÇÇ¬≤x‚ÇÉ¬≤x‚ÇÑ‚Å¥x‚ÇÖ¬≥x‚ÇÜ¬≥x‚Çá¬≤x‚Çà)\nu‚ÇÅ‚ÇÇ‚ÇÇ‚ÇÑ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇÅ(x‚ÇÅx‚ÇÇ¬≤x‚ÇÉ¬≤x‚ÇÑ‚Å¥x‚ÇÖ‚Å¥x‚ÇÜ¬≥x‚Çá¬≤x‚Çà)\nu‚ÇÇ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÉ‚ÇÉ‚ÇÇ‚ÇÅ(x‚ÇÅ¬≤x‚ÇÇ¬≤x‚ÇÉ¬≥x‚ÇÑ‚Å¥x‚ÇÖ¬≥x‚ÇÜ¬≥x‚Çá¬≤x‚Çà)\nu‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇÅ(x‚ÇÅx‚ÇÇ¬≤x‚ÇÉ¬≥x‚ÇÑ‚Å¥x‚ÇÖ‚Å¥x‚ÇÜ¬≥x‚Çá¬≤x‚Çà)\nu‚ÇÇ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇÅ(x‚ÇÅ¬≤x‚ÇÇ¬≤x‚ÇÉ¬≥x‚ÇÑ‚Å¥x‚ÇÖ‚Å¥x‚ÇÜ¬≥x‚Çá¬≤x‚Çà)\nu‚ÇÇ‚ÇÉ‚ÇÉ‚ÇÖ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇÅ(x‚ÇÅ¬≤x‚ÇÇ¬≥x‚ÇÉ¬≥x‚ÇÑ‚Åµx‚ÇÖ‚Å¥x‚ÇÜ¬≥x‚Çá¬≤x‚Çà)\nu‚ÇÇ‚ÇÇ‚ÇÑ‚ÇÖ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇÅ(x‚ÇÅ¬≤x‚ÇÇ¬≤x‚ÇÉ‚Å¥x‚ÇÑ‚Åµx‚ÇÖ‚Å¥x‚ÇÜ¬≥x‚Çá¬≤x‚Çà)\nu‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÜ‚ÇÖ‚ÇÑ‚ÇÉ‚ÇÇ(x‚ÇÅ¬≤x‚ÇÇ¬≥x‚ÇÉ‚Å¥x‚ÇÑ‚Å∂x‚ÇÖ‚Åµx‚ÇÜ‚Å¥x‚Çá¬≥x‚Çà¬≤)\n\njulia> u^32\n()\n\nThe  above computation shows  that in characteristic  2 the exponent of the unipotent  group of E‚Çà is 32. More precisely, squaring doubles the height of  the involved roots, so in the above u¬π‚Å∂ involves only roots of height 16 or more.\n\nVarious  actions are  defined on  unipotent elements.  Elements of the Weyl group  act (through certain representatives) as long as no root subgroup is in their inversion set:\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> U=UnipotentGroup(W);@Mvp x,y\n\njulia> u=U(1=>x,3=>y)\nu1(x)u3(y)\n\njulia> u^W(2,1)\nu4(y)u5(x)\n\njulia> u^W(1)\nERROR: u1(x)u3(y) should have no coefficient on root 1\n\nSemisimple elements act by conjugation:\n\njulia> s=SemisimpleElement(W,[E(3),2])\nSemisimpleElement{Cyc{Int64}}: <Œ∂‚ÇÉ,2>\n\njulia> u^s\nu1(Œ∂‚ÇÉx)u3(2Œ∂‚ÇÉy)\n\nAs well as unipotent elements:\n\njulia> u^U(2)\nu1(x)u3(x+y)u4(-x-2y)u5(x+3y)u6(x¬≤+3xy+3y¬≤)\n\n\n\n\n\n","category":"module"},{"location":"urad.html#Chevie.Urad.UnipotentGroup","page":"Unipotent Elements","title":"Chevie.Urad.UnipotentGroup","text":"A  struct UnipotentGroup represents  the unipotent  radical ùêî of a Borel subgroup of a reductive group G.\n\nSee   Carter1972,  section  4.2  for  details  on  the following.  A Chevalley basis  of the Lie  algebra of ùêî  is a basis e·µ£, where   each  e·µ£  is  in  the  corresponding  root  subspace,  such  that [e·µ£,e‚Çõ]=N·µ£‚Çõ e_{r+s} for some integer constants N·µ£‚Çõ. The constants N·µ£‚Çõ for general roots are computed from the case where r and s are positive roots whose sum is a root; such a pair (r,s) is called special.\n\nConstants  C·µ£‚Çõ·µ¢‚±º are defined, see Carter1972, 5.2.3, by\n\nu_s(u)u_r(t)=u_r(t)u_s(u)prod_ij0u_ir+js(C_rsij(-t)^iu^j)\n\nWhere  ir+js runs over the positive  integral combinations of r and s which  are roots,  taken in  lexicographic order  on (i,j). The constants C·µ£‚Çõ·µ¢‚±º  are computed from  the constants N·µ£‚Çõ,  see Carter1972, bottom of page 61 and top of page 76.\n\nThe fields of struct Unipotent Group are:\n\nW:         the Weyl group of G\norder:     the total order on the roots used to normalize products of root subgroups (by default 1:nref(W))\nspecial:    aNamedTuplefor each special pair of roots(r,s)`\nr  index of r\ns  index of s\nrs index of r+s\nN: the constant N·µ£‚Çõ\ncomm: stores the C·µ£‚Çõ·µ¢‚±º as the list of quadruples (i,j,ir+js,C·µ£‚Çõ·µ¢‚±º).\n\njulia> U=UnipotentGroup(coxgroup(:G,2))\nUnipotentGroup(G‚ÇÇ)\n\njulia> U.special\n10-element Vector{@NamedTuple{r::Int64, s::Int64, rs::Int64, N::Int64, comm::Vector{NTuple{4, Int64}}}}:\n (r = 1, s = 2, rs = 3, N = 1, comm = [(1, 1, 3, 1), (1, 2, 4, -1), (1, 3, 5, 1), (2, 3, 6, 2)])\n (r = 2, s = 3, rs = 4, N = 2, comm = [(1, 1, 4, 2), (2, 1, 5, 3), (1, 2, 6, -3)])\n (r = 2, s = 4, rs = 5, N = 3, comm = [(1, 1, 5, 3)])\n (r = 1, s = 5, rs = 6, N = 1, comm = [(1, 1, 6, 1)])\n (r = 3, s = 4, rs = 6, N = 3, comm = [(1, 1, 6, 3)])\n (r = 2, s = 1, rs = 3, N = -1, comm = [(1, 1, 3, -1), (2, 1, 4, -1), (3, 1, 5, -1), (3, 2, 6, -1)])\n (r = 3, s = 2, rs = 4, N = -2, comm = [(1, 1, 4, -2), (2, 1, 6, -3), (1, 2, 5, 3)])\n (r = 4, s = 2, rs = 5, N = -3, comm = [(1, 1, 5, -3)])\n (r = 5, s = 1, rs = 6, N = -1, comm = [(1, 1, 6, -1)])\n (r = 4, s = 3, rs = 6, N = -3, comm = [(1, 1, 6, -3)])\n\n\n\n\n\n","category":"type"},{"location":"urad.html#Chevie.Urad.reorder","page":"Unipotent Elements","title":"Chevie.Urad.reorder","text":"'reorder(U,l[,order])'\n\nThis  function  takes  a  list  of  pairs  'r=>c'  representing a unipotent element,  where 'r'  is a  root and  'c' the corresponding coefficient, and puts  it in  canonical form,  reordering the  terms to agree with 'U.order' using  the commutation  relations. If  a second  argument is given, this is used instead of 'U.order'.\n\njulia> U=UnipotentGroup(coxgroup(:G,2))\nUnipotentGroup(G‚ÇÇ)\n\njulia> l=reorder(U,[2=>4,1=>2])\n6-element Vector{Pair{Int64, Int64}}:\n 1 => 2\n 2 => 4\n 3 => -8\n 4 => 32\n 5 => -128\n 6 => 512\n\njulia> reorder(U,l,6:-1:1)\n2-element Vector{Pair{Int64, Int64}}:\n 2 => 4\n 1 => 2\n\n\n\n\n\n","category":"function"},{"location":"urad.html#Chevie.Urad.abelianpart","page":"Unipotent Elements","title":"Chevie.Urad.abelianpart","text":"'abelianpart(u::UnipotentElement)'\n\nIf  ùêî is the unipotent subgroup and D(ùêî) its derived subgroup, this function   returns  the  projection   of  the  unipotent   element  'u'  on ùêî/D(ùêî), that is its coefficients on the simple roots.\n\njulia> U=UnipotentGroup(coxgroup(:G,2));@Mvp x,y\n\njulia> u=U(2=>y,1=>x)\nu1(x)u2(y)u3(-xy)u4(xy¬≤)u5(-xy¬≥)u6(2x¬≤y¬≥)\n\njulia> abelianpart(u)\nu1(x)u2(y)\n\n\n\n\n\n","category":"function"},{"location":"urad.html#Chevie.Chars.decompose","page":"Unipotent Elements","title":"Chevie.Chars.decompose","text":"decompose(ct::CharTable,c::Vector;exact=true)\n\ndecompose  class function c (given by its values on conjugacy classes) on irreducible  characters as  given by  CharTable ct.  By default  c is expected to be a virtual character so the result will be an integer vector. If  c is not a virtual character  give the keyword exact=false to get a correct result.\n\n\n\n\n\ndecompose(w,u::UnipotentElement)\n\nw  should be an element of the Weyl group corresponding to u. If ùêî is the  unipotent radical  of the  Borel subgroup  determined by  the positive roots,  and ùêî‚Åª the  opposite unipotent radical,  this function decomposes u into its component in ùêî ‚à©  ∑ùêî‚Åª and its component in ùêî ‚à©  ∑ùêî.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> U=UnipotentGroup(W);@Mvp x,y\n\njulia> u=U(2=>y,1=>x)\nu1(x)u2(y)u3(-xy)u4(xy¬≤)u5(-xy¬≥)u6(2x¬≤y¬≥)\n\njulia> decompose(W(1),u)\n2-element Vector{UnipotentElement{Mvp{Int64, Int64}}}:\n u1(x)\n u2(y)u3(-xy)u4(xy¬≤)u5(-xy¬≥)u6(2x¬≤y¬≥)\n\njulia> decompose(W(2),u)\n2-element Vector{UnipotentElement{Mvp{Int64, Int64}}}:\n u2(y)\n u1(x)\n\n\n\n\n\n","category":"function"},{"location":"cosets.html#Reflection-cosets-and-Spets","page":"Reflection cosets and Spets","title":"Reflection cosets and Spets","text":"","category":"section"},{"location":"cosets.html","page":"Reflection cosets and Spets","title":"Reflection cosets and Spets","text":"Pages=[\"cosets.md\"]","category":"page"},{"location":"cosets.html","page":"Reflection cosets and Spets","title":"Reflection cosets and Spets","text":"Cosets\nrootdatum(::Symbol,::Int)\ndegrees(::Spets)\nspets\ntwistings\ntorus(::AbstractMatrix)\ntorus(::Spets,::Integer)\ngraph_automorphisms\nsubspets\nFrobenius","category":"page"},{"location":"cosets.html#Chevie.Cosets","page":"Reflection cosets and Spets","title":"Chevie.Cosets","text":"Let  R be a  root system in  the real vector  space V. We say that F‚ÇÄ‚àà GL(V)  is an  automorphism of  R if  it permutes  R and is of finite order  (finite  order  is  automatic  if  R generates V). It follows by chap.  VI,  ¬ß1.1,  lemme  1  Bourbaki1968 that the dual F‚ÇÄ*‚àà  GL(V*)  permutes  the  coroots  R*‚äÇ  V*; thus F‚ÇÄ normalizes the reflection  group  W  associated  to  R,  that  is  w‚Ü¶  F‚ÇÄwF‚ÇÄ‚Åª¬π is an automorphism  of W. Thus we get a reflection coset WF‚ÇÄ, which we call a Coxeter coset.\n\nThe  motivation for introducing Coxeter  cosets comes from automorphisms of algebraic  reductive groups, giving rise to non-split reductive groups over finite fields. Let ùêÜ be a connected reductive algebraic group ùêÜ over an algebraic  closure ùîΩÃÑ_q of a finite field ùîΩ_q, defined over ùîΩ_q; this corresponds  to a  Frobenius endomorphism  F so  that the finite group of rational  points ùêÜ(ùîΩ_q) identifies to the  subgroup ùêÜ^F of fixed points under F.\n\nLet ùêì be a maximal torus of ùêÜ, and Œ¶ (resp. Œ¶*) be the roots (resp. coroots)  of ùêÜ with respect  to ùêì in the  character group X(ùêì) (resp. the  group of one-parameter subgroups Y(ùêì)). Then ùêÜ is determined up to isomorphism  by (X(ùêì),Œ¶,Y(ùêì),Œ¶*); this corresponds  to give a root system in   the  vector  space  V=‚Ñö ‚äó X(ùêì)   and  a  rational  reflection  group W=N_ùêÜ(ùêì)/ùêì acting on it.\n\nIf  ùêì is F-stable the Frobenius endomorphism F acts also naturally on X(T)  and defines thus  an endomorphism of  V, which is  of the form q F‚ÇÄ, where F‚ÇÄ‚àà GL(V) is of finite order and normalizes W. We get thus a Coxeter  coset WF‚ÇÄ‚äÇGL(V).  The data  (X(ùêì), Œ¶,  Y(ùêì), Œ¶*,  F‚ÇÄ), and the integer   q  completely  determine  up   to  isomorphism  the  associated reductive finite group ùêÜ^F. Thus these data is a way of representing in the  essential  information  which  determines  a  finite  reductive group. Indeed, all properties of Chevalley groups can be computed from that datum: symbols  representing characters, conjugacy classes,  and finally the whole character table of ùêÜ^F.\n\nIt  turns out that  many interesting objects  attached to this datum depend only on (V,W, F‚ÇÄ): the order of the maximal tori, the fake degrees, the order  of ùêÜ^F, symbols representing unipotent characters, Deligne-Lusztig induction  in  terms  of  almost  characters, the Fourier matrix relating characters and almost characters, etc‚Ä¶ (see, e.g., Broue-Malle-Michel1993).  It is thus possible to extend their  construction to non-crystallographic groups (or even to more general complex  reflection groups,  see spets);  this is  why we did not include  a root  system in  the definition  of a reflection coset. However, unipotent conjugacy classes for instance depend on the root system.\n\nWe assume now that ùêì is contained in an F-stable Borel subgroup of ùêÜ. This  defines an order  on the roots,  and there is  a unique element œï‚àà W F‚ÇÄ,  the  reduced  element  of  the  coset,  which  preserves the set of positive  roots.  It  thus  defines  a  diagram  automorphism, that is an automorphism  of the Coxeter system (W,S).  This element is stored in the component  .phi of the coset record. It may be defined without mentioning the  roots,  as  follows:  (W,F‚ÇÄ(S))  is  another  Coxeter  system,  thus conjugate to S by a unique element of W, thus there is a unique element œï‚àà  WF‚ÇÄ which stabilizes S (a proof  follows from Theoreme 1, chap. V, ¬ß3  Bourbaki1968). We  consider thus  cosets of the form Wœï where œï stabilizes S. The coset W œï is completely defined by the permutation  .phi  when  ùêÜ  is  semi-simple  ‚Äì-  equivalently when Œ¶ generates  V; in this  case we just  need to specify  phi to define the coset.\n\nThere is a slight generalisation of the above setup, covering in particular the  case of the Ree  and Suzuki groups. We  consider ùêÜ^F where F not a Frobenius  endomorphism, but  an isogeny  such that  some power  F^n is a Frobenius endomorphism. Then F still defines an endomorphism of V which normalizes  W; we define a real number q such that F^n is attached to an  ùîΩ_{q‚Åø}-structure. Then we still have F=q F‚ÇÄ where F‚ÇÄ is of finite order  but q is no more an integer.  Thus F‚ÇÄ‚àà GL(V‚äó ‚Ñù) but F‚ÇÄ‚àâ GL(V). For  instance, for the  Ree and Suzuki  groups, F‚ÇÄ is  an automorphism of order  2 of W, which is of type G‚ÇÇ, B‚ÇÇ or F‚ÇÑ, and q=‚àö2 for B‚ÇÇ and  F‚ÇÑ and q=‚àö3  for G‚ÇÇ This  can be constructed  starting from root systems  for G‚ÇÇ, B‚ÇÇ or  F‚ÇÑ where all the  roots have the same length. This kind of root system is not crystallographic. Such non-crystallographic  root systems exist for all finite Coxeter groups such as  the dihedral groups, H‚ÇÉ and H‚ÇÑ. We will call here Weyl cosets the cosets  corresponding to rational forms  of algebraic groups, which include thus some non-rational roots systems for B‚ÇÇ, G‚ÇÇ and F‚ÇÑ.\n\nSpets\n\nWe  now extend the above notions  to general complex reflection groups. Let W‚äÇ  GL(V) be a complex reflection group  on the vector space V. Let œï be  an element  of GL(V)  which normalizes  W. Then  the coset  Wœï is called a reflection coset.\n\nA reference for these cosets is Broue-Malle-Michel 1999. When W is a so-called Spetsial group, they are the basic object for the construction  of  a  Spetses,  which  is  an object attached to a complex reflection  group from which one can derive combinatorially some attributes shared with finite reductive groups, like unipotent degrees, etc‚Ä¶.\n\nWe  say that  a reflection  coset is  irreducible if  W is irreducible. A general  coset is a direct  product of descents of  scalars, which is the case  where œï  is transitive  on the  irreducible components  of W. The irreducible    cosets   have   been   classified   in   Broue-Malle-Michel 1999:  up to multiplication of œï by a scalar, there is usually only one or two possible cosets for a given irreducible group.\n\nWe  deal only  with finite  order cosets,  that is,  we assume there is a (minimal) integer Œ¥ such that (Wœï)^Œ¥=W. Then the group generated by W and œï is finite, of order Œ¥|W|.\n\nA  subset C  of a  Wœï is  called a  conjugacy class  if one of the following equivalent conditions is fulfilled:\n\nC is the orbit of an element in Wœï under the conjugation action of W.\nC is a conjugacy class of ‚ü®W,œï‚ü© contained in Wœï.\nThe set {w‚àà W|wœï‚àà C} is  a œï-conjugacy  class of W (two elements\n\nv,w‚àà  W are called œï-conjugate, if and only if there exists x‚àà W with v=xwœï(x‚Åª¬π)).\n\nAn irreducible character of ‚ü®W,œï‚ü© has some non-zero values on Wœï if and only if its restriction to W is irreducible. Further, two characters œá‚ÇÅ and  œá‚ÇÇ  which  have  same  irreducible  restriction  to  W differ by a character  of  the  cyclic  group  ‚ü®œï‚ü©  (which identifies to the quotient ‚ü®W,œï‚ü©/W). A set containing one extension to ‚ü®W,œï‚ü© of each œï-invariant character  of W is called a set  of irreducible characters of Wœï. Two such  characters  are  orthogonal  for  the  scalar  product  on  the class functions on Wœï given by œáœà=W¬π_w Wœá(wœï)overlineœà(wœï) For rational groups (Weyl groups), Lusztig has defined a choice of a set of irreducible  characters for  Wœï (called  the preferred extensions), but for  more  general  reflection  cosets  we  have made some rather arbitrary choices,  which  however  have  the  property  that their values lie in the smallest possible field.\n\nThe  character  table  of  Wœï  is  the  table  of  values  of  a set of irreducible characters on the conjugacy classes.\n\nA subcoset Lwœï of Wœï is given by a reflection subgroup L of W and an element w of W such that wœï normalizes L.\n\nWe  then have a natural notion of  restriction of class functions on Wœï to  class  functions  on  Lwœï  as  well  as  of  induction in the other direction.  These  maps  are  adjoint  with  respect  to the scalar product defined above (see Broue-Malle-Michel 1999).\n\nIn  this package the most general construction  of a reflection coset is by starting  from a reflection datum, and giving in addition the matrix F of the  map œï:V‚Üí V  (see the command  spets). However, at present, general cosets are only implemented for groups represented as permutation groups on a  set of roots, and  it is required that  the automorphism given preserves this  set up to  a scalar (it  is allowed that  these scalars depend on the pair  of an  irreducible component  and its  image). It  is also allowed to specify  œï by the permutation it induces on the roots; in this case it is assumed  that œï acts  trivially on the  orthogonal of the  roots, but the roots  could be those of a parent group, generating a larger space. Thus in any  case we have  a permutation representation  of ‚ü®W,œï‚ü© and we consider the coset to be a set of permutations.\n\nReflection  cosets  are  implemented  in  by  a  struct which points to a reflection  group  record  and  has  additional  fields holding F and the corresponding  permutation phi. In the general case, on each component of W  which is  a descent  of scalars,  F will  permute the components and differ  by a scalar on each  component from an automorphism which preserves the  roots. In this case, we have  a permutation phi and a scalar which is stored for that component.\n\nThe  most common situation where cosets  with non-trivial phi arise is as sub-cosets  of reflection groups. Here is an \"exotic\" example, see the next chapter for more classical examples involving Coxeter groups.\n\njulia> W=complex_reflection_group(14)\nG‚ÇÅ‚ÇÑ\n\njulia> R=reflection_subgroup(W,[2,4])\nG‚ÇÅ‚ÇÑ‚Çç‚ÇÇ‚ÇÑ‚Çé=G‚ÇÖ\n\njulia> RF=spets(R,W(1)) # should be ¬≤G‚ÇÖ(‚àö6)\nG‚ÇÅ‚ÇÑ‚Çç‚ÇÇ‚ÇÑ‚Çé=¬≤G‚ÇÖ\n\njulia> diagram(RF)\nœï acts as (1,2) on the component below\n‚ë¢ ‚ïê‚ïê‚ë¢ G‚ÇÖ\n1   2\n\njulia> degrees(RF)\n2-element Vector{Tuple{Int64, Cyc{Int64}}}:\n (6, 1)\n (12, -1)\n\nThe  last line shows for each  reflection degree the corresponding factor of  the coset, which is  the scalar by which  œï acts on the corresponding fundamental reflection invariant. The factors characterize the coset.\n\nA  spets by default is  printed in an abbreviated  form which describes its type,  as above (G‚ÇÖ twisted by 2, with a Cartan matrix which differs from the  standard one by  a factor of  ‚àö6). The function  repr gives a form which could be input back in Julia. With the same data as above we have:\n\njulia> print(RF)\nspets(reflection_subgroup(complex_reflection_group(14),[2, 4]),perm\"(1,3)(2,4)(5,9)(6,10)(7,11)(8,12)(13,21)(14,22)(15,23)(16,24)(17,25)(18,26)(19,27)(20,28)(29,41)(30,42)(31,43)(32,44)(33,45)(34,46)(35,47)(36,48)(37,49)(38,50)(39,51)(40,52)(53,71)(54,72)(55,73)(56,74)(57,75)(58,76)(59,77)(60,78)(62,79)(64,80)(65,81)(66,82)(67,69)(68,70)(83,100)(84,101)(85,102)(87,103)(89,99)(90,97)(91,98)(92,96)(93,104)(94,95)(105,113)(106,114)(109,111)(110,112)(115,118)(116,117)(119,120)\")\n\nConjugacy  classes and irreducible characters of Coxeter cosets are defined as  for  general  reflection  cosets.  For  irreducible  characters of Weyl cosets,  we choose (following Lusztig) for each œï-stable character of W a  particular extension to a character of  W‚ãä ‚ü®œï‚ü©, which we will call the preferred extension. The character table of the coset Wœï is the table of  the restrictions to  Wœï of the  preferred extensions. The question of finding the conjugacy classes and character table of a Coxeter coset can be reduced to the case of irreducible root systems R.\n\nThe automorphism œï permutes the irreducible components of W, and Wœï  is a direct  product of cosets  where œï permutes cyclically the irreducible components of W. The preferred extension is defined to be the  direct  product  of  the  preferred  extension  in  each  of these situations.\nAssume now that Wœï is a descent of scalars, that is the decomposition in irreducible components W=W‚ÇÅ√ó ‚ãØ √ó W‚Çñ is cyclically permuted by œï. Then there are natural bijections from the œï-conjugacy classes of W to  the œï·µè-conjugacy classes  of W‚ÇÅ as  well as from the œï-stable characters  of W to the œï·µè-stable  characters of W‚ÇÅ, which reduce the  definition of preferred  extensions on Wœï  to the definition for W‚ÇÅœï·µè.\nAssume now  that W  is the  Coxeter group  of an  irreducible root system.   œï  permutes  the  simple   roots,  hence  induces  a  graph automorphism  on  the  corresponding  Dynkin  diagram.  If  œï=1  then conjugacy  classes and  characters coincide  with those  of the Coxeter group W.\n\nThe  nontrivial cases for crystallographic roots  systems are (the order of œï  is written as left exponent to  the type): ¬≤A‚Çô, ¬≤D‚Çô, ¬≥D‚ÇÑ, ¬≤E‚ÇÜ. For  non-crystallographic root  systems where  all the  roots have the same length the additional cases ¬≤B‚ÇÇ, ¬≤G‚ÇÇ, ¬≤F‚ÇÑ and ¬≤I‚ÇÇ(k) arise.\n\nIn  case  ¬≥D‚ÇÑ  the  group  W‚ãä ‚ü®œï‚ü©  can be embedded into the Coxeter  group of type F‚ÇÑ, which induces a labeling for the conjugacy classes of the coset. The preferred extension is chosen as the (single) extension with rational values.\nIn case  ¬≤D‚Çô the  group W‚ãä ‚ü®œï‚ü©  is isomorphic  to a Coxeter group of type B‚Çô. This induces a canonical labeling for the conjugacy classes  of the coset and allows to define the preferred extension in a combinatorial  way  using  the  labels  (pairs  of  partitions) for the characters of the Coxeter group of type B‚Çô.\nIn the remaining crystallographic cases œï identifies to -w‚ÇÄ where w‚ÇÄ  is the longest element of W.  So, there is a canonical labeling of  the conjugacy classes and characters of  the coset by those of W. The  preferred extensions  are defined  by describing  the signs of the character values on -w‚ÇÄ.\n\nThe  most general  construction of  a Coxeter  coset is  by starting from a Coxeter   datum   specified   by   the   matrices   of   simpleRoots  and simplecoroots,  and  giving  in  addition  the  matrix F0Mat of the map F‚ÇÄ:V‚Üí V (see the commands  CoxeterCoset and CoxeterSubCoset). As for Coxeter  groups,  the  elements  of  Wœï  are  uniquely  determined by the permutation  they  induce  on  the  set  of  roots  R.  We consider these permutations as elements of the Coxeter coset.\n\nCoxeter  cosets are implemented by a struct which points to a Coxeter datum record  and  has  additional  fields  holding F0Mat and the corresponding element  phi. Functions on the coset (for example, classinfo) are about properties  of  the  group  coset  W  œï  ;  however, most definitions for elements of untwisted Coxeter groups apply without change to elements in W œï:  e.g., if we define the length of  an element wœï‚àà Wœï as the number of positive  roots it sends to negative ones, it  is the same as the length of w,  i.e., œï is of length 0, since œï has been chosen to preserve the set of positive roots. Similarly, the Coxeter word describing wœï is the same as the one for w, etc‚Ä¶\n\nWe associate to a Coxeter coset Wœï a twisted Dynkin diagram, consisting of  the Dynkin diagram of W and  the graph automorphism induced by œï on this  diagram (this specifies the  group W‚ãä ‚ü®F‚ü©, mentioned above, up to  isomorphism). See the  functions ReflectionType, ReflectionName and diagram for Coxeter cosets.\n\nBelow  is an example showing first how to not define, then how to define, the Weyl coset for a Suzuki group:\n\njulia> W=coxgroup(:B,2)\nB‚ÇÇ\n\njulia> spets(W,Perm(1,2))\nERROR: matrix F must preserve the roots\nStacktrace:\n [1] error(::String) at ./error.jl:33\n [2] spets(::Chevie.Weyl.FCG{Int16,Int64,PRG{Int64,Int16}}, ::Matrix{Int64}) at /home/jmichel/julia/Chevie/src/Cosets.jl:241 (repeats 2 times)\n [3] top-level scope at REPL[19]:1\n\njulia> W=coxgroup(:Bsym,2)\nBsym‚ÇÇ\n\njulia> WF=spets(W,Perm(1,2))\n¬≤Bsym‚ÇÇ\n\njulia> CharTable(WF)\nCharTable(¬≤Bsym‚ÇÇ)\n‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   ‚îÇ    1 121‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ2. ‚îÇ1   1   1‚îÇ\n‚îÇ.11‚îÇ1  -1  -1‚îÇ\n‚îÇ1.1‚îÇ. -‚àö2  ‚àö2‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nA subcoset Hwœï of Wœï is given by a reflection subgroup H of W and an  element w of W  such that wœï induces  an automorphism of the root system of H. For algebraic groups, this corresponds to a rational form of a  reductive subgroup of maximal rank.  For example, if Wœï corresponds to the  algebraic group ùêÜ and  H is the trivial  subgroup, the coset Hwœï corresponds to a maximal torus ùêì_w of type w.\n\njulia> W=coxgroup(:Bsym,2)\nBsym‚ÇÇ\n\njulia> WF=spets(W,Perm(1,2))\n¬≤Bsym‚ÇÇ\n\njulia> subspets(WF,Int[],W(1))\n¬≤Bsym‚ÇÇ‚Çç‚Çé=Œ¶‚Ä¥‚Çà\n\nA subgroup H which is a parabolic subgroup corresponds to a rational form of  a Levi  subgroup of  ùêÜ. The  command twistings  gives all rational forms of such a Levi.\n\njulia> W=coxgroup(:B,2)\nB‚ÇÇ\n\njulia> twistings(W,[1])\n2-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n B‚ÇÇ‚Çç‚ÇÅ‚Çé=AÃÉ‚ÇÅŒ¶‚ÇÅ\n B‚ÇÇ‚Çç‚ÇÅ‚Çé=AÃÉ‚ÇÅŒ¶‚ÇÇ\n\njulia> twistings(W,[2])\n2-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n B‚ÇÇ‚Çç‚ÇÇ‚Çé=A‚ÇÅŒ¶‚ÇÅ\n B‚ÇÇ‚Çç‚ÇÇ‚Çé=A‚ÇÅŒ¶‚ÇÇ\n\nNotice how we distinguish between subgroups generated by short roots and by long  roots. A general  H corresponds to  a reductive subgroup of maximal rank.  Here we consider the subgroup generated  by the long roots in B‚ÇÇ, which  corresponds to a  subgroup of type  SL‚ÇÇ√ó SL‚ÇÇ in SP‚ÇÑ, and show its possible rational forms.\n\njulia> W=coxgroup(:B,2)\nB‚ÇÇ\n\njulia> twistings(W,[2,4])\n2-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n B‚ÇÇ‚Çç‚ÇÇ‚ÇÑ‚Çé=A‚ÇÅ√óA‚ÇÅ\n B‚ÇÇ‚Çç‚ÇÇ‚ÇÑ‚Çé=(A‚ÇÅA‚ÇÅ)\n\n\n\n\n\n","category":"module"},{"location":"cosets.html#Chevie.Weyl.rootdatum-Tuple{Symbol, Int64}","page":"Reflection cosets and Spets","title":"Chevie.Weyl.rootdatum","text":"rootdatum(type::String or Symbol[,dimension or bond::Integer]) root datum from type. The known types are\n\n2B2, 2E6, 2E6sc, 2F4, 2G2, 2I2, 3D4, 3D4sc, 3gpin8, CE6, CE7, E6, E6sc, E7, E7sc, E8, F4, G2, cso, csp, gl, gpin, gpin-, halfspin, pgl, pso, pso-, psp, psu,  ree, sl, slmod, so, so-, sp,  spin, spin-, su, suzuki, tgl, triality, u\n\n\n\n\n\n","category":"method"},{"location":"cosets.html#Chevie.ComplexR.degrees-Tuple{Spets}","page":"Reflection cosets and Spets","title":"Chevie.ComplexR.degrees","text":"degrees(WF::Spets)\n\nLet  W be  the group  of the  reflection coset  WF, and  let V be the vector  space  of  dimension  rank(W)  on  which W acts as a reflection group.  Let  f‚ÇÅ,‚Ä¶,f‚Çô  be  the  basic  invariants  of W on the symmetric algebra  SV of V;  they can be  chosen so they  are eigenvectors of the matrix  WF.F. The corresponding  eigenvalues are called  the factors of F acting on V; they characterize the coset ‚Äì- they are equal to 1 only for  the trivial  coset. The  generalized degrees  of WF  are the pairs formed of the reflection degrees and the corresponding factor.\n\njulia> W=coxgroup(:E,6)\nE‚ÇÜ\n\njulia> WF=spets(W)\nE‚ÇÜ\n\njulia> phi=W(6,5,4,2,3,1,4,3,5,4,2,6,5,4,3,1);\n\njulia> HF=subspets(WF,2:5,phi)\nE‚ÇÜ‚Çç‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚Çé=¬≥D‚ÇÑŒ¶‚ÇÉ\n\njulia> diagram(HF)\nœï acts as (1,2,4) on the component below\n  O 2\n  Ôø®\nO‚ÄîO‚ÄîO D‚ÇÑ\n1 3 4\n\njulia> degrees(HF)\n6-element Vector{Tuple{Int64, Cyc{Int64}}}:\n (1, Œ∂‚ÇÉ)\n (1, Œ∂‚ÇÉ¬≤)\n (2, 1)\n (4, Œ∂‚ÇÉ)\n (6, 1)\n (4, Œ∂‚ÇÉ¬≤)\n\n\n\n\n\n","category":"method"},{"location":"cosets.html#Chevie.Cosets.spets","page":"Reflection cosets and Spets","title":"Chevie.Cosets.spets","text":"spets(W::ComplexReflectionGroup, F::Matrix=I(rank(W)))\n\nThis  function returns a or  a CoxeterCoset or a  Spets. F must be an invertible  matrix, representing an automorphism of the vector space V of dimension  of dimension rank(W) which for  a finite Coxeter group induces an  automorphism of the root  system of parent(W), or  for a more general complex reflection group just stabilizes W.\n\nThe returned struct has in particular the following fields:\n\n.W: the group W\n\n.F: the matrix acting on V which represents the unique element phi in WF which preserves the positive roots (for finite Coxeter groups) or some \"canonical\" representative of the coset for more general complex reflection groups.\n\n.phi:  a Perm, the permutation of the roots of W induced by .F (for general  complex reflection groups this may be a permutation up to scalars) (also  for Coxeter groups the element of smallest length in the NormalCoset W .phi).\n\nIn the first example we create a Coxeter coset corresponding to the general unitary group GU_3(q) over the finite field FF(q).\n\njulia> W=rootdatum(:gl,3)\ngl‚ÇÉ\n\njulia> gu3=spets(W,-reflrep(W,W()))\n¬≤A‚ÇÇŒ¶‚ÇÇ\n\njulia> F4=coxgroup(:F,4);D4=reflection_subgroup(F4,[1,2,16,48])\nF‚ÇÑ‚Çç‚ÇÅ‚Äö‚ÇÇ‚Äö‚Çâ‚Äö‚ÇÅ‚ÇÜ‚Çé=D‚ÇÑ‚Çç‚ÇÉ‚ÇÇ‚ÇÅ‚ÇÑ‚Çé\n\njulia> spets(D4,[1 0 0 0;0 1 2 0;0 0 0 1;0 0 -1 -1])\nF‚ÇÑ‚Çç‚Çâ‚Äö‚ÇÅ‚ÇÜ‚Äö‚ÇÅ‚Äö‚ÇÇ‚Çé=¬≥D‚ÇÑ‚Çç‚ÇÉ‚ÇÑ‚ÇÅ‚ÇÇ‚Çé\n\nspets(W::ComplexReflectionGroup,p::Perm)\n\nIn  this version F is  defined by the permutation  of the simple roots it does.\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> spets(W,Perm(1,3))\n¬≤A‚ÇÉ\n\n\n\n\n\nspets(s::String) builds a few of the exceptional spets\n\njulia> spets(\"3G422\")\n¬≥G‚ÇÑ‚Äö‚ÇÇ‚Äö‚ÇÇ\n\njulia> spets(\"2G5\")\n¬≤G‚ÇÖ\n\njulia> spets(\"3G333\")\nG‚ÇÉ‚Äö‚ÇÉ‚Äö‚ÇÉ‚Çç‚ÇÅ‚Äö‚ÇÇ‚Äö‚ÇÉ‚Äö‚ÇÑ‚ÇÑ‚Çé=¬≥G‚ÇÉ‚Äö‚ÇÉ‚Äö‚ÇÉ‚Çç‚ÇÅ‚Äö‚ÇÇ‚Äö‚ÇÉ‚Äö‚ÇÑ‚ÇÑ‚Çé\n\njulia> spets(\"3pG333\")\nG‚ÇÉ‚Äö‚ÇÉ‚Äö‚ÇÉ‚Çç‚ÇÅ‚Äö‚ÇÇ‚Äö‚ÇÉ‚Äö‚ÇÑ‚ÇÑ‚Çé=¬≥G‚ÇÉ‚Äö‚ÇÉ‚Äö‚ÇÉ‚Çç‚ÇÅ‚Äö‚ÇÇ‚Äö‚ÇÉ‚Äö‚ÇÑ‚ÇÑ‚Çé\n\njulia> spets(\"4G333\")\nG‚ÇÉ‚Äö‚ÇÉ‚Äö‚ÇÉ‚Çç‚ÇÇ‚Äö‚ÇÅ‚ÇÇ‚Äö‚ÇÅ‚ÇÅ‚Äö‚ÇÅ‚ÇÜ‚Äö‚ÇÖ‚ÇÉ‚Äö‚ÇÅ‚ÇÄ‚Äö‚ÇÑ‚ÇÉ‚Äö‚ÇÉ‚ÇÜ‚Çé=‚Å¥G‚ÇÉ‚Äö‚ÇÉ‚Äö‚ÇÉ‚Çç‚ÇÅ‚Äö‚ÇÇ‚Äö‚ÇÉ‚Äö‚ÇÉ‚ÇÇ‚Äö‚ÇÅ‚ÇÜ‚Äö‚ÇÉ‚ÇÜ‚Äö‚ÇÉ‚ÇÄ‚Äö‚ÇÅ‚ÇÄ‚Çé\n\n\n\n\n\n","category":"function"},{"location":"cosets.html#Chevie.Cosets.twistings","page":"Reflection cosets and Spets","title":"Chevie.Cosets.twistings","text":"twistings(W,I)\n\nW  should be a  complex reflection group.\n\nThe  function returns  the list,  up to  W-conjugacy, of  subspets of W whose  group is reflection_subgroup(W,I) ‚Äì- In  the case of Weyl groups, it  corresponds to  representatives of  the possible  twisted forms  of the reductive subgroup of maximal rank L defined by reflection_subgroup(W,I).\n\nW  could also be a coset Wœï; then the subgroup L must be conjugate to œï(L)  for  a  rational  form  to  exist.  If œï normalizes L, then the rational forms are classified by the the œï-classes of N_W(L)/L.\n\njulia> W=coxgroup(:E,6)\nE‚ÇÜ\n\njulia> WF=spets(W,Perm(1,6)*Perm(3,5))\n¬≤E‚ÇÜ\n\njulia> twistings(W,2:5)\n3-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n E‚ÇÜ‚Çç‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚Çé=D‚ÇÑŒ¶‚ÇÅ¬≤\n E‚ÇÜ‚Çç‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚Çé=¬≥D‚ÇÑŒ¶‚ÇÉ\n E‚ÇÜ‚Çç‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚Çé=¬≤D‚ÇÑŒ¶‚ÇÅŒ¶‚ÇÇ\n\n\njulia> twistings(WF,2:5)\n3-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n ¬≤E‚ÇÜ‚Çç‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚Çé=¬≤D‚ÇÑ‚Çç‚ÇÅ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇéŒ¶‚ÇÅŒ¶‚ÇÇ\n ¬≤E‚ÇÜ‚Çç‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚Çé=¬≥D‚ÇÑ‚Çç‚ÇÅ‚ÇÑ‚ÇÉ‚ÇÇ‚ÇéŒ¶‚ÇÜ\n ¬≤E‚ÇÜ‚Çç‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚Çé=D‚ÇÑŒ¶‚ÇÇ¬≤\n\n\n\n\n\ntwistings(W)\n\nW  should be a Coxeter group which is not a proper reflection subgroup of another reflection group (so that inclusion(W)==eachindex(roots(W))). The function returns all spets representing twisted forms of algebraic groups of type W.\n\njulia> twistings(coxgroup(:A,3)*coxgroup(:A,3))\n8-element Vector{Spets{FiniteCoxeterGroup{Perm{Int16},Int64}}}:\n A‚ÇÉ√óA‚ÇÉ\n A‚ÇÉ√ó¬≤A‚ÇÉ\n ¬≤A‚ÇÉ√óA‚ÇÉ\n ¬≤A‚ÇÉ√ó¬≤A‚ÇÉ\n (A‚ÇÉA‚ÇÉ)\n ¬≤(A‚ÇÉA‚ÇÉ)\n ¬≤(A‚ÇÉA‚ÇÉ)‚Çç‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÜ‚ÇÖ‚ÇÑ‚Çé\n (A‚ÇÉA‚ÇÉ)‚Çç‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÜ‚ÇÖ‚ÇÑ‚Çé\n\njulia> twistings(coxgroup(:D,4))\n6-element Vector{Spets{FiniteCoxeterGroup{Perm{Int16},Int64}}}:\n D‚ÇÑ\n ¬≤D‚ÇÑ‚Çç‚ÇÇ‚ÇÑ‚ÇÉ‚ÇÅ‚Çé\n ¬≤D‚ÇÑ\n ¬≥D‚ÇÑ\n ¬≤D‚ÇÑ‚Çç‚ÇÅ‚ÇÑ‚ÇÉ‚ÇÇ‚Çé\n ¬≥D‚ÇÑ‚Çç‚ÇÅ‚ÇÑ‚ÇÉ‚ÇÇ‚Çé\n\njulia> W=rootdatum(:so,8)\nso‚Çà\n\njulia> twistings(W)\n2-element Vector{Spets{FiniteCoxeterGroup{Perm{Int16},Int64}}}:\n D‚ÇÑ\n ¬≤D‚ÇÑ\n\n\n\n\n\n\n","category":"function"},{"location":"cosets.html#Chevie.Weyl.torus-Tuple{AbstractMatrix}","page":"Reflection cosets and Spets","title":"Chevie.Weyl.torus","text":"torus(m::AbstractMatrix)\n\nm  should be a matrix of finite order. The function returns the coset T of  the  trivial  group  such  that  T.F==m.  When  m  is  integral his corresponds to an algebraic torus ùêì of rank size(m,1), with an isogeny which acts by m on X(ùêì).\n\njulia> torus([0 -1;1 -1])\nŒ¶‚ÇÉ\n\n\n\n\n\n","category":"method"},{"location":"cosets.html#Chevie.Weyl.torus-Tuple{Spets, Integer}","page":"Reflection cosets and Spets","title":"Chevie.Weyl.torus","text":"torus(W,i)\n\nwhere  W is  a Spets  or a  ComplexReflectionGroup. This  returns the torus  twisted by  a representative  of the  i-th conjugacy class of W. This is the same as twistings(W,Int[])[i].\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> twistings(W,Int[])\n5-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅ¬≥\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ¬≤\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÉ\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÇŒ¶‚ÇÑ\n\njulia> torus(W,2)\nA‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ\n\njulia> WF=spets(W,Perm(1,3))\n¬≤A‚ÇÉ\n\njulia> twistings(WF,Int[])\n5-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n ¬≤A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÇ¬≥\n ¬≤A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ¬≤\n ¬≤A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅ¬≤Œ¶‚ÇÇ\n ¬≤A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÇŒ¶‚ÇÜ\n ¬≤A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÑ\n\njulia> torus(WF,2)\n¬≤A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ¬≤\n\n\n\n\n\n","category":"method"},{"location":"cosets.html#Chevie.Cosets.graph_automorphisms","page":"Reflection cosets and Spets","title":"Chevie.Cosets.graph_automorphisms","text":"graph_automorphisms(t::Vector{TypeIrred})\n\nGiven  the refltype of a  finite Coxeter group, returns  the group of all Graph automorphisms of t as a group of permutations of indices(t).\n\njulia> W=coxgroup(:D,4)\nD‚ÇÑ\n\njulia> graph_automorphisms(refltype(W*W))\nGroup((1,5)(2,6)(3,7)(4,8),(1,2),(1,4))\n\n\n\n\n\n","category":"function"},{"location":"cosets.html#Chevie.Cosets.subspets","page":"Reflection cosets and Spets","title":"Chevie.Cosets.subspets","text":"subspets(WF,I,w=one(Group(WF)))\n\nReturns   the   reflection   subcoset   of   the   coset  WF  with  group reflection_subgroup(Group(WF),I)  and torsion w*WF.phi.  w must be an element  of Group(WF) such that  w*WF.phi normalizes the subroot system generated by I.\n\njulia> WF=spets(coxgroup(:F,4))\nF‚ÇÑ\n\njulia> w=transporting_elt(Group(WF),[1,2,9,16],[1,9,16,2],ontuples);\n\njulia> LF=subspets(WF,[1,2,9,16],w)\nF‚ÇÑ‚Çç‚ÇÅ‚Äö‚ÇÇ‚Äö‚Çâ‚Äö‚ÇÅ‚ÇÜ‚Çé=¬≥D‚ÇÑ‚Çç‚ÇÉ‚ÇÑ‚ÇÅ‚ÇÇ‚Çé\n\njulia> diagram(LF)\nœï acts as (2,3,4) on the component below\n  O 4\n  Ôø®\nO‚ÄîO‚ÄîO D‚ÇÑ\n3 1 2\n\n\n\n\n\n","category":"function"},{"location":"cosets.html#Chevie.Cosets.Frobenius","page":"Reflection cosets and Spets","title":"Chevie.Cosets.Frobenius","text":"Frobenius(WF)(x,i=1)\n\nIf   WF  is  a  Coxeter  coset  associated  to  the  Coxeter  group  W, Frobenius(WF)  returns a  function F  such that  x‚Ü¶ F(x,i=1) does the automorphism induced by WF.phi^i on the object x.\n\njulia> W=coxgroup(:D,4)\nD‚ÇÑ\n\njulia> WF=spets(W,Perm(1,2,4))\n¬≥D‚ÇÑ\n\njulia> u=unichar(W,2)\n[D‚ÇÑ]:<11->\n\njulia> F=Frobenius(WF);F(u)\n[D‚ÇÑ]:<.211>\n\njulia> F(u,-1)\n[D‚ÇÑ]:<11+>\n\njulia> F(1)\n4\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Garside-monoids-and-groups,-braids.","page":"Garside monoids and groups, braids.","title":"Garside monoids and groups, braids.","text":"","category":"section"},{"location":"garside.html","page":"Garside monoids and groups, braids.","title":"Garside monoids and groups, braids.","text":"Pages=[\"garside.md\"]","category":"page"},{"location":"garside.html","page":"Garside monoids and groups, braids.","title":"Garside monoids and groups, braids.","text":"Garside\nLocallyGarsideMonoid\nGarsideMonoid\nisleftdescent(::BraidMonoid,::Any,::Int)\nleftdescents(::Garside.LocallyGarsideElt)\nrightascents\nleft_divisors\nleftgcd\nrightgcd\nleftlcm\nrightlcm\nŒ±(::Garside.LocallyGarsideElt)\nŒ±(::Garside.LocallyGarsideElt,::AbstractVector)\nŒ¥ad\nBrieskorn_normal_form\nBraidMonoid\nDualBraidMonoid\nhurwitz\nfraction\nword(::Garside.GarsideMonoid,w)\nword(::Garside.GarsideElt)\nPermGroups.elements(::Garside.LocallyGarsideMonoid,::Integer)\nimage\nconjugating_elt\ncentralizer_gens\nCategory\nCategory(::Function,::Any)\nconjcat\nendomorphisms\nPresentation(::GarsideMonoid)\nshrink\nCorranPicantinMonoid","category":"page"},{"location":"garside.html#Chevie.Garside","page":"Garside monoids and groups, braids.","title":"Chevie.Garside","text":"Garside  monoids are a general class  of monoids whose most famous examples are  the braid and dual braid monoids. They have groups of fractions, which in both examples is the braid group. Here we implement braid groups as part of a general implementation of Garside monoids and groups.\n\nTo  define Garside monoids we  introduce some vocabulary about divisibility in  monoids. A left-divisor  of x is  a d such  that there exists y with  x=dy (and then  we say that  x is a  right multiple of d, and write  d‚âº x). We say that a monoid M is left cancellable if an equality dx=dy   implies  x=y.  We  define  symmetrically  right-divisors,  left multiples and right cancellability. We say that x is an atom if 1 and x  are its only  divisors. A left  gcd of x  and y is a common left divisor  d of x  and y such  that any other  common left-divisor is a left-divisor  of d. Similarly  a right lcm  of x and  y is a common multiple which is a left-divisor of any other common multiple.\n\nWe  call Garside a monoid M which:\n\nis left and right cancellable.\nis generated by its atoms.\nadmits left and  right  gcds  and  lcms.\nis such that any element has only finitely many left (or right) divisors.\nadmits a Garside element, which is an element Œî whose set of left and right-divisors coincide and generate M.\n\nGarside  elements are not  unique, but there  is a unique  minimal one (for divisibility);  we assume that a Garside  element Œî has been chosen. Then the  divisors of  Œî are  called the  simples of  M. A  Garside monoid embeds  into its group of  fractions, which is called  a Garside group (a group  can have  several different  Garside structures,  for instance braid groups of finite Coxeter groups have an ordinary and a dual braid monoid).\n\nWe  also implement locally Garside monoids,  which are monoids where lcms do  not always exist, but  exist if any common  multiple exists; the set of simples is then not defined by a Garside element, but by the condition that they  contain the atoms and are closed  under lcms and taking divisors (see BDM01);  we  keep  the  condition  that each element is divisible  by  finitely  many  simples  (but  the  number of simples can be infinite).  The most important  example is the  Artin monoid of an infinite Coxeter  group. It  is not  known whether  locally Garside monoids embed in their  group of fractions (although this  has been proved for Artin monoids of   Coxeter  groups  by  Paris  Paris01),  and  thus computing  in the monoid does not help for computing in the group; only the monoid is implemented here for these cases.\n\nWhat allows computing with Garside and locally Garside monoids, and Garside groups,  is the fact  that they admit  normal forms ‚Äì-  these normal forms were   exhibited   for   braid   monoids   of  Coxeter  groups  by  Deligne Del72,  who extended  earlier work  of Brieskorn, Saito BS72 and Garside Gar69:\n\nLet M be a locally Garside monoid. Then for b‚àà M there is a unique  maximal simple left-divisor Œ±(b) of b; any other simple dividing b divides Œ±(b).\nLet M be a Garside monoid with Garside element Œî and group of fractions G. Then for any x‚àà  G, for large enough i we have Œî‚Å±x‚àà M.\n\nA  consequence of 1. is that every element has a canonical decomposition as a product of simples, its left-greedy normal form. If we define œâ(x) by x=Œ±(x)œâ(x), then the normal form of x is Œ±(x)Œ±(œâ(x))Œ±(œâ^2(x))‚Ä¶ We use the  normal form to represent  elements of M, and  when M is Garside we use  2. to represent elements of G:  given x‚àà G we compute the smallest power i such that Œî‚Å± x‚àà M, and we represent x by the pair (i,Œî‚Åª‚Å±x). We  are thus reduced to the case where  x‚àà M, not divisible by Œî, where we represent x by the sequence of simples that make up its normal form.\n\nWe  now describe Artin-Tits braid monoids. Let (W,S) be a Coxeter system, that is W has presentation\n\n‚ü®s‚àà S‚à£s¬≤=1, sts‚ãØ =tst‚ãØ   (m‚Çõ‚Çú factors on each side) for s,t‚àà S‚ü©\n\nfor some Coxeter matrix m‚Çõ‚Çú. The braid group B associated to (W,S) is the group defined by the presentation\n\n‚ü®ùê¨‚àà ùêí‚à£ ùê¨ùê≠ùê¨‚ãØ =ùê≠ùê¨ùê≠‚ãØ  (m‚Çõ‚Çú factors on each side) for ùê¨,ùê≠‚àà ùêí‚ü©\n\nThe  positive braid monoid B‚Å∫ associated with W is the monoid defined by  the  presentation  above  ‚Äì-  it  identifies with the submonoid of B generated  by ùêí by Paris01.  This monoid is locally Garside,  with the set of simples in bijection with the elements of W and with  ùêí as atoms; we will denote by ùêñ the set of simples, and by ùê∞ ‚Ü¶ w  the bijection between simples and elements  of W. The group W has a length  defined  in  terms  of  reduced expressions. Similarly, having only homogeneous relations, B‚Å∫ has a natural length function. Then ùêñ can be characterised  as the subset  of elements of  B‚Å∫ with the  same length as their image in W.\n\nIf  W is finite, then B‚Å∫ is Garside with Garside element the element of ùêñ whose image is the longest element  of W. A finite Coxeter group is also  a reflection group in  a real vector space,  thus in its complexified V,  and B also has a topological definition as the fundamental group of the  space V ≥·µâ·µç/W, where V ≥·µâ·µç  is the set of  elements of V which are not fixed by any non-identity element of S; however, we will not use this here.\n\nWe  implement in general only  monoids which have a  finite number of atoms (the  package AffineA implements,  following the work  of Fran√ßois Digne, the dual braid monoid of the affine Coxeter group W(AÃÉ‚Çô)).\n\nGiven a Coxeter group W,\n\njulia> W=coxgroup(:A,4)\nA‚ÇÑ\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A‚ÇÑ)\n\nconstructs  the associated braid monoid, and  then, used as a function, B constructs  elements of the braid monoid (or group when W is finite) from a list of generators indices given as arguments:\n\njulia> w=B(1,2,3,4) # represents ùê¨‚ÇÅùê¨‚ÇÇùê¨‚ÇÉùê¨‚ÇÑ\n1234\n\njulia> w^3  # the terms of the normal form are printed separated by a .\n121321432.343\n\njulia> word(Œ±(w^3))\n9-element Vector{Int64}:\n 1\n 2\n 1\n 3\n 2\n 1\n 4\n 3\n 2\n\njulia> w^4\nŒî.232432\n\njulia> inv(w)\n(1234)‚Åª¬π\n\nHow  an  element  of  a  Garside  group  is  printed  is  controlled by the IOcontext  attribute  ':greedy'.  By  default,  elements  are  printed as fractions a‚Åª¬πb where a and b have no left common divisor. Each of a and  b is printed  using its left-greedy  normal form, that  is a maximal power of the Garside element followed by the rest. One can print the entire element   in  the  left-greedy  normal  from  by  setting  the  IOContext :greedy=>true; with the same w as above we have:\n\njulia> xrepr(w^-1,greedy=true,limit=true)\n\"Œî‚Åª¬π.232432\"\n\nBy default,  repr gives   w  back   in  a   form  which   after  assigning B=BraidMonoid(W) can be input back into Julia:\n\njulia> repr(w)\n\"B(1,2,3,4)\"\n\njulia> repr(w^3)\n\"B(1,2,1,3,2,1,4,3,2,3,4,3)\"\n\njulia> repr(w^-1)\n\"B(-4,-3,-2,-1)\"\n\nIn  general elements  of a  Garside monoid  are displayed  as a list of the indices of their constituting atoms.\n\nWe  will  now  describe  the  dual  braid  monoid. First we define interval monoids.  Given a group W and a set S of generators of W as a monoid, we  define the  length l_S(w)  as the  minimum number  of elements of S needed  to write w.  We then define  left-divisors of x  as those d‚ààW such  that there exists y with  x=dy and l_S(d)+l_S(y)=l_S(x). We say that  w‚àà W is balanced if its set of left and right divisors coincide; in this  case we denote  this set by  [1,w], an interval  for the poset of S-divisibility.  We say that w  is Garside for l_S  if it is balanced and  [1,w] is a lattice (where upper and lower bounds are lcms and gcds), which generates W. Then we have the theorem:\n\nSuppose  w is Garside for the l_S.  Then the monoid M with generators [1,w]   and   relations   xy=z   whenever   xy=z  holds  in  W  and l_S(x)+l_S(y)=l_S(z), is a Garside monoid, with simples [1,w] and atoms S. It is called the interval monoid defined by the interval [1,w].\n\nThe  Artin-Tits braid monoid  is an interval  monoid by taking  for S the Coxeter  generators, in which case l_S  is the Coxeter length, and taking for w the longest element of W. The dual monoid, constructed by Birman, Ko  and  Lee  for  type  A  and  by Bessis for all well-generated complex reflection  groups, is obtained in  a similar way, by  taking this time for w  a Coxeter element, for l_S the reflection length 'reflength' and for S_S  the  reflections  which  divide  w  for the reflection length (for Coxeter  groups all reflections  divide w but  for well-generated complex reflection  groups not  all reflections  divide); for  the dual  monoid the simples  are of cardinality  the generalized Catalan  numbers catalan. An interval  monoid has naturally an inverse  morphism from M to W, called 'image'  which is the  quotient map from  the interval monoid  to W which sends back simple braids to [1,w].\n\nA last pertinent notion is reversible monoids. Since we store left normal forms,  it is easy to compute left lcms and gcds, but hard to compute right lcms  and gcds. But this becomes easy to  do if the monoid has an operation 'reverse',  which has the property that 'a' is a left-divisor of 'b' if and only  if 'reverse(a)'  is a  right-divisor  of 'reverse(b)'. This holds for Artin-Tits  and dual braid monoids of groups generated by true reflections; Artin-Tits monoids have a reverse operation which consists of reversing a word,  written as  a list  of atoms.  The dual  monoid also has a reverse operation  defined in the  same way, but  this operation changes monoid: it goes  from the dual monoid  for the Coxeter element  w to the dual monoid for  the Coxeter element  w‚Åª¬π. The operations  'rightlcm' and 'rightgcd', and  some other algorithms, have faster implementations if the monoid has a reverse operation.\n\nThis  module implements also  functions to solve  the conjugacy problem and compute  centralizers  in  Garside  groups,  following  the work of Franco, Gebhardt and Gonzalez-Meneses.\n\nTwo  elements w and w' of a monoid  M are conjugate in M if there exists  x‚àà M such that wx=xw'; if  M satisfies the √ñre conditions, it has  a  group  of  fractions  where  this  becomes  x‚Åª¬πwx=w',  the  usual definition  of conjugacy. A special case  which is even closer to conjugacy in  the group is if there exists y‚àà  M such that w=xy and w'=yx. This relation  is not transitive in general,  but we call cyclic conjugacy the transitive closure of this relation, a restricted form of conjugacy.\n\nThe  next  observation  is  that  if  w,w'  are conjugate in the group of fractions  of the Garside monoid M then  they are conjugate in M, since if wx=xw' then there is a power Œî‚Å± which is central and such that xŒî‚Å±‚àà M. Then wxŒî‚Å±=xŒî‚Å± w' is a conjugation in M.\n\nThe  crucial observation for solving the  conjugacy problem is to introduce inf(w):=sup{i such that Œî‚Åª‚Å±w‚àà M} and sup(w):=inf{i such that w‚Åª¬πŒî‚Å±‚àà M}, and  to notice  that the  number of  conjugates of  w with same inf and sup  as w is finite (since our  monoids have a finite number of atoms). Further, a theorem of Birman shows that the maximum inf and minimum sup in a conjugacy class can be achieved simultaneously; the elements achieving this are called the super summit set of w. Thus a way to determine if two elements are conjugate is to find a representative of both of them in their super  summit set, and then solve conjugacy  within that set. This can also be  used to compute the centralizer of an element: if we consider the super summit   set  as  the  objects  of  a  category  whose  morphisms  are  the conjugations   by  simple  elements,  the   centralizer  is  given  by  the endomorphisms  of  the  given  object.  For  the  implementation  of finite categories we use, see the docstrings of Category and endomorphisms.\n\nWe illustrate this on an example:\n\njulia> b=B(2,1,4,1,4)\n214.14\n\njulia> c=B(1,4,1,4,3)\n14.143\n\njulia> d=conjugating_elt(b,c)\n(1)‚Åª¬π21321432\n\njulia> b^d\n14.143\n\njulia> centralizer_gens(b)\n3-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 321432.213243\n 21.1\n 4\n\njulia> C=conjcat(b;ss=Val(:ss))\ncategory with 10 objects and 32 generating maps\n\njulia> C.obj\n10-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 1214.4\n 214.14\n 124.24\n 1343.1\n 14.124\n 143.13\n 24.214\n 134.14\n 13.134\n 14.143\n\nThere   is  a   faster  solution   to  the   conjugacy  problem   given  in gebgon10:  for each b‚àà M, they define a particular simple  left-divisor of b, its preferred prefix such that the operation slide  which  cyclically  conjugates  b  by  its  preferred  prefix, is eventually periodic, and the period is contained in the super summit set of x.  We say that x  is in its sliding  circuit if some iterated slide of x is equal to x. The set of sliding circuits in a given conjugacy class is  smaller than the super  summit set, thus allows  to solve the conjugacy problem faster. Continuing from the above example,\n\njulia> word(W,preferred_prefix(b))\n2-element Vector{Int64}:\n 2\n 1\n\njulia> b^B(preferred_prefix(b))\n1214.4\n\njulia> b1=b^B(preferred_prefix(b))\n1214.4\n\njulia> C=conjcat(b)\ncategory with 2 objects and 6 generating maps\n\njulia> C.obj\n2-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 1214.4\n 1343.1\n\nFinally,  we have implemented  Hao Zheng's algorithm  to extract roots in a Garside monoid:\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A‚ÇÉ)\n\njulia> Pi=B(B.Œ¥)^2\nŒî¬≤\n\njulia> root(Pi,2)\nŒî\n\njulia> root(Pi,3)\n1232\n\njulia> root(Pi,4)\n132\n\n\n\n\n\n","category":"module"},{"location":"garside.html#Chevie.Garside.LocallyGarsideMonoid","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.LocallyGarsideMonoid","text":"LocallyGarsideMonoid{T}  is the abstract type of locally Garside monoids, where  T  is  the  type  of  simples.  Such a monoid M needs, for a,b simples, to implement the functions\n\none(M)\nisleftdescent(M,a,i::Int)  whether M.atoms[i]‚âº a\nisrightdescent(M,a,i::Int) whether a‚âΩ M.atoms[i]\nisrightascent(M,a,i::Int)  whether a*M.atoms[i] is simple\n*(M,a,b)  when a*b is simple returns the simple a*b\n\\(M,a,b) when a‚âº b returns the simple a\b\n/(M,a,b)  when a‚âΩ b returns the simple a/b\n\n\n\n\n\n","category":"type"},{"location":"garside.html#Chevie.Garside.GarsideMonoid","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.GarsideMonoid","text":"GarsideMonoid{T}  is the abstract  type of Garside  monoids, where T is the type of simples. Such a monoid M should implement the same methods as LocallyGarsideMonoid  except  that  isrightascent(M,a) is automatically defined as isleftdescent(M,\\(M,a,M.Œ¥),i).\n\nAn implementation should have fields M.Œ¥, M.stringŒ¥\n\nAn interval monoid should have a field M.orderŒ¥.\n\n\n\n\n\n","category":"type"},{"location":"garside.html#Chevie.CoxGroups.isleftdescent-Tuple{BraidMonoid, Any, Int64}","page":"Garside monoids and groups, braids.","title":"Chevie.CoxGroups.isleftdescent","text":"isleftdescent(M,w,i)\n\nreturns true if and only if the i-th atom of the locally Garside monoid M left-divides the simple w.\n\n\n\n\n\n","category":"method"},{"location":"garside.html#Chevie.CoxGroups.leftdescents-Tuple{Chevie.Garside.LocallyGarsideElt}","page":"Garside monoids and groups, braids.","title":"Chevie.CoxGroups.leftdescents","text":"leftdescents(b::LocallyGarsideElt) the list of indices of the atoms which left-divide b\n\n\n\n\n\n","category":"method"},{"location":"garside.html#Chevie.Garside.rightascents","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.rightascents","text":"rightascents(M,s) where s is a simple return the right ascents of s, that is the list of i such that s*M.atoms[i] is still simple.\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.left_divisors","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.left_divisors","text":"left_divisors(M::LocallyGarsideMonoid, s)\n\nleft_divisors(M::LocallyGarsideMonoid, s,i)\n\nall  the left-divisors  of the  simple element  s of  M, as a vector of vectors   of  simples,  where  the  i+1-th  vector  of  simples  holds  the left-divisors  of length i in the atoms.  If a third argument i is given, returns the list of divisors of length i.\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A‚ÇÉ)\n\njulia> map(x->B.(x),left_divisors(B,W(1,3,2)))\n4-element Vector{Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}}:\n [.]\n [1, 3]\n [13]\n [132]\n\njulia> B=DualBraidMonoid(W)\nDualBraidMonoid(A‚ÇÉ,c=[1, 3, 2])\n\njulia> map(x->B.(x),left_divisors(B,W(1,3,2)))\n4-element Vector{Vector{GarsideElt{Perm{Int16}, DualBraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}}:\n [.]\n [1, 2, 3, 4, 5, 6]\n [12, 13, 15, 25, 34, 45]\n [Œ¥]\n\n\n\n\n\nleft_divisors(b::LocallyGarsideElt[, i])\n\nreturns all left-divisors of b (left-divisors of length i if specified)\n\njulia> B=DualBraidMonoid(coxsym(4))\nDualBraidMonoid(ùîñ ‚ÇÑ,c=[1, 3, 2])\n\njulia> left_divisors(B(1,5,4,3))\n10-element Vector{GarsideElt{Perm{Int16}, DualBraidMonoid{Perm{Int16}, CoxSym{Int16}}}}:\n .\n 1\n 1.4\n 1.4.2\n 1.4.3\n 5\n 6\n 15\n 15.4\n 15.4.3\n\njulia> left_divisors(B(1,5,4,3),1)\n3-element Vector{GarsideElt{Perm{Int16}, DualBraidMonoid{Perm{Int16}, CoxSym{Int16}}}}:\n 1\n 5\n 6\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.leftgcd","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.leftgcd","text":"leftgcd(M::LocallyGarsideMonoid,simp...) leftgcdc(M::LocallyGarsideMonoid,simp...)\n\nsimp  should be simples of M. The  function returns the left gcd d of the simp.\n\nleftgcdc returns d followed by the tuple of complements inv(d).*simp\n\n\n\n\n\nleftgcd(a‚ÇÅ,‚Ä¶,a‚Çô) leftgcdc(a‚ÇÅ,‚Ä¶,a‚Çô)\n\na‚ÇÅ,‚Ä¶,a‚Çô  should be  elements of  the same  (locally) Garside  monoid. The function returns the left gcd d of a‚ÇÅ,‚Ä¶,a‚Çô.\n\nleftgcdc returns (d,(d‚Åª¬πa‚ÇÅ,‚Ä¶,d‚Åª¬πa‚Çô)).\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A‚ÇÉ)\n\njulia> leftgcdc(B(2,1,2)^2,B(3,2)^2)\n(2, (121.21, 32.2))\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.rightgcd","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.rightgcd","text":"rightgcd(M::LocallyGarsideMonoid,simp...) rightgcdc(M::LocallyGarsideMonoid,simp...)\n\nsimp  should be simples of M. The function returns the right gcd d of the simp.\n\nrightgcdc returns d followed by the tuple of complements simp./d\n\n\n\n\n\nrightgcd(a‚ÇÅ,‚Ä¶,a‚Çô) rightgcdc(a‚ÇÅ,‚Ä¶,a‚Çô)\n\na‚ÇÅ,‚Ä¶,a‚Çô  should be  elements of  the same  (locally) Garside  monoid. The function returns the right gcd d of a‚ÇÅ,‚Ä¶,a‚Çô\n\nrightgcdc returns (d,(a‚ÇÅ/d,‚Ä¶,a‚Çô/d)).\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> B=BraidMonoid(W)\nBraidMonoid(A‚ÇÉ)\n\njulia> rightgcdc(B(2,1,2)^2,B(3,2)^2)\n(2.2, (12.21, 23))\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.leftlcm","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.leftlcm","text":"leftlcm(M::GarsideMonoid,simp...) leftlcmc(M::GarsideMonoid,simp...)\n\nsimp  should be simples of M. The  function returns the left lcm m of the  simp.\n\nleftlcmc returns m followed by  the tuple of complements m./simp\n\n\n\n\n\nleftlcm(a‚ÇÅ,‚Ä¶,a‚Çô) leftlcmc(a‚ÇÅ,‚Ä¶,a‚Çô)\n\na‚ÇÅ,‚Ä¶,a‚Çô  should  be  elements  of  the  same Garside monoid. The function returns  the least common left multiple  m of a‚ÇÅ,‚Ä¶,a‚Çô.\n\nleftlcmc returns '(m,(m/a‚ÇÅ,‚Ä¶,m/a‚Çô))`.\n\njulia> B=BraidMonoid(coxgroup(:A,3))\nBraidMonoid(A‚ÇÉ)\n\njulia> leftlcmc(B(2,1,2)^2,B(3,2)^2)\n(Œî.121, (123, 23.321))\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.rightlcm","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.rightlcm","text":"rightlcm(M::GarsideMonoid,simp...) rightlcmc(M::GarsideMonoid,simp...)\n\nsimp  should be simples of M. The function returns the right lcm m of the simp.\n\nrightlcmc returns m followed by the tuple of complements simp.\\m\n\n\n\n\n\nrightlcm(a‚ÇÅ,‚Ä¶,a‚Çô) rightlcmc(a‚ÇÅ,‚Ä¶,a‚Çô)\n\na‚ÇÅ,‚Ä¶,a‚Çô  should  be  elements  of  the  same Garside monoid. The function returns  the least common right multiple  m of a‚ÇÅ,‚Ä¶,a‚Çô.\n\nrightlcmc returns '(m,(a‚ÇÅ‚Åª¬πm,‚Ä¶,a‚Çô‚Åª¬πm))`.\n\njulia> B=BraidMonoid(coxgroup(:A,3))\nBraidMonoid(A‚ÇÉ)\n\njulia> rightlcmc(B(2,1,2)^2,B(3,2)^2)\n(Œî¬≤, (321.123, 12321.321))\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.Œ±-Tuple{Chevie.Garside.LocallyGarsideElt}","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.Œ±","text":"Œ±(b::LocallyGarsideElt)\n\nreturns as a Garside element  the first term in  the normal form of  b (b[1] returns this term as a simple).\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> b=BraidMonoid(W)(2,1,2,1,1)\n121.1.1\n\njulia> Œ±(b)\n121\n\n\n\n\n\n","category":"method"},{"location":"garside.html#Chevie.Garside.Œ±-Tuple{Chevie.Garside.LocallyGarsideElt, AbstractVector}","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.Œ±","text":"Œ±(b::LocallyGarsideElt,I)\n\nreturns the longest prefix of b using only b.M.atoms[I]\n\njulia> W=coxgroup(:A,4);B=BraidMonoid(W)\nBraidMonoid(A‚ÇÑ)\n\njulia> w0=B(longest(W))\nŒî\n\njulia> Œ±(w0,[1,2,3])\n121321\n\n\n\n\n\n","category":"method"},{"location":"garside.html#Chevie.Garside.Œ¥ad","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.Œ¥ad","text":"Œ¥ad(M::GarsideMonoid,x,i=1)\n\nreturns the image of the simple x by the i-th power of the automorphism induced by conjugation by M.Œ¥ (that is x^(M.Œ¥^i)).\n\n\n\n\n\nŒ¥ad(b::GarsideElt,i=1)\n\nreturns the image of b by the i-th power of the automorphism induced by conjugation by b.M.Œ¥.\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.Brieskorn_normal_form","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.Brieskorn_normal_form","text":"Brieskorn_normal_form(b::LocallyGarsideElt)\n\nBrieskorn  citeBri71 has noticed that if L(b)  is the left descent set of b  (see leftdescents),  and if  b_(L(b)) is  the right lcm of L(b),  then  b_(L(b))  left-divides  b.  We  can  now  divide  b by b_(L(b))  and continue  this process  with the  quotient. In this way, we obtain  an expression  b=b_(L‚ÇÅ)‚ãØ b_(L·µ£)  where L·µ¢=L(b_(L·µ¢)‚ãØ b_(L·µ£)) for all  i, which we  call the Brieskorn  normal form of  b. The function Brieskorn_normal_form  returns a  description of  this form, by returning the   list  of  sets   L(b)  which  describe   the  above  decomposition.\n\njulia> W=coxgroup(:E,8);B=BraidMonoid(W)\nBraidMonoid(E‚Çà)\n\njulia> w=B(2,3,4,2,3,4,5,4,2,3,4,5,6,5,4,2,3,4,5,6,7,6,5,4,2,3,4,5,6,7,8)\n2342345423456542345676542345678\n\njulia> Brieskorn_normal_form(w)\n2-element Vector{Vector{Int64}}:\n [2, 3, 4, 5, 6, 7]\n [8]\n\njulia> Brieskorn_normal_form(w^2)\n2-element Vector{Vector{Int64}}:\n [2, 3, 4, 5, 6, 7, 8]\n [2, 3, 4, 5, 6]\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.BraidMonoid","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.BraidMonoid","text":"BraidMonoid(W::CoxeterGroup)\n\nThe ordinary monoid of the Artin group associated to W\n\n\n\n\n\n(B::BraidMonoid)(M::DualBraidMonoid,i::Integer)\n\nconvert to an element of B the i-th atom of M.\n\n\n\n\n\n(B::BraidMonoid)(M::DualBraidMonoid,s)\n\nconvert to an element of B the simple s of M.\n\n\n\n\n\n(B::BraidMonoid)(b::GarsideElt)\n\nb should be a dual braid. Convert b to an element of B.\n\n\n\n\n\n","category":"type"},{"location":"garside.html#Chevie.Garside.DualBraidMonoid","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.DualBraidMonoid","text":"DualBraidMonoid(W;c=xxx)\n\nW  should be a well generated complex  reflection group and c a Coxeter element  of W, given as a  word (a Vector{Int}) specifiying the element W(c...). \n\nIf  no c  is given  a particular  one is  chosen (what the notation xxx above tries to convey).\n\nFor  ·∫Ä a Coxeter  groups the Coxeter  diagram is partitioned  in two sets where  in each set reflections commute pairwise;  c is the product of the product of the reflections in each set.\n\nFor  a complex  reflection group  the representative  stored in the Coxeter class is used for c.\n\nThe function returns the dual braid monoid determined by W and c\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> B=DualBraidMonoid(W)\nDualBraidMonoid(A‚ÇÉ,c=[1, 3, 2])\n\njulia> B(2,1,2,1,1)\n12.1.1.1\n\njulia> B(-1,-2,-3,1,1)\n(25.1)‚Åª¬π1.1\n\njulia> W=crg(4)\nG‚ÇÑ\n\njulia> B=DualBraidMonoid(W)\nDualBraidMonoid(G‚ÇÑ,c=[1, 2])\n\njulia> left_divisors(B(B.Œ¥))\n5-element Vector{GarsideElt{Perm{Int16}, DualBraidMonoid{Perm{Int16}, PRG{Cyc{Rational{Int64}}, Int16}}}}:\n .\n 1\n 2\n 3\n Œ¥\n\n\n\n\n\n","category":"type"},{"location":"garside.html#Chevie.Garside.hurwitz","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.hurwitz","text":"hurwitz(l,i::Integer) the  Hurwitz action of the  generator œÉ·µ¢ of the  braid group B‚Çô on the list l   of  length  n  of  group  elements,  which  replaces  l·µ¢,l·µ¢‚Çä‚ÇÅ  by l·µ¢‚Çä‚ÇÅ,l·µ¢^l·µ¢‚Çä‚ÇÅ.  If i<0, does the action of inv(œÉ‚±º) where j=-i, which replaces l‚±º,l‚±º‚Çä‚ÇÅ by l‚±º‚Çä‚ÇÅ^inv(l‚±º),l‚±º.\n\n\n\n\n\nhurwitz(l,v::AbstractVector{<:Integer})\n\ndoes successively hurwitz(l,i) for each i in v.\n\n\n\n\n\nhurwitz(l,b) the  Hurwitz action of the braid  b‚àà B‚Çô on the list  l of length n of group elements.\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.fraction","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.fraction","text":"fraction(b::GarsideElt)\ndenominator(b::GarsideElt)\nnumerator(b::GarsideElt)\n\nfraction(b)  returns a  tuple (x,y)  of positive  Garside elements with trivial  leftgcd  and  such  that  b=x\\y.  For  such  a decomposition, denominator(b) returns x and numerator(b) returns y.\n\njulia> B=BraidMonoid(coxgroup(:A,3))\nBraidMonoid(A‚ÇÉ)\n\njulia> b=B( 2, 1, -3, 1, 1)\n(23)‚Åª¬π321.1.1\n\njulia> fraction(b)\n(23, 321.1.1)\n\n\n\n\n\n","category":"function"},{"location":"garside.html#PermGroups.Groups.word-Tuple{GarsideMonoid, Any}","page":"Garside monoids and groups, braids.","title":"PermGroups.Groups.word","text":"word(M::GarsideMonoid,w)\n\nreturns a word in the atoms of M representing the simple w\n\njulia> B=BraidMonoid(coxgroup(:A,3))\nBraidMonoid(A‚ÇÉ)\n\njulia> word(B,B.Œ¥)\n6-element Vector{Int64}:\n 1\n 2\n 1\n 3\n 2\n 1\n\n\n\n\n\n","category":"method"},{"location":"garside.html#PermGroups.Groups.word-Tuple{GarsideElt}","page":"Garside monoids and groups, braids.","title":"PermGroups.Groups.word","text":"word(b::GarsideElt)\n\nreturns  a description  of b  as a  list of  the atoms  of which  it is a product.  If b is in the Garside group  but not the Garside monoid, it is represented  in  fraction  normal  form  where  as a special convention the inverses  of  the  atoms  are  represented  by  negating  the corresponding integer.\n\njulia> B=BraidMonoid(coxgroup(:A,3))\nBraidMonoid(A‚ÇÉ)\n\njulia> b=B(2,1,2,1,1)*inv(B(2,2))\n(21)‚Åª¬π1.12.21\n\njulia> word(b)\n7-element Vector{Int64}:\n -1\n -2\n  1\n  1\n  2\n  2\n  1\n\n\n\n\n\n","category":"method"},{"location":"garside.html#PermGroups.Groups.elements-Tuple{LocallyGarsideMonoid, Integer}","page":"Garside monoids and groups, braids.","title":"PermGroups.Groups.elements","text":"elements(M::LocallyGarsideMonoid,l::Integer) elements(M::LocallyGarsideMonoid,v::AbstractVector{<:Integer})\n\nM  should have  an additive  length function  (that is,  a product of l atoms  is not equal to any product of less than l atoms). elements(M,l) returns the list of elements of length l in M.\n\nIn the second form elements returns all elements of length i for i‚àà v.\n\njulia> M=BraidMonoid(coxgroup(:A,2))\nBraidMonoid(A‚ÇÇ)\n\njulia> elements(M,4)\n12-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n Œî.1\n Œî.2\n 12.21\n 12.2.2\n 1.12.2\n 1.1.12\n 1.1.1.1\n 21.12\n 21.1.1\n 2.21.1\n 2.2.21\n 2.2.2.2\n\n\n\n\n\n","category":"method"},{"location":"garside.html#Chevie.Garside.image","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.image","text":"image(b::GarsideElt)\n\nThis  function is defined only if b  is an element of an interval monoid, for instance a braid. It returns the image of b in the group of which the monoid  is an interval  monoid. For instance  it gives the  projection of a braid in an Artin monoid back to the Coxeter group.\n\njulia> W=coxsym(4)\nùîñ ‚ÇÑ\n\njulia> b=BraidMonoid(W)(2,1,2,1,1)\n121.1.1\n\njulia> p=image(b)\n(1,3)\n\njulia> word(W,p)\n3-element Vector{Int64}:\n 1\n 2\n 1\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.conjugating_elt","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.conjugating_elt","text":"conjugating_elt(b,b‚ÇÅ[,F];ss=Val(:sc))\n\nb  and b‚ÇÅ should  be elements of  the same Garside  group. The function returns  a such that b^a=b‚ÇÅ if such exists, and nothing otherwise. If an  argument ss  is given,  the computation  is done in the corresponding category  ‚Äì- see conjcat. If an  argument F is given it should be  an automorphism of the braid monoid, like the Frobenius of a reflection coset   attached  to  b.M.W;   the  computation  is   then  done  in  the corresponding F-conjugacy category.\n\njulia> W=coxgroup(:D,4)\nD‚ÇÑ\n\njulia> B=BraidMonoid(W)\nBraidMonoid(D‚ÇÑ)\n\njulia> b=B(2,3,1,2,4,3)\n231243\n\njulia> b1=B(1,4,3,2,2,2)\n1432.2.2\n\njulia> conjugating_elt(b,b1)\n(134312.23)‚Åª¬π\n\njulia> c=conjugating_elt(b,b1;ss=Val(:cyc))\n232.2\n\njulia> b^c\n1432.2.2\n\njulia> WF=spets(W,Perm(1,2,4))\n¬≥D‚ÇÑ\n\njulia> F=Frobenius(WF);\n\njulia> c=B(3,4,3,1,2,3)\n343123\n\njulia> conjugating_elt(b,c,F)\n124312\n\njulia> ^(b,B(1,2,4,3,1,2),F)\n343123\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.centralizer_gens","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.centralizer_gens","text":"centralizer_gens(b[,F];ss=Val(:sc))\n\na  list of generators of the centralizer of b. The computation is done by computing  the  endomorphisms  of  the  object  b  in the category of its sliding  circuits. If an argument ss is given, the computation is done in the corresponding category ‚Äì- see conjcat.\n\nIf  an argument  F is  given it  should be  an automorphism  of the braid monoid,  like the Frobenius of a reflection coset attached to b.M.W; then the F-centralizer is computed.\n\njulia> W=coxgroup(:D,4)\nD‚ÇÑ\n\njulia> B=BraidMonoid(W)\nBraidMonoid(D‚ÇÑ)\n\njulia> w=B(4,4,4)\n4.4.4\n\njulia> cc=centralizer_gens(w)\n8-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 1\n (31432)‚Åª¬π231432\n (1)‚Åª¬π34.431\n (2)‚Åª¬π34.432\n (32431)‚Åª¬π132431\n 4\n 34.43\n 2\n\njulia> shrink(cc)\n5-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 4\n 2\n 1\n 34.43\n (3243)‚Åª¬π13243\n\njulia> centralizer_gens(w;ss=Val(:cyc))\n1-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 4\n\njulia> F=Frobenius(spets(W,Perm(1,2,4)));\n\njulia> centralizer_gens(w,F)\n2-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 124\n 312343123\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.Category","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.Category","text":"Category{TO,TM} is the type of a finite category whose objects are of type TO and maps of type TM.  It is represented as a struct with two fields:\n\nobj::Vector{TO} the objects\natoms::Vector{Vector{Pair{TM,Int}}} a vector representing the atoms (generators) of the category. It is such that atoms[i] is a Vector of  pairs m=>j representing a map m from obj[i] to obj[j]. If the julia objects of type TM belong to a monoid, a general map can be represented as a triple (i,m,j) where m is of type TM representing a map from obj[i] to obj[j].\n\nA category is graphically shown by giving the :graph io property:\n\njulia> W=coxsym(4);M=BraidMonoid(W)\nBraidMonoid(ùîñ ‚ÇÑ)\n\njulia> xprint(conjcat(M(1,1,2,2,3));graph=true)\ncategory with 4 objects and 8 generating maps\n      1232       12       213       213       213       32 \n213.32‚Äï‚Äï‚Äï‚ûî 12.213‚Äï‚ûî 213.12‚Äï‚Äï‚ûî 12.213‚Äï‚Äï‚ûî 213.32‚Äï‚Äï‚ûî 32.213‚Äï‚ûî 213.32\n      1321       213 \n213.12‚Äï‚Äï‚Äï‚ûî 32.213‚Äï‚Äï‚ûî 213.12\n\n\n\n\n\n","category":"type"},{"location":"garside.html#Chevie.Garside.Category-Tuple{Function, Any}","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.Category","text":"Category(atomsfrom::Function,o;action::Function=^)\n\nconstructs   a  category  from  an  initial   object  o  and  a  function atomsfrom(o)  which given object o returns atoms from o as \"maps\" m such that the target object is action(o,m).\n\nAs an example we construct a Garside category associated to the braid group of  G‚ÇÉ‚ÇÅ, realized as the  centralizer of a 4th  root of Œ¥¬≥‚Å∞ in the dual braid  monoid of E‚Çà; that is the fixed points of Œ¥ad¬π‚Åµ in the 2-divided category.\n\njulia> W=coxgroup(:E,8);M=DualBraidMonoid(W)\nDualBraidMonoid(E‚Çà,c=[1, 4, 6, 8, 3, 2, 5, 7])\n\njulia> s4=left_divisors(M,M.Œ¥,4); # simples of length 4\n\njulia> s=M(s4[findfirst(x->x*Œ¥ad(M,x,8)==M.Œ¥,s4)])#an object of 2-divided cat\n(1 8 17 35)\n\njulia> \"the right-lcms of the `Œ¥‚Å±`-orbits on `leftdescents(b)`\"\n       function satoms(b,i)\n         M=b.M\n         ld=M.atoms[leftdescents(b)]\n         di=Perm(ld,Œ¥ad.(Ref(M),ld,i))\n         if isnothing(di) error(b,\" is not Œ¥^$i-stable\") end\n         map(o->M(rightlcm(M,ld[o]...)),orbits(di,eachindex(ld)))\n       end\nsatoms\n\njulia> Category(x->satoms(x,15),s;action=(o,m)->inv(m)*o*Œ¥ad(m,8))\ncategory with 88 objects and 660 generating maps\n\n\n\n\n\n","category":"method"},{"location":"garside.html#Chevie.Garside.conjcat","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.conjcat","text":"conjcat(b[,F];ss=Val(:sc))\n\nreturns  the conjugacy category  of the summit  set of b  of the required type.\n\nBy default,  computes the  category of  sliding circuits  of b.\nIf ss==Val(:ss),  computes  the  super  summit  set.\nIf ss==Val(:cyc), computes the cyclic  conjugacy category.\nIf ss==Val(:inf) computes the category of all conjugate elements with same Inf as b.\n\nIf  an argument  F is  given it  should be  the Frobenius of a Reflection coset attached to b.M.W. Then the F-conjugacy category is returned.\n\njulia> W=coxgroup(:A,4)\nA‚ÇÑ\n\njulia> w=BraidMonoid(W)(4,3,3,2,1)\n43.321\n\njulia> C=conjcat(w)\ncategory with 2 objects and 4 generating maps\n\njulia> C.obj # the (sliding circuits) summit set\n2-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 32143\n 21324\n\njulia> xprint(C;graph=true)   # show the conjugations among the summit set\ncategory with 2 objects and 4 generating maps\n     32143      21343      21324      13214\n32143‚îÄ‚îÄ‚îÄ‚îÄ‚Üí 32143‚îÄ‚îÄ‚îÄ‚îÄ‚Üí 21324‚îÄ‚îÄ‚îÄ‚îÄ‚Üí 21324‚îÄ‚îÄ‚îÄ‚îÄ‚Üí 32143\n\njulia> conjcat(w;ss=Val(:ss)).obj # the super summit set\n4-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}}}:\n 32143\n 13243\n 21432\n 21324\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.endomorphisms","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.endomorphisms","text":"endomorphisms(C::Category,o) returns generators of the endomorphisms of C.obj[o]\n\njulia> W=coxsym(4);M=BraidMonoid(W)\nBraidMonoid(ùîñ ‚ÇÑ)\n\njulia> endomorphisms(conjcat(M(1,1,2,2,3)),1)\n2-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, CoxSym{Int16}}}}:\n 213.1232\n 12.213\n\n\n\n\n\n","category":"function"},{"location":"garside.html#GroupPresentations.Presentation-Tuple{GarsideMonoid}","page":"Garside monoids and groups, braids.","title":"GroupPresentations.Presentation","text":"Presentation(M::GarsideMonoid)\n\nreturns  a presentation of  the Garside group  defined by M  (as given in theorem 4.1 of Dehornoy-Paris 1999).\n\njulia> M=DualBraidMonoid(coxgroup(:A,3))\nDualBraidMonoid(A‚ÇÉ,c=[1, 3, 2])\n\njulia> p=Presentation(M)\nPresentation: 6 generators, 15 relators, total length 62\n\njulia> simplify(p)\n<< presentation with 3 generators, 4 relators of total length 26>>\n<< presentation with 3 generators, 3 relators of total length 16>>\n\njulia> display_balanced(p)\n1: ab=ba\n2: cac=aca\n3: cbc=bcb\n\n\n\n\n\n","category":"method"},{"location":"garside.html#Chevie.Garside.shrink","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.shrink","text":"shrink(l::Vector{<:GarsideElt})\n\nThe  list l  is a  list of  elements of  the same Garside group G. This function  tries to find  another set of  generators of the  subgroup of G generated by the elements of l, of smaller total length (the length being counted  as returned by the  function word). This can  be use to simplify the result of centralizer_gens, or other braid subgroups.\n\njulia> B=BraidMonoid(coxsym(3))\nBraidMonoid(ùîñ ‚ÇÉ)\n\njulia> b=[B(1)^3,B(2)^3,B(-2,-1,-1,2,2,2,2,1,1,2),B(1,1,1,2)]\n4-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, CoxSym{Int16}}}}:\n 1.1.1\n 2.2.2\n (1.12)‚Åª¬π2.2.2.21.12\n 1.1.12\n\njulia> shrink(b)\n2-element Vector{GarsideElt{Perm{Int16}, BraidMonoid{Perm{Int16}, CoxSym{Int16}}}}:\n 2\n 1\n\n\n\n\n\n","category":"function"},{"location":"garside.html#Chevie.Garside.CorranPicantinMonoid","page":"Garside monoids and groups, braids.","title":"Chevie.Garside.CorranPicantinMonoid","text":"CorranPicantinMonoid(e,n,k=1)\n\nreturns the interval monoid defined by G. Neaime, http://arxiv.org/abs/1707.06864,   which  generalizes  the  Corran-Picantin monoid for G(e,e,n).\n\nIn  this monoid Œ¥ has image  the element of G(e,e,n) corresponding to the  diagonal matrix whose  diagonal entries except  the first are equal to E(e)^k;  this  monoid  is  isomorphic  to  the Corran-Picantin monoid for G(e,e,n) when gcd(k,e)=1.\n\njulia> C=CorranPicantinMonoid(3,3)\nCorranPicantinMonoid(3,3,3)\n\njulia> word(C(C.Œ¥))\n6-element Vector{Int64}:\n 1\n 3\n 4\n 1\n 3\n 4\n\njulia> Matrix(C,C.Œ¥)\n3√ó3 Matrix{Cyc{Int64}}:\n Œ∂‚ÇÉ   0   0\n  0  Œ∂‚ÇÉ   0\n  0   0  Œ∂‚ÇÉ\n\njulia> b=C(1,2,3,4)^3\n1.2.341.2.341.2.34\n\njulia> Matrix(C,b[3])\n3√ó3 Matrix{Cyc{Int64}}:\n 0    0  Œ∂‚ÇÉ\n 0  Œ∂‚ÇÉ¬≤   0\n 1    0   0\n\n¬© July 2017 ‚Äì- Jean Michel and Georges Neaime\n\n\n\n\n\n","category":"function"},{"location":"gendec.html#Decomposition-Matrices","page":"Decomposition Matrices","title":"Decomposition Matrices","text":"","category":"section"},{"location":"gendec.html","page":"Decomposition Matrices","title":"Decomposition Matrices","text":"These functions interface with Thomas Breuer's package GenericDecMats","category":"page"},{"location":"gendec.html","page":"Decomposition Matrices","title":"Decomposition Matrices","text":"Pages=[\"gendec.md\"]","category":"page"},{"location":"gendec.html","page":"Decomposition Matrices","title":"Decomposition Matrices","text":"decomposition_matrix\ngeneric_decomposition_matrix\nInducedDecompositionMatrix","category":"page"},{"location":"gendec.html#Chevie.Chars.decomposition_matrix","page":"Decomposition Matrices","title":"Chevie.Chars.decomposition_matrix","text":"decomposition_matrix(W,p)\n\nThis provides an interface to some decomposition matrices for Weyl groups available in the Chevie library: those for E‚ÇÜ, E‚Çá, E‚Çà for p=2,3,5,7.\n\n\n\n\n\n","category":"function"},{"location":"gendec.html#GenericDecMats.generic_decomposition_matrix","page":"Decomposition Matrices","title":"GenericDecMats.generic_decomposition_matrix","text":"generic_decomposition_matrix(W,d)\n\nThis  function  obtains  the  Œ¶_d-decomposition  matrix for the reductive group  specified  by  the  Coxeter  group  or  coset  W  from the package GenericDecMats.\n\njulia> W=rootdatum(:psu,5)\npsu‚ÇÖ\n\njulia> generic_decomposition_matrix(W,13)\n!!! Œ¶-decomposition matrices available for ¬≤A‚ÇÑ: Œ¶‚ÇÅ‚ÇÄ Œ¶‚ÇÇ Œ¶‚ÇÑ Œ¶‚ÇÜ\n\njulia> generic_decomposition_matrix(W,10)\nŒ¶‚ÇÅ‚ÇÄ-decomposition matrix for psu‚ÇÖ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ      ‚îÇps 21 ps ps ps 2111 11111‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ2.    ‚îÇ 1  .  .  .  .    .     .‚îÇ\n‚îÇ¬≤A‚ÇÇ:2 ‚îÇ .  1  .  .  .    .     .‚îÇ\n‚îÇ11.   ‚îÇ .  .  1  .  .    .     .‚îÇ\n‚îÇ1.1   ‚îÇ 1  .  .  1  .    .     .‚îÇ\n‚îÇ.2    ‚îÇ .  .  .  .  1    .     .‚îÇ\n‚îÇ¬≤A‚ÇÇ:11‚îÇ .  1  .  .  .    1     .‚îÇ\n‚îÇ.11   ‚îÇ .  .  .  1  .    .     1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThe matrix itself is stored in the field .scalar of the returned struct.\n\n\n\n\n\n","category":"function"},{"location":"gendec.html#Chevie.InducedDecompositionMatrix","page":"Decomposition Matrices","title":"Chevie.InducedDecompositionMatrix","text":"InducedDecompositionMatrix(R,W,d)\n\nreturns the induced from the Levi L to the reductive group W of the generic Œ¶_d decomposition matrix of L.\n\njulia> W=rootdatum(:psu,6)\npsu‚ÇÜ\n\njulia> L=reflection_subgroup(W,[1,2,4,5])\npsu‚ÇÜ‚Çç‚ÇÅ‚ÇÇ‚ÇÑ‚ÇÖ‚Çé=(A‚ÇÇA‚ÇÇ)‚Çç‚ÇÅ‚ÇÇ‚ÇÑ‚ÇÉ‚ÇéŒ¶‚ÇÅ\n\njulia> InducedDecompositionMatrix(L,W,6)\nInduced Œ¶‚ÇÜ-decomposition matrix from psu‚ÇÜ‚Çç‚ÇÅ‚ÇÇ‚ÇÑ‚ÇÖ‚Çé=(A‚ÇÇA‚ÇÇ)‚Çç‚ÇÅ‚ÇÇ‚ÇÑ‚ÇÉ‚ÇéŒ¶‚ÇÅ to psu‚ÇÜ\n\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ    ‚îÇps ps A‚ÇÇ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ¬≤A‚ÇÖ ‚îÇ .  .  .‚îÇ\n‚îÇ.3  ‚îÇ 1  .  .‚îÇ\n‚îÇ3.  ‚îÇ 1  .  .‚îÇ\n‚îÇ.21 ‚îÇ 1  1  .‚îÇ\n‚îÇ1.2 ‚îÇ 2  1  .‚îÇ\n‚îÇ21. ‚îÇ 1  1  .‚îÇ\n‚îÇ2.1 ‚îÇ 2  1  .‚îÇ\n‚îÇ.111‚îÇ .  1  1‚îÇ\n‚îÇ111.‚îÇ .  1  1‚îÇ\n‚îÇ1.11‚îÇ 1  2  1‚îÇ\n‚îÇ11.1‚îÇ 1  2  1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThe matrix itself is stored in the field .scalar of the returned struct.\n\n\n\n\n\n","category":"type"},{"location":"coxgroups.html#Coxeter-groups","page":"Coxeter groups","title":"Coxeter groups","text":"","category":"section"},{"location":"coxgroups.html","page":"Coxeter groups","title":"Coxeter groups","text":"Pages=[\"coxgroups.md\"]","category":"page"},{"location":"coxgroups.html","page":"Coxeter groups","title":"Coxeter groups","text":"CoxGroups\nisleftdescent(::CoxSym,::Any,::Int)\nisrightdescent\nfirstleftdescent\nleftdescents(::CoxeterGroup,w)\nword(::CoxeterGroup,::Any)\nlength(::CoxeterGroup,w)\nlongest\nelements(::CoxeterGroup,::Int)\nPermGroups.Groups.words(::CoxeterGroup{T},::T) where T\nPermGroups.Groups.words(::CoxeterGroup)\nbruhatless\ncoxeter_matrix\ncartan(::AbstractMatrix)\ncoxeter_symmetric_group\nreflection_subgroup(::CoxSym,::AbstractVector{Int})\ncartan(::CoxSym)\ncoxeter_hyperoctaedral_group\nreflection_subgroup(::CoxHyp,::AbstractVector{Int})\nreduced\nstandard_parabolic_class\ncoxeter_group(::AbstractMatrix)\nPoset(::CoxeterGroup,w=longest(W))","category":"page"},{"location":"coxgroups.html#Chevie.CoxGroups","page":"Coxeter groups","title":"Chevie.CoxGroups","text":"A  suitable  reference  for  the  general  theory of Coxeter groups is, for example, Bourbaki \"Lie Groups and Lie Algebras\" chapter 4.\n\nA Coxeter group is a group which has the presentation W=S(st)^m(st)=1text  for  st  S  for some symmetric integer matrix m(s,t) called the Coxeter matrix, where m(s,t)>1 for s‚â†t and m(s,s)=1;  m(s,t)=‚àû is allowed meaning there is no relation between s and t. It is true (but a non-trivial theorem) that in a Coxeter group the order  of st is exactly  m(s,t), thus a Coxeter  group is the same as a Coxeter  system, that is a pair (W,S) of a group W and a set S‚äÇW of involutions,  such  that  the  group  is  presented  by  generators S and relations describing the order of the product of two elements of S.\n\nA   Coxeter   group   has   a   natural   representation,  its  reflection representation, on a real vector space V of dimension length(S) (which is  the  Coxeter  rank  of  W),  where  each  element  of  S  acts as a reflection;  the faithfulness of this representation (a theorem of Tits) is the main argument to prove that the order of st is exactly m(s,t). This representation  is defined as follows on a  space V with basis {e‚Çõ} for s‚àà  S. The cartan  matrix associated to  the Coxeter matrix m(s,t) is the matrix C with entries C(s,t)=-2cos(œÄ/m(s,t)); we set C(s,t)=-2 if m(s,t)=‚àû. Then the action of s‚àà S on V is given by s(e‚Çú)=e‚Çú-C(s,t)e‚Çõ.\n\nThus, Coxeter groups are  real reflection groups.  The converse need not be true  if the set of reflecting  hyperplanes has bad topological properties, but  it turns out  that finite Coxeter  groups are the  same as finite real reflection  groups. The possible Coxeter matrices for finite Coxeter groups have  been  completely  classified,  see  Weyl; the corresponding finite groups play a deep role in several areas of mathematics.\n\nCoxeter  groups  have  a  nice  solution  to the word problem. The length l(w)  of an element  w‚àà W is  the minimum number  of elements of S of which it is a product (since the elements of S are involutions, we do not need inverses). An expression of w of minimum length is called a reduced word  for w. The main property of  reduced words is the exchange lemma which  states that if s‚ÇÅ‚Ä¶s‚Çñ is a reduced word for w (thus k=l(w)) and s‚àà  S is such that l(sw)‚â§l(w) then one  of the s·µ¢ in the word for w can be deleted to obtain a reduced word for sw. Thus given s‚àà S and w‚àà W,  either l(sw)=l(w)+1 or l(sw)=l(w)-1 and  in the latter case we say that s belongs to the left descent set of w. Computing a reduced word for  an  element,  and  other  word  problems,  are  easy if we know how to multiply elements and know left descent sets. In each of the Coxeter groups that we implement, the left descent set is easy to compute (see for example coxeter_symmetric_group below), so this suggests how to deal with Coxeter groups generically:\n\nThe  type  CoxeterGroup  is  an  abstract  type;  an  actual struct which implements it must define a function\n\nisleftdescent(W,w,i) which tells whether the i-th element of S is in    the left descent set of w.\n\nthe other functions needed in an instance of a Coxeter group are\n\ngens(W) which returns the set S (the list of Coxeter generators)\nnref(W) which  returns the  number of  reflections of  W, if  W is  finite or nothing if W is infinite.\n\nIt  should  be  noted  that  a  Coxeter  group  can  be any kind of group implementing the above functions.\n\nBecause  of the  easy solution  of the  word problem  in Coxeter  groups, a convenient  way  to  represent  their  elements  is as words in the Coxeter generators,  that  is  lists  of  integers  in 1:length(S). The functions 'word'  and 'W(...)' do the conversion between Coxeter words and elements of the group.\n\nExamples\n\njulia> W=coxsym(4)\nùîñ ‚ÇÑ\n\njulia> p=W(1,3,2,1,3)\n(1,4)\n\njulia> word(W,p)\n5-element Vector{Int64}:\n 1\n 2\n 3\n 2\n 1\n\nWe  notice that the word we started with and the one that we ended up with, are  not the same, even though they  represent the same element of W. The reason  is that there are several reduced  words for an element of W. The function 'word' calculates a lexicographically smallest word for w. Below are some other possible computations using the same Coxeter group:\n\njulia> word(W,longest(W))  # the (unique) longest element in W\n6-element Vector{Int64}:\n 1\n 2\n 1\n 3\n 2\n 1\n\njulia> w0=longest(W)\n(1,4)(2,3)\n\njulia> length(W,w0)\n6\njulia> map(w->word(W,w),refls(W,1:nref(W)))\n6-element Vector{Vector{Int64}}:\n [1]\n [2]\n [3]\n [1, 2, 1]\n [2, 3, 2]\n [1, 2, 3, 2, 1]\njulia> [length(elements(W,i)) for i in 0:nref(W)]\n7-element Vector{Int64}:\n 1\n 3\n 5\n 6\n 5\n 3\n 1\n\nThe  last list tells us that there is 1 element of length 0, there are 6 of length 3, ‚Ä¶\n\nFor  most basic functions the convention is that the input is an element of the  group, rather than a  Coxeter word. The reason  for this is that for a Coxeter  group which is a permutation  group, using the low level functions for   permutations  is   usually  much   faster  than   manipulating  lists representing reduced expressions.\n\nThe only Coxeter group constructors implemented in this module are coxsym and  coxgroup; the last constructor takes  a Cartan matrix and builds the corresponding  Coxeter group as  a matrix group.  The module Weyl defines  other methods for coxgroup building  a finite Coxeter group as a permutation group, given its type.\n\n\n\n\n\n","category":"module"},{"location":"coxgroups.html#Chevie.CoxGroups.isleftdescent-Tuple{CoxSym, Any, Int64}","page":"Coxeter groups","title":"Chevie.CoxGroups.isleftdescent","text":"isleftdescent(W::CoxeterGroup,w,i::Integer)\n\nreturns  true iff the  i-th generating reflection  of the Coxeter group W  is in  the left  descent set  of the  element w  of W, that is iff length(W,W(i)*w)<length(W,w).\n\njulia> W=coxsym(3)\nùîñ ‚ÇÉ\n\njulia> isleftdescent(W,Perm(1,2),1)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#Chevie.CoxGroups.isrightdescent","page":"Coxeter groups","title":"Chevie.CoxGroups.isrightdescent","text":"isrightdescent(W::CoxeterGroup,w,i::Integer)\n\nreturns  true iff the  i-th generating reflection  of the Coxeter group W  is in the  right descent set  of the element  w of W,  that is iff length(W,w*W(i))<length(W,w).\n\njulia> W=coxsym(3)\nùîñ ‚ÇÉ\n\njulia> isrightdescent(W,Perm(1,2),1)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"coxgroups.html#Chevie.CoxGroups.firstleftdescent","page":"Coxeter groups","title":"Chevie.CoxGroups.firstleftdescent","text":"firstleftdescent(W,w)\n\nreturns the index in gens(W) of the first element of the left descent set of  w ‚Äì- that is, the first  i such that if s=W(i) then l(sw)<l(w). It returnsnothingforone(W)`.\n\njulia> W=coxsym(3)\nùîñ ‚ÇÉ\n\njulia> firstleftdescent(W,Perm(2,3))\n2\n\n\n\n\n\n","category":"function"},{"location":"coxgroups.html#Chevie.CoxGroups.leftdescents-Tuple{CoxeterGroup, Any}","page":"Coxeter groups","title":"Chevie.CoxGroups.leftdescents","text":"leftdescents(W,w)\n\nThe  left descents of the element w of the Coxeter group W, that is the set of i such that length(W,W(i)*w)<length(W,w).\n\njulia> W=coxsym(3)\nùîñ ‚ÇÉ\n\njulia> leftdescents(W,Perm(1,3))\n2-element Vector{Int64}:\n 1\n 2\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#PermGroups.Groups.word-Tuple{CoxeterGroup, Any}","page":"Coxeter groups","title":"PermGroups.Groups.word","text":"word(W::CoxeterGroup,w)\n\nreturns  a reduced word in the standard generators of the Coxeter group W for  the  element  w  (represented  as  the  vector  of the corresponding generator indices).\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> w=perm\"(1,11)(3,10)(4,9)(5,7)(6,12)\"\n(1,11)(3,10)(4,9)(5,7)(6,12)\n\njulia> w in W\ntrue\n\njulia> word(W,w)\n5-element Vector{Int64}:\n 1\n 2\n 3\n 2\n 1\n\nThe  result  of  ¬†word  is  the  lexicographically  smallest reduced word for w (for the ordering of the Coxeter generators given by gens(W)).\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#Base.length-Tuple{CoxeterGroup, Any}","page":"Coxeter groups","title":"Base.length","text":"length(W::CoxeterGroup ,w)\n\nreturns the length of a reduced expression in the Coxeter generators of the element w of W.\n\njulia> W=coxsym(4)\nùîñ ‚ÇÑ\n\njulia> p=W(1,2,3,1,2,3)\n(1,3)(2,4)\n\njulia> length(W,p)\n4\n\njulia> word(W,p)\n4-element Vector{Int64}:\n 2\n 1\n 3\n 2\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#Chevie.CoxGroups.longest","page":"Coxeter groups","title":"Chevie.CoxGroups.longest","text":"longest(W)\n\nIf  W is  finite, returns  the unique  element of  maximal length  of the Coxeter group W. May loop infinitely otherwise.\n\njulia> longest(coxsym(4))\n(1,4)(2,3)\n\nlongest(W,I)\n\nreturns  the longest element of the  parabolic subgroup of W generated by the generating reflections of indices in I.\n\njulia> longest(coxsym(4))\n(1,4)(2,3)\n\n\n\n\n\n","category":"function"},{"location":"coxgroups.html#PermGroups.Groups.elements-Tuple{CoxeterGroup, Int64}","page":"Coxeter groups","title":"PermGroups.Groups.elements","text":"elements(W::CoxeterGroup[,l])\n\nWhen  l is  not given  this works  only if  W is finite; it returns the elements of W sorted by increasing Coxeter length. If the second argument is an integer l, the elements of W of Coxeter length l are returned.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> e=elements(W,6)\n1-element Vector{Perm{Int16}}:\n (1,7)(2,8)(3,9)(4,10)(5,11)(6,12)\n\njulia> e[1]==longest(W)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#PermGroups.Groups.words-Union{Tuple{T}, Tuple{CoxeterGroup{T}, T}} where T","page":"Coxeter groups","title":"PermGroups.Groups.words","text":"words(W::CoxeterGroup,w)\n\nreturns  the list  of all  reduced expressions  of the  element w  of the Coxeter group W.\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> words(W,longest(W))\n16-element Vector{Vector{Int64}}:\n [1, 2, 1, 3, 2, 1]\n [1, 2, 3, 1, 2, 1]\n [1, 2, 3, 2, 1, 2]\n [1, 3, 2, 1, 3, 2]\n [1, 3, 2, 3, 1, 2]\n [2, 1, 2, 3, 2, 1]\n [2, 1, 3, 2, 1, 3]\n [2, 1, 3, 2, 3, 1]\n [2, 3, 1, 2, 1, 3]\n [2, 3, 1, 2, 3, 1]\n [2, 3, 2, 1, 2, 3]\n [3, 1, 2, 1, 3, 2]\n [3, 1, 2, 3, 1, 2]\n [3, 2, 1, 2, 3, 2]\n [3, 2, 1, 3, 2, 3]\n [3, 2, 3, 1, 2, 3]\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#PermGroups.Groups.words-Tuple{CoxeterGroup}","page":"Coxeter groups","title":"PermGroups.Groups.words","text":"words(W::CoxeterGroup[,l::Integer])\n\nWith  one argument this works only if W is finite; it returns the reduced Coxeter  words  of  elements  of  W  by  increasing length. If the second argument  is an integer l, only the  elements of length l are returned; this works for infinite Coxeter groups.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> e=elements(W,6)\n1-element Vector{Perm{Int16}}:\n (1,7)(2,8)(3,9)(4,10)(5,11)(6,12)\n\njulia> e[1]==longest(W)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#Chevie.CoxGroups.bruhatless","page":"Coxeter groups","title":"Chevie.CoxGroups.bruhatless","text":"bruhatless(W, x, y)\n\nwhether x‚â§y in the Bruhat order, for x,y‚àà W. We have x‚â§y if a reduced expression for x can be extracted from one for w. See (5.9) and (5.10) Humphreys1990 for properties of the Bruhat order.\n\njulia> W=coxgroup(:H,3)\nH‚ÇÉ\n\njulia> w=W(1,2,1,3);\n\njulia> b=filter(x->bruhatless(W,x,w),elements(W));\n\njulia> word.(Ref(W),b)\n12-element Vector{Vector{Int64}}:\n []\n [1]\n [2]\n [3]\n [1, 2]\n [2, 1]\n [1, 3]\n [2, 3]\n [1, 2, 1]\n [1, 2, 3]\n [2, 1, 3]\n [1, 2, 1, 3]\n\n\n\n\n\nbruhatless(W, y)\n\nreturns  a vector  whose i-th  element is  the vector  of elements of W smaller for the Bruhat order than w and of Coxeter length i-1. Thus the first  element  of  the  returned  list  contains  only  one(W)  and  the length(W,w)-th element contains only w.\n\njulia> W=coxsym(3)\nùîñ ‚ÇÉ\n\njulia> bruhatless(W,Perm(1,3))\n4-element Vector{Vector{Perm{Int16}}}:\n [()]\n [(1,2), (2,3)]\n [(1,2,3), (1,3,2)]\n [(1,3)]\n\nsee also Poset for Coxeter groups.\n\n\n\n\n\n","category":"function"},{"location":"coxgroups.html#Chevie.CoxGroups.coxeter_matrix","page":"Coxeter groups","title":"Chevie.CoxGroups.coxeter_matrix","text":"coxeter_matrix(m::AbstractMatrix) or coxmat\n\nreturns  the  Coxeter  matrix  of  the  Coxeter group defined by the cartan matrix m\n\njulia> C=cartan(:H,3)\n3√ó3 Matrix{Cyc{Int64}}:\n       2  Œ∂‚ÇÖ¬≤+Œ∂‚ÇÖ¬≥   0\n Œ∂‚ÇÖ¬≤+Œ∂‚ÇÖ¬≥        2  -1\n       0       -1   2\n\njulia> coxmat(C)\n3√ó3 Matrix{Int64}:\n 1  5  2\n 5  1  3\n 2  3  1\n\n\n\n\n\ncoxeter_matrix(W) or coxmat\n\nreturns the Coxeter matrix of the Coxeter group W, that is the matrix m whose  entry m[i,j] contains the order of W(i)*W(j) where W(i) is the i-th  Coxeter generator of  W. An infinite  order is represented by the entry 0.\n\njulia> W=coxsym(4)\nùîñ ‚ÇÑ\n\njulia> coxmat(W)\n3√ó3 Matrix{Int64}:\n 1  3  2\n 3  1  3\n 2  3  1\n\n\n\n\n\ncoxeter_matrix(type, rank [,bond]) or coxmat\n\nLike cartan, the function coxmat can be defined from the type and rank of a finite Coxeter group.\n\n\n\n\n\n","category":"function"},{"location":"coxgroups.html#Chevie.PermRoot.cartan-Tuple{AbstractMatrix}","page":"Coxeter groups","title":"Chevie.PermRoot.cartan","text":"cartan(M::AbstractMatrix) Cartan matrix from Coxeter matrix\n\nThe  argument should be the Coxeter matrix  M for a Coxeter group W and the   result  is  the  Cartan  Matrix   C  for  the  standard  reflection representation  of W. We have C[s,t]=-2cos(œÄ/M[s,t]), where M[s,s]==1 and  by  convention  œÄ/M[s,t]==0  if  M[s,t]==‚àû,  which we represent by M[s,t]==0.  Since  M  is  symmetric,  the  resulting  C is symmetric, meaning  that all roots  in the constructed  reflection representation have same length.\n\njulia> cartan([1 3;3 1])\n2√ó2 Matrix{Cyc{Int64}}:\n  2  -1\n -1   2\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#Chevie.CoxGroups.coxeter_symmetric_group","page":"Coxeter groups","title":"Chevie.CoxGroups.coxeter_symmetric_group","text":"coxeter_symmetric_group(n::Integer) or coxeter_symmetric_group(m:n) or coxsym(n) or coxsym(m:n)\n\nThe  symmetric group on the  letters 1:n (or if  a m‚â§n is given, on the letters  m:n)  as  a  Coxeter  group.  The  Coxeter  generators  are  the Perm(i,i+1) for i in m:n-1.\n\njulia> W=coxsym(3)\nùîñ ‚ÇÉ\n\njulia> gens(W)\n2-element Vector{Perm{Int16}}:\n (1,2)\n (2,3)\n\njulia> e=elements(W)\n6-element Vector{Perm{Int16}}:\n ()\n (1,2)\n (2,3)\n (1,3,2)\n (1,2,3)\n (1,3)\n\njulia> length.(Ref(W),e) # length in the genrators of the elements\n6-element Vector{Int64}:\n 0\n 1\n 1\n 2\n 2\n 3\n\n\n\n\n\n","category":"function"},{"location":"coxgroups.html#Chevie.PermRoot.reflection_subgroup-Tuple{CoxSym, AbstractVector{Int64}}","page":"Coxeter groups","title":"Chevie.PermRoot.reflection_subgroup","text":"reflection_subgroup(W::CoxSym,I)\n\nThe  only reflection subgroups defined for  coxsym(n) are for I=a:b for 1‚â§a‚â§b‚â§n\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#Chevie.PermRoot.cartan-Tuple{CoxSym}","page":"Coxeter groups","title":"Chevie.PermRoot.cartan","text":"cartan(W::CoxeterGroup)  The Cartan matrix of W.\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#Chevie.CoxGroups.coxeter_hyperoctaedral_group","page":"Coxeter groups","title":"Chevie.CoxGroups.coxeter_hyperoctaedral_group","text":"coxeter_hyperoctaedral_group(n)  or coxhyp(n)\n\nThe  Hyperoctaedral group (the group of all signed permutations of ¬±1,‚Ä¶,¬±n) as   a  Coxeter   group  of   type  B‚Çô,   with  generators  (1,-1)  and (i,i+1)(-i,-i-1).\n\njulia> elements(coxhyp(2))\n8-element Vector{SPerm{Int8}}:\n ()\n (1,2)\n (1,-1)\n (1,2,-1,-2)\n (1,-2,-1,2)\n (2,-2)\n (1,-2)\n (1,-1)(2,-2)\n\n\n\n\n\n","category":"function"},{"location":"coxgroups.html#Chevie.PermRoot.reflection_subgroup-Tuple{CoxHyp, AbstractVector{Int64}}","page":"Coxeter groups","title":"Chevie.PermRoot.reflection_subgroup","text":"reflection_subgroup(W::CoxHyp,I) is defined only for I=1:m for m‚â§ngens(W).\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#PermGroups.reduced","page":"Coxeter groups","title":"PermGroups.reduced","text":"reduced(W,w)\n\nThe  unique element of  minimal length in  the coset W.w.  This makes sense when  isleftdescent(W,u) makes sense for u‚àà  W.w which happens when w is  a Coxeter automorphism of W or  when w lives in a Coxeter overgroup of W.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> H=reflection_subgroup(W,[2,6])\nG‚ÇÇ‚Çç‚ÇÇ‚ÇÜ‚Çé=AÃÉ‚ÇÅ√óA‚ÇÅ\n\njulia> word.(Ref(W),unique(reduced.(Ref(H),elements(W))))\n3-element Vector{Vector{Int64}}:\n []\n [1]\n [1, 2]\n\n\n\n\n\nreduced(H::CoxeterGroup,W::CoxeterGroup,i=nref(W))\n\nThe  elements w‚àà W which are H-reduced, and of length ‚â§i (by default all of them), grouped by length.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> H=reflection_subgroup(W,[2,6])\nG‚ÇÇ‚Çç‚ÇÇ‚ÇÜ‚Çé=AÃÉ‚ÇÅ√óA‚ÇÅ\n\njulia> [word(W,w) for S in reduced(H,W) for w in S]\n3-element Vector{Vector{Int64}}:\n []\n [1]\n [1, 2]\n\n\n\n\n\n","category":"function"},{"location":"coxgroups.html#Chevie.CoxGroups.standard_parabolic_class","page":"Coxeter groups","title":"Chevie.CoxGroups.standard_parabolic_class","text":"standard_parabolic_class(W,I)\n\nI  should be a  subset of eachindex(gens(W)).  The function returns the list of such subsets W-conjugate to I.\n\njulia> CoxGroups.standard_parabolic_class(coxgroup(:E,8),[7,8])\n7-element Vector{Vector{Int64}}:\n [7, 8]\n [6, 7]\n [5, 6]\n [4, 5]\n [2, 4]\n [3, 4]\n [1, 3]\n\n\n\n\n\n","category":"function"},{"location":"coxgroups.html#Chevie.CoxGroups.coxeter_group-Tuple{AbstractMatrix}","page":"Coxeter groups","title":"Chevie.CoxGroups.coxeter_group","text":"coxeter_group(m) or coxgroup(m)\n\nm  should be a square  matrix of real cyclotomic  numbers. It returns the Coxeter  group  whose  Cartan  matrix  is  m.  This is a matrix group W constructed  as  follows.  Let  V  be  a  real  vector space of dimension size(m,1), let e·µ¢ be the canonical basis of V. Then W is the matrix group generated by the reflections s·µ¢(e‚±º)=e‚±º-m·µ¢‚±º e·µ¢.\n\njulia> W=coxgroup([2 -2;-2 2])\ncoxeter_group([2 -2; -2 2])\n\nAbove is a way to construct the affine Weyl group  AÃÉ‚ÇÅ.\n\n\n\n\n\n","category":"method"},{"location":"coxgroups.html#FinitePosets.Poset","page":"Coxeter groups","title":"FinitePosets.Poset","text":"Poset(W::CoxeterGroup,w=longest(W))\n\nreturns  as a poset the Bruhat interval [1,w]of W. If w is not given, the whole Bruhat Poset of W is returned (W must then be finite).\n\njulia> W=coxsym(3)\nùîñ ‚ÇÉ\n\njulia> Poset(W)\n.<1,2<21,12<121\n\nThe  above  poset  is  constructed  efficiently  by  constructing the Hasse diagram, but it could be constructed naively as follows:\n\njulia> p=Poset((x,y)->bruhatless(W,x,y),elements(W))\n()<(1,2),(2,3)<(1,3,2),(1,2,3)<(1,3)\n\nThe  output is not so nice, showing permutations instead of words. This can be fixed by defining:\n\njulia> p.show_element=(io,x,n)->join(io,word(W,x.elements[n]));\n\njulia> p\n<1,2<12,21<121\n\njulia> W=coxsym(4)\nùîñ ‚ÇÑ\n\njulia> Poset(W,W(1,3))\n.<3,1<13\n\n\n\n\n\n","category":"type"},{"location":"nf.html#Number-fields","page":"Number fields","title":"Number fields","text":"","category":"section"},{"location":"nf.html","page":"Number fields","title":"Number fields","text":"Pages=[\"nf.md\"]","category":"page"},{"location":"nf.html","page":"Number fields","title":"Number fields","text":"Nf\nNF\nCF\nAut\ngalois(::Nf.NumberField)","category":"page"},{"location":"nf.html#Chevie.Nf","page":"Number fields","title":"Chevie.Nf","text":"Number  fields are the finite extensions of  ‚Ñö. The only ones that we can handle  at the  moment are  subfields of  cyclotomic fields,  that is whose elements  are Cycs; they are also  characterized as the number fields K such  that Gal(K/‚Ñö) is abelian.  For example, ‚Ñö (‚àö5)  is a number field that is not cyclotomic but contained in the cyclotomic field ‚Ñö (Œ∂‚ÇÖ).\n\nThe default constructor for a number field takes some numbers as arguments and constructs the smallest number field containing its arguments.\n\njulia> F=NF(E(5)) # the full cyclotomic field prints as CF\nCF(5)\n\njulia> K=NF(root(5)) # a subfield\nNF(5,-1‚ÇÖ)\n\njulia> conductor(K) # smallest n such that K is a subfield of CF(n)\n5\n\njulia> E(5)+E(5,-1) in NF(root(5)) # test if an element is in the subfield\ntrue\n\nA  number  field  K  is  printed  by  given the conductor of the smallest cyclotomic field F containing it, and generators of the stabilizer of K in  the galois group  of F. Above  NF(5,-1‚ÇÖ) represents the subfield of CF(5) stable by complex conjugacy.\n\njulia> elements(galois(F))\n4-element Vector{Chevie.Nf.NFAut}:\n Aut(CF(5),1‚ÇÖ)\n Aut(CF(5),2‚ÇÖ)\n Aut(CF(5),-1‚ÇÖ)\n Aut(CF(5),-2‚ÇÖ)\n\nThe  element of the galois  group of CF(5) printed  -2‚ÇÖ acts by raising the  fifth roots of  unity to the  power -2. Thus  -1‚ÇÖ represents complex conjugacy.\n\njulia> NF(root(3),root(5)) # here the stabilizer needs 2 generators\nNF(60,-11‚ÇÜ‚ÇÄ,-1‚ÇÜ‚ÇÄ)\n\n\n\n\n\n","category":"module"},{"location":"nf.html#Chevie.Nf.NF","page":"Number fields","title":"Chevie.Nf.NF","text":"NF(gens...) or NF(gens::AbstractVector)\n\nreturns the smallest number field containing the elements gens, which may be Cyc, Root1, Integer or Rational{<:Integer}.\n\njulia> NF(E(3),root(5))\nNF(15,4‚ÇÅ‚ÇÖ)\n\njulia> NF([E(3),root(5)])\nNF(15,4‚ÇÅ‚ÇÖ)\n\n\n\n\n\nNF(N::Integer, stab::Group{<:Mod}) fixed  field of the  subgroup stab of  galois(CF(N)) in CF(N). stab should not inject in the multiplicative group of a proper divisor of N.\n\n\n\n\n\n","category":"function"},{"location":"nf.html#Chevie.Nf.CF","page":"Number fields","title":"Chevie.Nf.CF","text":"CF(N::Integer) the cyclotomic field generated by the N-th roots of unity.\n\n\n\n\n\n","category":"function"},{"location":"nf.html#Chevie.Nf.Aut","page":"Number fields","title":"Chevie.Nf.Aut","text":"Aut(F::NumberField,k::Union{Integer,Mod})\n\nThe  Galois  automorphism  œÉ‚Çñ  of  the  cyclotomic field CF(n) raises n-th  roots of unity to the power k; it exists for k prime to n. If F  is a subfield of CF(n), the elements of the orbit of œÉ‚Çñ modulo the stabilizer of F in the Galois group galois(CF(n)) have same restriction to F. An automorphism of F is represented by a canonical representative œÉ‚Çó of this orbit. This is the result of Aut(F,k). The number k can be given as an integer or as Mod(k,n).\n\njulia> F=NF(root(5))\nNF(5,-1‚ÇÖ)\n\njulia> s=Aut(F,3)\nAut(NF(5,-1‚ÇÖ),2‚ÇÖ)\n\njulia> root(5)^s # action of s on a Cyc\nCyc{Int64}: -‚àö5\n\n\n\n\n\n","category":"function"},{"location":"nf.html#CyclotomicNumbers.galois-Tuple{Chevie.Nf.NumberField}","page":"Number fields","title":"CyclotomicNumbers.galois","text":"galois(F::NumberField) Galois group of F over ‚Ñö\n\nthe  Galois group of F, a number  field of conductor n, is the quotient of  the Galois  group of  CF(n), isomorphic  to the  multiplicative group (‚Ñ§/n)À£,  by  the  stabilizer  of  F.  It  is given as a group of Galois automorphisms (see Aut).\n\njulia> K=CF(5)\nCF(5)\n\njulia> F=NF(root(5))\nNF(5,-1‚ÇÖ)\n\njulia> galois(K)\nGroup(Chevie.Nf.NFAut[Aut(CF(5),2‚ÇÖ)])\n\njulia> elements(galois(K))\n4-element Vector{Chevie.Nf.NFAut}:\n Aut(CF(5),1‚ÇÖ)\n Aut(CF(5),2‚ÇÖ)\n Aut(CF(5),-1‚ÇÖ)\n Aut(CF(5),-2‚ÇÖ)\n\njulia> elements(galois(F))\n2-element Vector{Chevie.Nf.NFAut}:\n Aut(NF(5,-1‚ÇÖ),1‚ÇÖ)\n Aut(NF(5,-1‚ÇÖ),2‚ÇÖ)\n\n\n\n\n\n","category":"method"},{"location":"dseries.html#d-Harish-Chandra-series","page":"d-Harish-Chandra series","title":"d-Harish-Chandra series","text":"","category":"section"},{"location":"dseries.html","page":"d-Harish-Chandra series","title":"d-Harish-Chandra series","text":"Pages=[\"dseries.md\"]","category":"page"},{"location":"dseries.html","page":"d-Harish-Chandra series","title":"d-Harish-Chandra series","text":"dSeries\ncuspidal_data\nSeries\nennola","category":"page"},{"location":"dseries.html#Chevie.dSeries","page":"d-Harish-Chandra series","title":"Chevie.dSeries","text":"d-Harish-Chandra   series  describe  unipotent  l-blocks  of  a  finite reductive  group ùêÜ(ùîΩ_q) for lŒ¶_d(q) (at least, when l is not too small which means mostly not a bad prime for ùêÜ). Some of the facts stated below  are still partly conjectural, we do not try to distinguish precisely what has been established and what is still conjectural.\n\nIf  (ùêã,Œª) is  a d-cuspidal  pair then  the constituents  of the Lusztig induced  R_ùêã^ùêÜ(Œª) are called a d-Harish-Chandra series; they form the unipotent part of an l-block of ùêÜ^F. It is conjectured (and proven in some   cases)  that  the  ùêÜ^F-endomorphism   algebra  of  the  l-adic cohomology  of the  variety ùêó  which defines  the Lusztig  induction is a d-cyclotomic Hecke algebra H_ùêÜ(ùêãŒª) for the group W_ùêÜ(ùêãŒª)=N_ùêÜ(ùêãŒª)ùêã,  which  is  a  complex  reflection group ‚Äì- here d-cyclotomic  means that the parameters  of H_ùêÜ(ùêãŒª) are monomials in q  and that H_ùêÜ(ùêãŒª)  specializes to the  algebra of W_ùêÜ(ùêãŒª) for qŒ∂_d.\n\nIt  follows that the decomposition of the  Lusztig induction is of the form R_ùêã^ùêÜ(Œª)=_œïIrr(W_ùêÜ(ùêãŒª))(-1)^n·µ© œï(1)Œ≥·µ© where Œ≥·µ© is a unipotent character   of  ùêÜ^F  attached  to  œï  and  where  n·µ©  is  the  degree H^n·µ©_c(ùêó)  where  Œ≥·µ©  occurss;  and  further  for  any  œï we have R_ùêã^ùêÜ(Œª)(1)=  (-1)^n·µ© Œ≥·µ©(1)S·µ© where S·µ© is  the Schur element of the character  of  H_ùêÜ(ùêãŒª)  which  deforms  to  œï. The function |Series| allows to explore a d-Harish-Chandra series.\n\njulia> W=rootdatum(\"3D4\")\n¬≥D‚ÇÑ\n\njulia> l=cuspidal_data(W,3)\n2-element Vector{@NamedTuple{levi::Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}, cuspidal::Int64, d::Root1}}:\n (levi = ¬≥D‚ÇÑ, cuspidal = 8, d = Œ∂‚ÇÉ)\n (levi = ¬≥D‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÉ¬≤, cuspidal = 1, d = Œ∂‚ÇÉ)\n\njulia> Series(W,l[2]...)\nŒ∂‚ÇÉ-series R^¬≥D‚ÇÑ_{¬≥D‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÉ¬≤}(Œª==Id)  H_G(L,Œª)==hecke(G‚ÇÑ,Vector{Mvp{Cyc{Int64}, Int64}}[[Œ∂‚ÇÉq¬≤, Œ∂‚ÇÉ, Œ∂‚ÇÉq]])\n‚îå‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚îÇ    Œ≥·µ©    œÜ  Œµ family #‚îÇ\n‚îú‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1‚îÇ  œÜ‚ÇÅ‚Äö‚ÇÄ œÜ‚ÇÅ‚Äö‚ÇÄ  1        1‚îÇ\n‚îÇ2‚îÇ  œÜ‚ÇÅ‚Äö‚ÇÜ œÜ‚ÇÅ‚Äö‚ÇÑ  1        2‚îÇ\n‚îÇ3‚îÇ  œÜ‚ÇÇ‚Äö‚ÇÇ œÜ‚ÇÅ‚Äö‚Çà -1        5‚îÇ\n‚îÇ6‚îÇ œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ œÜ‚ÇÇ‚Äö‚ÇÖ  1        4‚îÇ\n‚îÇ5‚îÇ œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ œÜ‚ÇÇ‚Äö‚ÇÉ -1        3‚îÇ\n‚îÇ7‚îÇ  œÜ‚ÇÇ‚Äö‚ÇÅ œÜ‚ÇÇ‚Äö‚ÇÅ -1        5‚îÇ\n‚îÇ4‚îÇ¬≥D‚ÇÑ[1] œÜ‚ÇÉ‚Äö‚ÇÇ  1        5‚îÇ\n‚îî‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nAbove  we explore the 3-series corresponding  to R_ùêì^ùêÜ(Id) where ùêÜ is the  triality group  and ùêì  is the  torus of  type (q¬≤+q+1)¬≤. The group W_ùêÜ(ùêì)  is the complex reflection group G‚ÇÑ. The displays shows in the column   'Œ≥·µ©'  the  name  of   the  unipotent  characters  constituents  of R_ùêì^ùêÜ(Id),  and in the  first column the  number of these characters in the  list  of  unipotent  characters.  In  the  column  'œÜ' the name of the character  of W_ùêÜ(ùêì) corresponding  to the unipotent  character Œ≥·µ© is shown;  in the column  'Œµ' we show  the sign (-1)^n·µ©.  Finally in the last column we show in which family of unipotent characters is Œ≥·µ©.\n\nThe theory of d-Harish-Chandra series can be generalized to spetsial complex reflection groups using some axioms. We show below an example.\n\njulia> W=complex_reflection_group(4)\nG‚ÇÑ\n\njulia> l=cuspidal_data(W,3)\n5-element Vector{@NamedTuple{levi::Spets{PRSG{Cyc{Rational{Int64}}, Int16}}, cuspidal::Int64, d::Root1}}:\n (levi = G‚ÇÑ, cuspidal = 3, d = Œ∂‚ÇÉ)\n (levi = G‚ÇÑ, cuspidal = 6, d = Œ∂‚ÇÉ)\n (levi = G‚ÇÑ, cuspidal = 7, d = Œ∂‚ÇÉ)\n (levi = G‚ÇÑ, cuspidal = 10, d = Œ∂‚ÇÉ)\n (levi = G‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚Ä≤‚ÇÉ, cuspidal = 1, d = Œ∂‚ÇÉ)\n\njulia> Series(W,l[5]...)\nŒ∂‚ÇÉ-series R^G‚ÇÑ_{G‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚Ä≤‚ÇÉ}(Œª==Id)  W_G(L,Œª)==Z‚ÇÜ\n‚îå‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚îÇ   Œ≥·µ© œÜ(mod 3)  Œµ parameter family #‚îÇ\n‚îú‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1‚îÇ œÜ‚ÇÅ‚Äö‚ÇÄ        1  1      Œ∂‚ÇÉq¬≤        1‚îÇ\n‚îÇ5‚îÇ œÜ‚ÇÇ‚Äö‚ÇÉ       Œ∂‚ÇÜ  1      -Œ∂‚ÇÉq        2‚îÇ\n‚îÇ2‚îÇ œÜ‚ÇÅ‚Äö‚ÇÑ       Œ∂‚ÇÉ -1        Œ∂‚ÇÉ        4‚îÇ\n‚îÇ8‚îÇ Z‚ÇÉ:2       -1 -1     -Œ∂‚ÇÉ¬≤q        2‚îÇ\n‚îÇ9‚îÇZ‚ÇÉ:11      Œ∂‚ÇÉ¬≤ -1       Œ∂‚ÇÉ¬≤        4‚îÇ\n‚îÇ4‚îÇ œÜ‚ÇÇ‚Äö‚ÇÖ      Œ∂‚ÇÜ‚Åµ -1       -Œ∂‚ÇÉ        4‚îÇ\n‚îî‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nAbove  we explore the 3-series corresponding  to the trivial character of the  torus of type (q-1)(q-Œ∂‚ÇÉ). For cyclic groups W_ùêÜ(ùêãŒª) we display the  parameters in  the table  since they  are associated  to characters of W_ùêÜ(ùêãŒª). Finally the mention '(mod 3)' which appears in the 'œÜ' column means that in this case the axioms leave an ambiguity in the correspondence between  unipotent  characters  Œ≥·µ©  and  characters  œï (as well as with parameters):  the correspondence is known only up to a translation by 3 (in this case, the same as a global multiplication of all œï by -1).\n\nFinally,  we should note that  if the reflection group  or coset W is not defined  over the integers,  what counts is  not cyclotomic polynomials but factors  of them  over the  field of  definition of  W. In this case, one should not give as argument an integer d representing Œ∂_d but specify a  root of unity. For instance, in the above case we get a different answer with:\n\njulia> cuspidal_data(W,E(3,2))\n5-element Vector{@NamedTuple{levi::Spets{PRSG{Cyc{Rational{Int64}}, Int16}}, cuspidal::Int64, d::Root1}}:\n (levi = G‚ÇÑ, cuspidal = 2, d = Œ∂‚ÇÉ¬≤)\n (levi = G‚ÇÑ, cuspidal = 5, d = Œ∂‚ÇÉ¬≤)\n (levi = G‚ÇÑ, cuspidal = 7, d = Œ∂‚ÇÉ¬≤)\n (levi = G‚ÇÑ, cuspidal = 10, d = Œ∂‚ÇÉ¬≤)\n (levi = G‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚Ä≥‚ÇÉ, cuspidal = 1, d = Œ∂‚ÇÉ¬≤)\n\n\n\n\n\n","category":"module"},{"location":"dseries.html#Chevie.Uch.cuspidal_data","page":"d-Harish-Chandra series","title":"Chevie.Uch.cuspidal_data","text":"cuspidal_data(W[,d[,ad]];proper=false,all=false)\n\nreturns  named tuples (levi=LF,cuspidal=Œª,d=d) where  LF is a d-split Levi  (with d-center  of dimension  ad if  ad is  given) and Œª is a d-cuspidal  character of  LF. If  d=1 this  returns ordinary cuspidal characters.  The  character  Œª  is  given  as  its  index  in the list of unipotent  characters. If d was given as  an integer, it is returned as a Root1 representing E(d).\n\nIf  the keyword  proper=true is  given, only  the data  where LF!=W (or equivalently ad>0) are returned.\n\nIf  d is omitted, data  for all d orders  of eigenvalues of elements of W  is returned. If in addition  the keyword argument all=true is given, data for all eigenvalues of elements of W is returned.\n\njulia> cuspidal_data(coxgroup(:F,4),1)\n9-element Vector{@NamedTuple{levi::Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}, cuspidal::Int64, d::Root1}}:\n (levi = F‚ÇÑ, cuspidal = 31, d = 1)\n (levi = F‚ÇÑ, cuspidal = 32, d = 1)\n (levi = F‚ÇÑ, cuspidal = 33, d = 1)\n (levi = F‚ÇÑ, cuspidal = 34, d = 1)\n (levi = F‚ÇÑ, cuspidal = 35, d = 1)\n (levi = F‚ÇÑ, cuspidal = 36, d = 1)\n (levi = F‚ÇÑ, cuspidal = 37, d = 1)\n (levi = F‚ÇÑ‚Çç‚ÇÇ‚ÇÉ‚Çé=B‚ÇÇ‚Çç‚ÇÇ‚ÇÅ‚ÇéŒ¶‚ÇÅ¬≤, cuspidal = 6, d = 1)\n (levi = F‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÅ‚Å¥, cuspidal = 1, d = 1)\n\njulia> cuspidal_data(complex_reflection_group(4),3)\n5-element Vector{@NamedTuple{levi::Spets{PRSG{Cyc{Rational{Int64}}, Int16}}, cuspidal::Int64, d::Root1}}:\n (levi = G‚ÇÑ, cuspidal = 3, d = Œ∂‚ÇÉ)\n (levi = G‚ÇÑ, cuspidal = 6, d = Œ∂‚ÇÉ)\n (levi = G‚ÇÑ, cuspidal = 7, d = Œ∂‚ÇÉ)\n (levi = G‚ÇÑ, cuspidal = 10, d = Œ∂‚ÇÉ)\n (levi = G‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚Ä≤‚ÇÉ, cuspidal = 1, d = Œ∂‚ÇÉ)\n\n\n\n\n\n","category":"function"},{"location":"dseries.html#Chevie.dSeries.Series","page":"d-Harish-Chandra series","title":"Chevie.dSeries.Series","text":"Series(W, L, cuspidal, d)\n\nIf the reflection coset or group W corresponds to the algebraic group ùêÜ and  cuspidal  to  the  d-cuspidal  unipotent  character  Œª  of  ùêã, constructs  the d-series corresponding to R_ùêã^ùêÜ(Œª). The result s it is a record with the following fields and functions:\n\ns.spets: the reflection group or coset W.\n\ns.levi: the subcoset L.\n\ns.cuspidal: the index of Œª in UnipotentCharacters(L).\n\ns.d: the value of d (a Root1).\n\nrelative_group(s): the group W_ùêÜ(ùêãŒª).\n\ndSeries.RLG(s): the UnipotentCharacter given by R_ùêã^ùêÜ(Œª).\n\ndSeries.eps(s):  for each  character œÜ  of relative_group(s) the sign (-1)^n_œÜ  in the cohomology  of the variety  defining RLG(s) of the corresponding constituent Œ≥·µ© of RLG(s).\n\ndegree(s): the generic degree of RLG(s), as a CycPol.\n\ncharnumbers(s):  the indices in  UnipotentCharacters(W) of the constituents of RLG(s).\n\nhecke(s): the hecke algebra H_ùêÜ(ùêãŒª).\n\nThe function Series has another form:\n\nSeries(<W> [,<d> [,<ad>]];k...)\n\nwhere  it returns a  vector of Series  corresponding to the cuspidal data described   by  the   arguments  and   the  keywords   (see  the  help  for cuspidal_data).\n\njulia> W=complex_reflection_group(4)\nG‚ÇÑ\n\njulia> Series(W,3;proper=true)\n1-element Vector{Series}:\n Œ∂‚ÇÉ-series R^G‚ÇÑ_{G‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚Ä≤‚ÇÉ}(Œª==Id)  W_G(L,Œª)==Z‚ÇÜ\n\njulia> s=Series(W,3,1)[1]\nŒ∂‚ÇÉ-series R^G‚ÇÑ_{G‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚Ä≤‚ÇÉ}(Œª==Id)  W_G(L,Œª)==Z‚ÇÜ\n‚îå‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚îÇ   Œ≥·µ© œÜ(mod 3)  Œµ parameter family #‚îÇ\n‚îú‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1‚îÇ œÜ‚ÇÅ‚Äö‚ÇÄ        1  1      Œ∂‚ÇÉq¬≤        1‚îÇ\n‚îÇ5‚îÇ œÜ‚ÇÇ‚Äö‚ÇÉ       Œ∂‚ÇÜ  1      -Œ∂‚ÇÉq        2‚îÇ\n‚îÇ2‚îÇ œÜ‚ÇÅ‚Äö‚ÇÑ       Œ∂‚ÇÉ -1        Œ∂‚ÇÉ        4‚îÇ\n‚îÇ8‚îÇ Z‚ÇÉ:2       -1 -1     -Œ∂‚ÇÉ¬≤q        2‚îÇ\n‚îÇ9‚îÇZ‚ÇÉ:11      Œ∂‚ÇÉ¬≤ -1       Œ∂‚ÇÉ¬≤        4‚îÇ\n‚îÇ4‚îÇ œÜ‚ÇÇ‚Äö‚ÇÖ      Œ∂‚ÇÜ‚Åµ -1       -Œ∂‚ÇÉ        4‚îÇ\n‚îî‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> s.spets\nG‚ÇÑ\n\njulia> s.levi\nG‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚Ä≤‚ÇÉ\n\njulia> s.cuspidal\n1\n\njulia> s.d\nRoot1: Œ∂‚ÇÉ\n\njulia> hecke(s)\nhecke(G‚ÇÜ‚Äö‚ÇÅ‚Äö‚ÇÅ,Vector{Mvp{Cyc{Int64}, Int64}}[[Œ∂‚ÇÉq¬≤, -Œ∂‚ÇÉq, Œ∂‚ÇÉ, -Œ∂‚ÇÉ¬≤q, Œ∂‚ÇÉ¬≤, -Œ∂‚ÇÉ]])\n\njulia> degree(s)\nŒ∂‚ÇÉŒ¶‚ÇÅŒ¶‚ÇÇ¬≤Œ¶‚Ä≥‚ÇÉŒ¶‚ÇÑŒ¶‚ÇÜ\n\njulia> dSeries.RLG(s)\n[G‚ÇÑ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>-<œÜ‚ÇÅ‚Äö‚ÇÑ>-<œÜ‚ÇÇ‚Äö‚ÇÖ>+<œÜ‚ÇÇ‚Äö‚ÇÉ>-<Z‚ÇÉ:2>-<Z‚ÇÉ:11>\n\njulia> charnumbers(s)\n6-element Vector{Int64}:\n 1\n 5\n 2\n 8\n 9\n 4\n\njulia> dSeries.eps(s)\n6-element Vector{Int64}:\n  1\n  1\n -1\n -1\n -1\n -1\n\njulia> relative_group(s)\nG‚ÇÜ‚Äö‚ÇÅ‚Äö‚ÇÅ\n\n\n\n\n\n","category":"type"},{"location":"dseries.html#Chevie.dSeries.ennola","page":"d-Harish-Chandra series","title":"Chevie.dSeries.ennola","text":"ennola(W[,z=E(gcd(degrees(W)))])\n\nLet  W be an irreducible spetsial reflection  group or coset, and z the generator of the center of W, viewed as the root of unity E(gcd(degrees(W)))]).  Let ùîæ be  the spets attached  to W. A property checked  case-by case is  that, for a  unipotent character Œ≥  of ùîæ with polynomial generic degree deg Œ≥(q) , deg Œ≥(zq) is equal to ¬±deg Œ≥'(q) for  another unipotent character Œ≥'; ¬±Œ≥' is called the Ennola transform of Œ≥. For W a Weyl group, the spets ùîæ is a finite reductive group, in which  case z=-1  if -1  is in  W and  z=1 otherwise.  The function returns  the  signed  permutation  e  done  by  ennola on the unipotent degrees (as an SPerm of 1:length(UnipotentCharacters(W))).\n\nThe SPerm e is not uniquely determined by the degrees since two degrees may  be equal, but is uniquely determined by some additional axioms that we do not recall here (they include a description of the Ennola-permutation in terms of the Z-based rings attached to each Lusztig family).\n\nIf  a second argument z is given, it should be a power of the default z and the corresponding power of e is returned.\n\njulia> ennola(rootdatum(\"3D4\"))\nSPerm{Int64}: (3,-4)(5,-5)(6,-6)(7,-8)\n\njulia> ennola(complex_reflection_group(14))\nSPerm{Int64}: (2,43,-14,16,41,34)(3,35,40,18,-11,42)(4,-37,25,-17,-26,-36)(5,-6,-79)(7,-7)(8,-74)(9,-73)(10,-52,13,31,-50,29)(12,53,15,32,-51,-30)(19,71,70,21,67,68,20,69,72)(22,-39,27,-33,-28,-38)(23,24,-66,-23,-24,66)(44,46,49,-44,-46,-49)(45,48,47,-45,-48,-47)(54,-63,-55,-57,62,-56)(58,-65,-59,-61,64,-60)(75,-77)(76,-76)(78,-78)\n\n\nThe  above example shows  that it may  happen that the  order of z-Ennola (here 18) is greater than the order of z (here 6); this is related to the presence  of irrationalities  q‚Öì in  the character  table of the spetsial Hecke algebra of W.\n\nFor a non-irreducible group, z-ennola is defined if z can be considered an element of the the centre of each irreducible component.\n\n\n\n\n\n","category":"function"},{"location":"sscoset.html#Non-connected-reductive-groups","page":"Non-connected reductive groups","title":"Non-connected reductive groups","text":"","category":"section"},{"location":"sscoset.html","page":"Non-connected reductive groups","title":"Non-connected reductive groups","text":"Pages=[\"sscoset.md\"]","category":"page"},{"location":"sscoset.html","page":"Non-connected reductive groups","title":"Non-connected reductive groups","text":"Sscoset\ncentralizer(::Spets,::SemisimpleElement{Root1})\nquasi_isolated_reps(::Spets)\nisisolated(::Spets,::SemisimpleElement{Root1})","category":"page"},{"location":"sscoset.html#Chevie.Sscoset","page":"Non-connected reductive groups","title":"Chevie.Sscoset","text":"Quasi-Semisimple elements of non-connected reductive groups\n\nWe also use Coxeter cosets to represented non-connected reductive groups of the  form ùêÜ ‚ãä œÉ where  ùêÜ is a connected  reductive group and œÉ is an algebraic automorphism of ùêÜ; more specifically to represent the coset ùêÜ .œÉ.  We may always  choose œÉ‚àà ùêÜ  ‚ãÖœÉ quasi-semisimple, which means that œÉ  preserves a pair ùêì ‚äÇ ùêÅ of a maximal torus and a Borel subgroup of ùêÜ,  and further  quasi-central, which  means that  the Weyl group of C_ùêÜ (œÉ)  is W^œÉ. Then  œÉ defines an  automorphism F_0 of  the root datum (X(ùêì ), Œ¶, Y(ùêì ), Œ¶^‚à®), thus a Coxeter coset. We refer to Digne-Michel2018 for details.\n\nWe  have  extended  the  functions  for  semi-simple  elements to work with quasi-semisimple elements tœÉ‚àà ùêì ‚ãÖœÉ. Here, as in Digne-Michel2018,  œÉ  is  a  quasi-central  automorphism uniquely   defined  by  a  diagram  automorphism  of  (W,S),  taking  œÉ symplectic in type A‚ÇÇ‚Çô.\n\nHere are some examples:\n\njulia> WF=rootdatum(:u,6)\nu‚ÇÜ\n\nWe  can  see  WF  as  the  coset  GL‚ÇÜ‚ãÖœÉ  where  œÉ  is the composed of transpose, inverse and the longest element of W.\n\njulia> l=quasi_isolated_reps(WF)\n4-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <Œ∂‚ÇÑ,Œ∂‚ÇÑ,Œ∂‚ÇÑ,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÑ¬≥>\n <Œ∂‚ÇÑ,Œ∂‚ÇÑ,1,1,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÑ¬≥>\n <Œ∂‚ÇÑ,1,1,1,1,Œ∂‚ÇÑ¬≥>\n\nwe  define an element tœÉ‚àà ùêì ‚ãÖœÉ to  be quasi-isolated if the Weyl group of C_ùêÜ  (tœÉ)  is  not  in  any  proper  parabolic  subgroup  of  W^œÉ. This generalizes  the  definition  for  connected  groups.  The  above shows the elements  t  where  tœÉ  runs  over  representatives  of  quasi-isolated quasi-semisimple  classes of  ùêÜ ‚ãÖœÉ.  The given  representatives have been chosen œÉ-stable.\n\njulia> centralizer.(Ref(WF),l)\n4-element Vector{ExtendedCox{Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Rational{Int64}}}}:\n C‚ÇÉ‚Çç‚ÇÉ‚ÇÇ‚ÇÅ‚Çé\n ¬≤A‚ÇÉ‚Çç‚ÇÉ‚ÇÅ‚ÇÇ‚Çé\n (A‚ÇÅA‚ÇÅ)‚Çç‚ÇÅ‚ÇÉ‚Çé√óA‚ÇÅ‚Çç‚ÇÇ‚Çé\n B‚ÇÇŒ¶‚ÇÅ\n\nin  the above example, the groups C_ùêÜ  (tœÉ) are computed and displayed as extended  Coxeter groups (following the same convention as for centralisers in connected reductive groups).\n\nWe  define an element tœÉ‚àà ùêì  ‚ãÖœÉ to be isolated if  the Weyl group of C_ùêÜ (tœÉ)‚Å∞  is not in any proper  parabolic subgroup of W^œÉ. This generalizes the definition for connected groups.\n\njulia> isisolated.(Ref(WF),l)\n4-element BitVector:\n 1\n 1\n 1\n 0\n\n\n\n\n\n","category":"module"},{"location":"sscoset.html#PermGroups.Groups.centralizer-Tuple{Spets, SemisimpleElement{Root1}}","page":"Non-connected reductive groups","title":"PermGroups.Groups.centralizer","text":"centralizer(WF::Spets,t::SemisimpleElement{Root1})  \n\nWF  should be  a Coxeter  coset representing  an algebraic coset ùêÜ ‚ãÖœÉ, where ùêÜ is a connected reductive group (represented by 'W:=Group(WF)'), and  œÉ  is  a  quasi-central  automorphism  of ùêÜ defined by WF. The element  t should be a semisimple  element of ùêÜ. The function returns an  extended reflection  group describing  C_ùêÜ (tœÉ), with the reflection group  part representing  C_ùêÜ ‚Å∞(tœÉ), and  the diagram  automorphism part being those induced by C_ùêÜ (tœÉ)/C_ùêÜ (tœÉ)‚Å∞ on C_ùêÜ (tœÉ)‚Å∞.\n\njulia> WF=rootdatum(:u,6)\nu‚ÇÜ\n\njulia> s=ss(Group(WF),[1//4,0,0,0,0,3//4])\nSemisimpleElement{Root1}: <Œ∂‚ÇÑ,1,1,1,1,Œ∂‚ÇÑ¬≥>\n\njulia> centralizer(WF,s)\nB‚ÇÇŒ¶‚ÇÅ\n\njulia> centralizer(WF,one(s))\nC‚ÇÉ‚Çç‚ÇÉ‚ÇÇ‚ÇÅ‚Çé\n\n\n\n\n\n","category":"method"},{"location":"sscoset.html#Chevie.Semisimple.quasi_isolated_reps-Tuple{Spets}","page":"Non-connected reductive groups","title":"Chevie.Semisimple.quasi_isolated_reps","text":"quasi_isolated_reps(WF::Spets,p=0)\n\nWF  should be  a Coxeter  coset representing  an algebraic  coset ùêÜ ‚ãÖœÉ, where  ùêÜ is a connected  reductive group (represented by W=Group(WF)), and  œÉ  is  a  quasi-central  automorphism  of  ùêÜ defined by WF. The function returns a list of semisimple elements of ùêÜ such that tœÉ, when t  runs over this  list, are representatives  of the conjugacy classes of quasi-isolated quasisemisimple elements of ùêÜ ‚ãÖœÉ (an element tœÉ‚àà ùêì ‚ãÖœÉ is quasi-isolated  if  the  Weyl  group  of  C_ùêÜ  (tœÉ)  is not in any proper parabolic  subgroup of W^œÉ). If a second  argument p is given, it lists only those representatives which exist in characteristic p.\n\njulia> WF=rootdatum(\"2E6sc\")\n¬≤E‚ÇÜsc\n\njulia> quasi_isolated_reps(WF)\n5-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <1,-1,Œ∂‚ÇÑ,1,Œ∂‚ÇÑ,1>\n <1,1,1,-1,1,1>\n <1,Œ∂‚ÇÉ¬≤,1,Œ∂‚ÇÉ,1,1>\n <1,Œ∂‚ÇÑ¬≥,1,-1,1,1>\n\njulia> quasi_isolated_reps(WF,2)\n2-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <1,Œ∂‚ÇÉ¬≤,1,Œ∂‚ÇÉ,1,1>\n\njulia> quasi_isolated_reps(WF,3)\n4-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <1,-1,Œ∂‚ÇÑ,1,Œ∂‚ÇÑ,1>\n <1,1,1,-1,1,1>\n <1,Œ∂‚ÇÑ¬≥,1,-1,1,1>\n\n\n\n\n\n","category":"method"},{"location":"sscoset.html#Chevie.Semisimple.isisolated-Tuple{Spets, SemisimpleElement{Root1}}","page":"Non-connected reductive groups","title":"Chevie.Semisimple.isisolated","text":"isisolated(WF::Spets,t::SemisimpleElement{Root1})\n\nWF  should be  a Coxeter  coset representing  an algebraic  coset ùêÜ ‚ãÖœÉ, where  ùêÜ is a connected  reductive group (represented by W=Group(WF)), and  œÉ  is  a  quasi-central  automorphism  of  ùêÜ defined by WF. The element  t should be a semisimple element of ùêÜ. The function returns a boolean describing whether tœÉ is isolated, that is whether the Weyl group of C_ùêÜ (tœÉ)‚Å∞ is not in any proper parabolic subgroup of W^œÉ.\n\njulia> WF=rootdatum(:u,6)\nu‚ÇÜ\n\njulia> l=quasi_isolated_reps(WF)\n4-element Vector{SemisimpleElement{Root1}}:\n <1,1,1,1,1,1>\n <Œ∂‚ÇÑ,Œ∂‚ÇÑ,Œ∂‚ÇÑ,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÑ¬≥>\n <Œ∂‚ÇÑ,Œ∂‚ÇÑ,1,1,Œ∂‚ÇÑ¬≥,Œ∂‚ÇÑ¬≥>\n <Œ∂‚ÇÑ,1,1,1,1,Œ∂‚ÇÑ¬≥>\n\njulia> isisolated.(Ref(WF),l)\n4-element BitVector:\n 1\n 1\n 1\n 0\n\n\n\n\n\n","category":"method"},{"location":"uch.html#Unipotent-characters","page":"Unipotent characters","title":"Unipotent characters","text":"","category":"section"},{"location":"uch.html","page":"Unipotent characters","title":"Unipotent characters","text":"Pages=[\"uch.md\"]","category":"page"},{"location":"uch.html","page":"Unipotent characters","title":"Unipotent characters","text":"Uch\nUnipotentCharacters\ndegrees(::UnipotentCharacters,q)\nCycPoldegrees\nunipotent_character\nBase.show(::IO,::UniChar)\ndeligne_lusztig_character\ndeligne_lusztigCharTable\nalmost_character\non_unipotents\ndeligne_lusztig_lefschetz\nlusztig_induce\nlusztig_restrict\nlusztig_induction_table\nFamilies\nFamily\ngalois(f::Family,p::Int)\nPermGroups.invpermute(f::Family,p::Perm)\nconj(f::Family)\nfourier\ndrinfeld_double\nndrinfeld_double\nfamily_imprimitive\nFamiliesClassical\n*(f::Family, g::Family)\nspecial\ncospecial\nZbasedring","category":"page"},{"location":"uch.html#Chevie.Uch","page":"Unipotent characters","title":"Chevie.Uch","text":"Let  ùêÜ be a connected reductive  group over the algebraic closure of a finite  field ùîΩ_q,  defined over  ùîΩ_q with  corresponding Frobenius automorphism  F. We  want to  study the  irreducible characters  of ùêÜ ^F.  More generally we consider ùêÜ ^F where F is an isogeny of ùêÜ  such  that  a  power  is  a  Frobenius  (this covers the Suzuki and Ree groups).\n\nIf  ùêì is an F-stable  maximal torus of ùêÜ, and ùêÅ is a (not necessarily  F-stable) Borel  subgroup containing  ùêì, we define the Deligne-Lusztig  variety X_ùêÅ=gùêÅ  ùêÜ  ùêÅ  gùêÅ   F(gùêÅ ) . This variety  affords  a  natural  action  of  ùêÜ  ^F  on  the  left,  so the corresponding   Deligne-Lusztig  virtual  module  H^*_c(X_ùêÅ)=·µ¢  (-1)‚Å± H‚Å±_c(X_ùêÅ‚Ñö  _‚Ñì)  also.  The  (virtual)  character  of this module is the Deligne-Lusztig  character  R_ùêì  ^ùêÜ  (1);  the  notation reflects the theorem  that this character does  not depend on the  choice of ùêÅ. This character  can be  parameterized by  an F-conjugacy  class of W: if ùêì‚ÇÄùêÅ‚ÇÄ  is an F-stable pair, there is an unique w W=N_ùêÜ (ùêì‚ÇÄ)ùêì‚ÇÄ such  that the triple (ùêìùêÅF) is ùêÜ-conjugate to (ùêì‚ÇÄùêÅ‚ÇÄwF). We will  thus denote R_w for R_ùêì^ùêÜ (1); this character depends only on the F-class of w.\n\nThe  unipotent characters of ùêÜ ^F are the irreducible constituents of the  R_w. In a similar way that the Jordan decomposition shows that the unipotent classes are a building block for describing the conjugacy classes of  a  reductive  group,  Lusztig  has  defined  a  Jordan decomposition of characters  where  the  unipotent  characters  are  the building block. The unipotent  characters are parameterized by  combinatorial data that Lusztig has  defined just  from the  coset WœÜ,  where œÜ  is the  finite order automorphism  of X(ùêì‚ÇÄ)  such that  F=qœÜ. Thus,  from our viewpoint, unipotent  characters  are  objects  combinatorially  attached to a Coxeter coset.\n\nA  subset  of  the  unipotent  characters, the principal series unipotent characters,  can  be  described  in  a  more  elementary  way. They are the constituents  of  R‚ÇÅ,  or  equivalently  the  characters of the virtual module  H^*_c(X_ùêÅ ‚ÇÄ), where X_ùêÅ ‚ÇÄ  is the discrete variety (ùêÜ ùêÅ‚ÇÄ)^F;  this virtual module reduces to the actual module ‚Ñö _‚Ñì(ùêÜ ùêÅ‚ÇÄ) ^F.  Thus  the  Deligne-Lusztig  induction  R_ùêì‚ÇÄ^ùêÜ  (1) reduces to Harish-Chandra  induction, defined  as follows:  let ùêè  =ùêî   ùêã  be an F-stable  Levi decomposition  of an  F-stable parabolic subgroup of ùêÜ. Then the Harish-Chandra induced  R_ùêã^ùêÜ of a character œá of  ùêã^F is  the character  Ind_ùêè^F^ùêÜ ^Fœá,  where œá is the lift  to ùêè^F of œá via the quotient ùêè^Fùêî ^F=ùêã^F; Harish-Chandra induction  is a  particular case  of Lusztig  induction, which is defined when ùêè is not F-stable using the variety X_ùêî = gùêî ùêÜ ùêî  gùêî  F(gùêî  ), and gives for an  ùêã^F-module a virtual ùêÜ ^F-module. Like  ordinary induction, these  functors have adjoint  functors going from representations   of   ùêÜ   ^F   to   representations   (resp.   virtual representations)   of  ùêã^F  called  Harish-Chandra  restriction  (resp. Lusztig restriction).\n\nThe  commuting algebra of ùêÜ^F-endomorphisms of R‚ÇÅ=R_ùêì‚ÇÄ^ùêÜ(1) is an Iwahori-Hecke  algebra for W^œÜ, with parameters some powers of q; the parameters  are  all  equal  to  q  when W^œÜ=W. Thus principal series unipotent characters are parametrized by characters of W^œÜ.\n\nTo   understand  the  decomposition  of  more  general  R_w,  and  thus parameterize unipotent characters, is is useful to introduce another set of class  functions which are  parameterized by irreducible  characters of the coset  WœÜ.  If  œá  is  such  a  character, we define the associated almost  character by:  R·µ™=W¬π_w Wœá(wœÜ)  R_w. The  name reflects that these class function are close to irreducible characters. They satisfy R·µ™  R_œà_ùêÜ^F=Œ¥_œáœà;  for  the  linear  and unitary group they are actually  unipotent characters (up to sign in the latter case). They are in general the sum (with rational coefficients) of a small number of unipotent characters in the same Lusztig family, see Families. The degree of  R·µ™  is  a  polynomial  in  q  equal  to  the fake degree of the character œá of WœÜ (see fakedegree).\n\nWe   now  describe  the  parameterization   of  unipotent  characters  when W^œÜ=W,  thus when the coset WœÜ identifies with W (the situation is  similar  but  a  bit  more  difficult  to  describe  in  general).  The (rectangular) matrix of scalar products œÅ R·µ™_ùêÜ ^F, when characters of  W  and  unipotent  characters  are  arranged in the right order, is block-diagonal   with  rather  small  blocks   which  are  called  Lusztig families.\n\nFor the characters of W  a family ùìï corresponds  to a block of the Hecke  algebra  over  a  ring  called  the  Rouquier ring. To ùìï Lusztig associates  a small group Œì (not  bigger than (‚Ñ§2)‚Åø, or ùîñ·µ¢ for i5) such that the unipotent characters in the family are parameterized by the pairs (xŒ∏) taken up to Œì-conjugacy, where xŒì and Œ∏ is  an irreducible character of C_Œì(x).  Further, the elements of ùìï themselves are parameterized by a subset of such pairs, and Lusztig defines a  pairing  between  such  pairs  which  computes  the scalar product œÅ R·µ™_ùêÜ^F,  called  the  Lusztig  Fourier  matrix. For more details see drinfeld_double.\n\nA  second parameterization  of unipotent  character is  via Harish-Chandra series.  A character is called cuspidal if all its proper Harish-Chandra restrictions  vanish. There are few  cuspidal unipotent characters (none in GL‚Çô  for  n1,  and  at  most  one  in other classical groups). The ùêÜ^F-endomorphism algebra of an Harish-Chandra induced R_ùêã^F^ùêÜ^FŒª, where Œª is a cuspidal unipotent character turns out to be a Hecke algebra associated to the group W_ùêÜ^F(ùêã^F)=N_ùêÜ^F(ùêã)ùêã, which turns out to be a Coxeter group. Thus another  parameterization  is  by  triples  (ùêãŒªœÜ),  where  Œª is a cuspidal  unipotent  character  of  ùêã^F  and  œÜ  is  an irreducible character  of the  relative group  W_ùêÜ^F(ùêã^F). Such  characters are said to belong to the Harish-Chandra series determined by (ùêãŒª).\n\nA  final  piece  of  information  attached  to  unipotent characters is the eigenvalues of Frobenius. Let F·µü be the smallest power of the isogeny F  which  is  a  split  Frobenius  (that  is, F·µü is a Frobenius and œÜ·µü=1). Then F·µü acts naturally on Deligne-Lusztig varieties and thus on  the  corresponding  virtual  modules,  and  commutes  to  the action of ùêÜ^F;  thus for  a given  unipotent character  œÅ, a submodule of the virtual  module which  affords œÅ  affords a  single eigenvalue Œº of F·µü. Results of Lusztig and Digne-Michel show that this eigenvalue is of the  form q·µÉ·µüŒª·µ®  where 2a‚Ñ§  and Œª·µ®  is a  root of  unity which depends  only on œÅ and not the considered module. This Œª·µ® is called the  eigenvalue of Frobenius attached to œÅ. Unipotent characters in the Harish-Chandra  series  of  a  pair  (ùêãŒª)  have the same eigenvalue of Frobenius as Œª.\n\nThis  package  contains  tables  of  all  this information, and can compute Harish-Chandra  and Lusztig  induction of  unipotent characters  and almost characters. We illustrate this on some examples:\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> uc=UnipotentCharacters(W)\nUnipotentCharacters(G‚ÇÇ)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇŒ≥      ‚îÇn‚ÇÄ    Deg(Œ≥)  Feg              Symbol Fr(Œ≥)    label‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÄ   ‚îÇ 1         1    1       (0,0,0,0,0,2)     1         ‚îÇ\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÜ   ‚îÇ 2        q‚Å∂   q‚Å∂ (01,01,01,01,01,12)     1         ‚îÇ\n‚îÇœÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ  ‚îÇ 3   qŒ¶‚ÇÉŒ¶‚ÇÜ/3   q¬≥            (0,0,1+)     1    (1,œÅ)‚îÇ\n‚îÇœÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ  ‚îÇ 4   qŒ¶‚ÇÉŒ¶‚ÇÜ/3   q¬≥            (0,0,1-)     1   (g‚ÇÉ,1)‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÅ   ‚îÇ 5  qŒ¶‚ÇÇ¬≤Œ¶‚ÇÉ/6  qŒ¶‚Çà       (0,0,0,0,1,1)     1    (1,1)‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÇ   ‚îÇ 6  qŒ¶‚ÇÇ¬≤Œ¶‚ÇÜ/2 q¬≤Œ¶‚ÇÑ       (0,0,0,1,0,1)     1   (g‚ÇÇ,1)‚îÇ\n‚îÇG‚ÇÇ[-1] ‚îÇ 7  qŒ¶‚ÇÅ¬≤Œ¶‚ÇÉ/2    0       (01,0,01,,0,)    -1   (g‚ÇÇ,Œµ)‚îÇ\n‚îÇG‚ÇÇ[1]  ‚îÇ 8  qŒ¶‚ÇÅ¬≤Œ¶‚ÇÜ/6    0       (01,01,0,,,0)     1    (1,Œµ)‚îÇ\n‚îÇG‚ÇÇ[Œ∂‚ÇÉ] ‚îÇ 9 qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤/3    0       (01,0,0,01,,)    Œ∂‚ÇÉ  (g‚ÇÉ,Œ∂‚ÇÉ)‚îÇ\n‚îÇG‚ÇÇ[Œ∂‚ÇÉ¬≤]‚îÇ10 qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤/3    0       (01,01,,0,0,)   Œ∂‚ÇÉ¬≤ (g‚ÇÉ,Œ∂‚ÇÉ¬≤)‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThe  first column gives  the name of  the unipotent character, derived from its  Harish-Chandra  classification;  the  first  6  characters  are in the principal  series  so  are  named  by  characters  of  W.  The last 4 are cuspidal,  and named by the corresponding eigenvalue of Frobenius, which is displayed  in the fourth  column. For classical  groups, the Harish-Chandra data can be synthesized combinatorially to give a symbol.\n\nThe  first two characters are  each in a Lusztig  family by themselves. The last  eight are in a family associated to the group Œì=ùîñ‚ÇÉ: the last column shows  the parameters  (x,Œ∏). The  third column  shows the  degree of the unipotent characters, which is transformed by the Lusztig Fourier matrix of the  third  column,  which  gives  the  degree  of the corresponding almost character,  or equivalently the fake  degree of the corresponding character of W (extended by 0 outside the principal series).\n\nOne  can get  more information  on the  Lusztig Fourier  matrix of  the big family by asking\n\njulia> uc.families[1]\nFamily(D(ùîñ ‚ÇÉ),[5, 6, 4, 3, 8, 7, 9, 10],ennola=-5)\nDrinfeld double of ùîñ ‚ÇÉ, Lusztig‚Ä≤s version\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel   ‚îÇeigen                                               ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ(1,1)   ‚îÇ    1 1//6  1//2  1//3  1//3  1//6  1//2  1//3  1//3‚îÇ\n‚îÇ(g‚ÇÇ,1)  ‚îÇ    1 1//2  1//2     .     . -1//2 -1//2     .     .‚îÇ\n‚îÇ(g‚ÇÉ,1)  ‚îÇ    1 1//3     .  2//3 -1//3  1//3     . -1//3 -1//3‚îÇ\n‚îÇ(1,œÅ)   ‚îÇ    1 1//3     . -1//3  2//3  1//3     . -1//3 -1//3‚îÇ\n‚îÇ(1,Œµ)   ‚îÇ    1 1//6 -1//2  1//3  1//3  1//6 -1//2  1//3  1//3‚îÇ\n‚îÇ(g‚ÇÇ,Œµ)  ‚îÇ   -1 1//2 -1//2     .     . -1//2  1//2     .     .‚îÇ\n‚îÇ(g‚ÇÉ,Œ∂‚ÇÉ) ‚îÇ   Œ∂‚ÇÉ 1//3     . -1//3 -1//3  1//3     .  2//3 -1//3‚îÇ\n‚îÇ(g‚ÇÉ,Œ∂‚ÇÉ¬≤)‚îÇ  Œ∂‚ÇÉ¬≤ 1//3     . -1//3 -1//3  1//3     . -1//3  2//3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nOne  can  do  computations  with  individual  unipotent characters. Here we construct  the Coxeter torus, and then the identity character of this torus as a unipotent character.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> T=spets(reflection_subgroup(W,Int[]),W(1,2))\nG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÜ\n\njulia> u=unipotent_character(T,1)\n[G‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÜ]:<Id>\n\nTo construct T one could equivalently do\n\njulia> T=torus(W,position_class(W,W(1,2)))\nG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÜ\n\nThen  here  are  two  ways  to  construct  the  Deligne-Lusztig  character associated to the Coxeter torus:\n\njulia> lusztig_induce(W,u)\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>+<œÜ‚ÇÅ‚Äö‚ÇÜ>-<œÜ‚ÇÇ‚Äö‚ÇÅ>+<G‚ÇÇ[-1]>+<G‚ÇÇ[Œ∂‚ÇÉ]>+<G‚ÇÇ[Œ∂‚ÇÉ¬≤]>\n\njulia> v=deligne_lusztig_character(W,[1,2])\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>+<œÜ‚ÇÅ‚Äö‚ÇÜ>-<œÜ‚ÇÇ‚Äö‚ÇÅ>+<G‚ÇÇ[-1]>+<G‚ÇÇ[Œ∂‚ÇÉ]>+<G‚ÇÇ[Œ∂‚ÇÉ¬≤]>\n\njulia> degree(v)\nPol{Int64}: q‚Å∂+q‚Åµ-q‚Å¥-2q¬≥-q¬≤+q+1\n\njulia> v*v\n6\n\nThe  last two lines ask for the degree  of v, then for the scalar product of v with itself.\n\nFinally  we mention  that Chevie  can also  provide unipotent characters of Spetses, as defined in BroueMalleMichel2014. An example:\n\njulia> UnipotentCharacters(complex_reflection_group(4))\nUnipotentCharacters(G‚ÇÑ)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇŒ≥    ‚îÇn‚ÇÄ            Deg(Œ≥)    Feg Fr(Œ≥)  label‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÄ ‚îÇ 1                 1      1     1       ‚îÇ\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÑ ‚îÇ 2  -‚àö-3q‚Å¥Œ¶‚Ä≥‚ÇÉŒ¶‚ÇÑŒ¶‚Ä≥‚ÇÜ/6     q‚Å¥     1   1‚àßŒ∂‚ÇÜ‚îÇ\n‚îÇœÜ‚ÇÅ‚Äö‚Çà ‚îÇ 3   ‚àö-3q‚Å¥Œ¶‚Ä≤‚ÇÉŒ¶‚ÇÑŒ¶‚Ä≤‚ÇÜ/6     q‚Å∏     1 -1‚àßŒ∂‚ÇÉ¬≤‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÖ ‚îÇ 4         q‚Å¥Œ¶‚ÇÇ¬≤Œ¶‚ÇÜ/2   q‚ÅµŒ¶‚ÇÑ     1  1‚àßŒ∂‚ÇÉ¬≤‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÉ ‚îÇ 5 -Œ∂‚ÇÉ‚àö-3qŒ¶‚Ä≥‚ÇÉŒ¶‚ÇÑŒ¶‚Ä≤‚ÇÜ/3   q¬≥Œ¶‚ÇÑ     1  1‚àßŒ∂‚ÇÉ¬≤‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÅ ‚îÇ 6 Œ∂‚ÇÉ¬≤‚àö-3qŒ¶‚Ä≤‚ÇÉŒ¶‚ÇÑŒ¶‚Ä≥‚ÇÜ/3    qŒ¶‚ÇÑ     1   1‚àßŒ∂‚ÇÉ‚îÇ\n‚îÇœÜ‚ÇÉ‚Äö‚ÇÇ ‚îÇ 7            q¬≤Œ¶‚ÇÉŒ¶‚ÇÜ q¬≤Œ¶‚ÇÉŒ¶‚ÇÜ     1       ‚îÇ\n‚îÇZ‚ÇÉ:2 ‚îÇ 8     -‚àö-3qŒ¶‚ÇÅŒ¶‚ÇÇŒ¶‚ÇÑ/3      0   Œ∂‚ÇÉ¬≤ Œ∂‚ÇÉ‚àßŒ∂‚ÇÉ¬≤‚îÇ\n‚îÇZ‚ÇÉ:11‚îÇ 9    -‚àö-3q‚Å¥Œ¶‚ÇÅŒ¶‚ÇÇŒ¶‚ÇÑ/3      0   Œ∂‚ÇÉ¬≤ Œ∂‚ÇÉ‚àßŒ∂‚ÇÜ‚Åµ‚îÇ\n‚îÇG‚ÇÑ   ‚îÇ10        -q‚Å¥Œ¶‚ÇÅ¬≤Œ¶‚ÇÉ/2      0    -1  Œ∂‚ÇÜ‚àß-1‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"module"},{"location":"uch.html#Chevie.Uch.UnipotentCharacters","page":"Unipotent characters","title":"Chevie.Uch.UnipotentCharacters","text":"UnipotentCharacters(W)\n\nW  should be a Coxeter group, a  Coxeter Coset or a Spetses. The function gives  back a record containing  information about the unipotent characters of the associated algebraic group (or Spetses). This contains the following fields:\n\n.harishChandra:  information  about  Harish-Chandra  series  of  unipotent characters.  This is itself a list of records, one for each pair (ùêã,Œª) of a  Levi  of  an  F-stable  parabolic  subgroup  and  a cuspidal unipotent character of ùêã^F. These records themselves have the following fields:\n\n:levi: a list 'l' such that ùêã corresponds to 'ReflectionSubgroup(W,l)'.\n\n:cuspidalName: the name of the unipotent cuspidal character lambda.\n\n:eigenvalue: the eigenvalue of Frobenius for Œª.\n\n:relativeType: the reflection type of W_ùêÜ (ùêã);\n\n:parameterExponents:  the ùêÜ ^F-endomorphism  algebra of R_ùêã^ùêÜ (Œª) is  a  Hecke  algebra  for  W_ùêÜ  (ùêã)  with  some parameters of the form q^a_s. This holds the list of exponents a_s.\n\n:charNumbers:  the  indices  of  the  unipotent  characters indexed by the irreducible characters of W_ùêÜ (ùêã).\n\n.almostHarishChandra:   information   about   Harish-Chandra   series  of unipotent  character sheaves.  This is  identical to  ÃÄharishChandra` for a split  reductive group,  and reflects  the situation  for the corresponding split group for a nonsplit group.\n\n.families:  information  about  Lusztig  families of unipotent characters. This  is itself a list  of records, one for  each family. These records are described in the section about families below.\n\nthe following information is computed on demand from uc=UnipotentCharacters(W):\n\nspets(uc): the reductive group W.\n\njulia> W=coxgroup(:Bsym,2)\nBsym‚ÇÇ\n\njulia> WF=spets(W,Perm(1,2))\n¬≤Bsym‚ÇÇ\n\njulia> uc=UnipotentCharacters(WF)\nUnipotentCharacters(¬≤Bsym‚ÇÇ)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇŒ≥       ‚îÇn‚ÇÄ almostch    Deg(Œ≥)   Feg        Symbol Fr(Œ≥) label‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ2       ‚îÇ 1       2.         1     1     (02,,0,0)     1      ‚îÇ\n‚îÇ11      ‚îÇ 2      .11        q‚Å¥    q‚Å¥ (012,1,01,01)     1      ‚îÇ\n‚îÇ¬≤B‚ÇÇ[1,3]‚îÇ 3      1.1 ‚àö2qŒ¶‚ÇÅŒ¶‚ÇÇ/2 qŒ¶‚ÇÅŒ¶‚ÇÇ     (01,,1,0)   Œ∂‚Çà¬≥     1‚îÇ\n‚îÇ¬≤B‚ÇÇ[1,5]‚îÇ 4       B‚ÇÇ ‚àö2qŒ¶‚ÇÅŒ¶‚ÇÇ/2     0     (01,,0,1)   Œ∂‚Çà‚Åµ     2‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> uc.families\n3-element Vector{Family}:\n Family(C‚ÇÅ,[1])\n Family(C‚ÇÅ,[2])\n Family(?4,[3, 4])\n\njulia> uc.families[3]\nFamily(?4,[3, 4])\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel‚îÇeigen    1     2‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1    ‚îÇ  Œ∂‚Çà¬≥ ‚àö2/2 -‚àö2/2‚îÇ\n‚îÇ2    ‚îÇ  -Œ∂‚Çà ‚àö2/2  ‚àö2/2‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\ncharnames(uc):  the list of names of the unipotent characters.  Using    appropriate keywords, one can control the display in various ways.\n\njulia> uc=UnipotentCharacters(coxgroup(:G,2));\n\njulia> charnames(uc;limit=true)\n10-element Vector{String}:\n \"œÜ‚ÇÅ‚Äö‚ÇÄ\"\n \"œÜ‚ÇÅ‚Äö‚ÇÜ\"\n \"œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ\"\n \"œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ\"\n \"œÜ‚ÇÇ‚Äö‚ÇÅ\"\n \"œÜ‚ÇÇ‚Äö‚ÇÇ\"\n \"G‚ÇÇ[-1]\"\n \"G‚ÇÇ[1]\"\n \"G‚ÇÇ[Œ∂‚ÇÉ]\"\n \"G‚ÇÇ[Œ∂‚ÇÉ¬≤]\"\n\njulia> charnames(uc;TeX=true)\n10-element Vector{String}:\n \"\\phi_{1,0}\"\n \"\\phi_{1,6}\"\n \"\\phi_{1,3}'\"\n \"\\phi_{1,3}''\"\n \"\\phi_{2,1}\"\n \"\\phi_{2,2}\"\n \"G_2[-1]\"\n \"G_2[1]\"\n \"G_2[\\zeta_3]\"\n \"G_2[\\zeta_3^2]\"\n\nOne  can control  the display  of unipotent  characters in  various ways by IOContext properties. In the display, the row labels are the names of the unipotent characters. The possible columns are numbered as follows:\n\nThe index of the character in the list of unipotent characters.\nThe degree of the unipotent character.\nThe degree of the corresponding almost character.\nfor imprimitive groups, the symbol attached to the unipotent character.\nThe eigenvalue of Frobenius attached to the unipotent character.\nThe parameter the character has in its Lusztig family.\n\nWhich  columns  are  displayed  can  be  controlled by the property :cols (default [2,3,5,6] and 4 when applicable).\n\nIn  addition if  ':byfamily=true', the  characters are  displayed family by family  instead  of  in  index  order.  Finally,  the properties rows and columnrepartition  of  format  can  be  set,  giving more tuning of the table.\n\njulia> W=coxgroup(:B,2)\nB‚ÇÇ\n\njulia> uc=UnipotentCharacters(W)\nUnipotentCharacters(B‚ÇÇ)\n‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇŒ≥  ‚îÇn‚ÇÄ Deg(Œ≥) Feg   Symbol Fr(Œ≥) label‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ11.‚îÇ 1  qŒ¶‚ÇÑ/2  q¬≤   (12,0)     1   +,-‚îÇ\n‚îÇ1.1‚îÇ 2 qŒ¶‚ÇÇ¬≤/2 qŒ¶‚ÇÑ   (02,1)     1   +,+‚îÇ\n‚îÇ.11‚îÇ 3     q‚Å¥  q‚Å¥ (012,12)     1      ‚îÇ\n‚îÇ2. ‚îÇ 4      1   1     (2,)     1      ‚îÇ\n‚îÇ.2 ‚îÇ 5  qŒ¶‚ÇÑ/2  q¬≤   (01,2)     1   -,+‚îÇ\n‚îÇB‚ÇÇ ‚îÇ 6 qŒ¶‚ÇÅ¬≤/2   0   (012,)    -1   -,-‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> xdisplay(uc;byfamily=true)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇŒ≥   ‚îÇn‚ÇÄ Deg(Œ≥) Feg   Symbol Fr(Œ≥) label‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ11. ‚îÇ 1  qŒ¶‚ÇÑ/2  q¬≤   (12,0)     1   +,-‚îÇ\n‚îÇ1.1À¢‚îÇ 2 qŒ¶‚ÇÇ¬≤/2 qŒ¶‚ÇÑ   (02,1)     1   +,+‚îÇ\n‚îÇ.2  ‚îÇ 5  qŒ¶‚ÇÑ/2  q¬≤   (01,2)     1   -,+‚îÇ\n‚îÇB‚ÇÇ  ‚îÇ 6 qŒ¶‚ÇÅ¬≤/2   0   (012,)    -1   -,-‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ2.  ‚îÇ 4      1   1     (2,)     1      ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ.11 ‚îÇ 3     q‚Å¥  q‚Å¥ (012,12)     1      ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> xdisplay(uc;cols=[1,4])\nUnipotentCharacters(B‚ÇÇ)\n‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇŒ≥  ‚îÇn‚ÇÄ   Symbol‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ11.‚îÇ 1   (12,0)‚îÇ\n‚îÇ1.1‚îÇ 2   (02,1)‚îÇ\n‚îÇ.11‚îÇ 3 (012,12)‚îÇ\n‚îÇ2. ‚îÇ 4     (2,)‚îÇ\n‚îÇ.2 ‚îÇ 5   (01,2)‚îÇ\n‚îÇB‚ÇÇ ‚îÇ 6   (012,)‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"type"},{"location":"uch.html#Chevie.ComplexR.degrees-Tuple{UnipotentCharacters, Any}","page":"Unipotent characters","title":"Chevie.ComplexR.degrees","text":"degrees(uc::UnipotentCharacters,q=Pol())\n\nReturns  the  list  of  degrees  of  the unipotent characters of the finite reductive group (or Spetses) with Weyl group (or Spetsial reflection group) W, evaluated at q.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> uc=UnipotentCharacters(W);\n\njulia> degrees(uc)\n10-element Vector{Pol{Rational{Int64}}}:\n 1\n q‚Å∂\n (1//3)q‚Åµ+(1//3)q¬≥+(1//3)q\n (1//3)q‚Åµ+(1//3)q¬≥+(1//3)q\n (1//6)q‚Åµ+(1//2)q‚Å¥+(2//3)q¬≥+(1//2)q¬≤+(1//6)q\n (1//2)q‚Åµ+(1//2)q‚Å¥+(1//2)q¬≤+(1//2)q\n (1//2)q‚Åµ+(-1//2)q‚Å¥+(-1//2)q¬≤+(1//2)q\n (1//6)q‚Åµ+(-1//2)q‚Å¥+(2//3)q¬≥+(-1//2)q¬≤+(1//6)q\n (1//3)q‚Åµ+(-2//3)q¬≥+(1//3)q\n (1//3)q‚Åµ+(-2//3)q¬≥+(1//3)q\n\n\n\n\n\n","category":"method"},{"location":"uch.html#Chevie.Uch.CycPoldegrees","page":"Unipotent characters","title":"Chevie.Uch.CycPoldegrees","text":"CycPoldegrees(uc::UnipotentCharacters)\n\nTaking  advantage that  the degrees  of unipotent  characters of the finite reductive group (or Spetses) with Weyl group (or Spetsial reflection group) W  are products  of cyclotomic  polynomials, this  function returns these degrees as a list of CycPols. It is faster than  CycPol.(degrees(uc)).\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> CycPoldegrees(UnipotentCharacters(W))\n10-element Vector{CycPol{Rational{Int64}}}:\n 1\n q‚Å∂\n qŒ¶‚ÇÉŒ¶‚ÇÜ/3\n qŒ¶‚ÇÉŒ¶‚ÇÜ/3\n qŒ¶‚ÇÇ¬≤Œ¶‚ÇÉ/6\n qŒ¶‚ÇÇ¬≤Œ¶‚ÇÜ/2\n qŒ¶‚ÇÅ¬≤Œ¶‚ÇÉ/2\n qŒ¶‚ÇÅ¬≤Œ¶‚ÇÜ/6\n qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤/3\n qŒ¶‚ÇÅ¬≤Œ¶‚ÇÇ¬≤/3\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Uch.unipotent_character","page":"Unipotent characters","title":"Chevie.Uch.unipotent_character","text":"unipotent_character(W,l) or unichar(W,l)\n\nConstructs  an object representing the unipotent character specified by l of  the algebraic  group associated  to the  Coxeter group or Coxeter coset specified  by W. There are 3 possibilities  for l: if it is an integer, the  l-th unipotent character of W is  returned. If it is a string, the unipotent  character of W whose name is  l is returned (where the names are as given by charnames(UnipotentCharacters(W))). Finally, l can be a list  of length the number of  unipotent characters of W, which specifies the coefficient to give to each unipotent character.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> u=unichar(W,7)\n[G‚ÇÇ]:<G‚ÇÇ[-1]>\n\njulia> v=unichar(W,\"G2[E3]\")\n[G‚ÇÇ]:<G‚ÇÇ[Œ∂‚ÇÉ]>\n\njulia> w=unichar(W,[1,0,0,-1,0,0,2,0,0,1])\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>-<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>+2<G‚ÇÇ[-1]>+<G‚ÇÇ[Œ∂‚ÇÉ¬≤]>\n\njulia> unichar(W,fourier(UnipotentCharacters(W))[3,:])\n[G‚ÇÇ]:2//3<œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ>-1//3<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>+1//3<œÜ‚ÇÇ‚Äö‚ÇÅ>+1//3<G‚ÇÇ[1]>-1//3<G‚ÇÇ[Œ∂‚ÇÉ]>-1//3<G‚ÇÇ[Œ∂‚ÇÉ¬≤]>\n\nThe  last line shows  the almost character  associated to the 3rd unipotent character of W.\n\nsome limited arithmetic is available on unipotent characters:\n\njulia> coefficients(u) # so that u==unichar(W,coefficients(u))\n10-element Vector{Int64}:\n 0\n 0\n 0\n 0\n 0\n 0\n 1\n 0\n 0\n 0\n\njulia> w-2u\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>-<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>+<G‚ÇÇ[Œ∂‚ÇÉ¬≤]>\n\njulia> w*w  # scalar product\n7\n\njulia> degree(w)\nPol{Int64}: q‚Åµ-q‚Å¥-q¬≥-q¬≤+q+1\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Base.show-Tuple{IO, UniChar}","page":"Unipotent characters","title":"Base.show","text":"Base.show(io::IO,w::UniChar)\n\nThe  formatting  of  unipotent  characters  is  affected  by  IO property :compact .  If true (the default) they are printed in a compact form. Otherwise, they are printed one unipotent character per line:\n\njulia> xdisplay(w;compact=false)\n[G‚ÇÇ]:\n<œÜ‚ÇÅ‚Äö‚ÇÄ>    1\n<œÜ‚ÇÅ‚Äö‚ÇÜ>    0\n<œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ>   0\n<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>   -1\n<œÜ‚ÇÇ‚Äö‚ÇÅ>    0\n<œÜ‚ÇÇ‚Äö‚ÇÇ>    0\n<G‚ÇÇ[-1]>  2\n<G‚ÇÇ[1]>   0\n<G‚ÇÇ[Œ∂‚ÇÉ]>  0\n<G‚ÇÇ[Œ∂‚ÇÉ¬≤]> 1\n\n\n\n\n\n","category":"method"},{"location":"uch.html#Chevie.Uch.deligne_lusztig_character","page":"Unipotent characters","title":"Chevie.Uch.deligne_lusztig_character","text":"deligne_lusztig_character(W,w) or dlchar(W,w)\n\nThis  function returns the Deligne-Lusztig character  R_ùêì ^ùêÜ (1) of the algebraic  group ùêÜ associated to the Coxeter group or Coxeter coset W. The  torus  ùêì  can  be  specified  in  3  ways:  if w is an integer, it represents the w-th conjugacy class (or phi-conjugacy class for a coset Wœï)  of W. Otherwise  w can be  a word or  an element of  W, and it represents the class (or œï-class) of w.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> dlchar(W,3)\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>-<œÜ‚ÇÅ‚Äö‚ÇÜ>-<œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ>+<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>\n\njulia> dlchar(W,W(1))\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>-<œÜ‚ÇÅ‚Äö‚ÇÜ>-<œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ>+<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>\n\njulia> dlchar(W,[1])\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>-<œÜ‚ÇÅ‚Äö‚ÇÜ>-<œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ>+<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>\n\njulia> dlchar(W,[1,2])\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>+<œÜ‚ÇÅ‚Äö‚ÇÜ>-<œÜ‚ÇÇ‚Äö‚ÇÅ>+<G‚ÇÇ[-1]>+<G‚ÇÇ[Œ∂‚ÇÉ]>+<G‚ÇÇ[Œ∂‚ÇÉ¬≤]>\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Uch.deligne_lusztigCharTable","page":"Unipotent characters","title":"Chevie.Uch.deligne_lusztigCharTable","text":"deligne_lusztigCharTable(W) or dlCharTable(W)\n\nfor  each conjugacy class of W, gives the decomposition of R_{T_w}^G in unipotent characters.\n\njulia> dlCharTable(W)\n6√ó10 Matrix{Int64}:\n 1   1   1   1   2   2   0   0   0   0\n 1  -1   1  -1   0   0   0   0   0   0\n 1  -1  -1   1   0   0   0   0   0   0\n 1   1   0   0  -1   0   1   0   1   1\n 1   1   0   0   0  -1   0   1  -1  -1\n 1   1  -1  -1   0   0  -2  -2   0   0\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Uch.almost_character","page":"Unipotent characters","title":"Chevie.Uch.almost_character","text":"almost_character(W,i) or almostchar(W,i)\n\nThis  function  returns  the  i-th  almost  unipotent  character  of  the algebraic  group ùêÜ associated to the Coxeter group or Coxeter coset W. If œÜ is the i-th irreducible character of W, the i-th almost character is  R_œÜ=W¬π_w W  œÜ(w) R_ùêì_w^ùêÜ  (1) where  ùêì_w is  the maximal torus  associated  to  the  conjugacy  class  (or œï-conjugacy class for a coset) of w.\n\njulia> W=coxgroup(:B,2)\nB‚ÇÇ\n\njulia> almostchar(W,3)\n[B‚ÇÇ]:<.11>\n\njulia> almostchar(W,1)\n[B‚ÇÇ]:1//2<11.>+1//2<1.1>-1//2<.2>-1//2<B‚ÇÇ>\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Uch.on_unipotents","page":"Unipotent characters","title":"Chevie.Uch.on_unipotents","text":"on_unipotents(W,aut)\n\nW  is  a  reflection  group  or  reflection  coset  representing a finite reductive group ùêÜ ^F, and aut is an automorphism of ùêÜ ^F (for W a  permutation group, this can be given as a permutation of the roots). The function  returns the permutation  of the unipotent  characters of ùêÜ ^F induced  by aut. This makes sense  for Spetsial complex reflection groups and is implemented for them.\n\njulia> WF=rootdatum(\"3D4\")\n¬≥D‚ÇÑ\n\njulia> on_unipotents(Group(WF),WF.phi)\n(1,7,2)(8,12,9)\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Uch.deligne_lusztig_lefschetz","page":"Unipotent characters","title":"Chevie.Uch.deligne_lusztig_lefschetz","text":"deligne_lusztig_lefschetz(h,m=0) or dllefschetz(h,m=0)\n\nHere h is an element of a Hecke algebra associated to a Coxeter group W or  Coxeter coset Wœï which itself is  associated to an algebraic group ùêÜ.  By DigneMichel1985,  for g  ùêÜ^F, the  number of fixed  points  of  F·µê  on  the  Deligne-Lusztig variety associated to the element wœï‚ààWœï, have for m divisible by a sufficently large integer d, the  form _œÜ œÜ_(q·µê)(T_wœï)R_œÜ(g) where  œÜ runs over the irreducible characters  of Wœï, where R_œÜ is the corresponding almost character, and   where  œÜ_(q·µê)  is  a  character  value  of  the  Hecke  algebra H(Wœïq·µê)  of Wœï with parameter q·µê.  This expression is called the Lefschetz  character of the Deligne-Lusztig  variety. If we consider q·µê as  an indeterminate x, it  can be seen as  a sum of unipotent characters with   coefficients  character   values  of   the  generic   Hecke  algebra H(Wœïx).  A  more  complicated  formula  involving  the  eigenvalues of Frobenius  attached to  unipotent characters  applies for  m not prime to d.  The function  returns this  formula when  a second parameter m‚â†0 is given.\n\nThe  function 'dllefschetz' takes  as argument a  Hecke element and returns the  corresponding Lefschetz character. This is defined on the whole of the Hecke  algebra by linearity.  The Lefschetz character  of various varieties related   to   Deligne-Lusztig   varieties,   like   their  completions  or desingularisation,  can be  obtained by  taking the  Lefschetz character at various elements of the Hecke algebra.\n\njulia> W=coxgroup(:A,2)\nA‚ÇÇ\n\njulia> H=hecke(W,Pol(:q))\nhecke(A‚ÇÇ,q)\n\njulia> T=Tbasis(H);\n\njulia> dllefschetz(T(1,2))\n[A‚ÇÇ]:<111>-q<21>+q¬≤<3>\n\njulia> dllefschetz((T(1)+T())*(T(2)+T()))\n[A‚ÇÇ]:q<21>+(q¬≤+2q+1)<3>\n\nThe   last  line  shows  the   Lefschetz  character  of  the  Samelson-Bott desingularisation of the Coxeter element Deligne-Lusztig variety.\n\nWe now show an example with a coset (corresponding to the unitary group).\n\njulia> H=hecke(spets(W,Perm(1,2)),Pol(:q)^2)\nhecke(¬≤A‚ÇÇ,q¬≤)\n\njulia> T=Tbasis(H);dllefschetz(T(1))\n[¬≤A‚ÇÇ]:-<11>-q<¬≤A‚ÇÇ>+q¬≤<2>\n\nFinally,  there is a second form dllefschetz(H::HeckeAlgebra,w,i=0) where the  arguments are a Hecke algebra and an  element of w. This may be used for  Spetses where we know the column of the CharTable of H for w but not other columns of the spetsial Hecke algebra charcater table.\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Uch.lusztig_induce","page":"Unipotent characters","title":"Chevie.Uch.lusztig_induce","text":"lusztig_induce(W,u)\n\nu  should be a unipotent character of a parabolic subcoset of the Coxeter coset  W. It represents  a unipotent character  Œª of a  Levi ùêã of the algebraic  group  ùêÜ  attached  to  W.  The  program returns the Lusztig induced R_ùêã^ùêÜ(Œª).\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> WF=spets(W)\nG‚ÇÇ\n\njulia> T=subspets(WF,Int[],W(1))\nG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ\n\njulia> u=unichar(T,1)\n[G‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ]:<Id>\n\njulia> lusztig_induce(WF,u)\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>-<œÜ‚ÇÅ‚Äö‚ÇÜ>-<œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ>+<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>\n\njulia> dlchar(W,W(1))\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>-<œÜ‚ÇÅ‚Äö‚ÇÜ>-<œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ>+<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Uch.lusztig_restrict","page":"Unipotent characters","title":"Chevie.Uch.lusztig_restrict","text":"lusztig_restrict(R,u)\n\nu  should be a unipotent character of a parent Coxeter coset W of which R is a parabolic subcoset. It represents a unipotent character Œ≥ of the algebraic  group ùêÜ attached to W,  while R represents a Levi subgroup L. The program returns the Lusztig restriction *R_ùêã^ùêÜ(Œ≥).\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> WF=spets(W)\nG‚ÇÇ\n\njulia> T=subspets(WF,Int[],W(1))\nG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ\n\njulia> u=dlchar(W,W(1))\n[G‚ÇÇ]:<œÜ‚ÇÅ‚Äö‚ÇÄ>-<œÜ‚ÇÅ‚Äö‚ÇÜ>-<œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ>+<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>\n\njulia> lusztig_restrict(T,u)\n[G‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ]:4<Id>\n\njulia> T=subspets(WF,Int[],W(2))\nG‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ\n\njulia> lusztig_restrict(T,u)\n[G‚ÇÇ‚Çç‚Çé=Œ¶‚ÇÅŒ¶‚ÇÇ]:0\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Lusztig.lusztig_induction_table","page":"Unipotent characters","title":"Chevie.Lusztig.lusztig_induction_table","text":"lusztig_induction_table(R,W)\n\nR  should be a parabolic subgroup of the Coxeter group W or a parabolic subcoset  of  the  Coxeter  coset  W,  in  each  case representing a Levi subgroup  ùêã of  the algebraic  group ùêÜ  associated to W. The function returns  an InductionTable  representing the  Lusztig induction R_ùêã^ùêÜ between unipotent characters.\n\njulia> W=coxgroup(:B,3)\nB‚ÇÉ\n\njulia> t=twistings(W,[1,3])\n2-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n B‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=AÃÉ‚ÇÅ√óA‚ÇÅŒ¶‚ÇÅ\n B‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=AÃÉ‚ÇÅ√óA‚ÇÅŒ¶‚ÇÇ\n\njulia> lusztig_induction_table(t[2],W)\nLusztig induction from B‚ÇÉ‚Çç‚ÇÅ‚ÇÉ‚Çé=AÃÉ‚ÇÅ√óA‚ÇÅŒ¶‚ÇÇ to B‚ÇÉ\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ     ‚îÇ11‚äó 11 11‚äó 2 2‚äó 11 2‚äó 2‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ111. ‚îÇ     1    -1    -1    .‚îÇ\n‚îÇ11.1 ‚îÇ    -1     .     1   -1‚îÇ\n‚îÇ1.11 ‚îÇ     .     .    -1    .‚îÇ\n‚îÇ.111 ‚îÇ    -1     .     .    .‚îÇ\n‚îÇ21.  ‚îÇ     .     .     .    .‚îÇ\n‚îÇ1.2  ‚îÇ     1    -1     .    1‚îÇ\n‚îÇ2.1  ‚îÇ     .     1     .    .‚îÇ\n‚îÇ.21  ‚îÇ     .     .     .    .‚îÇ\n‚îÇ3.   ‚îÇ     .     .     .    1‚îÇ\n‚îÇ.3   ‚îÇ     .     1     1   -1‚îÇ\n‚îÇB‚ÇÇ:2 ‚îÇ     .     .     1   -1‚îÇ\n‚îÇB‚ÇÇ:11‚îÇ     1    -1     .    .‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Families","page":"Unipotent characters","title":"Chevie.Families","text":"Families of unipotent characters\n\nThe blocks of the (rectangular) matrix R·µ™œÅ_ùêÜ ^F when œá runs over Irr(W)  and  œÅ  runs  over  the  unipotent  characters,  are called the Lusztig  families. When  ùêÜ  is split  and W  is a Coxeter group they correspond  on the Irr(W) side to two-sided Kazhdan-Lusztig cells ‚Äì- for split  Spetses they  correspond to  Rouquier blocks  of the  Spetsial Hecke algebra.  The matrix of scalar products  R·µ™œÅ_ùêÜ ^F can be completed to   a  square  matrix  A_œÅœÅ_ùêÜ  ^F  where  A_œÅ  are  the characteristic  functions of character  sheaves on ùêÜ  ^F; this square matrix is called the Fourier matrix of the family.\n\nThe  'UnipotentCharacters' record in Chevie contains a field '.families', a list of family records containing information on each family, including the Fourier matrix. Here is an example.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> uc=UnipotentCharacters(W);\n\njulia> uc.families\n3-element Vector{Family}:\n Family(D(ùîñ ‚ÇÉ),[5, 6, 4, 3, 8, 7, 9, 10],ennola=-5)\n Family(C‚ÇÅ,[1])\n Family(C‚ÇÅ,[2])\n\njulia> uc.families[1]\nFamily(D(ùîñ ‚ÇÉ),[5, 6, 4, 3, 8, 7, 9, 10],ennola=-5)\nDrinfeld double of ùîñ ‚ÇÉ, Lusztig‚Ä≤s version\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel   ‚îÇeigen                                               ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ(1,1)   ‚îÇ    1 1//6  1//2  1//3  1//3  1//6  1//2  1//3  1//3‚îÇ\n‚îÇ(g‚ÇÇ,1)  ‚îÇ    1 1//2  1//2     .     . -1//2 -1//2     .     .‚îÇ\n‚îÇ(g‚ÇÉ,1)  ‚îÇ    1 1//3     .  2//3 -1//3  1//3     . -1//3 -1//3‚îÇ\n‚îÇ(1,œÅ)   ‚îÇ    1 1//3     . -1//3  2//3  1//3     . -1//3 -1//3‚îÇ\n‚îÇ(1,Œµ)   ‚îÇ    1 1//6 -1//2  1//3  1//3  1//6 -1//2  1//3  1//3‚îÇ\n‚îÇ(g‚ÇÇ,Œµ)  ‚îÇ   -1 1//2 -1//2     .     . -1//2  1//2     .     .‚îÇ\n‚îÇ(g‚ÇÉ,Œ∂‚ÇÉ) ‚îÇ   Œ∂‚ÇÉ 1//3     . -1//3 -1//3  1//3     .  2//3 -1//3‚îÇ\n‚îÇ(g‚ÇÉ,Œ∂‚ÇÉ¬≤)‚îÇ  Œ∂‚ÇÉ¬≤ 1//3     . -1//3 -1//3  1//3     . -1//3  2//3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> charnames(uc)[uc.families[1].charNumbers]\n8-element Vector{String}:\n \"phi2,1\"\n \"phi2,2\"\n \"phi1,3''\"\n \"phi1,3'\"\n \"G2[1]\"\n \"G2[-1]\"\n \"G2[E3]\"\n \"G2[E3^2]\"\n\nThe  Fourier matrix is obtained  by 'fourier(f)'; the field 'f.charNumbers' holds  the indices of the unipotent characters  which are in the family. We obtain  the list of eigenvalues of Frobenius for these unipotent characters by  'Eigenvalues(f)'. The Fourier matrix  and vector of eigenvalues satisfy the  properties of  fusion data,  see below.  The field 'f.charLabels' is what  is displayed  in the  column 'labels'  when displaying the family. It contains  labels naturally attached to lines  of the Fourier matrix. In the case   of  reductive  groups,   the  family  is   always  attached  to  the \"drinfeld_double\"  of a small finite group  and the '.charLabels' come from this construction.\n\n\n\n\n\n","category":"module"},{"location":"uch.html#Chevie.Families.Family","page":"Unipotent characters","title":"Chevie.Families.Family","text":"Family(f [, charNumbers [, opt]])\n\nThis function creates a new family in two possible ways.\n\nIn  the first case f is a string which denotes a family known to  Chevie. Examples are \"S3\",   \"S4\",   \"S5\"   which denote the family obtained as the Drinfeld  double of the symmetric group  on 3,4,5 elements, or \"C2\"   which denotes the Drinfeld double of the cyclic group of order 2.\n\nIn the second case f is already a struct Family.\n\nThe other (optional) arguments add information to the family defined by the first argument. If given, the second argument becomes f.charNumbers. If given,  the third argument  opt is a  Dict whose keys  are added to the resulting family.\n\nIf opt has a key signs, this should be a list of '1' and '-1', and then the  Fourier matrix  is conjugated  by the  diagonal matrix of those signs. This  is used  in Spetses  to adjust  the matrix  to the choice of signs of unipotent degrees.\n\njulia> Family(\"C2\")\nFamily(C‚ÇÇ,4)\nDrinfeld double D(‚Ñ§/2)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel ‚îÇeigen                       ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ(1,1) ‚îÇ    1 1//2  1//2  1//2  1//2‚îÇ\n‚îÇ(g‚ÇÇ,1)‚îÇ    1 1//2  1//2 -1//2 -1//2‚îÇ\n‚îÇ(1,Œµ) ‚îÇ    1 1//2 -1//2  1//2 -1//2‚îÇ\n‚îÇ(g‚ÇÇ,Œµ)‚îÇ   -1 1//2 -1//2 -1//2  1//2‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> Family(\"C2\",4:7;signs=[1,-1,1,-1])\nFamily(C‚ÇÇ,4:7,signs=[1, -1, 1, -1])\nDrinfeld double D(‚Ñ§/2)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel ‚îÇeigen signs                       ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ(1,1) ‚îÇ    1     1  1//2 -1//2 1//2 -1//2‚îÇ\n‚îÇ(g‚ÇÇ,1)‚îÇ    1    -1 -1//2  1//2 1//2 -1//2‚îÇ\n‚îÇ(1,Œµ) ‚îÇ    1     1  1//2  1//2 1//2  1//2‚îÇ\n‚îÇ(g‚ÇÇ,Œµ)‚îÇ   -1    -1 -1//2 -1//2 1//2  1//2‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"type"},{"location":"uch.html#CyclotomicNumbers.galois-Tuple{Family, Int64}","page":"Unipotent characters","title":"CyclotomicNumbers.galois","text":"galois(f::Family,p::Int)\n\nx->galois(x,p)  is  applied  to  the  Fourier  matrix  and eigenvalues of Frobenius of the family.\n\njulia> f=UnipotentCharacters(complex_reflection_group(3,1,1)).families[2]\nFamily(0011,[4, 3, 2],cospecial=2)\nimprimitive family\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel‚îÇeigen      1        2        3‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1    ‚îÇ  Œ∂‚ÇÉ¬≤  ‚àö-3/3    ‚àö-3/3   -‚àö-3/3‚îÇ\n‚îÇ2    ‚îÇ    1  ‚àö-3/3 Œ∂‚ÇÉ¬≤‚àö-3/3 -Œ∂‚ÇÉ‚àö-3/3‚îÇ\n‚îÇ3    ‚îÇ    1 -‚àö-3/3 -Œ∂‚ÇÉ‚àö-3/3 Œ∂‚ÇÉ¬≤‚àö-3/3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> galois(f,-1)\nFamily(conj(0011),[4, 3, 2],cospecial=2)\nconj(imprimitive family)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel‚îÇeigen      1        2        3‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1    ‚îÇ   Œ∂‚ÇÉ -‚àö-3/3   -‚àö-3/3    ‚àö-3/3‚îÇ\n‚îÇ2    ‚îÇ    1 -‚àö-3/3 -Œ∂‚ÇÉ‚àö-3/3 Œ∂‚ÇÉ¬≤‚àö-3/3‚îÇ\n‚îÇ3    ‚îÇ    1  ‚àö-3/3 Œ∂‚ÇÉ¬≤‚àö-3/3 -Œ∂‚ÇÉ‚àö-3/3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"method"},{"location":"uch.html#PermGroups.Perms.invpermute-Tuple{Family, Perm}","page":"Unipotent characters","title":"PermGroups.Perms.invpermute","text":"invpermute(f::Family, p::Union{Perm,SPerm})\n\nreturns  a copy of  f with the  Fourier matrix, eigenvalues of Frobenius, :charLabels‚Ä¶ invpermuted by p.\n\njulia> f=UnipotentCharacters(complex_reflection_group(3,1,1)).families[2]\nFamily(0011,[4, 3, 2],cospecial=2)\nimprimitive family\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel‚îÇeigen      1        2        3‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1    ‚îÇ  Œ∂‚ÇÉ¬≤  ‚àö-3/3    ‚àö-3/3   -‚àö-3/3‚îÇ\n‚îÇ2    ‚îÇ    1  ‚àö-3/3 Œ∂‚ÇÉ¬≤‚àö-3/3 -Œ∂‚ÇÉ‚àö-3/3‚îÇ\n‚îÇ3    ‚îÇ    1 -‚àö-3/3 -Œ∂‚ÇÉ‚àö-3/3 Œ∂‚ÇÉ¬≤‚àö-3/3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> invpermute(f,Perm(1,2,3))\nFamily(0011,[2, 4, 3],cospecial=3)\nPermuted((1,2,3),imprimitive family)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel‚îÇeigen        3      1        2‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ3    ‚îÇ    1 Œ∂‚ÇÉ¬≤‚àö-3/3 -‚àö-3/3 -Œ∂‚ÇÉ‚àö-3/3‚îÇ\n‚îÇ1    ‚îÇ  Œ∂‚ÇÉ¬≤   -‚àö-3/3  ‚àö-3/3    ‚àö-3/3‚îÇ\n‚îÇ2    ‚îÇ    1 -Œ∂‚ÇÉ‚àö-3/3  ‚àö-3/3 Œ∂‚ÇÉ¬≤‚àö-3/3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"method"},{"location":"uch.html#Base.conj-Tuple{Family}","page":"Unipotent characters","title":"Base.conj","text":"conj(f::Family): is a synonym for 'galois(f,-1)'.\n\n\n\n\n\n","category":"method"},{"location":"uch.html#Chevie.Families.fourier","page":"Unipotent characters","title":"Chevie.Families.fourier","text":"fourier(uc::UnipotentCharacters) the Lusztig Fourier matrix for uc.\n\n\n\n\n\nfourier(f::Family): the Fourier matrix of the family.\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Families.drinfeld_double","page":"Unipotent characters","title":"Chevie.Families.drinfeld_double","text":"drinfeld_double(g;lu=false,pivotal=nothing)\n\nGiven  a (usually small) finite group  Œì, Lusztig has associated a family (a  Fourier matrix, a list of eigenvalues of Frobenius) which describes the representation ring of the Drinfeld double of the group algebra of Œì, and for   some  appropriate  small  groups  describes  a  family  of  unipotent characters. We do not explain the details of this construction, but explain how its final result building Lusztig's Fourier matrix, and a variant of it that we use in Spetses, from Œì.\n\nThe  elements of the family are in bijection  with the set ùìú (Œì) of pairs (x,œÜ)  taken up to  Œì-conjugacy, where x‚ààŒì  and œÜ is an irreducible complex-valued   character  of  C_Œì(x).  To  such  a  pair  œÅ=(x,œÜ)  is associated  an  eigenvalue  of  Frobenius  defined  by  œâ_œÅ=œÜ(x)œÜ(1). Lusztig  then defines a Fourier matrix S‚ÇÄ whose coefficient is given, for œÅ=(x,œÜ) and œÅ'=(x', œÜ'), by:\n\nS‚ÇÄ_œÅœÅ=C_Œì(x)¬π_œÅ‚ÇÅ=(x‚ÇÅœÜ‚ÇÅ)œÜ‚ÇÅ(x)œÜ(y‚ÇÅ)\n\nwhere  the sum is over all pairs œÅ‚ÇÅ‚ààùìú (Œì) which are Œì-conjugate to œÅ' and  such that y‚ÇÅ C_Œì(x). This  coefficient also represents the scalar product œÅœÅ_ùêÜ^F of the corresponding unipotent characters.\n\nA  way to  understand the  formula for  S‚ÇÄ_œÅœÅ better is to consider another  basis of the complex  vector space with basis  ùìú (Œì), indexed by the  pairs  (x,y)  taken  up  to  Œì-conjugacy,  where  x  and y are commuting  elements  of  Œì.  This  basis  is  called  the basis of Mellin transforms, and given by:\n\n(xy)=_œÜ Irr(C_Œì(x))œÜ(y)(xœÜ)\n\nIn  the  basis  of  Mellin  transforms,  the  linear  map  S‚ÇÄ is given by (x,y)‚Ü¶(x‚Åª¬π,y‚Åª¬π)  and  the  linear  transformation  T which sends œÅ to œâ_œÅœÅ   becomes  (x,y)‚Ü¶(x,xy).   These  are   particular  cases  of  the permutation  representation of GL‚ÇÇ(‚Ñ§)  on the basis  of Mellin transforms where beginpmatrixabcr cdendpmatrix acts by (x,y)‚Ü¶(x·µÉy·µá,x·∂úy·µà).\n\nFourier  matrices in finite reductive groups  are given by the above matrix S‚ÇÄ.  But for non-rational Spetses, we use a different matrix S which in the  basis of Mellin transforms  is given by (x,y)‚Ü¶(y‚Åª¬π,x). Equivalently, the formula S_œÅœÅ differs from the formula for S‚ÇÄ_œÅœÅ in that there  is no complex conjugation  of œá‚ÇÅ; thus the  matrix S is equal to S‚ÇÄ multiplied on the right by the permutation matrix which corresponds to (x,œÜ)‚Ü¶(x,œÜ).  The advantage of the matrix S  over S‚ÇÄ is that the pair S,T  satisfies directly the axioms for  fusion data (see below); also the matrix S is symmetric, while S‚ÇÄ is Hermitian.\n\nThus there are two variants of 'drinfeld_double`:\n\ndrinfeld_double(g;lu=false)\n\nreturns  a family  containing Lusztig's  Fourier matrix  S‚ÇÄ, and an extra field  '.perm'  containing  the  permutation  of  the  indices  induced  by (x,œÜ)‚Ü¶(x,œÜ),  which allows  to recover  S, as  well as  an extra field `:lusztig', set to 'true'.\n\ndrinfeld_double(g)\n\nreturns a family with the matrix S, which does not have fields '.lusztig' or '.perm'.\n\nThe family record 'f' returned also has the fields:\n\n:group: the group Œì.\n\n:charLabels: a list of labels describing the pairs (x,œÜ), and thus also specifying in which order they are taken.\n\n:fourierMat: the Fourier matrix (the matrix S or S‚ÇÄ depending on the call).\n\n:eigenvalues: the eigenvalues of Frobenius.\n\n:xy: a list of pairs '[x,y]' which are representatives of the Œì-orbits of pairs of commuting elements.\n\n:mellinLabels: a list of labels describing the pairs '[x,y]'.\n\n:mellin:  the base change matrix between  the basis (x,œÜ) and the basis of   Mellin  transforms,   so  that   |f.fourierMat^(f.mellin^-1)|  is  the permutation  matrix (for (x,y)‚Ü¶(y‚Åª¬π,x)  or (x,y)‚Ü¶(y‚Åª¬π,x‚Åª¬π) depending on the call).\n\n:special: the index of the special element, which is (x,œÜ)=(1,1).\n\njulia> drinfeld_double(coxsym(3)) # needs \"using GAP\"\nFamily(drinfeld_double(coxsym(3)),8)\nDrinfeld double D(coxsym(3))\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel  ‚îÇeigen                                               ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ(1,1)  ‚îÇ    1  1//6  1//3 1//6 -1//2 -1//2  1//3  1//3  1//3‚îÇ\n‚îÇ(1,X.2)‚îÇ    1  1//3  2//3 1//3     .     . -1//3 -1//3 -1//3‚îÇ\n‚îÇ(1,X.3)‚îÇ    1  1//6  1//3 1//6  1//2  1//2  1//3  1//3  1//3‚îÇ\n‚îÇ(21,1) ‚îÇ    1 -1//2     . 1//2  1//2 -1//2     .     .     .‚îÇ\n‚îÇ(21,-1)‚îÇ   -1 -1//2     . 1//2 -1//2  1//2     .     .     .‚îÇ\n‚îÇ(3,1)  ‚îÇ    1  1//3 -1//3 1//3     .     .  2//3 -1//3 -1//3‚îÇ\n‚îÇ(3,Œ∂‚ÇÉ) ‚îÇ   Œ∂‚ÇÉ  1//3 -1//3 1//3     .     . -1//3 -1//3  2//3‚îÇ\n‚îÇ(3,Œ∂‚ÇÉ¬≤)‚îÇ  Œ∂‚ÇÉ¬≤  1//3 -1//3 1//3     .     . -1//3  2//3 -1//3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> drinfeld_double(coxsym(3);lu=true)\nFamily(Ldrinfeld_double(coxsym(3)),8)\nLusztig‚Ä≤sDrinfeld double D(coxsym(3))\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel  ‚îÇeigen                                               ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ(1,1)  ‚îÇ    1  1//6  1//3 1//6 -1//2 -1//2  1//3  1//3  1//3‚îÇ\n‚îÇ(1,X.2)‚îÇ    1  1//3  2//3 1//3     .     . -1//3 -1//3 -1//3‚îÇ\n‚îÇ(1,X.3)‚îÇ    1  1//6  1//3 1//6  1//2  1//2  1//3  1//3  1//3‚îÇ\n‚îÇ(21,1) ‚îÇ    1 -1//2     . 1//2  1//2 -1//2     .     .     .‚îÇ\n‚îÇ(21,-1)‚îÇ   -1 -1//2     . 1//2 -1//2  1//2     .     .     .‚îÇ\n‚îÇ(3,1)  ‚îÇ    1  1//3 -1//3 1//3     .     .  2//3 -1//3 -1//3‚îÇ\n‚îÇ(3,Œ∂‚ÇÉ) ‚îÇ   Œ∂‚ÇÉ  1//3 -1//3 1//3     .     . -1//3  2//3 -1//3‚îÇ\n‚îÇ(3,Œ∂‚ÇÉ¬≤)‚îÇ  Œ∂‚ÇÉ¬≤  1//3 -1//3 1//3     .     . -1//3 -1//3  2//3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThe  keyword pivotal  describes the  pivotal structure  as a tuple of the pivotal  element and the vector  of values of the  pivotal character on the generators of g.\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Families.ndrinfeld_double","page":"Unipotent characters","title":"Chevie.Families.ndrinfeld_double","text":"ndrinfeld_double(g)\n\nThis  function returns the number of elements that the family associated to the  Drinfeld double of the group g would have, without computing it. The evident advantage is the speed.\n\njulia> Families.ndrinfeld_double(complex_reflection_group(5))\n378\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Families.family_imprimitive","page":"Unipotent characters","title":"Chevie.Families.family_imprimitive","text":"family_imprimitive(S)\n\nS should be a symbol for a unipotent characters of an imprimitive complex reflection  group 'G(e,1,n)' or 'G(e,e,n)'. The function returns the family containing S.\n\njulia> family_imprimitive([[0,1],[1],[0]])\nFamily(0011,3)\nimprimitive family\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇlabel‚îÇeigen      1        2        3‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1    ‚îÇ  Œ∂‚ÇÉ¬≤  ‚àö-3/3   -‚àö-3/3    ‚àö-3/3‚îÇ\n‚îÇ2    ‚îÇ    1 -‚àö-3/3 Œ∂‚ÇÉ¬≤‚àö-3/3 -Œ∂‚ÇÉ‚àö-3/3‚îÇ\n‚îÇ3    ‚îÇ    1  ‚àö-3/3 -Œ∂‚ÇÉ‚àö-3/3 Œ∂‚ÇÉ¬≤‚àö-3/3‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Families.FamiliesClassical","page":"Unipotent characters","title":"Chevie.Families.FamiliesClassical","text":"FamiliesClassical(l)\n\nl  should be a list of symbols which classify the unipotent characters of a  classical reductive group, like symbols(2,r) for type B·µ£ or C·µ£, or symbols(2,r,0)  for type D·µ£. The function  returns the list of families determined  by these symbols.\n\njulia> FamiliesClassical(symbols(2,3)) # for a reductive group of type B‚ÇÉ\n6-element Vector{Family}:\n Family(112,[2])\n Family(022,[6])\n Family(3,[9])\n Family(01123,[1, 3, 8, 11])\n Family(0112233,[4])\n Family(013,[5, 7, 10, 12])\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Base.:*-Tuple{Family, Family}","page":"Unipotent characters","title":"Base.:*","text":"<f>*<g>:  returns the  tensor product  of two  families <f> and <g>; the Fourier  matrix is the Kronecker  product of the matrices  for <f> and <g>, and the eigenvalues of Frobenius are the pairwise products.\n\n\n\n\n\n","category":"method"},{"location":"uch.html#Chevie.Families.special","page":"Unipotent characters","title":"Chevie.Families.special","text":"special(f::Family) the index of the special character in f\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Families.cospecial","page":"Unipotent characters","title":"Chevie.Families.cospecial","text":"cospecial(f::Family) the index of the cospecial character in f\n\n\n\n\n\n","category":"function"},{"location":"uch.html#Chevie.Families.Zbasedring","page":"Unipotent characters","title":"Chevie.Families.Zbasedring","text":"Zbasedring(f::Family) or Zbasedring(S,special=1)\n\nAll  the Fourier matrices S in Chevie are unitary, that is S‚Åª¬π=conj(S), and  have a  special line  s (the  line of  index s=special(f)  for a family  f) such that no entry S‚Çõ,·µ¢  is equal to 0. Further, they have the  property that  the sums  C·µ¢,‚±º,‚Çñ=sum‚Çó S·µ¢,‚Çó  S‚±º,‚Çó conj(S‚Çñ,‚Çó)/S‚Çõ,‚Çó take integral  values. Finally,  S has  the property  that complex conjugation does a permutation with signs œÉ of the lines of S.\n\nIt  follows that we can define a ‚Ñ§-algebra A as follows: it has a basis b·µ¢  indexed by the lines of S,  and has a multiplication defined by the fact  that the  coefficient of  b·µ¢b‚±º on  b‚Çñ is  equal to C·µ¢,‚±º,‚Çñ. This algebra  can be specified by giving a family f or just its Fourier matrix and the number of its special line.\n\nA  is commutative, and has as unit  the element b‚Çõ; the basis œÉ(b·µ¢)isdual to b·µ¢ for the linear form (b·µ¢,b‚±º)=C·µ¢,‚±º,œÉ‚Çç‚Çõ‚Çé`.\n\njulia> W=complex_reflection_group(4)\nG‚ÇÑ\n\njulia> uc=UnipotentCharacters(W);f=uc.families[4];\n\njulia> A=Zbasedring(fourier(f),1)\n‚Ñ§-based ring dim.5\n\njulia> b=basis(A)\n5-element Vector{AlgebraElt{Chevie.Families.ZBasedRing, Int64}}:\n B‚ÇÅ\n B‚ÇÇ\n B‚ÇÉ\n B‚ÇÑ\n B‚ÇÖ\n\njulia> b*permutedims(b)\n5√ó5 Matrix{AlgebraElt{Chevie.Families.ZBasedRing, Int64}}:\n B‚ÇÅ  B‚ÇÇ      B‚ÇÉ      B‚ÇÑ        B‚ÇÖ\n B‚ÇÇ  -B‚ÇÑ+B‚ÇÖ  B‚ÇÅ+B‚ÇÑ   B‚ÇÇ-B‚ÇÉ     B‚ÇÉ\n B‚ÇÉ  B‚ÇÅ+B‚ÇÑ   -B‚ÇÑ+B‚ÇÖ  -B‚ÇÇ+B‚ÇÉ    B‚ÇÇ\n B‚ÇÑ  B‚ÇÇ-B‚ÇÉ   -B‚ÇÇ+B‚ÇÉ  B‚ÇÅ+B‚ÇÑ-B‚ÇÖ  -B‚ÇÑ\n B‚ÇÖ  B‚ÇÉ      B‚ÇÇ      -B‚ÇÑ       B‚ÇÅ\n\njulia> CharTable(A)\nCharTable(‚Ñ§-based ring dim.5)\n‚îå‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚îÇ1    2    3  4  5‚îÇ\n‚îú‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1‚îÇ1  ‚àö-3 -‚àö-3  2 -1‚îÇ\n‚îÇ2‚îÇ1    1    1  .  1‚îÇ\n‚îÇ3‚îÇ1   -1   -1  .  1‚îÇ\n‚îÇ4‚îÇ1    .    . -1 -1‚îÇ\n‚îÇ5‚îÇ1 -‚àö-3  ‚àö-3  2 -1‚îÇ\n‚îî‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"function"},{"location":"format.html#formatting-facilities","page":"formatting facilities","title":"formatting facilities","text":"","category":"section"},{"location":"format.html","page":"formatting facilities","title":"formatting facilities","text":"Pages=[\"format.md\"]","category":"page"},{"location":"format.html","page":"formatting facilities","title":"formatting facilities","text":"Format\nrio\nxprint\nxprintln\nxdisplay\nxrepr\nfromTeX\nprintTeX\nshowtable\njoindigits\ncut\nordinal","category":"page"},{"location":"format.html#Chevie.Format","page":"formatting facilities","title":"Chevie.Format","text":"Chevie   contains  some   extended  formatting   facilities  for  printing, displaying,  formatting  objects  in  various  ways. For that Chevie uses extensively  IO properties.  We have  sevral convenience  functions which make using IO properties easier.\n\nrio(;d...)   makes  an  IO   stream  which  always   has  the  property :limit=>true,  to mimic the REPL default printing, and has also the extra properties given by the d... keywords. Using this, for instance\n\nIOContext(stdout,:limit=>true,:compact=>true) becomes rio(compact=true).\n\nWe have versions of display functions which use implicitely rio:\n\nxprint(x...;p...) is the same as print(rio(;p...),x...). Similarly for println, display we have xprintln, xdisplay.\n\nxrepr(x;p...) is the same as repr(x;context=IOContext(stdout,p...)). xrepr(io,x) is the same as repr(x;context=io).\n\njulia> @Pol q;p=(q^5+1)^2\nPol{Int64}: q¬π‚Å∞+2q‚Åµ+1\n\njulia> print(p)\nPol([1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1])\njulia> xprint(p)\nq¬π‚Å∞+2q‚Åµ+1\njulia> xprint(p;varname=:x)\nx¬π‚Å∞+2x‚Åµ+1\njulia> repr(2E(5,2)+2E(5,3))\n\"Cyc{Int64}(-1-root(5))\"\n\njulia> xrepr(2E(5,2)+2E(5,3);quadratic=false)\n\"Cyc{Int64}(2E(5,2)+2E(5,3))\"\n\nMost  objects in Chevie use  TeX for printing when  given the IO property :TeX=true. This is used as the default display in IJulia and Pluto by giving the property :TeX when defining Base.show(io::IO, ::MIME\"text/html\", ...) for these objects. Continuing the above example:\n\njulia> xprint(p;TeX=true)\nq^{10}+2q^5+1\n\nA  model we often  adopt for displaying  nicely complex objects is to first write  a nice  display using  TeX output.  This can  be used  directly in IJulia and Pluto. For other environments, we can compute from the TeX representation a suitable one using the following function:\n\nfromTeX(io::IO,s)  takes  a  TeX  source  and  tries  to  give the best possible  rendering on  a given  IO. This  uses unicode characters at the REPL  (if get(io,:limit,false)==true).  In the  worse case (stdout) all TeX special characters are stripped.\n\njulia> s=\"E_6[\\zeta_3]:\\phi_{1,6}\"\n\"E_6[\\zeta_3]:\\phi_{1,6}\"\n\njulia> fromTeX(rio(),s)\n\"E‚ÇÜ[Œ∂‚ÇÉ]:œÜ‚ÇÅ‚Äö‚ÇÜ\"\n\njulia> fromTeX(stdout,s)\n\"E6[E3]:phi1,6\"\n\nprintTeX(io,s) is the same as print(io,fromTeX(io,s)).\n\nOther functions to ease formatting are described below: see showtable, joindigits, ordinal, cut.\n\n\n\n\n\n","category":"module"},{"location":"format.html#Chevie.Format.rio","page":"formatting facilities","title":"Chevie.Format.rio","text":"rio(io::IO=stdout;p...) enriches io with the attributes in p. It always enriches with limit=true to mimic display at the REPL.\n\nThus print(rio(),x...) is like printing x... at the REPL.\n\n\n\n\n\n","category":"function"},{"location":"format.html#Chevie.Format.xprint","page":"formatting facilities","title":"Chevie.Format.xprint","text":"xprint(x...;p...) is like print but uses the enriched io rio(;p...)\n\n\n\n\n\n","category":"function"},{"location":"format.html#Chevie.Format.xprintln","page":"formatting facilities","title":"Chevie.Format.xprintln","text":"xprintln(x...;p...) is like println but uses the enriched io rio(;p...)\n\n\n\n\n\n","category":"function"},{"location":"format.html#Chevie.Format.xdisplay","page":"formatting facilities","title":"Chevie.Format.xdisplay","text":"xdisplay(x...;p...) is like display but uses the enriched io rio(;p...)\n\n\n\n\n\n","category":"function"},{"location":"format.html#Chevie.Format.xrepr","page":"formatting facilities","title":"Chevie.Format.xrepr","text":"xrepr(x;p...) is repr using as context stdout enriched by p...\n\n\n\n\n\nxrepr(io,x;p...) is repr using as context io enriched by p...\n\n\n\n\n\n","category":"function"},{"location":"format.html#Chevie.Format.fromTeX","page":"formatting facilities","title":"Chevie.Format.fromTeX","text":"fromTeX to document\n\n\n\n\n\n","category":"function"},{"location":"format.html#Chevie.Format.printTeX","page":"formatting facilities","title":"Chevie.Format.printTeX","text":"printTeX(io,s) is print(io,fromTeX(io,s))\n\n\n\n\n\n","category":"function"},{"location":"format.html#Chevie.Format.showtable","page":"formatting facilities","title":"Chevie.Format.showtable","text":"showtable(io::IO=stdout, table::AbstractMatrix; keywords)\n\nGeneral  routine to format a table at  the REPL, or in IJulia or Pluto. The elements of table and any of the labels in the keywords can be of any type  and are formatted in the context  of io, excepted that a string s is  formatted by  fromTeX(io,s). The  following options  can be passed as properties of the io or as keywords.\n\nrow_labels: labels for rows. A Vector{Any} (can be strings), default axes(table,1)\nrows_label: label for first column of row labels (default none)\ncol_labels: labels for other columns (default none)\nalign:  a character in \"lcr\": alignment of columns (default 'r'); then all columns will be aligned as given except the rows_labels which will always be aligned left. Or if align is a string it should be of length 1+size(table,2) where the first character is the alignment of the row_labels.\nrow_seps: line numbers after which to put a separator. A number of i means before i-th line of the table. So 0 is at the top  of  the  table,  -1  is  before the col_labels. The default is [-1,0,size(table,1)].\ncol_seps: column numbers after which to put a separator. A  number of i means before i-th column  of the table. So 0 is at the  left of the table, -1 is before the row_labels. The default is [-1,0,size(table,2)].  Alternately the col_seps  can be given using an  align string in  LaTeX style |r|llll|.  They should be given by only one of the two ways.\nrows: show only these rows. Default all rows: axes(table,1)\ncols: show only these columns. Default all columns: axes(table,1)\nTeX: default false. If true, give LaTeX output (useful to give nicer output in Jupyter or Pluto)\ncolumn_repartition: a Vector{<:Integer}. Display in vertical pieces of sizes indicated (useful for TeX: otherwise the column_repartition is automatically computed taking in account displaysize(io,2)).\ndotzero: if true replace a '0' by '.' in the table (default false).\n\njulia> m=reshape(1:10:120,3,4)\n3√ó4 reshape(::StepRange{Int64, Int64}, 3, 4) with eltype Int64:\n  1  31  61   91\n 11  41  71  101\n 21  51  81  111\n\njulia> showtable(m)\n‚îå‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ1‚îÇ 1 31 61  91‚îÇ\n‚îÇ2‚îÇ11 41 71 101‚îÇ\n‚îÇ3‚îÇ21 51 81 111‚îÇ\n‚îî‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> labels=[\"x\",\"y\",\"z\",\"t\"];\n\njulia> showtable(m;cols=2:4,col_labels=labels,row_seps=[0,2,3])\n    y  z   t \n‚îå‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ1‚îÇ31 61  91‚îÇ\n‚îÇ2‚îÇ41 71 101‚îÇ\n‚îú‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ3‚îÇ51 81 111‚îÇ\n‚îî‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\njulia> showtable(m;col_labels=labels,rows_label=\"N\",align=\"|r|ll|ll|\")\n‚îå‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇN‚îÇ x  y‚îÇ z   t‚îÇ\n‚îú‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ1‚îÇ1  31‚îÇ61 91 ‚îÇ\n‚îÇ2‚îÇ11 41‚îÇ71 101‚îÇ\n‚îÇ3‚îÇ21 51‚îÇ81 111‚îÇ\n‚îî‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"function"},{"location":"format.html#Chevie.Format.joindigits","page":"formatting facilities","title":"Chevie.Format.joindigits","text":"joindigits(l::AbstractVector{Int},delim=\"()\";sep=\",\")\n\nprint  a list l of  (usually small) numbers as  compactly as possible: no separators if all numbers are smaller than 10.\n\njulia> joindigits([1,9,3,5])\n\"1935\"\n\njulia> joindigits([1,10,3,5])\n\"(1,10,3,5)\"\n\njulia> joindigits([1,10,3,5],\"[]\";sep=\"-\")\n\"[1-10-3-5]\"\n\n\n\n\n\n","category":"function"},{"location":"format.html#Chevie.Format.cut","page":"formatting facilities","title":"Chevie.Format.cut","text":"cut(io::IO=stdout,string;width=displaysize(io)[2]-2,after=\",\",before=\"\")\n\nThis  function prints to io the  string argument cut across several lines for improved display. It can take the following keyword arguments:\n\nwidth:  the cutting width\nafter:  cut after these chars\nbefore: cut before these chars\n\njulia> cut(string(collect(1:50)))\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n\n\n\n\n\n","category":"function"},{"location":"format.html#Chevie.Format.ordinal","page":"formatting facilities","title":"Chevie.Format.ordinal","text":"ordinal(n::Integer)\n\nstring for an ordinal number respecting english syntax.\n\njulia> ordinal(201)\n\"201st\"\n\njulia> ordinal(202)\n\"202nd\"\n\njulia> ordinal(203)\n\"203rd\"\n\njulia> ordinal(204)\n\"204th\"\n\n\n\n\n\n","category":"function"},{"location":"eigen.html#Eigenspaces","page":"Eigenspaces","title":"Eigenspaces","text":"","category":"section"},{"location":"eigen.html","page":"Eigenspaces","title":"Eigenspaces","text":"Pages=[\"eigen.md\"]","category":"page"},{"location":"eigen.html","page":"Eigenspaces","title":"Eigenspaces","text":"Eigenspaces\nrelative_degrees\nregular_eigenvalues\neigenspace_projector\nposition_regular_class\nsplit_levis\ncuspidal","category":"page"},{"location":"eigen.html#Chevie.Eigenspaces","page":"Eigenspaces","title":"Chevie.Eigenspaces","text":"Eigenspaces and d-Harish-Chandra series\n\nLet  Wœï be a  reflection coset on  a vector space  V; that is Œ¶‚ààGL(V) normalizes  the reflection group  W. Let Lwœï  be a reflection subcoset; that  is L is a  parabolic subgroup of W  (the fixator of a subspace of V)  and  w‚àà  W  is  such  that  wŒ¶  normalizes L. There are several interesting  cases where the relative group N_W(Lwœï)L, or a subgroup of it normalizing some further data attached to L, is itself a reflection group.\n\nA first example is the case where œï=1 and w=1, W is the Weyl group of a   finite  reductive   group  ùêÜ^F   and  the   Levi  subgroup  ùêã^F corresponding  to L has a cuspidal unipotent character. Then N_W(L)L is  a  Coxeter  group  acting  on  the  space  X(Zùêã)‚äó‚Ñù.  A  combinatorial characterization of such parabolic subgroups of Coxeter groups is that they are  normalized by the  longest element of  larger parabolic subgroups (see 5.7.1 Lusztig1976).\n\nA  second  example  is  when  L  is  trivial  and  wœï is a Œ∂-regular element,  that is  the Œ∂-eigenspace  V_Œ∂ of  wœï contains  a vector outside  all the reflecting hyperplanes of W. Then N_W(Lwœï)L=C_W(wœï) is a reflection group in its action on V_Œ∂.\n\nA similar but more general example is when V_Œ∂ is the Œ∂-eigenspace of some  element of  the reflection  coset Wœï,  and is  of maximal dimension among  such Œ∂-eigenspaces. Then the set of  elements of Wœï which act by Œ∂  on  V_Œ∂  is  a  certain  subcoset  Lwœï,  and N_W(Lwœï)L is a reflection group in its action on V_Œ∂ (see 2.5 Lehrer-Springer1999).\n\nFinally,  a  still  more  general  example,  but which only occurs for Weyl groups  or  Spetsial  reflection  groups,  is  when ùêã is a Œ∂-split Levi subgroup  (which means that  the corresponding subcoset  Lwœï is formed of all  the elements which act by Œ∂ on  some subspace V_Œ∂ of V), and Œª is  a  d-cuspidal  unipotent  character  of  ùêã  (which  means  that the multiplicity  of Œ∂  as a  root of  the degree  of Œª  is the same as the multiplicity  of Œ∂ as a root of the generic order of the semi-simple part of  ùêÜ); then N_W(LwœïŒª)L is a complex reflection group in its action on V_Œ∂.\n\nFurther,  in the above cases the relative group describes the decomposition of a Lusztig induction.\n\nWhen  ùêÜ^F is  a finite  reductive group,  and Œª  a cuspidal unipotent character  of  the  Levi  subgroup  ùêã^F,  then the ùêÜ^F-endomorphism algebra  of  the  Harish-Chandra  induced  representation R_ùêã^ùêÜ(Œª) is a Hecke algebra attached to the group N_W(L)L, thus the dimension of the characters  of this group describe the multiplicities in the Harish-Chandra induced.\n\nSimilarly, when ùêã is a Œ∂-split Levi subgroup, and Œª is a d-cuspidal unipotent  character of  ùêã then  (conjecturally) the ùêÜ^F-endomorphism algebra  of the Lusztig induced R_ùêã^ùêÜ(Œª)  is a cyclotomic Hecke algebra for  to the  group N_W(LwœïŒª)L.  The constituents  of R_ùêã^ùêÜ(Œª) are called  a  Œ∂-Harish-Chandra  series.  In  the  case of rational groups or cosets,  corresponding to finite  reductive groups, the  conjugacy class of Lwœï  depends  only  on  the  order  d  of  Œ∂,  so  one  also talks of d-Harish-Chandra  series. These series correspond to ‚Ñì-blocks where l is  a prime divisor of Œ¶_d(q) which  does not divide any other cyclotomic factor of the order of ùêÜ^F.\n\nThe functions  relative_degrees, regular_eigenvalues, eigenspace_projector, position_regular_class, split_levis, cuspidal in this module and the functions in the module dSeries allow to explore these situations.\n\n\n\n\n\n","category":"module"},{"location":"eigen.html#Chevie.Eigenspaces.relative_degrees","page":"Eigenspaces","title":"Chevie.Eigenspaces.relative_degrees","text":"relative_degrees(WF,Œ∂::Root1=1)\n\nLet  WF be a reflection group or a  reflection coset and Œ∂ be a root of unity.  Then if V_Œ∂ is the Œ∂-eigenspace  of some element of WF, and is of maximal dimension among such Œ∂-eigenspaces (and if WF is a coset W  is the group of WF) then N_W(V_Œ∂)C_W(V_Œ∂) is a reflection group in  its  action  on  V_Œ∂.  The  function relative_degrees returns the reflection  degrees of this complex reflection group, which are a subset of those of W. These degrees are computed by an invariant-theoretic formula: if   (d‚ÇÅ,Œµ‚ÇÅ),‚Ä¶,(d‚Çô,Œµ‚Çô)  are   the  generalized   degrees  of   WF  (see degrees) they are the d·µ¢ such that Œ∂^{d·µ¢}=Œµ·µ¢.\n\nThe  eigenvalue Œ∂ can also  be specified by giving  an integer d (which then  specifies  Œ∂=E(d))  or  a  fraction  a//b  which  then  specifies Œ∂=E(b,a). If omitted, Œ∂ is taken to be 1.\n\njulia> W=coxgroup(:E,8)\nE‚Çà\n\njulia> relative_degrees(W,4) # the degrees of G‚ÇÉ‚ÇÇ\n4-element Vector{Int64}:\n  8\n 12\n 20\n 24\n\n\n\n\n\n","category":"function"},{"location":"eigen.html#Chevie.Eigenspaces.regular_eigenvalues","page":"Eigenspaces","title":"Chevie.Eigenspaces.regular_eigenvalues","text":"regular_eigenvalues(W)\n\nLet W be a reflection group or a reflection coset. A root of unity Œ∂ is a regular eigenvalue for W if some element of W has a Œ∂-eigenvector which   lies   outside   of   the   reflecting  hyperplanes.  The  function returns the list of regular eigenvalues for W.\n\njulia> regular_eigenvalues(coxgroup(:G,2))\n6-element Vector{Root1}:\n   1\n  -1\n  Œ∂‚ÇÉ\n Œ∂‚ÇÉ¬≤\n  Œ∂‚ÇÜ\n Œ∂‚ÇÜ‚Åµ\n\njulia> W=complex_reflection_group(6)\nG‚ÇÜ\n\njulia> L=twistings(W,[2])[4]\nG‚ÇÜ‚Çç‚ÇÇ‚Çé=G‚ÇÉ‚Äö‚ÇÅ‚Äö‚ÇÅ[Œ∂‚ÇÑ]Œ¶‚Ä≤‚ÇÑ\n\njulia> regular_eigenvalues(L)\n3-element Vector{Root1}:\n    Œ∂‚ÇÑ\n  Œ∂‚ÇÅ‚ÇÇ‚Å∑\n Œ∂‚ÇÅ‚ÇÇ¬π¬π\n\n\n\n\n\n","category":"function"},{"location":"eigen.html#Chevie.Eigenspaces.eigenspace_projector","page":"Eigenspaces","title":"Chevie.Eigenspaces.eigenspace_projector","text":"eigenspace_projector(WF,w,Œ∂::Root1=1)\n\nLet WF be a reflection group or a reflection coset, let w be an element of  WF and let  Œ∂ be a  root of unity.  The function returns the unique w-invariant projector on the Œ∂-eigenspace of w.\n\nThe  eigenvalue Œ∂ can also  be specified by giving  an integer d (which then  specifies  Œ∂=E(d))  or  a  fraction  a//b  which  then  specifies Œ∂=E(b,a). If omitted, Œ∂ is taken to be 1.\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> w=W(1:3...)\n(1,12,3,2)(4,11,10,5)(6,9,8,7)\n\njulia> p=eigenspace_projector(W,w,1//4)\n3√ó3 Matrix{Cyc{Rational{Int64}}}:\n  (1+Œ∂‚ÇÑ)/4   Œ∂‚ÇÑ/2  (-1+Œ∂‚ÇÑ)/4\n  (1-Œ∂‚ÇÑ)/4   1//2   (1+Œ∂‚ÇÑ)/4\n (-1-Œ∂‚ÇÑ)/4  -Œ∂‚ÇÑ/2   (1-Œ∂‚ÇÑ)/4\n\njulia> GenLinearAlgebra.rank(p)\n1\n\n\n\n\n\n","category":"function"},{"location":"eigen.html#Chevie.Eigenspaces.position_regular_class","page":"Eigenspaces","title":"Chevie.Eigenspaces.position_regular_class","text":"position_regular_class(WF,Œ∂::Root1=1)\n\nLet  WF be a reflection group or a  reflection coset and Œ∂ be a root of unity  such that some element of WF has a non-trivial Œ∂-eigenspace. The function   returns  the   index  of   a  conjugacy   class  of  WF  whose Œ∂-eigenspace  is  maximal  (amongst  all  Œ∂-eigenspaces of elements of W).  If no element of WF  has a non-trivial Œ∂-eigenspace the function returns nothing.\n\nThe  eigenvalue Œ∂ can also  be specified by giving  an integer d (which then  specifies  Œ∂=E(d))  or  a  fraction  a//b  which  then  specifies Œ∂=E(b,a). If omitted, Œ∂ is taken to be 1.\n\njulia> W=coxgroup(:E,8)\nE‚Çà\n\njulia> position_regular_class(W,30)\n65\n\njulia> W=complex_reflection_group(6)\nG‚ÇÜ\n\njulia> L=twistings(W,[2])[4]\nG‚ÇÜ‚Çç‚ÇÇ‚Çé=G‚ÇÉ‚Äö‚ÇÅ‚Äö‚ÇÅ[Œ∂‚ÇÑ]Œ¶‚Ä≤‚ÇÑ\n\njulia> position_regular_class(L,7//12)\n2\n\n\n\n\n\n","category":"function"},{"location":"eigen.html#Chevie.Eigenspaces.split_levis","page":"Eigenspaces","title":"Chevie.Eigenspaces.split_levis","text":"split_levis(WF,Œ∂::Root1=1[,ad])\n\nLet  WF  be  a  reflection  group  or  a  reflection  coset.  If W is a reflection group it is treated as the trivial coset 'Spets(W)'. A  Levi  is  a  subcoset  of  the  form W‚ÇÅF‚ÇÅ where W‚ÇÅ is a parabolic subgroup of W, that is the centralizer of some subspace of V, and F‚ÇÅ‚àà WF normalizes W‚ÇÅ.\n\nLet Œ∂ be a root of unity. split_levis returns a list of representatives of  conjugacy classes  of Œ∂-split  Levis of  W. A  Œ∂-split Levi  is a subcoset  of WF formed  of all the  elements which act  by Œ∂ on a given subspace  V_Œ∂. If the additional argument  ad is given, it returns only those subcosets such that the common Œ∂-eigenspace of their elements is of dimension  ad. These notions make sense  and thus are implemented for any complex reflection group.\n\nIn  terms of algebraic groups, an F-stable Levi subgroup of the reductive group  ùêÜ  is  Œ∂-split  if  and  only  if it is the centralizer of the Œ¶-part  of its center, where Œ¶ is a cyclotomic polynomial with Œ∂ as a root. When Œ∂=1, we get the notion of a split Levi, which is the same as a Levi sugroup of an F-stable parabolic subgroup of ùêÜ.\n\nThe  eigenvalue Œ∂ can also  be specified by giving  an integer d (which then  specifies  Œ∂=E(d))  or  a  fraction  a//b  which  then  specifies Œ∂=E(b,a). If omitted, Œ∂ is taken to be 1.\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> split_levis(W,4)\n2-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n A‚ÇÉ\n A‚ÇÉ‚Çç‚Çé=Œ¶‚ÇÇŒ¶‚ÇÑ\n\njulia> W=spets(coxgroup(:D,4),Perm(1,2,4))\n¬≥D‚ÇÑ\n\njulia> split_levis(W,3)\n3-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n ¬≥D‚ÇÑ\n ¬≥D‚ÇÑ‚Çç‚ÇÅ‚ÇÉ‚Çé=A‚ÇÇŒ¶‚ÇÉ\n ¬≥D‚ÇÑ‚Çç‚Çé=Œ¶‚ÇÉ¬≤\n\njulia> W=coxgroup(:E,8)\nE‚Çà\n\njulia> split_levis(W,4,2)\n3-element Vector{Spets{FiniteCoxeterSubGroup{Perm{Int16},Int64}}}:\n E‚Çà‚Çç‚ÇÉ‚ÇÑ‚ÇÇ‚ÇÖ‚Çé=D‚ÇÑ‚Çç‚ÇÅ‚ÇÉ‚ÇÇ‚ÇÑ‚ÇéŒ¶‚ÇÑ¬≤\n E‚Çà‚Çç‚ÇÖ‚Çá‚ÇÇ‚ÇÉ‚Çé=(A‚ÇÅA‚ÇÅ)√ó(A‚ÇÅA‚ÇÅ)Œ¶‚ÇÑ¬≤\n E‚Çà‚Çç‚ÇÉ‚ÇÖ‚ÇÜ‚ÇÅ‚Çé=¬≤(A‚ÇÇA‚ÇÇ)‚Çç‚ÇÅ‚ÇÑ‚ÇÇ‚ÇÉ‚ÇéŒ¶‚ÇÑ¬≤\n\njulia> split_levis(complex_reflection_group(5))\n4-element Vector{Spets{PRSG{Cyc{Rational{Int64}}, Int16}}}:\n G‚ÇÖ\n G‚ÇÖ‚Çç‚ÇÅ‚Çé=G‚ÇÉ‚Äö‚ÇÅ‚Äö‚ÇÅŒ¶‚ÇÅ\n G‚ÇÖ‚Çç‚ÇÇ‚Çé=G‚ÇÉ‚Äö‚ÇÅ‚Äö‚ÇÅŒ¶‚ÇÅ\n G‚ÇÖ‚Çç‚Çé=Œ¶‚ÇÅ¬≤\n\n\n\n\n\n","category":"function"},{"location":"eigen.html#Chevie.Uch.cuspidal","page":"Eigenspaces","title":"Chevie.Uch.cuspidal","text":"cuspidal(uc::UnipotentCharacters[,e])\n\nA  unipotent character Œ≥ of a  finite reductive group ùêÜ is e-cuspidal if  its  Lusztig  restriction  to  any  proper e-split Levi is zero. When e==1  (the default when  e is omitted)  we recover the  usual notion of cuspidal character. Equivalently the Œ¶‚Çë-part of the generic degree of Œ≥ is equal to the Œ¶‚Çë-part of the generic order of the adjoint group of ùêÜ. This  makes  sense  for  any  Spetsial  complex  reflection  group  and  is implemented for them.\n\nThe  function returns the list of indices of unipotent characters which are e-cuspidal.\n\njulia> W=coxgroup(:D,4)\nD‚ÇÑ\n\njulia> cuspidal(UnipotentCharacters(W))\n1-element Vector{Int64}:\n 14\n\njulia> cuspidal(UnipotentCharacters(W),6)\n8-element Vector{Int64}:\n  1\n  2\n  6\n  7\n  8\n  9\n 10\n 12\n\njulia> cuspidal(UnipotentCharacters(complex_reflection_group(4)),3)\n4-element Vector{Int64}:\n  3\n  6\n  7\n 10\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Finite-Coxeter-groups,-Weyl-groups,-crystallographic-root-systems","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Finite Coxeter groups, Weyl groups, crystallographic root systems","text":"","category":"section"},{"location":"weyl.html","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Finite Coxeter groups, Weyl groups, crystallographic root systems","text":"Pages=[\"weyl.md\"]","category":"page"},{"location":"weyl.html","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Finite Coxeter groups, Weyl groups, crystallographic root systems","text":"Weyl\ncartan(::Symbol,::Integer,::Integer)\nroots(::AbstractMatrix)\ntwo_tree\nreflection_subgroup(::Weyl.FCG,::AbstractVector{<:Integer})\ncoxeter_group(t::Symbol,r::Int=0,b::Int=0)\ncoxeter_group()\nrootlengths\nhighest_short_root\nrootdatum(::AbstractMatrix)\nrootdatum(::AbstractMatrix,::AbstractMatrix)\ntorus(::Integer)\nistorus\nradical\nderived_datum\ndescribe_involution\nbadprimes\nstandard_parabolic(::Weyl.FC,::AbstractVector{<:Integer})\ninversions\nwith_inversions\nrelative_group\naffine","category":"page"},{"location":"weyl.html#Chevie.Weyl","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl","text":"Finite Coxeter groups are the finite complex reflection groups which can be defined on a real vector space V.\n\nWeyl  groups are the  finite Coxeter groups  which can be  defined over a rational vector space V (thus over the integers).\n\nLike   finite  complex   reflection  groups,   finite  Coxeter  groups  are implemented  as groups  of permutations  of a  set of roots. The particular crystallographic  root systems for Weyl groups  play an important role in mathematics as they classify semi-simple Lie algebras and algebraic groups.\n\nLet  us give precise definitions.  Let V be a  real vector space and V‚±Ω its  dual. A root system is a finite set of vectors R‚äÇ V (the roots), together  with  a  map  r‚Ü¶  r‚±Ω  from  R  to  a subset R‚±Ω of V‚±Ω (the coroots) such that:\n\nFor any r‚àà R,  we have r‚±Ω(r)=2, so  that the formula x‚Ü¶ x-r‚±Ω(x)r defines  a  reflection  s·µ£:V‚Üí  V  with  root  r  and coroot r‚±Ω.\nThe reflection s·µ£ stabilizes R.\n\nThe  subgroup W=W(R) of GL(V) generated by the reflections s·µ£ for r‚àà R  is a finite Coxeter  group. We require reduced  root systems, that is such  that the only elements of R colinear  with r‚àà R are r and -r; for Weyl groups, we also require that the root system be crystallographic, that is r‚±Ω(s) is an integer, for any s‚àà R,r‚±Ω‚àà R‚±Ω.\n\nIf  we identify  V with  V‚±Ω by  choosing a  W-invariant bilinear form (.;.),  then we have r‚±Ω=2r/(r;r). A root system R is irreducible if R   is  not  the  union  of  two  orthogonal  subsets;  equivalently  the representation  of W on the subspace  generated by R is irreducible. If R is reducible then the corresponding Coxeter group is the direct product of the Coxeter groups associated with the irreducible components of R.\n\nLet  us  now  describe  how  a  root  system  R and a presentation of the corresponding  W are encoded in  a Cartan matrix or  a Dynkin diagram. We can  choose a linear  form on V  which does not  vanish on any element of R.  Depending on the sign of the value of this linear form on a root r ‚àà R  we call r positive or negative. Then there exists a unique subset Œ†  of the positive roots, the simple roots, such that any positive root is a linear combination with non-negative coefficients of the roots in Œ†. Any  two sets of simple roots (corresponding to different choices of linear forms) can be transformed into each other by a unique element of W(R). If S  is  the  set  of  reflections  with  respect to the simple roots, then (W,S)  is  a  Coxeter  system.  These  generating  reflections are called Coxeter generators or simple reflections.\n\nSince the pairing between V and V‚±Ω is W-invariant, if Œ† is a set of simple  roots and if we  define the Cartan matrix  as being the n times n  matrix C={r‚±Ω(r')}  for r,r'‚ààŒ†,  this matrix  is independent of the chosen  linear form  up to  simultaneous permutation  of rows  and columns. Since the action of s·µ£ on r' for r,r'‚ààŒ† is given by s·µ£(r')=r'-C(r,r')r,   the   Cartan   matrix   determines  the  reflection representation of W.\n\nFor  a crystallographic root system the Cartan matrix has integral entries, and  in the basis Œ† (completed by a basis of the orthogonal), s·µ£ has an integral  matrix.  All  finite-dimensional  (complex)  representations of a finite  Coxeter  group  can  be  realized  over  the field generated by the entries of the Cartan matrix.\n\nThe  Cartan matrix is encoded  in a Dynkin diagram,  a tree with weighted edges  and  an  orientation  on  edges  of  even weight >2, as follows. The vertices are indexed by the simple reflections; an edge is drawn between s and t if the order m‚Çõ‚Çú of st is greater than 2 and is given the weight  m‚Çõ‚Çú. These  weights are  encoded by  drawing the  edge single for weight  3, double for weight 4 and triple for weight 6. The arrows indicate the relative root lengths (going from the longer to the shorter root) which may  differ between different orbits of  W on R. Alternately the Dynkin diagram  can be obtained  from the Cartan  matrix as follows:  if C·µ£‚Çõ and C‚Çõ·µ£  are integers  such that  |C‚Çõ·µ£|‚â•|C·µ£‚Çõ|=1 there  is an edge of weight |C‚Çõ·µ£|  from r to s  with an arrow pointing  to s if |C‚Çõ·µ£|>1. Note that  the Cartan matrices  we consider here  are not necessarily symmetric, contrary  to the  Cartan matrices  we considered  describing the reflection representation  of a general Coxeter  group; being symmetric corresponds to all roots being taken of the same length.\n\nThe  irreducible  crystallographic  root  systems  are  classified  by  the following  list of Dynkin diagrams. The labeling  of the nodes is the order of the generators and is shown by the function diagram.\n\nA‚Çô O‚ÄîO‚ÄîO‚Äî‚Ä¶‚ÄîO   B‚Çô O‚áê O‚ÄîO‚Äî‚Ä¶‚ÄîO  C‚Çô O‚áí O‚ÄîO‚Äî‚Ä¶‚ÄîO  D‚Çô O 2\n   1 2 3 ‚Ä¶ n      1  2 3 ‚Ä¶ n     1  2 3 ‚Ä¶ n     Ôø®\n                                              O‚ÄîO‚Äî‚Ä¶‚ÄîO\n                                              1 3 ‚Ä¶ n\n\nG‚ÇÇ O‚áõ O  F‚ÇÑ O‚ÄîO‚áíO‚ÄîO    E‚ÇÜ  O 2    E‚Çá  O 2      E‚Çà  O 2\n   1  2     1 2 3 4        Ôø®          Ôø®            Ôø®\n                       O‚ÄîO‚ÄîO‚ÄîO‚ÄîO  O‚ÄîO‚ÄîO‚ÄîO‚ÄîO‚ÄîO  O‚ÄîO‚ÄîO‚ÄîO‚ÄîO‚ÄîO‚ÄîO\n                       1 3 4 5 6  1 3 4 5 6 7  1 3 4 5 6 7 8\n\nWe get the Coxeter diagram, which describes the underlying Weyl group, if we  ignore  the  arrows:  we  see  that  the  root  systems B_n and C_n correspond to the same Coxeter group (the Coxeter diagram is defined by the Coxeter  matrix). Weyl  groups can  also be  characterized as  the finite Coxeter groups such that all off-diagonal entries of the Coxeter matrix are in {2,3,4,6}.\n\nHere  are the Coxeter diagrams for the  finite Coxeter groups which are not crystallographic (I‚ÇÇ(e) is not crystallographic if e‚àâ {2,3,4,6}).\n\n       e        5         5\nI‚ÇÇ(e) O‚ÄîO   H‚ÇÉ O‚ÄîO‚ÄîO  H‚ÇÑ O‚ÄîO‚ÄîO‚ÄîO\n      1 2      1 2 3     1 2 3 4\n\nThe function cartan gives the cartan matrix for an irreducible root system\n\njulia> cartan(:D,4)\n4√ó4 Matrix{Int64}:\n  2   0  -1   0\n  0   2  -1   0\n -1  -1   2  -1\n  0   0  -1   2\n\njulia> cartan(:I,2,5) # for type I‚ÇÇ(e) give e as 3rd argument\n2√ó2 Matrix{Cyc{Int64}}:\n       2  Œ∂‚ÇÖ¬≤+Œ∂‚ÇÖ¬≥\n Œ∂‚ÇÖ¬≤+Œ∂‚ÇÖ¬≥        2\n\nGiven   two  Cartan  matrices  c1  and  c2,  their  matrix  direct  sum (corresponding  to the  orthogonal direct  sum of  the root systems) can be obtained by cat(c1,c2,dims=[1,2]).\n\nThe  whole  root  system  can  be  recovered  from the simple roots and the corresponding  coroots, since each root  is in the orbit  of a simple root. The  restriction of the simple reflections to the span of R is determined by the Cartan matrix, so R is determined by the Cartan matrix and the set of simple roots.\n\nThe  function  rootdatum  takes  as  arguments  a  matrix r whose lines represents the list of simple roots and another matrix cr whose lines are the  corresponding  coroots  and  produces  a FiniteCoxeterGroup. Such an object  is a permutation group containing  in addition the description of a root  system. cr*transpose(r) should be a  Cartan matrix. Each element of the  coxeter  group  is  represented  as  the permutation it induces on the roots,  coded as a permutation of 1:2N  where we label the positive roots by 1:N, and the negative roots by N+1:2N.\n\nIf a single matrix argument is given to rootdatum it is taken as cr and r  is taken  to be  the identity  matrix; we  get thus  a particular root system  where the  roots are  the canonical  basis of V. For convenience, rootdatum(cartan(t...)) can be simplified to coxgroup(t...).\n\njulia> W=coxgroup(:D,4) # same as rootdatum(cartan(:D,4))\nD‚ÇÑ\n\njulia> cartan(W)\n4√ó4 Matrix{Int64}:\n  2   0  -1   0\n  0   2  -1   0\n -1  -1   2  -1\n  0   0  -1   2\n\nAlso,  the FiniteCoxeterGroup associated to a direct sum of irreducible root systems can be obtained as\n\njulia> W=coxgroup(:A,2)*coxgroup(:B,2)\nA‚ÇÇ√óB‚ÇÇ\n\njulia> cartan(W) # same as cat(cartan(:A,2), cartan(:B,2),dims=[1,2])\n4√ó4 Matrix{Int64}:\n  2  -1   0   0\n -1   2   0   0\n  0   0   2  -2\n  0   0  -1   2\n\nThe elements of a Weyl group are permutations of the roots:\n\njulia> W=coxgroup(:D,4)\nD‚ÇÑ\n\njulia> p=W(1,3,2,1,3) # permutes the 24 roots\n(1,14,13,2)(3,17,8,18)(4,12)(5,20,6,15)(7,10,11,9)(16,24)(19,22,23,21)\n\njulia> word(W,p)\n5-element Vector{Int64}:\n 1\n 3\n 1\n 2\n 3\n\nfinally, a benchmark on julia 1.0.2\n\njulia> @btime length(elements(coxgroup(:E,7)))\n  531.385 ms (5945569 allocations: 1.08 GiB)\n\nGAP3 for the same computation takes 2.2s\n\n\n\n\n\n","category":"module"},{"location":"weyl.html#Chevie.PermRoot.cartan-Tuple{Symbol, Integer, Integer}","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.PermRoot.cartan","text":"cartan(type, rank [,bond])\n\nthe  Cartan matrix for a  finite Coxeter group described  by type and rank. The  recognized types are :A, :B, :Bsym, :C, :D, :E, :F, :Fsym, :G, :Gsym, :I,  :H. For type :I a third  argument must be given describing the bond between the two generators. The sym types correspond to (non-crystallographic)  root systems where all  roots have the same length; they  afford automorphisms that  the crystallographic root  system does not afford, which allow to define the \"very twisted\" Chevalley groups.\n\njulia> cartan(:F,4)\n4√ó4 Matrix{Int64}:\n  2  -1   0   0\n -1   2  -1   0\n  0  -2   2  -1\n  0   0  -1   2\n\njulia> cartan(:I,2,5)\n2√ó2 Matrix{Cyc{Int64}}:\n       2  Œ∂‚ÇÖ¬≤+Œ∂‚ÇÖ¬≥\n Œ∂‚ÇÖ¬≤+Œ∂‚ÇÖ¬≥        2\n\njulia> cartan(:Bsym,2)\n2√ó2 Matrix{Cyc{Int64}}:\n   2  -‚àö2\n -‚àö2    2\n\n\n\n\n\n","category":"method"},{"location":"weyl.html#Chevie.PermRoot.roots-Tuple{AbstractMatrix}","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.PermRoot.roots","text":"roots(C::AbstractMatrix)\n\nreturns the set of positive roots defined by the Cartan matrix C, which should be the Cartan matrix of a finite Coxeter group.\n\nFor  an integer Cartan matrix, the returned  roots are sorted by height and reverse lexicographically for a given height.\n\n\n\n\n\n","category":"method"},{"location":"weyl.html#Chevie.Weyl.two_tree","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.two_tree","text":"two_tree(m)\n\nGiven  a  square  matrix  m  with  zeroes  symmetric  with respect to the diagonal,  let  G  be  the  graph  with vertices axes(m)[1] and an edge between i and j iff !iszero(m[i,j]).\n\nIf  G is a line this function returns  it as a Vector{Int}. If G is a tree with one vertex c of valence 3 the function returns (c,b1,b2,b3) where  b1,b2,b3 are  the branches  from this  vertex sorted by increasing length. Otherwise the function returns nothing.\n\nThis function is used when recognizing the type of a Cartan matrix.\n\njulia> two_tree(cartan(:A,4))\n4-element Vector{Int64}:\n 1\n 2\n 3\n 4\n\njulia> two_tree(cartan(:E,8))\n(4, [2], [3, 1], [5, 6, 7, 8])\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.PermRoot.reflection_subgroup-Tuple{Chevie.Weyl.FCG, AbstractVector{<:Integer}}","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.PermRoot.reflection_subgroup","text":"reflection_subgroup(W::FiniteCoxeterGroup,I)\n\nFor I‚äÜ1:nref(W), the subgroup H of W generated by refls(W,I).\n\nA   theorem  found  independently  by  Deodhar1989  and Dyer1990  is that  a subgroup  H of  a Coxeter system (W,S)  generated by reflections  has a canonical  Coxeter generating set, formed  of the t  ‚àà Ref(H) such  length(W,tt')>length(W,t) for any t'‚àà Ref(H)  different  from  t.  This  is  used  by reflection_subgroup to determine the Coxeter system of H.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> diagram(W)\nO‚áõ O G‚ÇÇ\n1  2\n\njulia> H=reflection_subgroup(W,[2,6])\nG‚ÇÇ‚Çç‚ÇÇ‚ÇÜ‚Çé=AÃÉ‚ÇÅ√óA‚ÇÅ\n\njulia> diagram(H)\nO AÃÉ‚ÇÅ\n1\nO A‚ÇÅ\n2\n\nThe  notation G‚ÇÇ‚Çç‚ÇÇ‚ÇÜ‚Çé  means that  roots(W,[2,6]) is  a system of simple roots for H.\n\nIf  H is a  standard parabolic subgroup  of a Coxeter  group W then the length  function on  H (with  respect to  its set  of generators)  is the restriction  of the length function on W. This need not no longer be true for  arbitrary reflection subgroups of  W. \n\njulia> elH=word.(Ref(H),elements(H))\n4-element Vector{Vector{Int64}}:\n []\n [1]\n [2]\n [1, 2]\n\njulia> elW=word.(Ref(W),elements(H))\n4-element Vector{Vector{Int64}}:\n []\n [2]\n [1, 2, 1, 2, 1]\n [1, 2, 1, 2, 1, 2]\n\njulia> map(w->H(w...),elH)==map(w->W(w...),elW)\ntrue\n\nWe  implement finite  reflection groups  as permutation  groups on a set of roots.  Consequently,  a  reflection  subgroup  H‚äÜ  W  is  a  permutation subgroup, thus its elements are represented as permutations of the roots of the parent group.\n\n\n\n\n\n","category":"method"},{"location":"weyl.html#Chevie.CoxGroups.coxeter_group","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.CoxGroups.coxeter_group","text":"coxeter_group(type,rank[,bond];sc=false) (or coxgroup)\n\nIf C=cartan(type,rank[,bond]), this is equivalent to rootdatum(C). If sc=true this is equivalent to rootdatum(permutedims(C),one(C)).\n\nThe  resulting object W, a  FiniteCoxeterGroup, has an additional entry compared to a PermRootGroup.\n\nW.rootdec:  the root vectors, given  as linear combinations of simple roots.  The first nref(W) roots are  positive, the next nref(W) are the corresponding negative roots. Moreover, the first semisimplerank(W)  roots are the simple roots. The positive roots are ordered by increasing height.\n\nand roots(W) is ordered is the same way as W.rootdec.\n\nFor  how to  get various  information on  the root  system and  the Coxeter group,   see  the  functions   nref,  coroots,  rootlengths,  simple_reps, simple_conjugating,  reflrep,  simpleroots,  simplecoroots,  PermX, cartan, inclusion, restriction, action, rank, semisimplerank\n\nIn terms of root data, this function returns the adjoint root datum of Weyl group  W.  If  sc=true  it  returns  the  simply  connected root datum.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> cartan(W)\n2√ó2 Matrix{Int64}:\n  2  -1\n -3   2\n\njulia> W.rootdec\n12-element Vector{Vector{Int64}}:\n [1, 0]\n [0, 1]\n [1, 1]\n [1, 2]\n [1, 3]\n [2, 3]\n [-1, 0]\n [0, -1]\n [-1, -1]\n [-1, -2]\n [-1, -3]\n [-2, -3]\n\njulia> reflrep(W)\n2-element Vector{Matrix{Int64}}:\n [-1 0; 1 1]\n [1 3; 0 -1]\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.CoxGroups.coxeter_group-Tuple{}","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.CoxGroups.coxeter_group","text":"coxeter_group() or coxgroup() the trivial Coxeter group\n\n\n\n\n\n","category":"method"},{"location":"weyl.html#Chevie.Weyl.rootlengths","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.rootlengths","text":"rootlengths(W::FiniteCoxeterGroup)  the vector  of the (squared)  length of the roots of W.  The  shortest roots in an irreducible subsystem are given the length 1. In  a Weyl group the others then have length 2 (or 3 in type G‚ÇÇ). The matrix  of the W-invariant bilinear form is given by  Diagonal(rootlengths(W)[1:ngens(W)])*cartan(W).\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.Weyl.highest_short_root","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.highest_short_root","text":"highest_short_root(W)\n\nIt  is  an  error  if  W  is  not an irreducible Coxeter group. Otherwise HighestShortRoot  returns the index  of the unique  short root of maximal height  of W. If all roots have the same length then this is the index of the unique root of maximal height, equal to nref(W).\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> highest_short_root(W)\n4\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.Weyl.rootdatum-Tuple{AbstractMatrix}","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.rootdatum","text":"rootdatum(C::AbstractMatrix)  adjoint root datum  from Cartan matrix C. The adjoint group is also the default returned for coxeter_group(type,rank). The following methods all define pgl‚ÇÉ.\n\njulia> rootdatum(cartan(:A,3))==coxgroup(:A,3)\ntrue\n\njulia> rootdatum(:pgl,3)\npgl‚ÇÉ\n\n\n\n\n\n","category":"method"},{"location":"weyl.html#Chevie.Weyl.rootdatum-Tuple{AbstractMatrix, AbstractMatrix}","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.rootdatum","text":"rootdatum(R::AbstractMatrix,CR::AbstractMatrix)\n\nroot  datum from R whose  rows are the simple  roots on a basis of X(T) and CR whose rows are the simple coroots on a basis of Y(T). The following methods all define gl‚ÇÉ.\n\njulia> rootdatum(:gl,3)==rootdatum(\"gl\",3)\ntrue\n\njulia> rootdatum([1 -1 0;0 1 -1],[1 -1 0;0 1 -1])\nA‚ÇÇŒ¶‚ÇÅ\n\n\n\n\n\n","category":"method"},{"location":"weyl.html#Chevie.Weyl.torus-Tuple{Integer}","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.torus","text":"torus(rank::Integer)\n\nThis  function returns the object corresponding to the notion of a torus of dimension  rank, a Coxeter  group of semisimple  rank 0 and given rank. This  corresponds to a split torus; the extension to Coxeter cosets is more useful.\n\njulia> torus(3)\nŒ¶‚ÇÅ¬≥\n\n\n\n\n\n","category":"method"},{"location":"weyl.html#Chevie.Weyl.istorus","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.istorus","text":"istorus(W) whether W is a torus\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.PermRoot.radical","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.PermRoot.radical","text":"radical(G::ComplexReflectionGroup)\n\nA torus of dimension rank(W)-semisimplerank(W)).\n\nThe  radical datum of a root datum (X,Œ¶,Y,Œ¶^‚à®) is (X/(X‚à© ‚Ñö Œ¶),‚àÖ ,Œ¶^‚üÇ,‚àÖ), a toral  datum. \n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.Weyl.derived_datum","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.derived_datum","text":"derived_datum(G)\n\nThe  derived datum of (X,Œ¶,Y,Œ¶^‚à®) is (X/Œ¶^{‚à®‚üÇ}, Œ¶, Y‚à© ‚Ñö Œ¶^‚à®, Œ¶^‚à®) where ‚üÇ  denotes the orthogonal. This function  starts with a root datum object G and returns the root datum object corresponding to the derived datum.\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.Weyl.describe_involution","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.describe_involution","text":"describe_involution(W,w)\n\nGiven  an  involution  w  of  a  Coxeter  group  W,  by  a  theorem  of Richardson1982  there is  a unique  parabolic subgroup P  of W such that P is finite  and w is the longest element of P, and is central in P. The function returns I such that P==reflection_subgroup(W,I) and w==longest(reflection_subgroup(W,I)).\n\njulia> W=coxgroup(:A,2)\nA‚ÇÇ\n\njulia> w=longest(W)\n(1,5)(2,4)(3,6)\n\njulia> describe_involution(W,w)\n1-element Vector{Int64}:\n 3\n\njulia> w==longest(reflection_subgroup(W,[3]))\ntrue\n\nFor now only works for finite Coxeter groups.\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.Weyl.badprimes","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.badprimes","text":"badprimes(W)\n\nLet  W  be  a  Weyl  group.  A  prime  is  bad  for W if it divides a coefficient  of some  root on  the simple  roots. The  function badprimes returns the list of primes which are bad for W.\n\njulia> W=coxgroup(:E,8)\nE‚Çà\n\njulia> badprimes(W)\n3-element Vector{Int64}:\n 2\n 3\n 5\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.Weyl.standard_parabolic-Tuple{Union{Chevie.Weyl.FCG, Chevie.Weyl.FCSG}, AbstractVector{<:Integer}}","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.standard_parabolic","text":"standard_parabolic(W,H)\n\nGiven  a reflection subgroup H or the indices of its simple roots returns nothing if H is not parabolic, otherwise returns w such that H^w is a standard parabolic subgroup of W.\n\njulia> W=coxgroup(:E,6)\nE‚ÇÜ\n\njulia> R=reflection_subgroup(W,[20,30,19,22])\nE‚ÇÜ‚Çç‚ÇÅ‚Äö‚Çâ‚Äö‚ÇÅ‚Çâ‚Äö‚ÇÇ‚ÇÄ‚Çé=A‚ÇÑ‚Çç‚ÇÉ‚ÇÅ‚ÇÇ‚ÇÑ‚ÇéŒ¶‚ÇÅ¬≤\n\njulia> p=standard_parabolic(W,R)\n(1,4,49,12,10)(2,54,62,3,19)(5,17,43,60,9)(6,21,34,36,20)(7,24,45,41,53)(8,65,50,15,22)(11,32,31,27,28)(13,48,46,37,40)(14,51,58,44,29)(16,23,35,33,30)(18,26,39,55,38)(42,57,70,72,56)(47,68,67,63,64)(52,59,71,69,66)\n\njulia> p==standard_parabolic(W,[19,1,9,20]) # can give inclusiongens\ntrue\n\njulia> reflection_subgroup(W,[20,30,19,22].^p) # same as R^p\nE‚ÇÜ‚Çç‚ÇÇ‚ÇÑ‚ÇÖ‚ÇÜ‚Çé=A‚ÇÑŒ¶‚ÇÅ¬≤\n\njulia> R=reflection_subgroup(W,[1,2,3,5,6,35])\nE‚ÇÜ‚Çç‚ÇÅ‚Äö‚ÇÇ‚Äö‚ÇÉ‚Äö‚ÇÖ‚Äö‚ÇÜ‚Äö‚ÇÉ‚ÇÖ‚Çé=A‚ÇÇ‚Çç‚ÇÅ‚ÇÉ‚Çé√óA‚ÇÇ‚Çç‚ÇÇ‚ÇÜ‚Çé√óA‚ÇÇ‚Çç‚ÇÑ‚ÇÖ‚Çé\n\njulia> standard_parabolic(W,R)\n\n\n\n\n\n","category":"method"},{"location":"weyl.html#Chevie.CoxGroups.inversions","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.CoxGroups.inversions","text":"inversions(W,w)\n\nReturns  the inversions of the element w of the finite Coxeter group W, that  is, the list of the  indices of reflections r of W such that l(rw)<l(w) where l is the Coxeter length.\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> inversions(W,W(1,2,1))\n3-element Vector{Int64}:\n 1\n 2\n 4\n\n\n\n\n\ninversions(W::FiniteCoxeterGroup, w::AbstractVector{<:Integer})\n\nGiven  a word w=[s‚ÇÅ,‚Ä¶,s‚Çô] (a vector of integers) representing the element W(w...),  returns the inversions of  w, that is the  list of indices of the reflections of W given by W(s‚ÇÅ), W(s‚ÇÅ,s‚ÇÇ,s‚ÇÅ), ‚Ä¶, W(s‚ÇÅ,s‚ÇÇ,‚Ä¶,s‚Çô,s‚Çô‚Çã‚ÇÅ,‚Ä¶,s‚ÇÅ).\n\njulia> W=coxgroup(:A,3)\nA‚ÇÉ\n\njulia> inversions(W,[2,1,2])\n3-element Vector{Int64}:\n 2\n 4\n 1\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.Weyl.with_inversions","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.with_inversions","text":"with_inversions(W,N)\n\nW  should be  a finite  Coxeter group  and N  a subset  of 1:nref(W). Returns  the  element  w  of  W such that N==inversions(W,w). Returns nothing if no such element exists.\n\njulia> W=coxgroup(:A,2)\nA‚ÇÇ\n\njulia> map(N->with_inversions(W,N),combinations(1:nref(W)))\n8-element Vector{Union{Nothing, Perm{Int16}}}:\n ()\n (1,4)(2,3)(5,6)\n (1,3)(2,5)(4,6)\n nothing\n nothing\n (1,6,2)(3,5,4)\n (1,2,6)(3,4,5)\n (1,5)(2,4)(3,6)\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.Weyl.relative_group","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Weyl.relative_group","text":"relative_group(W::FiniteCoxeterGroup,J)\n\nJ  should be a if distinguished subset of S==eachindex(gens(W)), that is if for s‚àà S-J we set v(sJ)=w‚ÇÄ^J sw‚ÇÄ·¥∂ then J is stable by all v(s,J).  Then N_W(W_J)=W_J N‚ÇÅ  where N‚ÇÅ is  the group generated by the  v(s,J),  which  form  a  Coxeter  system for N‚ÇÅ. Equivalently N‚ÇÅ consists   of  the   J-reduced  elements   of  N_W(W_J).  The  quotient R=N_W(W_J)/W_J has a natural reflection representation on X(ZL_JZG), using  that by Lusztig1976, the  images of the roots of W  in  X(ZL_J)  form  a  root  system.  The function returns R as a reflection  group on X(ZL_JZG), with  some extra attributes reflecting its origin\n\nR.relative_indices=setdiff(S,J) in a certain order\nR.toparent= the list of v(s,J) corresponding to .relative_indices;  defines an isomorphism R‚Üí N‚ÇÅ.\nR.fromparent  is  a  function  mapping elements of N‚ÇÅ to R. The  inverse mapping to .toparent.\n\n\n\n\n\n","category":"function"},{"location":"weyl.html#Chevie.Semisimple.affine","page":"Finite Coxeter groups, Weyl groups, crystallographic root systems","title":"Chevie.Semisimple.affine","text":"A  generalized Cartan matrix C  is a square integer  matrix of size n such  that c·µ¢·µ¢=2, c·µ¢‚±º‚â§0 if i‚â†j, and c·µ¢‚±º==0 if and only if c‚±º·µ¢==0. We  say  that  C  is  indecomposable  if  it  does  not admit any block decomposition.\n\nLet  C be a generalized  Cartan matrix. For I  a subset of {1,‚Ä¶,n} we denote  by C_I the square  submatrix with indices i,j  taken in I. If v  is a real vector of length n, we write v>0 if for all i‚àà {1,‚Ä¶,n} we  have v·µ¢>0. It can be shown that C is a Cartan matrix if and only if for  all sets  I, we  have det  C_I>0; or  equivalently, if and only if there  exists  v>0  such  that  C.v>0.  C is called an affine Cartan matrix  if for all proper subsets I we have det C_I>0, but det C==0; or equivalently if there exists v>0 such that C.v==0.\n\nGiven  an  irreducible  Weyl  group  W  with  Cartan  matrix  C, we can construct  a generalized  Cartan matrix  CÃÉ as  follows. Let  Œ±‚ÇÄ be the opposed of the highest root. Then the matrix left(beginarrayccCCŒ±‚ÇÄ  Œ±‚ÇÄC2endarrayright) is  an  affine  Cartan  matrix.  The  affine  Cartan  matrices which can be obtained  in this way  are those we  are interested in,  which give rise to affine Weyl groups.\n\nLet d=n-rank(C). A realization of a generalized Cartan matrix is a pair V,V·µõ  of vector spaces of dimension n+d together with vectors Œ±‚ÇÅ,‚Ä¶,Œ±‚Çô‚àà V  (the simple roots), Œ±·µõ‚ÇÅ,‚Ä¶,Œ±·µõ‚Çô‚àà V·µõ (the simple coroots), such that (Œ±·µõ·µ¢,  Œ±‚±º)=c_{i,j}.  Up  to  isomorphism,  a  realization  is obtained as follows: write C=left(beginarraycC_1C_2endarrayright) where  C‚ÇÅ is  of same  rank as  C. Then  take Œ±·µ¢  to be the first n vectors  in a basis of V, and take Œ±·µõ‚±º to be given in the dual basis by the rows of the matrix left(beginarrayccC‚ÇÅ0 C_2hboxId_d endarrayright) To  C we associate a reflection group  in the space V, generated by the fundamental  reflections  r·µ¢  given  by  r·µ¢(v)=v-(Œ±·µõ·µ¢,v)Œ±·µ¢. This is a Coxeter  group, called the affine Weyl group ilde W associated to W when we start with the affine Cartan matrix associated to a Weyl group W.\n\nThe  affine Weyl  group is  infinite; it  has one additional generator s‚ÇÄ (the  reflection with respect to Œ±‚ÇÄ) compared  to W. We can not use 0 as  a label  by default  for a  generator of  a Coxeter  group (because the default  labels are used as indices, and indices start at 1 in Julia) so we label it as n+1 where n is the numbers of generators of W.\n\njulia> W=affine(coxgroup(:A,4))\nAÃÉ‚ÇÑ\n\njulia> diagram(W)\n       ‚Äî‚Äî‚Äî‚Äî5‚Äî‚Äî‚Äî‚Äî\n      /         \\\nAÃÉ‚ÇÑ   1‚Äî‚Äî‚Äî2‚Äî‚Äî‚Äî3‚Äî‚Äî‚Äî4\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Kazhdan-Lusztig-polynomials-and-bases","page":"Kazhdan-Lusztig polynomials and bases","title":"Kazhdan-Lusztig polynomials and bases","text":"","category":"section"},{"location":"kl.html","page":"Kazhdan-Lusztig polynomials and bases","title":"Kazhdan-Lusztig polynomials and bases","text":"Pages=[\"kl.md\"]","category":"page"},{"location":"kl.html","page":"Kazhdan-Lusztig polynomials and bases","title":"Kazhdan-Lusztig polynomials and bases","text":"KL\nKLPol\nKL.critical_pair\nTbasis(::KL.HeckeCpElt)\nCbasis\nCpbasis\ncharacter\nrepresentation(::LeftCell,H)\nWGraphToRepresentation\nWgraph\nleft_cells\nLeftCell\nLusztigaw\nLusztigAw\nAsymptoticAlgebra","category":"page"},{"location":"kl.html#Chevie.KL","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL","text":"This  module defines Kazhdan-Lusztig polynomials and bases, and computes W-graphs and asymptotic algebras.\n\nLet  ‚Ñã be  the Iwahori-Hecke algebra  of a Coxeter  system (W,S), with quadratic  relations (T‚Çõ-u‚Çõ‚ÇÄ)(T‚Çõ-u‚Çõ‚ÇÅ)=0  for s‚àà  S. If  -u‚Çõ‚ÇÄu‚Çõ‚ÇÅ has a square  root  w‚Çõ,  we  can  scale  the  basis  T‚Çõ  to  get  a new basis t‚Çõ=-T‚Çõ/w‚Çõ    with   quadratic    relations   (t‚Çõ-v‚Çõ)(t‚Çõ+v‚Çõ‚Åª¬π)=0   where v‚Çõ=w‚Çõ/u‚Çõ‚ÇÅ.   The  most  general  case   when  Kazhdan-Lusztig  bases  and polynomials  can be defined is when the parameters v‚Çõ belong to a totally ordered abelian group Œì for multiplication, see Lusztig1983.  We set  Œì‚Å∫= {Œ≥‚àà  Œì‚à£Œ≥>0} and Œì‚Åª={Œ≥‚Åª¬π‚à£Œ≥‚àà Œì‚Å∫}={Œ≥‚àà Œì‚à£Œ≥<0}.\n\nThus  we assume ‚Ñã defined over the ring ‚Ñ§[Œì], the group algebra of Œì over  ‚Ñ§, and the quadratic  relations of ‚Ñã  associate to each s‚àà S a v‚Çõ‚àà  Œì‚Å∫ such that  (t‚Çõ-v‚Çõ)(t‚Çõ+v‚Çõ‚Åª¬π)=0. We also  set q‚Çõ=v‚Çõ¬≤ and define the  basis T‚Çõ=v‚Çõt‚Çõ with quadratic relations (T‚Çõ-q‚Çõ)(T‚Çõ+1)=0; for w‚àà W with reduced expression w=s‚ÇÅ‚Ä¶s‚Çô we define q_w Œì by q_w^¬Ω=v_s‚ÇÅv_s‚Çô and let q_w=(q_w^¬Ω)¬≤; we have T_w=q_w^¬Ωt_w.\n\nWe  define the bar involution on ‚Ñã  by linearity: on ‚Ñ§[Œì] we define it by  overline_Œ≥ Œìa_Œ≥Œ≥= _Œ≥ Œì a_Œ≥ Œ≥¬π and we extend it to ‚Ñã by  overline T_s=T_s^-1 (equivalently overline t_s=t_s^-1). Then the Kazhdan-Lusztig basis C^_w is defined as the only basis of ‚Ñã  stable by  the bar  involution and  congruent to  t_w modulo _w WŒìt_w.\n\nThe  basis  C^_w  can  be  computed  as  follows.  We  define  elements R_xy  of ‚Ñ§[Œì] by  T_y¬π=_x overlineR_xy¬π q_x¬πT_x. We then  define inductively  the Kazhdan-Lusztig  polynomials (in this general context  we should say the Kazhdan-Lusztig elements of ‚Ñ§[Œì], which belong to the subalgebra of ‚Ñ§[Œì] generated by the q‚Çõ) by P_xw=œÑ_(q_wq_x)^¬Ω  (_xywR_xyP_yw)  where  œÑ  is the truncation:  œÑ_nu _Œ≥  Œì a_Œ≥Œ≥=  _Œ≥nua_Œ≥Œ≥; the  induction is thus on decreasing x for the Bruhat order and starts at P_ww=1. We have then C^_w=_y q_w^-12 P_ywT_y.\n\nThe  Chevie code  for the  Kazhdan-Lusztig bases  C, D, C', D', was originally  written by Andrew  Mathas around 1994,  who also contributed to the  design of bases  of Iwahori-Hecke algebras  and implemented some other bases,  such as the Murphy basis. Our code evolved from that code. The code for  the case of unequal parameters was  written around 1999 by F.Digne and J.Michel.  The Kazhdan-Lusztig  bases are  computed starting  from the C‚Ä≤ basis.\n\nWhen  the ‚Ñ§[Œì] is a  Laurent polynomial ring the  bar operation is taking the  inverse of  the variables,  and truncation  is keeping terms of degree smaller or equal to that of ŒΩ. It is possible to use arbitrary groups Œì as   long   as   methods   bar:_Œ≥   Œì   a_Œ≥Œ≥  _Œ≥  Œì  a_Œ≥Œ≥¬π, positive_part  : _Œ≥  Œì a_Œ≥Œ≥  _Œ≥ 1  a_Œ≥Œ≥ and negative_part: _Œ≥  Œì  a_Œ≥Œ≥    _Œ≥  1  a_Œ≥Œ≥  have been defined on ‚Ñ§[Œì]. These operations   will   be   used   internally   by  the  programs  to  compute Kazhdan-Lusztig bases.\n\nWe provide also functionality to study the Kazhdan-Lusztig left cells (for the equal-parameter Hecke algebra).\n\njulia> W=coxgroup(:H,3)\nH‚ÇÉ\n\njulia> c=left_cells(W)\n22-element Vector{LeftCell{FiniteCoxeterGroup{Perm{Int16},Cyc{Int64}}}}:\n LeftCell<H‚ÇÉ: duflo= character=œÜ‚ÇÅ‚Äö‚ÇÄ>\n LeftCell<H‚ÇÉ: duflo=123 character=œÜ‚ÇÅ‚Äö‚ÇÅ‚ÇÖ>\n LeftCell<H‚ÇÉ: duflo=(15) character=œÜ‚ÇÖ‚Äö‚ÇÖ>\n LeftCell<H‚ÇÉ: duflo=(10) character=œÜ‚ÇÖ‚Äö‚ÇÖ>\n LeftCell<H‚ÇÉ: duflo=(14) character=œÜ‚ÇÖ‚Äö‚ÇÖ>\n LeftCell<H‚ÇÉ: duflo=7 character=œÜ‚ÇÖ‚Äö‚ÇÖ>\n LeftCell<H‚ÇÉ: duflo=(12) character=œÜ‚ÇÖ‚Äö‚ÇÖ>\n LeftCell<H‚ÇÉ: duflo=(9,12) character=œÜ‚ÇÖ‚Äö‚ÇÇ>\n LeftCell<H‚ÇÉ: duflo=(5,11) character=œÜ‚ÇÖ‚Äö‚ÇÇ>\n LeftCell<H‚ÇÉ: duflo=13 character=œÜ‚ÇÖ‚Äö‚ÇÇ>\n ‚ãÆ\n LeftCell<H‚ÇÉ: duflo=(8,13) character=œÜ‚ÇÉ‚Äö‚ÇÜ+œÜ‚ÇÉ‚Äö‚Çà>\n LeftCell<H‚ÇÉ: duflo=(1,15) character=œÜ‚ÇÉ‚Äö‚ÇÜ+œÜ‚ÇÉ‚Äö‚Çà>\n LeftCell<H‚ÇÉ: duflo=3 character=œÜ‚ÇÉ‚Äö‚ÇÅ+œÜ‚ÇÉ‚Äö‚ÇÉ>\n LeftCell<H‚ÇÉ: duflo=2 character=œÜ‚ÇÉ‚Äö‚ÇÅ+œÜ‚ÇÉ‚Äö‚ÇÉ>\n LeftCell<H‚ÇÉ: duflo=1 character=œÜ‚ÇÉ‚Äö‚ÇÅ+œÜ‚ÇÉ‚Äö‚ÇÉ>\n LeftCell<H‚ÇÉ: duflo=6 character=œÜ‚ÇÑ‚Äö‚ÇÉ+œÜ‚ÇÑ‚Äö‚ÇÑ>\n LeftCell<H‚ÇÉ: duflo=(13) character=œÜ‚ÇÑ‚Äö‚ÇÉ+œÜ‚ÇÑ‚Äö‚ÇÑ>\n LeftCell<H‚ÇÉ: duflo=(11) character=œÜ‚ÇÑ‚Äö‚ÇÉ+œÜ‚ÇÑ‚Äö‚ÇÑ>\n LeftCell<H‚ÇÉ: duflo=9 character=œÜ‚ÇÑ‚Äö‚ÇÉ+œÜ‚ÇÑ‚Äö‚ÇÑ>\n\nsee  also the  functions elements,  character, representation and  Wgraph for left cells.  The operations length, in (which refer  to elements) and == (which  compares Duflo involutions) are also defined  for left cells. When character(c)  has been computed, then c.a also  has been bound which holds the common value of Lusztig's a-function for the elements of c and the irreducible constituents of character(c).\n\nfinally, benchmarks\n\njulia> function test_kl(W)\n         q=Pol(); H=hecke(W,q^2,rootpara=q)\n         C=Cpbasis(H); T=Tbasis(H)\n         [T(C(w)) for w in elements(W)]\n       end\ntest_kl (generic function with 1 method)\n\njulia> @btime test_kl(coxgroup(:F,4));  #julia 1.8\n1.332 s (13934392 allocations: 2.27 GiB)\n\nin GAP3 the following function takes 11s for W=F4\n\ntest_kl:=function(W)local q,H,T,C;\n  q:=X(Rationals);H:=Hecke(W,q^2,q);\n  T:=Basis(H,\"T\");C:=Basis(H,\"C'\");\n  List(Elements(W),e->T(C(e)));\nend;\n\nAnother benchmark:\n\nfunction test_kl2(W)\n  el=elements(W)\n  [KLPol(W,x,y) for x in el, y in el]\nend\n\ntest_kl2 (generic function with 1 method)\n\njulia>@btime test_kl2(coxgroup(:F,4)); # julia 1.9\n4.307 s (42294917 allocations: 5.24 GiB)\n\nin GAP3 the following function takes 42s for F4\n\ntest_kl2:=function(W)local el;\n  el:=Elements(W);\n  List(el,x->List(el,y->KazhdanLusztigPolynomial(W,x,y)));\nend;\n\n\n\n\n\n","category":"module"},{"location":"kl.html#Chevie.KL.KLPol","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.KLPol","text":"KLPol(W,y,w) returns the Kazhdan-Lusztig polynomial P_{y,w} of W.\n\nTo  compute Kazhdan-Lusztig polynomials in  the one-parameter case it still seems   best  to   use  the   recursion  formula   in  the  original  paper KL79.  We first perform  a series of  checks on the pair (y,w)  to see if  the computation of  the corresponding polynomial can be reduced  to  a  similar  calculation  for  elements  of  smaller length. In particular, we reduce to the case of critical pairs (see KL.critical_pair),  and whenever the  polynomial corresponding to such  a pair is computed, the value is  stored in a Dict W.klpol in the underlying Coxeter group.\n\njulia> W=coxgroup(:B,3)\nB‚ÇÉ\n\njulia> map(i->map(x->KLPol(W,one(W),x),elements(W,i)),1:nref(W))\n9-element Vector{Vector{Pol{Int64}}}:\n [1, 1, 1]\n [1, 1, 1, 1, 1]\n [1, 1, 1, 1, 1, 1, 1]\n [1, 1, 1, 1, 1, x+1, 1, 1]\n [x+1, 1, x+1, x+1, 1, 1, x+1, 1]\n [x¬≤+1, 1, x+1, x+1, x+1, 1, 1]\n [1, 1, x¬≤+x+1, x+1, x+1]\n [1, x+1, x¬≤+1]\n [1]\n\nOur code is based on Meinolf Geck's code for GAP3/Chevie.\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Chevie.KL.critical_pair","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.critical_pair","text":"critical_pair(W, y, w) returns the critical pair z‚â§w associated to y‚â§w (see Alvis1987).\n\nLet  ‚Ñí (resp.  ‚Ñõ)  be the  left (resp.  right) descent  set. A pair of elements y‚â§w of W is called critical if ‚Ñí(y)‚äÉ ‚Ñí(w) and ‚Ñõ (y)‚äÉ ‚Ñõ (w). If y‚â§w is not critical, y can be multiplied from the left (resp. the right) by an  element of  ‚Ñí(w) (resp.  ‚Ñõ (w))  which is  not in ‚Ñí (y) (resp. ‚Ñõ (y)) until we get a critical pair z‚â§w. The function returns z. If y‚â§w then y‚â§z‚â§w.\n\nThe significance of this construction is that KLPol(W,y,w)==KLPol(W,z,w)\n\njulia> W=coxgroup(:F,4)\nF‚ÇÑ\n\njulia> w=longest(W)*gens(W)[1];length(W,w)\n23\n\njulia> y=W(1:4...);length(W,y)\n4\n\njulia> cr=KL.critical_pair(W,y,w);length(W,cr)\n16\n\njulia> Pol(:x);KLPol(W,y,w)\nPol{Int64}: x¬≥+1\n\njulia> KLPol(W,cr,w)\nPol{Int64}: x¬≥+1\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Chevie.HeckeAlgebras.Tbasis-Tuple{Chevie.KL.HeckeCpElt}","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.HeckeAlgebras.Tbasis","text":"Tbasis(h::HeckeCpElt) \n\nconverts the element h of the C' basis to the T basis.\n\nFor one-parameter Hecke algebras, we use the formulae: C_w=Œ£_ywP_yw(q)q^-l(w)2T_y and if sww then\n\nC‚Çõ C_sw=C_w+Œ£_yswŒº(ysw)C_y=Œ£_vwŒº·µ• T·µ•\n\nwhere\n\nŒº·µ•=P_vw(q)q^-l(w)2+Œ£_vyswŒº(ysw)P_vy(q)q^-l(y)2\n\nIt  follows that if deg(Œº·µ•)=-l(v)  then deg(Œº·µ•)=-l(v) with leading coefficient  Œº(vsw) (this happens exactly for y=v in the sum which occurs in the formula for Œº·µ•).\n\njulia> W=coxgroup(:B,3)\nB‚ÇÉ\n\njulia> @Pol v;H=hecke(W,v^2,rootpara=v)\nhecke(B‚ÇÉ,v¬≤,rootpara=v)\n\njulia> C=Cpbasis(H); Tbasis(C(1,2))\nv‚Åª¬≤T.+v‚Åª¬≤T‚ÇÇ+v‚Åª¬≤T‚ÇÅ+v‚Åª¬≤T‚ÇÅ‚ÇÇ\n\nFor general Hecke algebras, we follow formula 2.2 in  Lusztig1983\n\noverlineP_xw-P_xw=_xyw R_xy P_yw\n\nwhere  R_xy=overline(t_y^-1^-1t_x) where t is the basis with  parameters  q_s-q_s^-1.  It  follows  that  P_xw is the negative  part of _xyw R_xy P_yw  which allows to compute it by  induction on l(w)-l(x). The code is based on GAP3/Chevie code of Jean Michel and Fran√ßois Digne (1999).\n\n\n\n\n\n","category":"method"},{"location":"kl.html#Chevie.KL.Cbasis","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.Cbasis","text":"Cbasis(H::HeckeAlgebra)\n\nreturns  a function which gives the  C-basis of the Iwahori-Hecke algebra H. The algebra H should have the functon rootpara defined. This basis is  defined as follows (see e.g. (5.1)Lusztig1985). Let W  be the underlying Coxeter group. For  x,y ‚àà W let P_xy be the corresponding  Kazhdan‚ÄìLusztig polynomial. If T_w  w W denotes the usual T-basis, then C_x=sum_yle x(-1)^l(x)-l(y)P_yx(q^-1)q_x^12q_y^-1  T_y for x  ‚àà W. For example,  we have C‚Çõ=q‚Çõ‚Åª¬ΩT‚Çõ-q‚Çõ¬ΩT‚ÇÅ  for s ‚àà  S. Thus, the transformation matrix between the T-basis and the C-basis is lower unitriangular, with monomials  in q‚Çõ along the diagonal.  In the one-parameter case (all q‚Çõ are equal to v¬≤) the multiplication rules for the C basis are given by:\n\nC‚Çõ‚ãÖC‚Çì =-(v+v‚Åª¬π)C‚Çì, if sx<x, and C‚Çõ‚Çì+‚àë‚Çú Œº(t,x)C‚Çú if sx>x.\n\nwhere  the sum  is over  all t  such that  t<x, l(t)  and l(x) have different parity and st<t. The coefficient Œº(t,x) is the coefficient of degree (l(x)-l(t)-1)/2 in the Kazhdan‚ÄìLusztig polynomial P_xt.\n\nThe  returned function can take as argument a list of integers (as a vector or  as a list of arguments), representing a Coxeter word, an element of the Coxeter group, or a Hecke element (converted then to the C' basis).\n\njulia> W=coxgroup(:B,3);H=hecke(W,Pol(:v)^2)\nhecke(B‚ÇÉ,v¬≤)\n\njulia> T=Tbasis(H);C=Cbasis(H);T(C(1))\n-vT.+v‚Åª¬πT‚ÇÅ\n\njulia> C(T(1))\nv¬≤C.+vC‚ÇÅ\n\nWe  can  also  compute  character  values  on  elements in the C-basis as follows:\n\njulia> ref=reflrep(H)\n3-element Vector{Matrix{Pol{Int64}}}:\n [-1 0 0; -v¬≤ v¬≤ 0; 0 0 v¬≤]\n [v¬≤ -2 0; 0 -1 0; 0 -v¬≤ v¬≤]\n [v¬≤ 0 0; 0 v¬≤ -1; 0 0 -1]\n\njulia> c=CharTable(H).irr[charinfo(W).extRefl[[2]],:]\n1√ó10 Matrix{Pol{Int64}}:\n 3  2v¬≤-1  v‚Å∏-2v‚Å¥  -3v¬π¬≤  2v¬≤-1  v‚Å¥  v‚Å¥-2v¬≤  -v‚Å∂  v‚Å¥-v¬≤  0\n\njulia> hcat(char_values.(C.(classreps(W)),Ref(c))...)\n1√ó10 Matrix{Pol{Int64}}:\n 3  -v-v‚Åª¬π  0  0  -v-v‚Åª¬π  2  0  0  1  0\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Chevie.KL.Cpbasis","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.Cpbasis","text":"Cpbasis(H)\n\nreturns  a function which gives the C'-basis of the Iwahori-Hecke algebra H  (see (5.1)Lusztig1985).  This basis  is defined by C_x= _yxP_yxq_x^-12 T_y for x ‚àà W. We have C_x=(-1)^l(x)alt(C_x) for all x ‚àà W (see alt).  The  returned function can take as argument a list of integers (as a vector or  as a list of arguments), representing a Coxeter word, an element of the Coxeter group, or a Hecke element (converted then to the C' basis).\n\njulia> W=coxgroup(:B,2);@Pol v;H=hecke(W,[v^4,v^2])\nhecke(B‚ÇÇ,Pol{Int64}[v‚Å¥, v¬≤])\n\njulia> Cp=Cpbasis(H);h=Cp(1)^2\n(v¬≤+v‚Åª¬≤)C‚Ä≤‚ÇÅ\n\njulia> k=Tbasis(h)\n(1+v‚Åª‚Å¥)T.+(1+v‚Åª‚Å¥)T‚ÇÅ\n\njulia> Cp(k)\n(v¬≤+v‚Åª¬≤)C‚Ä≤‚ÇÅ\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Chevie.KL.character","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.character","text":"character(c)\n\nReturns  a list l  such that the  character of c.group  afforded by the left cell c is sum(CharTable(c.group).irr[l]).\n\njulia> c=left_cells(coxgroup(:G,2))[3]\nLeftCell<G‚ÇÇ: duflo=2 character=œÜ‚ÇÇ‚Äö‚ÇÅ+œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ+œÜ‚ÇÇ‚Äö‚ÇÇ>\n\njulia> character(c)\n3-element Vector{Int64}:\n 3\n 5\n 6\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Chevie.Chars.representation-Tuple{LeftCell, Any}","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.Chars.representation","text":"representation(c::LeftCell,H)\n\nreturns matrices giving the representation of the Iwahori-Hecke algebra H on the left cell c.\n\njulia> W=coxgroup(:H,3)\nH‚ÇÉ\n\njulia> c=left_cells(W)[3]\nLeftCell<H‚ÇÉ: duflo=(15) character=œÜ‚ÇÖ‚Äö‚ÇÖ>\n\njulia> @Mvp q;H=hecke(W,q)\nhecke(H‚ÇÉ,q)\n\njulia> representation(c,H)\n3-element Vector{Matrix{Mvp{Int64, Rational{Int64}}}}:\n [-1 0 ‚Ä¶ 0 0; 0 -1 ‚Ä¶ 0 -q¬Ω; ‚Ä¶ ; 0 0 ‚Ä¶ q 0; 0 0 ‚Ä¶ 0 q]\n [-1 -q¬Ω ‚Ä¶ 0 0; 0 q ‚Ä¶ 0 0; ‚Ä¶ ; 0 0 ‚Ä¶ -1 0; 0 -q¬Ω ‚Ä¶ 0 -1]\n [q 0 ‚Ä¶ 0 0; -q¬Ω -1 ‚Ä¶ 0 0; ‚Ä¶ ; 0 0 ‚Ä¶ q 0; 0 0 ‚Ä¶ 0 -1]\n\n\n\n\n\n","category":"method"},{"location":"kl.html#Chevie.Chars.WGraphToRepresentation","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.Chars.WGraphToRepresentation","text":"WGraphToRepresentation(coxrank::Integer,graph,v)\n\nWe  store some  representations of  one-parameter Iwahori-Hecke algebras as W-graphs.  For a Coxeter system (W,S), a  W-graph is defined by a set of  vertices C  with a  function I  which attaches  to x‚àà  C a subset I(x)‚äÇ S, and edge labels which to (x,y)‚àà C^2 attach Œº(x,y)‚àà K where K is the field of definition of W; this defines a representation of the Hecke  algebra  with  parameters  v  and  -v‚Åª¬π  on  a  space with basis e_y_y C by:\n\nT‚Çõ(e_y)=-e_y if s‚àà I(y) and otherwise T‚Çõ(e_y)=v^2 e_y+_xs I(x) vŒº(xy)e‚Çì.\n\nThe  W-graphs are  stored in  a compact  format to  save space.  They are represented as a pair.\n\nThe  first element is a list describing C. Its  elements are either a vector   I(x)  of  indices  in  eachindex(S),  or  an  integer  n specifying to repeat the previous element n more times.\nThe  second element is a list which  specifies Œº.\n\nWe   first   describe   the   Œº-list   for   symmetric  W-graphs  (when Œº(x,y)=Œº(y,x)).  There is one  element of the  Œº-list for each non-zero value m taken by Œº, which consists of a pair whose first element is m and  whose second element is a list of  lists; if l is one of these lists each  pair [l[1],l[i]]  represents an  edge (x=l[1],y=l[i]) such that Œº(x,y)=Œº(y,x)=m.  For non-symmetric W-graphs, the first element of each pair  in the Œº-list  is a pair  [m1,m2] and each  edge [x,y] obtained from  the lists in the second element  has to be interpreted as Œº(x,y)=m1 and Œº(y,x)=m2.\n\njulia> W=coxgroup(:H,3)\nH‚ÇÉ\n\njulia> g=Wgraph(W,3)\n2-element Vector{Vector{Vector{Any}}}:\n [[2], [1, 2], [1, 3], [1, 3], [2, 3]]\n [[-1, [[1, 3], [2, 4], [3, 5], [4, 5]]]]\n\njulia> WGraphToRepresentation(3,g,Pol(:x))\n3-element Vector{Matrix{Pol{Int64}}}:\n [x¬≤ 0 ‚Ä¶ 0 0; 0 -1 ‚Ä¶ 0 0; ‚Ä¶ ; 0 0 ‚Ä¶ -1 -x; 0 0 ‚Ä¶ 0 x¬≤]\n [-1 0 ‚Ä¶ 0 0; 0 -1 ‚Ä¶ -x 0; ‚Ä¶ ; 0 0 ‚Ä¶ x¬≤ 0; 0 0 ‚Ä¶ -x -1]\n [x¬≤ 0 ‚Ä¶ 0 0; 0 x¬≤ ‚Ä¶ 0 0; ‚Ä¶ ; 0 -x ‚Ä¶ -1 0; 0 0 ‚Ä¶ 0 -1]\n\n\n\n\n\nWGraphToRepresentation(H::HeckeAlgebra,gr::Vector)\n\nH  should be  a one-parameter  Hecke algebra  for a  finite Coxeter group where  rootpara  is  defined.  The  function  returns the matrices of the representation  of H defined by the W-graph gr.\n\njulia> W=coxgroup(:H,3)\nH‚ÇÉ\n\njulia> H=hecke(W,Pol(:q)^2)\nhecke(H‚ÇÉ,q¬≤)\n\njulia> g=Wgraph(W,3)\n2-element Vector{Vector{Vector{Any}}}:\n [[2], [1, 2], [1, 3], [1, 3], [2, 3]]\n [[-1, [[1, 3], [2, 4], [3, 5], [4, 5]]]]\n\njulia> WGraphToRepresentation(H,g)\n3-element Vector{Matrix{Pol{Int64}}}:\n [q¬≤ 0 ‚Ä¶ 0 0; 0 -1 ‚Ä¶ 0 0; ‚Ä¶ ; 0 0 ‚Ä¶ -1 q; 0 0 ‚Ä¶ 0 q¬≤]\n [-1 0 ‚Ä¶ 0 0; 0 -1 ‚Ä¶ q 0; ‚Ä¶ ; 0 0 ‚Ä¶ q¬≤ 0; 0 0 ‚Ä¶ q -1]\n [q¬≤ 0 ‚Ä¶ 0 0; 0 q¬≤ ‚Ä¶ 0 0; ‚Ä¶ ; 0 q ‚Ä¶ -1 0; 0 0 ‚Ä¶ 0 -1]\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Chevie.KL.Wgraph","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.Wgraph","text":"Wgraph(c::LeftCell)\n\nreturn the W-graph for a left cell for the one-parameter Hecke algebra of a finite Coxeter group. \n\n\n\n\n\nWgraph(W::CoxeterGroup,i)\n\nreturn the W-graph for the i-th irreducible representation of W (or of the 1-parameter Hecke algebra of W).\n\nOnly implemented for irreducible groups of type E, F or H.\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Chevie.KL.left_cells","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.left_cells","text":"left_cells(W[,i]) left cells of W [in i-th 2-sided cell] for the 1-parameter Hecke algebra hecke(W,q)\n\nThe  program uses precomputed  data(see Geck-Halls 2014) for  exceptional types and for type :A,  so is quite fast for these types (it  takes 13 seconds to compute the  101796 left cells for type E‚Çà). For other  types, left cells are computed from first principles, thus computing many  Kazhdan-Lusztig polynomials. It takes 30  seconds to compute the left cells of D‚ÇÜ, for example.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> left_cells(W)\n4-element Vector{LeftCell{FiniteCoxeterGroup{Perm{Int16},Int64}}}:\n LeftCell<G‚ÇÇ: duflo= character=œÜ‚ÇÅ‚Äö‚ÇÄ>\n LeftCell<G‚ÇÇ: duflo=12 character=œÜ‚ÇÅ‚Äö‚ÇÜ>\n LeftCell<G‚ÇÇ: duflo=2 character=œÜ‚ÇÇ‚Äö‚ÇÅ+œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ+œÜ‚ÇÇ‚Äö‚ÇÇ>\n LeftCell<G‚ÇÇ: duflo=1 character=œÜ‚ÇÇ‚Äö‚ÇÅ+œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ+œÜ‚ÇÇ‚Äö‚ÇÇ>\n\nPrinting such a record displays the character afforded by the left cell and its  Duflo involution; the Duflo involution r  is printed as a subset I of   1:nref(W)   such   that  r=longest(reflection_subgroup(W,I)),  see describe_involution.\n\nIf  a second argument i is given, the program returns only the left cells which  are in the i-th two-sided cell,  that is whose character is in the i-th family of W (see Families).\n\njulia> W=coxgroup(:G,2);\njulia> left_cells(W,1)\n2-element Vector{LeftCell{FiniteCoxeterGroup{Perm{Int16},Int64}}}:\n LeftCell<G‚ÇÇ: duflo=2 character=œÜ‚ÇÇ‚Äö‚ÇÅ+œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ+œÜ‚ÇÇ‚Äö‚ÇÇ>\n LeftCell<G‚ÇÇ: duflo=1 character=œÜ‚ÇÇ‚Äö‚ÇÅ+œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ+œÜ‚ÇÇ‚Äö‚ÇÇ>\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Chevie.KL.LeftCell","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.LeftCell","text":"LeftCell(W,w)\n\nreturns  a  record  describing  the  left  cell  of  W  for  hecke(W,q) containing element w.\n\njulia> W=coxgroup(:E,8)\nE‚Çà\n\njulia> LeftCell(W,W((1:8)...))\nLeftCell<E‚Çà: duflo=(42,43) character=œÜ‚ÇÉ‚ÇÖ‚Äö‚ÇÇ>\n\n\n\n\n\n","category":"type"},{"location":"kl.html#Chevie.KL.Lusztigaw","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.Lusztigaw","text":"Lusztigaw(W,w)\n\nFor  w an element  of the Coxeter  groups W, this  function returns the coefficients  on the irreducible characters of the virtual Character ca_w defined  in 5.10.2 Lusztig1985.  This character has the property that the corresponding almost character is integral and positive.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> l=Lusztigaw(W,W(1))\n6-element Vector{Int64}:\n 0\n 0\n 1\n 0\n 1\n 1\n\njulia> sum(l.*map(i->almostchar(W,i),eachindex(l)))\n[G‚ÇÇ]:<œÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ>+<œÜ‚ÇÇ‚Äö‚ÇÅ>+<œÜ‚ÇÇ‚Äö‚ÇÇ>\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Chevie.KL.LusztigAw","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.LusztigAw","text":"LusztigAw( <W>, <w>)\n\nFor  <w> an element  of the Coxeter  groups <W>, this  function returns the coefficients  on the irreducible  characters of the  virtual Character cA_w defined  in 5.11.6 Lusztig1985.  This character has the property that the corresponding almost character is integral and positive.\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> l=LusztigAw(W,W(1))\n6-element Vector{Int64}:\n 0\n 0\n 0\n 1\n 1\n 1\n\njulia> sum(l.*map(i->almostchar(W,i),eachindex(l)))\n[G‚ÇÇ]:<œÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ>+<œÜ‚ÇÇ‚Äö‚ÇÅ>+<œÜ‚ÇÇ‚Äö‚ÇÇ>\n\n\n\n\n\n","category":"function"},{"location":"kl.html#Chevie.KL.AsymptoticAlgebra","page":"Kazhdan-Lusztig polynomials and bases","title":"Chevie.KL.AsymptoticAlgebra","text":"AsymptoticAlgebra(W,i)\n\nThe  asymptotic algebra A associated to  the algebra H=Hecke(W,q) is an algebra   with   basis   t‚Çì_x   W   and   structure  constants t_xt_y=sum_z  Œ≥_xyz  t_z  given  by:  let  h_xyz  be  the coefficient  of  C_x  C_y  on  C_z. Then h_xyz=Œ≥_xyz^-1 q^a(z)2+lower terms, where q^a(z)2 is the maximum over x,y of the degree of h_xyz.\n\nThe  algebra A  is the  direct product  of the subalgebras A_mathcal C  generated  by  the  elements  t_x_xmathcal  C, where mathcal C runs over the two-sided cells of W. If mathcal C is the  i-th  two-sided  cell  of  W, the command AsymptoticAlgebra(W,i) returns  the algebra A_mathcal C. Note  that the function a(z) is constant  over  a  two-sided  cell,  equal  to  the  common value of the a-function   attached  to  the  characters   of  the  two-sided  cell  (see Character for left cells).\n\njulia> W=coxgroup(:G,2)\nG‚ÇÇ\n\njulia> A=AsymptoticAlgebra(W,1)\nAsymptoticAlgebra(G‚ÇÇ,1) dim.10\n\njulia> b=basis(A)\n10-element Vector{AlgebraElt{AsymptoticAlgebra, Int64}}:\n t‚ÇÇ\n t‚ÇÅ‚ÇÇ\n t‚ÇÇ‚ÇÅ‚ÇÇ\n t‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ\n t‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ\n t‚ÇÅ\n t‚ÇÇ‚ÇÅ\n t‚ÇÅ‚ÇÇ‚ÇÅ\n t‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ\n t‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ\n\njulia> b*permutedims(b)\n10√ó10 Matrix{AlgebraElt{AsymptoticAlgebra, Int64}}:\n t‚ÇÇ      0            t‚ÇÇ‚ÇÅ‚ÇÇ            ‚Ä¶  0               t‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ        0\n t‚ÇÅ‚ÇÇ     0            t‚ÇÅ‚ÇÇ+t‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ          0               t‚ÇÅ‚ÇÇ‚ÇÅ+t‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ  0\n t‚ÇÇ‚ÇÅ‚ÇÇ    0            t‚ÇÇ+t‚ÇÇ‚ÇÅ‚ÇÇ+t‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ     0               t‚ÇÇ‚ÇÅ+t‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ    0\n t‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ   0            t‚ÇÅ‚ÇÇ+t‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ          0               t‚ÇÅ+t‚ÇÅ‚ÇÇ‚ÇÅ      0\n t‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ  0            t‚ÇÇ‚ÇÅ‚ÇÇ               0               t‚ÇÇ‚ÇÅ          0\n 0       t‚ÇÅ‚ÇÇ          0               ‚Ä¶  t‚ÇÅ‚ÇÇ‚ÇÅ            0            t‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ\n 0       t‚ÇÇ+t‚ÇÇ‚ÇÅ‚ÇÇ      0                  t‚ÇÇ‚ÇÅ+t‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ       0            t‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ\n 0       t‚ÇÅ‚ÇÇ+t‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ    0                  t‚ÇÅ+t‚ÇÅ‚ÇÇ‚ÇÅ+t‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ  0            t‚ÇÅ‚ÇÇ‚ÇÅ\n 0       t‚ÇÇ‚ÇÅ‚ÇÇ+t‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ  0                  t‚ÇÇ‚ÇÅ+t‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÅ       0            t‚ÇÇ‚ÇÅ\n 0       t‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÇ        0                  t‚ÇÅ‚ÇÇ‚ÇÅ            0            t‚ÇÅ\n\njulia> CharTable(A)\nCharTable(AsymptoticAlgebra(G‚ÇÇ,1) dim.10)\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ     ‚îÇ2 12 212 1212 21212 1 21 121 2121 12121‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇœÜ‚Ä≤‚ÇÅ‚Äö‚ÇÉ‚îÇ.  .   .    .     . 1  .  -1    .     1‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÅ ‚îÇ1  .   2    .     1 1  .   2    .     1‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÇ ‚îÇ1  .   .    .    -1 1  .   .    .    -1‚îÇ\n‚îÇœÜ‚Ä≥‚ÇÅ‚Äö‚ÇÉ‚îÇ1  .  -1    .     1 .  .   .    .     .‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"type"},{"location":"dict.html#Dictionary-from-GAP3/Chevie","page":"Dictionary from GAP3/Chevie","title":"Dictionary from GAP3/Chevie","text":"","category":"section"},{"location":"dict.html","page":"Dictionary from GAP3/Chevie","title":"Dictionary from GAP3/Chevie","text":"The dictionary from GAP3/Chevie is as follows:","category":"page"},{"location":"dict.html","page":"Dictionary from GAP3/Chevie","title":"Dictionary from GAP3/Chevie","text":"AbelianGenerators                           abelian_gens\nAbelianInvariants                           abelian_invariants\nAffine                                      affine\nAlgebraicCentre                             algebraic_center\nAlmostCharacter                             AlmostChar\nArrangements                                arrangements\nAsFraction                                  fraction\nAsReflection                                reflection\nAsRootOfUnity                               Root1\nAssociatedPartition                         conjugate_partition\nAsWord                                      word\nAsymptoticAlgebra                           AsymptoticAlgebra\nBadPrimes                                   badprimes\nBaseIntMat                                  baseInt\nBasis                                       basis\nBetaSet                                     Œ≤set\nBigCellDecomposition                        bigcell_decomposition\nBinomial                                    binomial\nBipartiteDecomposition                      bipartite_decomposition\nBlocksMat                                   blocks\nBraid                                       BraidMonoid\nBraidMonoid                                 BraidMonoid\nBraidRelations                              braid_relations\nBrieskornNormalForm                         Brieskorn_normal_form\nBruhat                                      bruhatless\nBruhatPoset                                 Poset\nBruhatSmaller                               bruhatless\nCartanMat(\"A\",5)                            cartan(:A,5)\nCartanMatFromCoxeterMatrix                  cartan\nCartanMatrix                                cartan\nCartesian                                   cartesian\nCartesianAt                                 lin2cart\nCatalan                                     catalan\nCentralIdempotents                          centralidempotents\nCentralizer                                 centralizer\nCentralizerGenerators                       centralizer_gens\nCharFFE                                     char\nCharNames                                   charnames\nCharParams(W)                               charinfo(W).charparams\nCharRepresentationWords                     traces_words_mats\nCharTable                                   CharTable\nCheckHeckeDefiningRelations                 isrepresentation\nChevieCharInfo                              charinfo\nChevieClassInfo                             classinfo\nClassName                                   see ClassNames\nClassTypes                                  ClassTypes\nCoefficient(p,i)                            p[i]\nCollectBy(l,f)                              collectby(f,l)\nCollected                                   tally\nCombinations                                combinations\nComm                                        comm or commutator\nComplementIntMat                            complementInt\nComplexConjugate                            conj\nComplexReflectionGroup                      complex_reflection_group or crg\nCompositions                                compositions\nConcatenation(s::Vector)                    vcat(s...)\nConcatenationString(s...)                   prod([s...])\nConjugacyClasses                            conjugacy_classes\nConjugacySet(b[,F][,type])                  conjcat(b[,F],ss=type).obj\nConjugatePartition                          conjugate_partition\nCoxeterCoset                                spets\nCoxeterElements(W[,l])                      elements(W[,l])\nCoxeterGroup(\"A\",5)                         coxeter_group(:A,5) or coxgroup\nCoxeterGroupByCartanMatrix(C)               coxeter_group(C) or coxgroup\nCoxeterGroupByCoxeterMatrix(C)              coxeter_group(cartan(C)) or coxgroup\nCoxeterGroupHyperoctaedralGroup(n)          coxeter_hyperoctaedral_group(n) or coxhyp\nCoxeterGroupSymmetricGroup(n)               coxeter_symmetric_group(n) or coxsym\nCoxeterLength(W,w)                          length(W,w)\nCoxeterMatrix                               coxmat or coxeter_matrix\nCoxeterMatrixFromCartanMat                  coxmat or coxeter_matrix\nCoxeterNumber                               coxnum or coxeter_number\nCoxeterSubCoset                             subspets\nCoxeterWord(W,w)                            word(W,w)\nCoxeterWords(W[,l])                         word.(Ref(W),elements(W[,l]))\nCuspidalPairs                               cuspidal_data\nCuspidalUnipotentCharacters(W[,d])          cuspidal(UnipotentCharacters(W)[,d])\nCycle                                       orbit\nCycles                                      orbits\nCyclotomicModP(c,p)                         FFE{p}(c)\nCyclotomicPolynomial(R,i)                   cyclotomic_polynomial(i)\nCycPol                                      CycPol\nCycPolFakeDegreeSymbol                      fegsymbol\nCycPolGenericDegreeSymbol                   gendeg_symbol\nCycPolUnipotentDegrees                      CycPolUnipotentDegrees\nDecomposedMat                               diagblocks\nDefectSymbol                                defectsymbol\nDegree(p)                                   degree(p)\nDegreeFFE                                   degree\nDeligneLusztigCharacter                     DLChar\nDeligneLusztigLefschetz                     DLLeftschetz\nDescribeInvolution                          describe_involution\nDetPerm(W)                                  vec(detPerm(W))\nDiaconisGraham                              diaconis_graham\nDiagonalMat                                 Diagonal or cat\nDiagonalOfMat                               diag\nDigits                                      digits\nDimension                                   dim or dimension\nDistinguishedParabolicSubgroups             distinguished_parabolics\nDominates                                   dominates\nDrinfeldDouble                              drinfeld_double\nDrop                                        deleteat!\nDualBraid                                   DualBraidMonoid\nDualBraidMonoid                             DualBraidMonoid\nEigenspaceProjector                         eigenspace_projector\nEigenvaluesMat                              eigmat\nElements                                    elements\nElementWithInversions(W,l)                  with_inversions(W,l)\nEltBraid                                    image\nEltWord(W,w)                                W(w...)\nER                                          root\nExteriorPower                               exterior_power\nFactorizedSchurElement                      FactorizedSchurElement\nFactorizedSchurElements                     FactorizedSchurElements\nFakeDegree                                  fakedegree\nFakeDegrees                                 fakedegrees\nFamiliesClassical                           FamiliesClassical\nFamily                                      Family\nFamilyImprimitive                           family_imprimitive\nFiniteCoxeterTypeFromCartanMat(m)           type_cartan(m)\nFirstLeftDescending(W,w)                    firstleftdescent(W,w)\nForEachCoxeterWord(W,f)                     for w in W f(word(W,w)) end\nForEachElement(W,f)                         for w in W f(w) end\nFormatTable                                 showtable\nFrobenius                                   Frobenius\nFullSymbol                                  fullsymbol\nFundamentalGroup                            fundamental_group\nFusionAlgebra                               fusion_algebra\nFusionConjugacyClasses                      fusion_conjugacy_classes\nGaloisCyc                                   galois\nGarsideAlpha                                Œ±\nGarsideWords                                elements\nGcdPartitions                               gcd_partitions\nGcdRepresentation(x,y)                      gcdx(x,y)[2:3]\nGenericOrder                                generic_order\nGenericSign                                 generic_sign\nGetRoot                                     root\nGraphAutomorphisms                          graph_automorphisms\nHasse                                       hasse\nHecke                                       hecke\nHeckeCentralMonomials                       central_monomials\nHeckeCharValues                             char_values\nHeckeClassPolynomials                       class_polynomials\nHeckeReflectionRepresentation               reflection_representation or reflrep\nHermiteNormalFormIntegerMat                 hermite\nHermiteNormalFormIntegerMatTransforms(m)    hermite_transforms(m)\nHighestPowerFakeDegrees(W)                  charinfo(W).B\nHighestPowerFakeDegreeSymbol                degree_fegsymbol\nHighestPowerGenericDegrees(W)               charinfo(W).A\nHighestPowerGenericDegreeSymbol             degree_gendeg_symbol\nHighestShortRoot                            highest_short_root\nHyperplaneOrbits                            hyperplane_orbits\nICCTable                                    ICCTable\nIdempotents                                 idempotents\nIncidence                                   incidence\nIndependentLines                            independent_lines\nIndependentRoots                            independent_roots\nInducedLinearForm                           induced_linear_form\nInductionTable                              induction_table\nInherit                                     look at merge for hashes\nIntermediateGroup                           intermediate_group\nIntersection                                intersect\nIntFFE                                      Int\nIntListToString                             joindigits\nInvariantForm                               invariant_form\nInvariants                                  invariants\nInversions                                  inversions\nIsAbelian                                   isabelian\nIsAssociative                               isassociative\nIsCyclic                                    iscyclic\nIsCycPol(p)                                 p isa CycPol\nIsFamily(f)                                 f isa Family\nIsFFE(x)                                    x isa FFE\nIsIsolated                                  isisolated\nIsJoinLattice                               isjoin_lattice\nIsLeftDescending(W,w,i)                     isleftdescent(W,w,i)\nIsMeetLattice                               ismeet_lattice\nIsomorphismType                             isomorphism_type\nIsParabolic                                 isparabolic\nIsSubset(a,b)                               issubset(b,a)\nIsUnipotentElement(x)                       x isa UnipotentElement\nJInductionTable                             J_induction_table\njInductionTable                             j_induction_table\nJoin                                        join\nKazhdanLusztigPolynomial                    KLPol\nKroneckerProduct                            kron\nLargestMovedPoint                           largest_moved_point\nlast                                        ans\nLcmPartitions                               lcm_partitions\nLeadingCoefficient(p)                       p[end]\nLeftCell                                    LeftCell\nLeftCells                                   left_cells\nLeftDescentSet(W,w)                         leftdescents(W,w)\nLeftDivisorsSimple                          left_divisors\nLeftGcd                                     leftgcd\nLeftLcm                                     leftlcm\nLength(W.generators)                        ngens(W) or number_of_generators(W)\nLinearExtension                             linear_extension\nList(ConjugacyClasses(G),Representative)    classreps(G) or class_representatives(G)\nListBlist(a,b)                              a[b]\nListPerm(p)                                 vec(p)\nLoewyLength                                 loewylength\nLogFFE                                      log\nLongestCoxeterElement(W)                    longest(W)\nLongestCoxeterWord(W)                       word(W,longest(W))\nLowestPowerFakeDegrees(W)                   charinfo(W).b\nLowestPowerFakeDegreeSymbol                 valuation_fegsymbol\nLowestPowerGenericDegrees(W)                charinfo(W).a\nLowestPowerGenericDegreeSymbol              valuation_gendeg_symbol\nLusztigaw                                   Lusztigaw\nLusztigAw                                   LusztigAw\nLusztigInduction                            lusztig_induce\nLusztigInductionTable                       lusztig_induction_table\nLusztigRestriction                          lusztig_restrict\nM.LeftLcmSimples(x...)                      leftlcm(M,...)\nM.RightLcmSimples(x...)                     rightlcm(M,...)\nM.ToOrdinary(i)                             B(M,i)\nMappingPermListList                         mappingPerm\nMatStab                                     stab_onmats\nMatXPerm(W,p)                               reflection_representation(W,p) or reflrep\nMatYPerm                                    YMatrix\nMod1                                        modZ\nMovedPoints                                 support\nMvp(\"x\")                                    Mvp(:x)\nNrArrangements                              narrangements\nNrCombinations                              ncombinations\nNrConjugacyClasses                          nconjugacy_classes\nNrDrinfeldDouble                            ndrinfeld_double\nNrPartitions                                npartitions\nNrPartitionsSet                             npartitions\nNrPartitionTuples                           npartition_tuples\nNrRestrictedPartitions                      npartitions\nNullMat(m[,n])                              zeros(Int,m,m) resp. zeros(Int,m,n)\nNullspaceIntMat                             lnullspaceInt\nOnFamily(f,p::Int)                          galois(f,p)\nOnFamily(f,p::Perm)                         f^p\nOnMatrices                                  onmats\nOnPolynomials(m,p)                          p^m\nOnSets                                      onsets\nOnTuples                                    ontuples\nOrderedPartitions                           compositions\nOrderFFE                                    order\nOrderMod(n,m)                               order(Mod{m}(n))\nParabolicClosure                            parabolic_closure\nParabolicRepresentatives                    parabolic_reps\nPartBeta                                    partŒ≤\nPartition                                   partition\nPartitions                                  partitions\nPartitionsSet                               partitions\nPartitionTuples                             partition_tuples\nPermCosetsSubgroup(H,W)                     D=vcat(reduced(H,W)...);map(s->Perm(reduced.(Ref(H),D.*s),D),gens(W))\nPermList(v)                                 Perm(v)\nPermListList(l1,l2)                         Perm(l1,l2)\nPermMatMat(m,n)                             Perm(m,n;dims=(1,2))\nPermMatX                                    PermX\nPermMatY                                    PermY\nPermutationMat(p,dim)                       Matrix(p,dim)\nPermutationOnCharacters                     on_chars\nPermutationOnClasses                        on_classes\nPermutationOnUnipotents                     on_unipotents\nPermuted(v,p)                               invpermute(v,p)\nPermutedByCols(m,p)                         invpermute(m,p;dims=2)\nPoset                                       Poset\nPosition(l,x)                               findfirst(==(x),l)\nPositionCartesian                           cart2lin\nPositionCartesian(a,b)                      LinearIndices(reverse(Tuple(a)))[CartesianIndices(Tuple(b))]\nPositionClass                               position_class\nPositionDet                                 charinfo(W).positionDet\nPositionId                                  charinfo(W).positionId\nPositionProperty(l,f)                       findfirst(f,l)\nPositionRegularClass                        position_regular_class\nPositions(l,x)                              findall(==(x),l)\nPositionsProperty(l,f)                      findall(f,l)\nPowerRoot(x,y)                              (Root1(;r=x)^y).r\nPresentation                                Presentation\nPrintDiagram(W)                             diagram(W)\nProduct                                     prod\nProportionalityCoefficient(v,w)             ratio(v,w)\nQuasiIsolatedRepresentatives                quasi_isolated_reps\nQuoInt                                      div\nRadical                                     radical\nRadicalPower                                radicalpower\nRank                                        rank\nRankSymbol                                  ranksymbol\nReducedCoxeterWord(W,w)                     word(W,W(w...))\nReducedExpressions(W,w)                     words(W,w)\nReducedInRightCoset(W,w)                    reduced(W,w)\nReducedRightCosetRepresentatives(W,H)       reduced(H,W)\nReflection                                  refls(W,i) or reflectionMatrix(root,coroot)\nReflectionCharacter                         reflection_character or reflchar\nReflectionCharValue                         tr(reflrep(W,w))\nReflectionCoDegrees(W)                      codegrees(W)\nReflectionDegrees(W)                        degrees(W)\nReflectionEigenvalues                       refleigen\nReflectionGroup                             reflection_group\nReflectionLength(W,w)                       reflength(W,w)\nReflectionName(W)                           repr(W;context=:limit=>true)\nReflections                                 Perm.(reflections(W)[1:nhyp(W)])\nReflectionSubgroup                          reflection_subgroup\nReflectionType                              refltype\nRegularEigenvalues                          regular_eigenvalues\nRelativeDegrees                             relative_degrees\nRelativeGroup                               relative_group\nReplace                                     replace\nRepresentations                             representations\nRepresentativeConjugation(b,b'[,F][,type])  conjugating_elt(b,b'[,F],ss=type)\nRepresentativeDiagonalConjugation           diagconj_elt\nRepresentativeOperation                     transporting_elt or transporting_element\nRepresentativeRowColPermutation             Perm_rowcol\nRestricted                                  restricted\nRestrictedPartitions                        partitions\nRestrictedPerm(p,d)                         restricted(p,d)\nReversed                                    reverse\nReversedWord                                reverse\nRightDescentSet(W,w)                        rightdescents(W,w)\nRightGcd                                    rightgcd\nRightLcm                                    rightlcm\nRootDatum                                   rootdatum\nRootsCartan(m)                              roots(m)\nRotation(v,i)                               circshift(v,-i)\nRotations(v)                                circshift.(Ref(v),length(v):-1:1)\nScalarProduct                               Chars.scalarproduct\nScalMvp                                     scalar\nSchurElements                               schur_elements\nSchurFunctor                                schur_functor\nSemisimpleCentralizerRepresentatives        semisimple_centralizer_representatives or sscentralizer_reps\nSemisimpleElement                           ss\nSemisimpleRank                              semisimplerank\nSemisimpleSubgroup                          torsion_subgroup\nShiftBeta                                   shiftŒ≤\nShrinkGarsideGeneratingSet                  shrink\nSignedMatStab                               sstab_onmats\nSignedPerm                                  SPerm\nSignedPermListList                          SPerm\nSignedPermMatMat(M,N)                       SPerm(M,N;dims=(1,2))\nSize(W)                                     length(W)\nSmallestMovedPoint                          smallest_moved_point\nSmithNormalFormIntegerMat                   smith\nSmithNormalFormIntegerMatTransforms(m)      smith_transforms(m)\nSolutionIntMat                              solutionmatInt\nSolutionMat                                 solutionmat\nSortingPerm(a)                              inv(sortPerm(a))\nSortParallel(a,b)                           b=b[sortperm(a)];sort!(a)\nSpecialPieces                               special_pieces\nSpets                                       spets\nSplitLevis                                  split_levis\nStabilizer                                  stabilizer\nStandardParabolic                           standard_parabolic\nStandardParabolicClass                      standard_parabolic_class\nStructureRationalPointsConnectedCentre      structure_rational_points_connected_centre\nSubSpets                                    subspets\nSubTorus                                    SubTorus\nSum                                         sum\nSumIntersectionMat(m,n)                     (rowspace(vcat(m,n)),intersect_rowspace(m,n))\nSymbols                                     HasType.BDSymbols\nSymbolsDefect(e,r,def,ct)                   symbols(e,r,ct,def)\nSymmetricDifference                         symdiff\nSymmetricPower                              symmetric_power\nTableaux                                    tableaux\nTensored(c,d)                               vec([i.*j for i in c,j ind])\nTorus                                       torus\nTorusOrder                                  torus_order\nTraceMat                                    tr\nTransitiveClosure                           transitive_closure\nTransporter                                 transporter\nTransposedMat                               transpose or permutedims\nTransversals                                related to transversal and orbits\nTriangulizeMat                              echelon!\nTwistings                                   twistings\nTwoTree(m)                                  twotree(m)\nUnipotentAbelianPart                        abelianpart\nUnipotentCharacter                          UniChar\nUnipotentCharacters                         UnipotentCharacters\nUnipotentClasses                            UnipotentClasses\nUnipotentDecompose                          decompose\nUnipotentDegrees(W,q)                       degrees(UnipotentCharacters(W),q)\nUnipotentGroup                              UnipotentGroup\nUnorderedTuples                             multisets\nValuation(p)                                valuation(p)\nValue(p,x)                                  p(x)\nW.generators                                gens(W) or generators(W)\nW.matgens                                   reflection_representation(W) or reflrep\nW.matgens[i]                                reflection_representation(W,i) or reflrep\nW.N                                         nref(W) or number_of_reflections(W)\nW.Nhyp                                      number_of_hyperplanes(W) or nyp(W)\nW.orbitRepresentative                       simple_reps(W)\nW.orbitRepresentativeElements[i]            simple_conjugating(W,i)\nW.OrdersGeneratingReflections               ordergens(W) or orders_of_generators(W)\nW.rootInclusion                             inclusion(W)\nW.rootLengths                               rootlengths(W)\nW.rootRestriction                           restriction(W)\nW.roots                                     W.rootdec\nW.simpleCoroots                             simplecoroots(W)\nW.simpleRoots                               simpleroots(W)\nWeightInfo                                  weightinfo\nWGraph                                      Wgraph\nWGraphToRepresentation                      WGraphToRepresentation","category":"page"},{"location":"algebras.html#Algebras","page":"Algebras","title":"Algebras","text":"","category":"section"},{"location":"algebras.html","page":"Algebras","title":"Algebras","text":"Pages=[\"algebras.md\"]","category":"page"},{"location":"algebras.html","page":"Algebras","title":"Algebras","text":"Algebras\nisabelian(::FiniteDimAlgebra)\nAlgebras.GroupAlgebra\nSolomonAlgebra","category":"page"},{"location":"algebras.html#Chevie.Algebras","page":"Algebras","title":"Chevie.Algebras","text":"This is a port of the GAP3 package Algebras by C√©dric Bonnaf√©.\n\n\n\n\n\n","category":"module"},{"location":"algebras.html#PermGroups.Groups.isabelian-Tuple{FiniteDimAlgebra}","page":"Algebras","title":"PermGroups.Groups.isabelian","text":"isabelian(A::FiniteDimAlgebra) whether A is commutative\n\n\n\n\n\n","category":"method"},{"location":"algebras.html#Chevie.Algebras.GroupAlgebra","page":"Algebras","title":"Chevie.Algebras.GroupAlgebra","text":"GroupAlgebra(G,T=Int) group algebra of G with coefficients T\n\n\n\n\n\n","category":"type"},{"location":"algebras.html#Chevie.Algebras.SolomonAlgebra","page":"Algebras","title":"Chevie.Algebras.SolomonAlgebra","text":"'SolomonAlgebra(W,K)'\n\nLet  (W,S) be a  finite Coxeter group.  If w is  an element of W, let R(w)={s  ‚àà S | l(ws) >  l(w)}. If I is a  subset of S, we set Y_I={w ‚àà W | R(w)=I}, X_I={w ‚àà W | R(w) ‚äÉ I}.\n\nNote  that X_I is the set of minimal length left coset representatives of W/W_I. Now, let y_I=‚àë_{w ‚àà Y_I} w, x_I=‚àë_{w ‚àà X_I} w.\n\nThey  are elements  of the  group algebra  ‚Ñ§ W  of W over Z. Now, let Œ£(W)  = _I  S ‚Ñ§ y_I = _I  S ‚Ñ§ x_I. This is a sub-‚Ñ§-module of ‚Ñ§W.  In fact, Solomon proved  that it is a  sub-algebra of ‚Ñ§W. Now, let K(W)  be the Grothendieck ring  of W and let  Œ∏:Œ£(W)‚Üí K(W) be the map defined  by  Œ∏(x_I)  =  Ind_{W_I}^W  1.  Solomon  proved  that this is an homomorphism of algebras. We call it the Solomon homomorphism.\n\nreturns  the Solomon  descent algebra  of the  finite Coxeter group (W,S) over  K.  If  S=[s‚ÇÅ,‚Ä¶,s·µ£],  the  element x_I corresponding to the subset   I=[s‚ÇÅ,s‚ÇÇ,s‚ÇÑ]  of  S  is  printed  as  |X(124)|.  Note  that 'A:=SolomonAlgebra(W,K)' is endowed with the following fields:\n\n'A.W': the group W\n\n'A.basis': the basis (x_I)_{I ‚äÇ S}.\n\n'A.xbasis':  the function sending the subset I (written as a number: for instance 124 for [s_1,s_2,s_4]) to x_I.\n\n'A.ybasis': the function sending the subset I to y_I.\n\n'A.injection':  the injection of A in the group algebra of W, obtained by calling 'SolomonAlgebraOps.injection(A)'.\n\nNote that 'SolomonAlgebra(W,K)' endows W with the field W.solomon which is a record containing the following fields:\n\n'W.solomon_subsets': the set of subsets of S\n\n'W.solomonconjugacy':  conjugacy classes  of parabolic  subgroups of W (a conjugacy   class  is  represented  by  the   list  of  the  positions,  in 'W.solomon.subsets', of the subsets I of S such that `WI` lies in this conjugacy class).\n\n'W.solomon_mackey':  essentially  the  structure  constants  of  the Solomon algebra over the rationals.\n\njulia> W=coxgroup(:B,4)\nB‚ÇÑ\n\njulia> A=SolomonAlgebra(W)\nSolomonAlgebra(B‚ÇÑ,Int64)\n\njulia> X=A.xbasis; X(1,2,3)*X(2,4)\n2X‚ÇÇ+2X‚ÇÑ\n\njulia> W.solomon_subsets\n16-element Vector{Vector{Int64}}:\n [1, 2, 3, 4]\n [1, 2, 3]\n [1, 2, 4]\n [1, 3, 4]\n [2, 3, 4]\n [1, 2]\n [1, 3]\n [1, 4]\n [2, 3]\n [2, 4]\n [3, 4]\n [1]\n [2]\n [3]\n [4]\n []\n\njulia> W.solomon_conjugacy\n12-element Vector{Vector{Int64}}:\n [1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [7, 8]\n [9, 11]\n [10]\n [12]\n [13, 14, 15]\n [16]\n\njulia> Algebras.injection(A)(X(1,2,3))\ne_+e‚ÇÑ+e‚ÇÉ‚ÇÑ+e‚ÇÇ‚ÇÉ‚ÇÑ+e‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ+e‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ+e‚ÇÉ‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ+e‚ÇÑ‚ÇÉ‚ÇÇ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ\n\n\n\n\n\n","category":"type"},{"location":"hecke.html#Hecke-algebras","page":"Hecke algebras","title":"Hecke algebras","text":"","category":"section"},{"location":"hecke.html","page":"Hecke algebras","title":"Hecke algebras","text":"Pages=[\"hecke.md\"]","category":"page"},{"location":"hecke.html","page":"Hecke algebras","title":"Hecke algebras","text":"HeckeAlgebras\nhecke(::Group,::Vector{<:Vector{C}}) where C\nTbasis(::HeckeAlgebra)\nalt\nŒ±(::HeckeTElt)\nCharTable(::HeckeAlgebra)\ncentral_monomials\nclass_polynomials\nchar_values\nschur_elements\nfactorized_schur_element\nfactorized_schur_elements\nHeckeAlgebras.FactSchur\nrepresentation(::HeckeAlgebra,::Integer)\nrepresentations(::Union{HeckeAlgebra,HeckeCoset})\nisrepresentation\nreflection_representation(::HeckeAlgebra)\nHeckeCoset\nhecke(::HeckeCoset)\nhecke(::Spets,::HeckeAlgebra)","category":"page"},{"location":"hecke.html#Chevie.HeckeAlgebras","page":"Hecke algebras","title":"Chevie.HeckeAlgebras","text":"This   module  implements  Hecke  algebras  associated  to  finite  complex reflection  groups and arbitrary Coxeter  groups (these algebras are called Iwahori-Hecke  algebras  in  this  last  case),  and  also  implements  the character  tables, Schur elements and representations of Hecke algebras for finite  groups. For Iwahori-Hecke algebras  and G(d,1,1) this module also implements  the standard T basis;  see the module KLfor Kazhdan-Lusztig bases.\n\nLet  (W,S) be  a Coxeter  system and  let m‚Çõ‚Çú  be the order of st for s,t‚àà S. Let R be a commutative ring with 1 and for s‚àà S let u‚Çõ‚ÇÄ,u‚Çõ‚ÇÅ‚àà R be elements which depend only on the conjugacy class of s in W (this is  the  same  as  requiring  that  u‚Çõ·µ¢=u‚Çú·µ¢  whenever  m‚Çõ‚Çú is odd). The Iwahori-Hecke   algebra  of  W  over  R  with  parameters  u‚Çõ·µ¢  is  a deformation  of the group algebra of W over R defined as follows: it is the  unitary  associative  R-algebra  generated  by  elements  T‚Çõ, s‚àà S subject to the relations:\n\n(T‚Çõ-u‚Çõ‚ÇÄ)(T‚Çõ-u‚Çõ‚ÇÅ)=0 for all s‚àà S (the quadratic relations)\n\nT‚ÇõT‚ÇúT‚Çõ= T‚ÇúT‚ÇõT‚Çú with m‚Çõ‚Çú factors on each side (the braid relations)\n\nIf  u‚Çõ‚ÇÄ=1 and  u‚Çõ‚ÇÅ=-1 for  all s  then the quadratic relations become T‚Çõ¬≤=1 and the deformation of the group algebra is trivial.\n\nSince  the generators T‚Çõ  satisfy the braid  relations, H is  in fact a quotient  of the group algebra of the  braid group associated with W. The braid relations also imply that for any reduced expression s_1‚ãØ s_m of w ‚àà  W the product T‚Çõ_1‚ãØ T‚Çõ_m has the same value, that we denote T_w. We have T_1=1; if one of the u‚Çõ·µ¢ is invertible, the {T_w}_{w‚àà W} form an R-basis  of the Iwahori-Hecke algebra  which specializes to the canonical basis of the group algebra R[W] for u‚Çõ‚ÇÄ‚Ü¶1 and u‚Çõ‚ÇÅ‚Ü¶-1.\n\nWhen  one  of  the  u‚Çõ·µ¢  is  invertible,  the  structure  constants  (the decomposion  of  a  product  T_vT_w)  in  the T_w basis are obtained as follows.  Choose a reduced expression for v,  say v=s_1 ‚ãØ s_k and apply inductively the formula:\n\nT_sT_w=T_sw               if l(sw)=l(w)+1\n\nT_sT_w=-u‚Çõ‚ÇÄu‚Çõ‚ÇÅT_sw+(u‚Çõ‚ÇÄ+u‚Çõ‚ÇÅ)T_w if l(sw)=l(w)-1.\n\nIf  one of u‚Çõ‚ÇÄ or u‚Çõ‚ÇÅ is invertible  in R, for example u‚Çõ‚ÇÅ, then by changing  the generators  to T‚Ä≤‚Çõ=-T‚Çõ/u‚Çõ‚ÇÅ,  and setting q‚Çõ=-u‚Çõ‚ÇÄ/u‚Çõ‚ÇÅ, the braid  relations do no change  (since when m‚Çõ‚Çú is  odd we have u‚Çõ·µ¢=u‚Çú·µ¢) but  the quadratic relations become (T‚Ä≤‚Çõ-q‚Çõ)(T‚Ä≤‚Çõ+1)=0. This normalisation is  the most common form considered  in the literature. Another common form in  the context of  Kazhdan-Lusztig theory, is  u‚Çõ‚ÇÄ=‚àöq‚Çõ and u‚Çõ‚ÇÅ=-‚àöq‚Çõ‚Åª¬π. The  form provided, with two parameters per generator, is often useful, for instance  when constructing  the Jones  polynomial. If  for all s we have u‚Çõ‚ÇÄ=q,   u‚Çõ‚ÇÅ=-1   then   we   call   the   corresponding   algebra  the \"one-parameter\" or \"Spetsial\" Iwahori-Hecke algebra associated with W.\n\nFor  some  Iwahori-Hecke  algebras  the  character  table,  and  in general Kazhdan-Lusztig  bases, require  a square  root of  -u‚Çõ‚ÇÄu‚Çõ‚ÇÅ. These square roots  can be specified  with the keyword  rootpara when constructing the algebra;  after  this  the  function  rootpara(H)  will return the chosen roots. If not specified, we try to extract roots automatically when needed; rootpara(H)  informs  on  the  choices  made. Note that some mathematical results  require an explicit choice of one  of the two possible roots which cannot be automatically made thus require a keyword initialisation.\n\nThere  is a universal choice  for R and u‚Çõ·µ¢:  Let u‚Çõ·µ¢:s‚àà S,i‚àà[0,1] be indeterminates   such  that  u‚Çõ·µ¢=u‚Çú·µ¢  whenever  m‚Çõ‚Çú  is  odd,  and  let A=‚Ñ§[u‚Çõ·µ¢] be the corresponding polynomial ring. Then the Hecke algebra H of  W over A with parameters u‚Çõ·µ¢ is called the generic Iwahori-Hecke algebra  of  W.  Any  Hecke  algebra  H‚ÇÅ  with parameters v‚Çõ·µ¢ can be obtained  by  specialization  from  H,  since  there  is  a  unique  ring homomorphism  f:A ‚Üí R such that f(u‚Çõ·µ¢)=v‚Çõ·µ¢ for all i. Then via f we can identify H‚ÇÅ to R _A H.\n\nCertain invariants of the irreducible characters of the one-parameter Hecke algebra  play a special role in the representation theory of the underlying finite  Coxeter  groups,  namely  the  a-  and  A-invariants. For basic properties   of  Iwahori-Hecke   algebras  and   their  relevance   to  the representation theory of finite groups of Lie type, see for example Curtis and Reiner 1987 Sections~67 and 68.\n\nIn  the  following  example,  we  compute  the multiplication table for the 0-Iwahori‚ÄìHecke algebra associated with the Coxeter group of type A_2.\n\njulia> W=coxgroup(:A,2)\nA‚ÇÇ\n\njulia> H=hecke(W,0)            # One-parameter algebra with `q=0`\nhecke(A‚ÇÇ,0)\n\njulia> T=Tbasis(H);            # Create the `T` basis\n\njulia> b=T.(elements(W))       # the basis\n6-element Vector{HeckeTElt{HeckeAlgebra{Int64, Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}, Int64, Perm{Int16}}}:\n T.\n T‚ÇÅ\n T‚ÇÇ\n T‚ÇÅ‚ÇÇ\n T‚ÇÇ‚ÇÅ\n T‚ÇÅ‚ÇÇ‚ÇÅ\n\njulia> b*permutedims(b)       # multiplication table\n6√ó6 Matrix{HeckeTElt{HeckeAlgebra{Int64, Perm{Int16}, FiniteCoxeterGroup{Perm{Int16},Int64}}, Int64, Perm{Int16}}}:\n T.    T‚ÇÅ     T‚ÇÇ     T‚ÇÅ‚ÇÇ    T‚ÇÇ‚ÇÅ    T‚ÇÅ‚ÇÇ‚ÇÅ\n T‚ÇÅ    -T‚ÇÅ    T‚ÇÅ‚ÇÇ    -T‚ÇÅ‚ÇÇ   T‚ÇÅ‚ÇÇ‚ÇÅ   -T‚ÇÅ‚ÇÇ‚ÇÅ\n T‚ÇÇ    T‚ÇÇ‚ÇÅ    -T‚ÇÇ    T‚ÇÅ‚ÇÇ‚ÇÅ   -T‚ÇÇ‚ÇÅ   -T‚ÇÅ‚ÇÇ‚ÇÅ\n T‚ÇÅ‚ÇÇ   T‚ÇÅ‚ÇÇ‚ÇÅ   -T‚ÇÅ‚ÇÇ   -T‚ÇÅ‚ÇÇ‚ÇÅ  -T‚ÇÅ‚ÇÇ‚ÇÅ  T‚ÇÅ‚ÇÇ‚ÇÅ\n T‚ÇÇ‚ÇÅ   -T‚ÇÇ‚ÇÅ   T‚ÇÅ‚ÇÇ‚ÇÅ   -T‚ÇÅ‚ÇÇ‚ÇÅ  -T‚ÇÅ‚ÇÇ‚ÇÅ  T‚ÇÅ‚ÇÇ‚ÇÅ\n T‚ÇÅ‚ÇÇ‚ÇÅ  -T‚ÇÅ‚ÇÇ‚ÇÅ  -T‚ÇÅ‚ÇÇ‚ÇÅ  T‚ÇÅ‚ÇÇ‚ÇÅ   T‚ÇÅ‚ÇÇ‚ÇÅ   -T‚ÇÅ‚ÇÇ‚ÇÅ\n\nThus,  we work  with algebras  with arbitrary  parameters. We will see that this also works on the level of characters and representations.\n\nFor  general complex reflection  groups, the picture  is similar. The Hecke algebras  are deformations  of the  group algebras,  generalizing those for real reflection groups.\n\nThe  definition is  as a  quotient of  the algebra  of the  braid group. We assume  now that W is  a finite reflection group  in the complex vector space  V. The braid group associated  is the fundamental group Œ†‚ÇÅ of the  space ¬†(V-bigcup_Hinmathcal H  H)W, where mathcal H is  the set of  reflecting hyperplanes of  W. This group  is generated by braid reflections, elements which by the natural map from the braid group to  the reflection  group project  to distinguished  reflections. The braid reflections   which  project  to  a  given  W-orbit  of  reflections  are conjugate.  Let ùê¨ be a representative of  such a conjugacy class of braid reflections,  let e  be the  order of  the image  of ùê¨  in W, and let u_ùê¨0u_ùê¨e-1 be indeterminates. The generic Hecke algebra of W is  the  ‚Ñ§u_ùê¨i^  1_ùê¨i-algebra  quotient  of  the braid group algebra  by the relations (ùê¨-u_ùê¨0)(ùê¨-u_ùê¨e-1)=0, and an arbitrary Hecke  algebra for W is an algebra  obtained from this generic algebra by specializing some of the parameters.\n\nThe  generic Hecke algebras are explicitely  described by a presentation of the  braid group. The braid group can be presented by homogeneous relations in   the  braid   reflections,  called   braid  relations,  described  in Brou√©-Malle-Rouquier     1998     and    Bessis-Michel 2003  (some  of  which  were  obtained  using the VKCURVE GAP3-package,  also ported to Julia).  Furthermore, these presentations are such  that the  reflection group  is presented  by the same relations, plus relations  describing the order  of the generating  reflections, called the order  relations. Thus  the Hecke  algebra has  a presentation similar to that of W, with the same braid relations but the order relations replaced by a deformed version.\n\nIf  S‚äÇ W  is the  set of  distinguished reflections  of W which lift to generating  braid reflections in the braid  group, for each conjugacy class of  an  s  of  order  e  we take indeterminates u‚Çõ‚ÇÄ,‚Ä¶,u‚Çõ‚Çë‚Çã‚ÇÅ. Then the generic  Hecke algebra is the ‚Ñ§u‚Çõ·µ¢^1‚Çõ·µ¢-algebra H with generators T_s  for each s‚àà  S presented by  the braid relations  and the deformed order relations (T_s-u_s0)(T_s-u_se-1)=0.\n\nAriki,  Koike and Malle have computed the  character table of some of these algebras,  including  those  for  all  2-dimensional reflection groups, see Brou√©-Malle 1993 and Malle 1996; our data  has  models  of  all  representation  and  character  tables for real reflection  groups; it  contains the  same for  imprimitive groups  and for primitive groups of dimension 2 and 3 (these last representations have been computed  in Malle-Michel 2010) and contains also models and  character tables computed  by Michel for  G‚ÇÇ‚Çâ and G‚ÇÉ‚ÇÉ; it contains also  partial lists of representations and partial character tables for the remaining  groups G‚ÇÉ‚ÇÅ,G‚ÇÉ‚ÇÇ  and G‚ÇÉ‚ÇÑ,  computed by  Malle and  Michel for G‚ÇÉ‚ÇÇ and by Michel for the other two algebras.\n\nThe quotient of the Hecke algebra obtained by the specialisation u_ùê¨i Œ∂‚Çë‚Å±  is isomorphic to the group algebra of W. It was conjectured for 20 years  that over a splitting ring the Hecke algebra is itself isomorphic to the  group algebra of W over the  same ring. This was called the freeness conjecture since the main problem is to show that the Hecke algebra is free of dimension |W|. This has finally been proved in 2019 thanks to the work of  many  people  including  Marin,  Pfeiffer,  Chavli  and  Tsuchioka  for exceptional  groups. Along the way  it has been proven  that there exists a set  {b_w}_{w‚àà W} of  elements of the  Braid group such  that b_1=1 and b_w maps to w by the natural quotient map, such that their images T_w form a basis of the Hecke algebra.\n\nIt  is  conjectured  that  such  a  basis  T_w  can  be  chosen such that additionnaly  the  linear  form  t  defined  by  t(T_w)=0 if w‚â† 1 and t(1)=1 is a symmetrizing form for the symmetric algebra H. This is well known  for all real reflection groups  and has been proved in Malle-Mathas 1998   for   imprimitive   reflection   groups   and   in Malle-Michel 2010 for some primitive groups of dimension 2  and  3.  Chlouveraki  and  Chavli  have handled some other 2-dimensional cases.  For  each  irreducible  character  œÜ  of H we define the Schur element  S·µ© associated to œÜ by the  condition that for any element T of  H we have t(T)=‚àë·µ© œÜ(T)/S·µ©. It  can be shown that the Schur elements are  Laurent polynomials, and they  do not depend on  the choice of a basis having  the  above  property.  Malle  has  computed  these  Schur elements, assuming the above conjecture; they are in the Chevie data.\n\nSee the function hecke for various ways of specifying the parameters of a Hecke   algebra.  Look  also  at   the  docstrings  of  central_monomials, char_values,     class_polynomials,    schur_elements,    isrepresentation, factorized_schur_elements,  and  at  the  methods  for  Hecke  algebras of CharTable, representations, reflrep.\n\nTaking  apart  Hecke  elements  is  done  with  the  functions  getindex, setindex!, keys, values, iterate.\n\njulia> H=hecke(W,Pol(:q))\nhecke(A‚ÇÇ,q)\n\njulia> T=Tbasis(H);\n\njulia> h=T(1,2)^2\nqT‚ÇÇ‚ÇÅ+(q-1)T‚ÇÅ‚ÇÇ‚ÇÅ\n\njulia> length(h) # h has 2 terms\n2\n\njulia> h[W(2,1)] # coefficient of W(2,1)\nPol{Int64}: q\n\njulia> collect(h) # pairs perm=>coeff\n2-element Vector{Any}:\n  (1,2,6)(3,4,5) => q\n (1,5)(2,4)(3,6) => q-1\n\njulia> collect(values(h)) # the coefficients\n2-element Vector{Pol{Int64}}:\n q\n q-1\n\njulia> collect(keys(h)) # the corresponding Perms\n2-element Vector{Perm{Int16}}:\n (1,2,6)(3,4,5)\n (1,5)(2,4)(3,6)\n\njulia> h[W(2,1)]=Pol(3)\nPol{Int64}: 3\n\njulia> h\n3T‚ÇÇ‚ÇÅ+(q-1)T‚ÇÅ‚ÇÇ‚ÇÅ\n\nfinally, benchmarks on julia 1.8\n\njulia> function test_w0(n)\n         W=coxgroup(:A,n)\n         Tbasis(hecke(W,Pol(:q)))(longest(W))^2\n       end\ntest_w0 (generic function with 1 method)\n\njulia> @btime test_w0(7);\n   97.210 ms (1776476 allocations: 127.52 MiB)\n\nin GAP3 the analogous function takes 920ms\n\ntest_w0:=function(n)local W,T,H;\n  W:=CoxeterGroup(\"A\",n);H:=Hecke(W,X(Rationals));T:=Basis(H,\"T\");\n  return T(LongestCoxeterWord(W))^2;\nend;\n\n\n\n\n\n","category":"module"},{"location":"hecke.html#Chevie.HeckeAlgebras.hecke-Union{Tuple{C}, Tuple{Group, Vector{<:Vector{C}}}} where C","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.hecke","text":"hecke( W [, parameter];rootpara=nothing)\n\nHecke  algebra for the complex reflection group or Coxeter group W. If no parameter is given, 1 is assumed which gives the group algebra of W.\n\nThe  following forms are accepted for  parameter: if parameter is not a vector or a tuple, it is replaced by the vector fill(parameter,ngens(W)). If it is a vector with one entry, it is replaced with fill(parameter[1],ngens(W)).  If parameter  is a  vector with more than one  entry, it should  have length ngens(W),  each entry representing the parameters   for   the   corresponding   generator   of  W,  and  entries corresponding  to  the  same  W-orbit  of generators should be identical. Finally, if parameter is a Tuple, the tuple should have as many entries as  there are hyperplane  orbits in W  and each entry  will represent the parameters for the corresponding conjugacy class of braid reflections.\n\nAn  entry in  parameter for  a reflection  of order  e can  be either a single scalar value or a Vector of length 'e'. If it is a Vector, it is interpreted as the list [u‚ÇÄ,‚Ä¶,u_(e-1)] of parameters for that reflection. If  it is not  a vector, let  q be its  value; it is  then interpreted as specifying  the  list  of  parameters  for  the Spetsial algebra, which are [q,Œ∂_e,‚Ä¶,Œ∂_{e-1}]  (thus the  list [q,-1]  of the one-parameter algebra for Coxeter groups).\n\nWhen  printing an Hecke algebra the parameter list is abbreviated using the same conventions.\n\nComputing characters or representations of Hecke algebra needs sometimes to extract  roots of the  parameters. These roots  are extracted automatically (when  possible). For Coxeter groups it  is possible to give explicit roots by  giving  a  keyword  argument  rootpara:  if  it is a vector it should contain at the i-th position a square root of -parameter[i][1]*parameter[i][2];   if  a   scalar  it   is  replaced  by fill(rootpara,ngens(W)).\n\nExample\n\njulia> W=coxgroup(:B,2)\nB‚ÇÇ\n\njulia> @Pol q\nPol{Int64}: q\n\njulia> H=hecke(W,q)\nhecke(B‚ÇÇ,q)\n\njulia> H.para\n2-element Vector{Vector{Pol{Int64}}}:\n [q, -1]\n [q, -1]\n\njulia> H=hecke(W,q^2,rootpara=-q)\nhecke(B‚ÇÇ,q¬≤,rootpara=-q)\n\njulia> H=hecke(W,q^2)\nhecke(B‚ÇÇ,q¬≤)\n\njulia> rootpara(H)\n2-element Vector{Pol{Int64}}:\n q\n q\n\njulia> H\nhecke(B‚ÇÇ,q¬≤,rootpara=q)\n\njulia> H=hecke(W,[q^2,q^4],rootpara=[q,q^2])\nhecke(B‚ÇÇ,Pol{Int64}[q¬≤, q‚Å¥],rootpara=Pol{Int64}[q, q¬≤])\n\njulia> H.para,rootpara(H)\n(Vector{Pol{Int64}}[[q¬≤, -1], [q‚Å¥, -1]], Pol{Int64}[q, q¬≤])\n\njulia> H=hecke(W,9,rootpara=3)\nhecke(B‚ÇÇ,9,rootpara=3)\n\njulia> H.para,rootpara(H)\n([[9, -1], [9, -1]], [3, 3])\n\njulia> @Mvp x,y,z,t\n\njulia> H=hecke(W,[[x,y]])\nhecke(B‚ÇÇ,Vector{Mvp{Int64, Int64}}[[x, y]])\n\njulia> rootpara(H);H\nhecke(B‚ÇÇ,Vector{Mvp{Int64, Int64}}[[x, y]],rootpara=Œ∂‚ÇÑx¬Ωy¬Ω)\n\njulia> H=hecke(W,[[x,y],[z,t]])\nhecke(B‚ÇÇ,Vector{Mvp{Int64, Int64}}[[x, y], [z, t]])\n\njulia> rootpara(H);H\nhecke(B‚ÇÇ,Vector{Mvp{Int64, Int64}}[[x, y], [z, t]],rootpara=Mvp{Cyc{Int64}, Rational{Int64}}[Œ∂‚ÇÑx¬Ωy¬Ω, Œ∂‚ÇÑt¬Ωz¬Ω])\n\njulia> hecke(coxgroup(:F,4),(q,q^2)).para\n4-element Vector{Vector{Pol{Int64}}}:\n [q, -1]\n [q, -1]\n [q¬≤, -1]\n [q¬≤, -1]\n\njulia> hecke(complex_reflection_group(3,1,2),q).para # spetsial parameters\n2-element Vector{Vector{Pol{Cyc{Int64}}}}:\n [q, Œ∂‚ÇÉ, Œ∂‚ÇÉ¬≤]\n [q, -1]\n\n\n\n\n\n","category":"method"},{"location":"hecke.html#Chevie.HeckeAlgebras.Tbasis-Tuple{HeckeAlgebra}","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.Tbasis","text":"Tbasis(H::HeckeAlgebra) The  T basis of  H. It is  defined currently for Iwahori-Hecke algebras and  for Hecke algebras of cyclic  complex reflection groups G(d,1,1). It returns  a function, say T,  which can take an  argument of the following forms\n\nT(i::Integer): the generator T_s where s=H.W(i).\nT(i‚ÇÅ,‚Ä¶,i·µ£): the product T(i‚ÇÅ)‚Ä¶T(i·µ£)\nT([i‚ÇÅ,‚Ä¶,i·µ£]): same as T(i‚ÇÅ,‚Ä¶,i·µ£)\nT(w) where w‚àà H.W: returns T_w\n\njulia> H=hecke(coxgroup(:A,2),Pol(:q))\nhecke(A‚ÇÇ,q)\n\njulia> T=Tbasis(H);T(longest(H.W))^2\nq¬≥T.+(q¬≥-2q¬≤+q)T‚ÇÇ‚ÇÅ+(q¬≥-q¬≤)T‚ÇÇ+(q¬≥-q¬≤)T‚ÇÅ+(q¬≥-2q¬≤+2q-1)T‚ÇÅ‚ÇÇ‚ÇÅ+(q¬≥-2q¬≤+q)T‚ÇÅ‚ÇÇ\n\njulia> W=crg(3,1,1)\nG‚ÇÉ‚Äö‚ÇÅ‚Äö‚ÇÅ\n\njulia> H=hecke(crg(3,1,1),Pol(:q))\nhecke(G‚ÇÉ‚Äö‚ÇÅ‚Äö‚ÇÅ,q)\n\njulia> T=Tbasis(H);T(1)^3\n(q-1)T.+(q-1)T‚ÇÅ+qT‚ÇÅ‚ÇÅ\n\n\n\n\n\n","category":"method"},{"location":"hecke.html#Chevie.HeckeAlgebras.alt","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.alt","text":"alt(a::HeckeTElt)\n\na should be an element of an Iwahori-Hecke algebra H. the involution on H   defined  by  x‚Ü¶  bar(x)   on  coefficients  and  T‚Çõ‚Ü¶  u‚Çõ,‚ÇÄu‚Çõ,‚ÇÅT‚Çõ. Essentially it corresponds to tensoring with the sign representation.\n\njulia> W=coxgroup(:G,2);H=hecke(W,Pol(:q))\nhecke(G‚ÇÇ,q)\n\njulia> T=Tbasis(H);h=T(1,2)*T(2,1)\nq¬≤T.+(q¬≤-q)T‚ÇÅ+(q-1)T‚ÇÅ‚ÇÇ‚ÇÅ\n\njulia> alt(h)\nq‚Åª¬≤T.+(q‚Åª¬≤-q‚Åª¬≥)T‚ÇÅ+(q‚Åª¬≥-q‚Åª‚Å¥)T‚ÇÅ‚ÇÇ‚ÇÅ\n\n\n\n\n\n","category":"function"},{"location":"hecke.html#Chevie.Garside.Œ±-Tuple{HeckeTElt}","page":"Hecke algebras","title":"Chevie.Garside.Œ±","text":"Œ±(a::HeckeTElt)\n\nthe anti-involution on the Hecke algebra defined by T_w T_inv(w).\n\n\n\n\n\n","category":"method"},{"location":"hecke.html#Chevie.Chars.CharTable-Tuple{HeckeAlgebra}","page":"Hecke algebras","title":"Chevie.Chars.CharTable","text":"CharTable(H::HeckeAlgebra or HeckeCoset)\n\nreturns  the CharTable of the Hecke algebra H. For the primitive groups G‚ÇÉ‚ÇÅ,  G‚ÇÉ‚ÇÇ,  G‚ÇÉ‚ÇÑ  there  are  Unknown() entries corresponding to missing representations   (see  representation).   The  columns   of  the CharTable  are labelled  by classnames(H.W)  and contain  the character values for the corresponding element given by classreps(H.W).\n\njulia> H=hecke(crg(4),Pol())\nhecke(G‚ÇÑ,q)\n\njulia> CharTable(H)\nCharTable(hecke(G‚ÇÑ,q))\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ    ‚îÇ.    z 212   12    z12     1        1z‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÄ‚îÇ1   q‚Å∂  q¬≥   q¬≤     q‚Å∏     q        q‚Å∑‚îÇ\n‚îÇœÜ‚ÇÅ‚Äö‚ÇÑ‚îÇ1    1   1  Œ∂‚ÇÉ¬≤    Œ∂‚ÇÉ¬≤    Œ∂‚ÇÉ        Œ∂‚ÇÉ‚îÇ\n‚îÇœÜ‚ÇÅ‚Äö‚Çà‚îÇ1    1   1   Œ∂‚ÇÉ     Œ∂‚ÇÉ   Œ∂‚ÇÉ¬≤       Œ∂‚ÇÉ¬≤‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÖ‚îÇ2   -2   .    1     -1    -1         1‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÉ‚îÇ2 -2q¬≥   . Œ∂‚ÇÉ¬≤q -Œ∂‚ÇÉ¬≤q‚Å¥ q+Œ∂‚ÇÉ¬≤ -q‚Å¥-Œ∂‚ÇÉ¬≤q¬≥‚îÇ\n‚îÇœÜ‚ÇÇ‚Äö‚ÇÅ‚îÇ2 -2q¬≥   .  Œ∂‚ÇÉq  -Œ∂‚ÇÉq‚Å¥  q+Œ∂‚ÇÉ  -q‚Å¥-Œ∂‚ÇÉq¬≥‚îÇ\n‚îÇœÜ‚ÇÉ‚Äö‚ÇÇ‚îÇ3  3q¬≤  -q    .      .   q-1     q¬≥-q¬≤‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n\n\n","category":"method"},{"location":"hecke.html#Chevie.HeckeAlgebras.central_monomials","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.central_monomials","text":"central_monomials(H)\n\nLet  H  be  an  Hecke  algebra  for  the finite reflection group W. The function  returns the scalars by which the image  in H of œÄ acts on the irreducible representations of H.\n\nWhen  W is irreducible,  œÄ is the  generator of the  center of the pure braid  group.  In  general,  it  is  the  product of such elements for each irreducible  component. When  W is  a Coxeter  group, the  image of  œÄ in H is T_w_0^2.\n\njulia> H=hecke(coxgroup(:H,3),Pol(:q))\nhecke(H‚ÇÉ,q)\n\njulia> central_monomials(H)\n10-element Vector{Pol{Cyc{Int64}}}:\n 1\n q¬≥‚Å∞\n q¬π¬≤\n q¬π‚Å∏\n q¬π‚Å∞\n q¬π‚Å∞\n q¬≤‚Å∞\n q¬≤‚Å∞\n q¬π‚Åµ\n q¬π‚Åµ\n\n\n\n\n\n","category":"function"},{"location":"hecke.html#Chevie.HeckeAlgebras.class_polynomials","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.class_polynomials","text":"class_polynomials(h::HeckeElt)\n\nreturns  the  class  polynomials  of  the  element h of the Iwahori-Hecke algebra or coset given by h.H with respect to the T basis for a set R of  representatives  of  minimal  length  in  the  conjugacy classes of the Coxeter group or coset H.W. Such minimal length representatives are given by  classreps(H.W). The vector p of  these polynomials has the property that  if X is the  matrix of the values  of the irreducible characters of H  on T_w (for w‚àà R), then the product X*p is the list of values of the irreducible characters on h.\n\njulia> W=coxsym(4)\nùîñ ‚ÇÑ\n\njulia> H=hecke(W,Pol(:q))\nhecke(ùîñ ‚ÇÑ,q)\n\njulia> h=Tbasis(H,longest(W))\nT‚ÇÅ‚ÇÇ‚ÇÅ‚ÇÉ‚ÇÇ‚ÇÅ\n\njulia> p=class_polynomials(h)\n5-element Vector{Pol{Int64}}:\n 0\n 0\n q¬≤\n q¬≥-2q¬≤+q\n q¬≥-q¬≤+q-1\n\nThe class polynomials were introduced in Geck-Pfeiffer1993.\n\n\n\n\n\n","category":"function"},{"location":"hecke.html#Chevie.HeckeAlgebras.char_values","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.char_values","text":"char_values(h::HeckeTElt)\n\nh is an element of an Iwahori-Hecke algebra H. The function returns the values  of the irreducible characters of H  on h (the method used is to convert to the T basis, and then use class_polynomials).\n\njulia> W=coxgroup(:B,2)\nB‚ÇÇ\n\njulia> H=hecke(W,q^2;rootpara=q)\nhecke(B‚ÇÇ,q¬≤,rootpara=q)\n\njulia> char_values(Cpbasis(H)(1,2,1))\n5-element Vector{Pol{Int64}}:\n -q-q‚Åª¬π\n q+q‚Åª¬π\n 0\n q¬≥+2q+2q‚Åª¬π+q‚Åª¬≥\n 0\n\n\n\n\n\nchar_values(H::HeckeAlgebra,v::Vector{<:Integer})\n\nFor an Iwahori-Hecke algebra this computes the character values of H on the Tbasis(H)(v).\n\nFor  H the Hecke algebra  of a complex reflection  group W this routine computes  character values on a  lift of the element  of W defined by the word v in gens(W).\n\nFor  complex reflection  groups the  character table  of the  generic Hecke algebra  of  W  has  been  computed  (not  entirely for 3 exceptions, see representation)  in the  sense that,  if s‚ÇÅ,‚Ä¶,s‚Çô  are generators of the braid  group lifting  the Brou√©-Malle-Rouquier-Bessis-Michel  generators of W,  there is at least one element v  in each conjugacy class of W and one  expression in the generators for it  such that the character values of the  image T·µ•  in the  Hecke algebra  of the  lift to the braid group are known.  Such an expression in the generators  will be called a known word (the  list of known words  is obtained by word.(conjugacy_classes(W)). If the  word v is known, the computation is quick using the character table. If  not,  the  function  computes  the  trace  of  T·µ• in each irreducible representation.   The   values   returned   are   Unknown()  for  missing representations (see representation).\n\njulia> W=crg(4)\nG‚ÇÑ\n\njulia> H=hecke(W,Pol(:q))\nhecke(G‚ÇÑ,q)\n\njulia> char_values(H,[2,1,2])\n7-element Vector{Pol{Cyc{Int64}}}:\n q¬≥\n 1\n 1\n 0\n 0\n 0\n -q\n\n\n\n\n\n","category":"function"},{"location":"hecke.html#Chevie.HeckeAlgebras.schur_elements","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.schur_elements","text":"schur_elements(H)\n\nreturns the list of Schur elements for the Hecke algebra H\n\njulia> H=hecke(complex_reflection_group(4),Pol(:q))\nhecke(G‚ÇÑ,q)\n\njulia> s=schur_elements(H)\n7-element Vector{Pol{Cyc{Rational{Int64}}}}:\n q‚Å∏+2q‚Å∑+3q‚Å∂+4q‚Åµ+4q‚Å¥+4q¬≥+3q¬≤+2q+1\n 2‚àö-3+(6+4‚àö-3)q‚Åª¬π+12q‚Åª¬≤+(6-4‚àö-3)q‚Åª¬≥-2‚àö-3q‚Åª‚Å¥\n -2‚àö-3+(6-4‚àö-3)q‚Åª¬π+12q‚Åª¬≤+(6+4‚àö-3)q‚Åª¬≥+2‚àö-3q‚Åª‚Å¥\n 2+2q‚Åª¬π+4q‚Åª¬≤+2q‚Åª¬≥+2q‚Åª‚Å¥\n Œ∂‚ÇÉ¬≤‚àö-3q¬≥+(3-‚àö-3)q¬≤+3q+3+‚àö-3-Œ∂‚ÇÉ‚àö-3q‚Åª¬π\n -Œ∂‚ÇÉ‚àö-3q¬≥+(3+‚àö-3)q¬≤+3q+3-‚àö-3+Œ∂‚ÇÉ¬≤‚àö-3q‚Åª¬π\n q¬≤+2q+2+2q‚Åª¬π+q‚Åª¬≤\n\njulia> CycPol.(s)\n7-element Vector{CycPol{Cyc{Rational{Int64}}}}:\n Œ¶‚ÇÇ¬≤Œ¶‚ÇÉŒ¶‚ÇÑŒ¶‚ÇÜ\n 2‚àö-3q‚Åª‚Å¥Œ¶‚ÇÇ¬≤Œ¶‚Ä≤‚ÇÉŒ¶‚Ä≤‚ÇÜ\n -2‚àö-3q‚Åª‚Å¥Œ¶‚ÇÇ¬≤Œ¶‚Ä≥‚ÇÉŒ¶‚Ä≥‚ÇÜ\n 2q‚Åª‚Å¥Œ¶‚ÇÉŒ¶‚ÇÑ\n Œ∂‚ÇÉ¬≤‚àö-3q‚Åª¬πŒ¶‚ÇÇ¬≤Œ¶‚Ä≤‚ÇÉŒ¶‚Ä≥‚ÇÜ\n -Œ∂‚ÇÉ‚àö-3q‚Åª¬πŒ¶‚ÇÇ¬≤Œ¶‚Ä≥‚ÇÉŒ¶‚Ä≤‚ÇÜ\n q‚Åª¬≤Œ¶‚ÇÇ¬≤Œ¶‚ÇÑ\n\n\n\n\n\n","category":"function"},{"location":"hecke.html#Chevie.HeckeAlgebras.factorized_schur_element","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.factorized_schur_element","text":"factorized_schur_element(H,phi)\n\nreturns  the factorized schur_element  (see factorized_schur_elements) of the  Hecke algebra  H for  the irreducible  character of H of parameter phi (see charinfo(W).charparams)\n\njulia> W=complex_reflection_group(4)\nG‚ÇÑ\n\njulia> @Mvp x,y; H=hecke(W,[[1,x,y]])\nhecke(G‚ÇÑ,Vector{Mvp{Int64, Int64}}[[1, x, y]])\n\njulia> factorized_schur_element(H,[[2,5]])\n-x‚Åª¬πy(xy+1)(x-1)Œ¶‚ÇÜ(xy‚Åª¬π)(y-1)\n\n\n\n\n\n","category":"function"},{"location":"hecke.html#Chevie.HeckeAlgebras.factorized_schur_elements","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.factorized_schur_elements","text":"factorized_schur_elements(H)\n\nLet  H be  a Hecke  algebra for  the complex  reflection group W, whose parameters are all (Laurent) monomials in some variables x‚ÇÅ,‚Ä¶,x‚Çô, and let K  be the field of definition of W. Then Maria Chlouveraki has shown that the  Schur elements of H take the  particular form M ‚àè·µ© œÜ(M·µ©) where œÜ runs  over  a  list  of  K-cyclotomic  polynomials,  and  M  and M·µ© are (Laurent)  monomials (in possibly some  fractional powers) of the variables x·µ¢.  The  function  factorized_schur_elements  returns a data structure (see HeckeAlgebras.FactSchur) which shows this factorization.\n\njulia> W=complex_reflection_group(4)\nG‚ÇÑ\n\njulia> @Mvp x,y; H=hecke(W,[[1,x,y]])\nhecke(G‚ÇÑ,Vector{Mvp{Int64, Int64}}[[1, x, y]])\n\njulia> factorized_schur_elements(H)\n7-element Vector{Chevie.HeckeAlgebras.FactSchur}:\n x‚Åª‚Å¥y‚Åª‚Å¥(xy+1)Œ¶‚ÇÅŒ¶‚ÇÜ(x)Œ¶‚ÇÅŒ¶‚ÇÜ(y)\n (x¬≤y‚Åª¬π+1)Œ¶‚ÇÅŒ¶‚ÇÜ(x)Œ¶‚ÇÅŒ¶‚ÇÜ(xy‚Åª¬π)\n -x‚Åª‚Å¥y‚ÅµŒ¶‚ÇÅŒ¶‚ÇÜ(xy‚Åª¬π)(xy‚Åª¬≤+1)Œ¶‚ÇÅŒ¶‚ÇÜ(y)\n -x‚Åª¬πy(xy+1)(x-1)Œ¶‚ÇÜ(xy‚Åª¬π)(y-1)\n -x‚Åª‚Å¥y(x¬≤y‚Åª¬π+1)(x-1)(xy‚Åª¬π-1)Œ¶‚ÇÜ(y)\n x‚Åª¬πy‚Åª¬πŒ¶‚ÇÜ(x)(xy‚Åª¬π-1)(xy‚Åª¬≤+1)(y-1)\n x‚Åª¬≤y(x¬≤y‚Åª¬π+1)(xy+1)(xy‚Åª¬≤+1)\n\n\n\n\n\n","category":"function"},{"location":"hecke.html#Chevie.HeckeAlgebras.FactSchur","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.FactSchur","text":"A  FactSchur representing  a Schur  element of  the form  M‚àè·µ©œÜ(M·µ©) (see factorized_schur_element)  is  a  struct  with a field factor which  holds the  monomial M,  and a  field vcyc  which holds a list of NamedTuples  describing each  factor M·µ©  in the  product. An element of vcyc  representing a  term œÜ(M·µ©)  is itself  a NamedTuple with fields monomial holding M·µ© (as an Mvp with a single term), and a field pol holding a CycPol (see CycPol) representing œÜ.\n\nA  few operations are implemented for  FactSchur, like *, lcm. They can be  evaluated  partially  or  completely  keeping  as  much as possible the factored form.\n\njulia> @Mvp x,y; W=crg(4); H=hecke(W,[[1,x,y]])\nhecke(G‚ÇÑ,Vector{Mvp{Int64, Int64}}[[1, x, y]])\n\njulia> p=factorized_schur_element(H,[[2,5]])\n-x‚Åª¬πy(xy+1)(x-1)Œ¶‚ÇÜ(xy‚Åª¬π)(y-1)\n\njulia> q=p(;x=E(3)) # partial evaluation\nŒ∂‚ÇÉ¬≤‚àö-3y‚Åª¬πŒ¶‚ÇÅŒ¶‚ÇÇŒ¶‚Ä≤‚ÇÜ¬≤(y)\n\njulia> q(;y=2//1)\n-9‚àö-3/2\n\nIn contrast, the next operation expands p to an Mvp:\n\njulia> HeckeAlgebras.expand(p)\nMvp{Cyc{Rational{Int64}},Rational{Int64}}: -x¬≥y+x¬≥+x¬≤y¬≤-2x¬≤+x¬≤y‚Åª¬π-xy¬≥+2xy-xy‚Åª¬π+y¬≥-2y¬≤+1+x‚Åª¬πy¬≤-x‚Åª¬πy\n\n\n\n\n\n","category":"type"},{"location":"hecke.html#Chevie.Chars.representation-Tuple{HeckeAlgebra, Integer}","page":"Hecke algebras","title":"Chevie.Chars.representation","text":"representation(H::HeckeAlgebra or HeckeCoset,i)\n\nreturns,  for the i-th irreducible representation of the Hecke algebra or Hecke  coset H, a list  of matrices images of  the generators of H in a model of the representation (for Hecke cosets, the result is a NamedTuple with fields gens, a representation of hecke(H), and F, the matrix for the automorphism of H in the representation).\n\nThis  function  is  based  on  the  classification,  and  is  not yet fully implemented for the Hecke algebras of the groups G‚ÇÉ‚ÇÅ, G‚ÇÉ‚ÇÇ and G‚ÇÉ‚ÇÑ: we have 50 representations out of 59 for type G‚ÇÉ‚ÇÅ, 30 representations out of 102  for  type  G‚ÇÉ‚ÇÇ  and  38  representations  out of 169 for type G‚ÇÉ‚ÇÑ; nothing is returned for a missing representation.\n\njulia> W=crg(24)\nG‚ÇÇ‚ÇÑ\n\njulia> H=hecke(W,Pol(:q))\nhecke(G‚ÇÇ‚ÇÑ,q)\n\njulia> representation(H,3)\n3-element Vector{Matrix{Pol{Cyc{Int64}}}}:\n [q 0 0; -q -1 0; -q 0 -1]\n [-1 0 -1; 0 -1 ((1-‚àö-7)/2)q; 0 0 q]\n [-1 -1 0; 0 q 0; 0 (1+‚àö-7)/2 -1]\n\nThe  models  implemented  for  imprimitive  types G(de,e,n) for n>2 and de>1 (this includes Coxeter type D‚Çô), excepted for G(2,2,4), G(3,3,3), G(3,3,4), G(3,3,5) and G(4,4,3), involve rational fractions.\n\njulia> H=hecke(coxgroup(:D,5),Pol())\nhecke(D‚ÇÖ,q)\n\njulia> representation(H,7)\n5-element Vector{Matrix{Frac{Pol{Int64}}}}:\n [q 0 0 0; 0 -1 0 0; 0 0 -1 0; 0 0 0 -1]\n [q 0 0 0; 0 -1 0 0; 0 0 -1 0; 0 0 0 -1]\n [1/(-q-1) q/(q+1) 0 0; (q¬≤+q+1)/(q+1) q¬≤/(q+1) 0 0; 0 0 -1 0; 0 0 0 -1]\n [-1 0 0 0; 0 1/(-q¬≤-q-1) (-q¬≤-q)/(-q¬≤-q-1) 0; 0 (q¬≥+q¬≤+q+1)/(q¬≤+q+1) q¬≥/(q¬≤+q+1) 0; 0 0 0 -1]\n [-1 0 0 0; 0 -1 0 0; 0 0 1/(-q¬≥-q¬≤-q-1) (-q¬≥-q¬≤-q)/(-q¬≥-q¬≤-q-1); 0 0 (q‚Å¥+q¬≥+q¬≤+q+1)/(q¬≥+q¬≤+q+1) q‚Å¥/(q¬≥+q¬≤+q+1)]\n\n\n\n\n\n","category":"method"},{"location":"hecke.html#Chevie.Chars.representations-Tuple{Union{HeckeAlgebra, HeckeCoset}}","page":"Hecke algebras","title":"Chevie.Chars.representations","text":"representations(H)\n\nreturns  the list  of representations  of the  Hecke algebra or Hecke coset H (see representation).\n\njulia> WF=rootdatum(\"2B2\")\n¬≤B‚ÇÇ\n\njulia> H=hecke(WF,Pol(:x)^2;rootpara=Pol())\nhecke(¬≤B‚ÇÇ,x¬≤,rootpara=x)\n\njulia> representations(H)\n3-element Vector{NamedTuple{(:gens, :F)}}:\n (gens = Matrix{Pol{Int64}}[[x¬≤;;], [x¬≤;;]], F = [1;;])\n (gens = [[-1;;], [-1;;]], F = [1;;])\n (gens = Matrix{Pol{Cyc{Int64}}}[[-1 0; ‚àö2x x¬≤], [x¬≤ ‚àö2x; 0 -1]], F = [0 -1; -1 0])\n\n\n\n\n\n","category":"method"},{"location":"hecke.html#Chevie.HeckeAlgebras.isrepresentation","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.isrepresentation","text":"isrepresentation(H::HeckeAlgebra,r)\n\nreturns true or false, according to whether a given set r of elements corresponding  to  the  standard  generators  of the reflection group H.W defines a representation of the Hecke algebra H or not.\n\njulia> H=hecke(coxgroup(:F,4))\nhecke(F‚ÇÑ,1)\n\njulia> isrepresentation(H,reflrep(H))\ntrue\n\njulia> isrepresentation(H,Tbasis(H).(1:4))\ntrue\n\n\n\n\n\n","category":"function"},{"location":"hecke.html#Chevie.PermRoot.reflection_representation-Tuple{HeckeAlgebra}","page":"Hecke algebras","title":"Chevie.PermRoot.reflection_representation","text":"reflection_representation(H::HeckeAlgebra) or reflrep(H)\n\nreturns  a  list  of  matrices  for  the  generators  of H which give the reflection representation of the Iwahori-Hecke algebra H.\n\njulia> W=coxgroup(:B,2);H=hecke(W,Pol(:q))\nhecke(B‚ÇÇ,q)\n\njulia> reflrep(H)\n2-element Vector{Matrix{Pol{Int64}}}:\n [-1 0; -q q]\n [q -2; 0 -1]\n\njulia> H=hecke(coxgroup(:H,3))\nhecke(H‚ÇÉ,1)\n\njulia> reflrep(H)\n3-element Vector{Matrix{Cyc{Int64}}}:\n [-1 0 0; -1 1 0; 0 0 1]\n [1 (-3-‚àö5)/2 0; 0 -1 0; 0 -1 1]\n [1 0 0; 0 1 -1; 0 0 -1]\n\n\n\n\n\n","category":"method"},{"location":"hecke.html#Chevie.HeckeAlgebras.HeckeCoset","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.HeckeCoset","text":"HeckeCosets  are  Hœï  where  H  is  an  Iwahori-Hecke algebra of some Coxeter  group W on which the automorphism œï of some Spets Wœï acts by œï(T_w)=T_{œï(w)}.  For Weyl groups, this corresponds  to the action of the Frobenius  automorphism  on  the  commuting  algebra  of the induced of the trivial  representation from the  rational points of  some F-stable Borel subgroup to ùêÜ ^F.\n\njulia> WF=rootdatum(:u,3)\nu‚ÇÉ\n\njulia> HF=hecke(WF,Pol(:v)^2;rootpara=Pol())\nhecke(u‚ÇÉ,v¬≤,rootpara=v)\n\njulia> CharTable(HF)\nCharTable(hecke(u‚ÇÉ,v¬≤,rootpara=v))\n‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   ‚îÇ 111 21  3‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ111‚îÇ  -1  1 -1‚îÇ\n‚îÇ21 ‚îÇ-2v¬≥  .  v‚îÇ\n‚îÇ3  ‚îÇ  v‚Å∂  1 v¬≤‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nThanks  to the work of Xuhua He and Sian Nie, 'class_polynomials' also make sense for these cosets. This is used to compute such character tables.\n\n\n\n\n\n","category":"type"},{"location":"hecke.html#Chevie.HeckeAlgebras.hecke-Tuple{HeckeCoset}","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.hecke","text":"hecke(HF::HeckeCoset) returns the underlying Hecke algebra\n\n\n\n\n\n","category":"method"},{"location":"hecke.html#Chevie.HeckeAlgebras.hecke-Tuple{Spets, HeckeAlgebra}","page":"Hecke algebras","title":"Chevie.HeckeAlgebras.hecke","text":"hecke(WF::Spets, H)\n\nhecke(WF::Spets, params)\n\nConstruct  a HeckeCoset  from a  Coxeter coset  WF and an Hecke algebra associated to Group(WF). The second form is equivalent to Hecke(WF,Hecke(Group(WF),params)). See the doc for HeckeCoset.\n\n\n\n\n\n","category":"method"}]
}
